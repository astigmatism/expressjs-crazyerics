extends basic

block content
    script.
        var camera, scene, renderer, mesh;

        getVibrant(function(swatches) {
            init(swatches);
            animate();
        });

        function init(swatches) {
            //fov, aspect, near, far
            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
            camera.position.z = 200;

            debugger;

            var frontTexture = new THREE.TextureLoader().load( '/images/boxes/front.png' );
            var backTexture = new THREE.TextureLoader().load( '/images/boxes/back.jpg' );

            var frontMaterial = new THREE.MeshBasicMaterial( { map: frontTexture } );
            var backMaterial = new THREE.MeshBasicMaterial( { map: backTexture } );
            var color = new THREE.MeshBasicMaterial( { color: 'rgb(' + swatches[0] + ', ' + swatches[1] + ', ' + swatches[2] + ')' } );
            
            var materials = [
                backMaterial,        // Left side
                backMaterial,       // Right side
                color,         // Top side
                color,      // Bottom side
                frontMaterial,       // Front side
                backMaterial         // Back side
            ];

            var geometry = new THREE.BoxBufferGeometry( 53.75, 73.75, 10 );

            scene = new THREE.Scene();
            mesh = new THREE.Mesh( geometry, materials);

            scene.add( mesh );
            renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            document.body.appendChild( renderer.domElement );
            //
            window.addEventListener( 'resize', onWindowResize, false );
        }
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize( window.innerWidth, window.innerHeight );
        }
        function animate() {
            requestAnimationFrame( animate );
            mesh.rotation.x += 0.005;
            mesh.rotation.y += 0.05;
            renderer.render( scene, camera );
        }
        function getVibrant(callback) {

            var img = document.createElement('img');
            img.setAttribute('src', '/images/boxes/front.png');

            img.addEventListener('load', function() {
                
                var colorThief = new ColorThief();
                var result = colorThief.getColor(img);
                callback(result);
                
                //- var vibrant = new Vibrant(img);
                //- var swatches = vibrant.swatches()
                //- for (var swatch in swatches)
                //-     if (swatches.hasOwnProperty(swatch) && swatches[swatch])
                //-         console.log(swatch, swatches[swatch].getHex())
                
                //- callback(swatches);

                /*
                * Results into:
                * Vibrant #7a4426
                * Muted #7b9eae
                * DarkVibrant #348945
                * DarkMuted #141414
                * LightVibrant #f3ccb4
                */
            });
        }