// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function($0, $1) { { Module.printErr('bad name in getProcAddress: ' + [Pointer_stringify($0), Pointer_stringify($1)]); } }];

function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1) | 0;
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 848000;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,132,123,11,0,122,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,150,123,11,0,97,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,168,123,11,0,47,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,3,0,0,0,191,123,11,0,13,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,213,123,11,0,17,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,5,0,0,0,231,123,11,0,18,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,6,0,0,0,251,123,11,0,20,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,7,0,0,0,15,124,11,0,19,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,8,0,0,0,36,124,11,0,120,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,9,0,0,0,54,124,11,0,115,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,10,0,0,0,72,124,11,0,113,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,11,0,0,0,90,124,11,0,119,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,12,0,0,0,108,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,13,0,0,0,127,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,14,0,0,0,146,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,15,0,0,0,165,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,16,0,0,0,184,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,17,0,0,0,197,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,18,0,0,0,213,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,19,0,0,0,229,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,20,0,0,0,245,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,21,0,0,0,5,125,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,22,0,0,0,22,125,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,23,0,0,0,39,125,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,24,0,0,0,56,125,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,25,0,0,0,73,125,11,0,32,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,26,0,0,0,86,125,11,0,108,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,27,0,0,0,224,186,11,0,29,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,28,0,0,0,213,186,11,0,27,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,29,0,0,0,104,125,11,0,102,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,30,0,0,0,122,125,11,0,27,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,31,0,0,0,131,125,11,0,32,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,32,0,0,0,147,125,11,0,31,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,33,0,0,0,241,188,11,0,114,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,34,0,0,0,164,125,11,0,111,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,35,0,0,0,184,125,11,0,112,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,36,0,0,0,197,125,11,0,107,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,37,0,0,0,211,125,11,0,104,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,38,0,0,0,217,125,11,0,109,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,39,0,0,0,229,125,11,0,110,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,40,0,0,0,245,125,11,0,121,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,41,0,0,0,6,126,11,0,116,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,42,0,0,0,24,126,11,0,117,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,43,0,0,0,37,126,11,0,33,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,44,0,0,0,48,126,11,0,99,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,45,0,0,0,189,188,11,0,34,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,46,0,0,0,59,126,11,0,105,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,47,0,0,0,80,126,11,0,101,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,48,0,0,0,91,126,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,49,0,0,0,105,126,11,0,14,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,50,0,0,0,115,126,11,0,13,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,51,0,0,0,127,126,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,52,0,0,0,140,126,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,53,0,0,0,158,126,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,54,0,0,0,106,138,11,0,36,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,55,0,0,0,173,126,11,0,26,1,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,132,123,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,150,123,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,168,123,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,3,0,0,0,191,123,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,213,123,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,5,0,0,0,231,123,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,6,0,0,0,251,123,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,7,0,0,0,15,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,8,0,0,0,36,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,9,0,0,0,54,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,10,0,0,0,72,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,11,0,0,0,90,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,12,0,0,0,108,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,13,0,0,0,127,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,14,0,0,0,146,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,15,0,0,0,165,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,16,0,0,0,184,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,17,0,0,0,197,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,18,0,0,0,213,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,19,0,0,0,229,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,20,0,0,0,245,124,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,21,0,0,0,5,125,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,22,0,0,0,22,125,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,23,0,0,0,39,125,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,24,0,0,0,56,125,11,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,79,8,0,166,216,11,0,168,8,4,0,0,0,0,0,4,79,8,0,184,216,11,0,168,8,4,0,0,0,0,0,220,78,8,0,197,216,11,0,4,79,8,0,212,216,11,0,216,7,4,0,0,0,0,0,0,0,0,0,0,0,240,191,80,0,0,0,0,0,0,0,220,78,8,0,6,223,11,0,4,79,8,0,15,223,11,0,168,8,4,0,0,0,0,0,4,79,8,0,33,223,11,0,96,8,4,0,0,0,0,0,220,78,8,0,51,223,11,0,44,79,8,0,64,223,11,0,0,0,0,0,2,0,0,0,40,8,4,0,2,0,0,0,176,8,4,0,0,20,0,0,4,79,8,0,78,223,11,0,24,8,4,0,0,0,0,0,220,78,8,0,97,223,11,0,4,79,8,0,111,223,11,0,96,8,4,0,0,0,0,0,4,79,8,0,125,223,11,0,104,8,4,0,0,0,0,0,4,79,8,0,143,223,11,0,104,8,4,0,0,0,0,0,0,0,0,0,0,0,78,64,0,0,0,0,128,136,229,64,220,78,8,0,239,210,12,0,220,78,8,0,224,210,12,0,4,79,8,0,253,210,12,0,8,8,4,0,0,0,0,0,44,79,8,0,16,211,12,0,0,0,0,0,2,0,0,0,40,8,4,0,2,0,0,0,232,8,4,0,0,20,0,0,220,78,8,0,30,211,12,0,4,79,8,0,45,211,12,0,40,8,4,0,0,0,0,0,4,79,8,0,60,211,12,0,40,8,4,0,0,0,0,0,4,79,8,0,75,211,12,0,40,8,4,0,0,0,0,0,4,79,8,0,90,211,12,0,40,8,4,0,0,0,0,0,4,79,8,0,104,211,12,0,216,7,4,0,0,0,0,0,4,79,8,0,180,211,12,0,80,9,4,0,0,0,0,0,220,78,8,0,193,211,12,0,220,78,8,0,206,211,12,0,4,79,8,0,219,211,12,0,88,9,4,0,0,0,0,0,4,79,8,0,252,211,12,0,96,9,4,0,0,0,0,0,4,79,8,0,66,212,12,0,96,9,4,0,0,0,0,0,4,79,8,0,30,212,12,0,128,9,4,0,0,0,0,0,4,79,8,0,100,212,12,0,112,9,4,0,0,0,0,0,4,79,8,0,137,212,12,0,112,9,4,0,0,0,0,0,40,98,0,0,232,106,0,0,168,115,0,0,104,124,0,0,40,133,0,0,232,141,0,0,168,150,0,0,104,159,0,0,168,105,0,0,40,98,0,0,232,106,0,0,168,115,0,0,104,124,0,0,40,133,0,0,232,141,0,0,168,150,0,0,104,159,0,0,0,0,0,0,255,255,255,255,255,255,255,255,176,103,11,0,91,160,11,0,180,103,11,0,200,28,4,0,20,31,4,0,8,32,4,0,164,28,4,0,1,0,0,0,4,0,0,0,0,0,0,0,103,230,9,106,133,174,103,187,114,243,110,60,58,245,79,165,127,82,14,81,140,104,5,155,171,217,131,31,25,205,224,91,152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,131,11,0,169,131,11,0,167,211,12,0,174,211,12,0,131,211,12,0,140,211,12,0,120,211,12,0,151,211,12,0,178,131,11,0,188,131,11,0,50,190,11,0,52,190,11,0,54,190,11,0,57,190,11,0,60,190,11,0,63,190,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,58,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,169,170,63,49,54,58,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,142,227,63,49,54,58,49,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,63,49,54,58,49,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,136,136,63,67,111,110,102,105,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,112,105,120,101,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,67,111,114,101,32,112,114,111,118,105,100,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,67,117,115,116,111,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,20,1,0,0,39,0,0,0,19,1,0,0,38,0,0,0,17,1,0,0,40,0,0,0,18,1,0,0,13,0,0,0,13,0,0,0,9,0,0,0,9,0,0,0,45,0,0,0,21,1,0,0,46,0,0,0,127,0,0,0,16,0,0,0,47,1,0,0,16,0,0,0,48,1,0,0,17,0,0,0,50,1,0,0,35,0,0,0,23,1,0,0,36,0,0,0,22,1,0,0,34,0,0,0,25,1,0,0,33,0,0,0,24,1,0,0,18,0,0,0,52,1,0,0,32,0,0,0,32,0,0,0,27,0,0,0,27,0,0,0,8,0,0,0,8,0,0,0,13,0,0,0,15,1,0,0,107,0,0,0,14,1,0,0,109,0,0,0,13,1,0,0,106,0,0,0,12,1,0,0,111,0,0,0,11,1,0,0,192,0,0,0,96,0,0,0,19,0,0,0,19,0,0,0,96,0,0,0,0,1,0,0,97,0,0,0,1,1,0,0,98,0,0,0,2,1,0,0,99,0,0,0,3,1,0,0,100,0,0,0,4,1,0,0,101,0,0,0,5,1,0,0,102,0,0,0,6,1,0,0,103,0,0,0,7,1,0,0,104,0,0,0,8,1,0,0,105,0,0,0,9,1,0,0,48,0,0,0,48,0,0,0,49,0,0,0,49,0,0,0,50,0,0,0,50,0,0,0,51,0,0,0,51,0,0,0,52,0,0,0,52,0,0,0,53,0,0,0,53,0,0,0,54,0,0,0,54,0,0,0,55,0,0,0,55,0,0,0,56,0,0,0,56,0,0,0,57,0,0,0,57,0,0,0,112,0,0,0,26,1,0,0,113,0,0,0,27,1,0,0,114,0,0,0,28,1,0,0,115,0,0,0,29,1,0,0,116,0,0,0,30,1,0,0,117,0,0,0,31,1,0,0,118,0,0,0,32,1,0,0,119,0,0,0,33,1,0,0,120,0,0,0,34,1,0,0,121,0,0,0,35,1,0,0,122,0,0,0,36,1,0,0,123,0,0,0,37,1,0,0,65,0,0,0,97,0,0,0,66,0,0,0,98,0,0,0,67,0,0,0,99,0,0,0,68,0,0,0,100,0,0,0,69,0,0,0,101,0,0,0,70,0,0,0,102,0,0,0,71,0,0,0,103,0,0,0,72,0,0,0,104,0,0,0,73,0,0,0,105,0,0,0,74,0,0,0,106,0,0,0,75,0,0,0,107,0,0,0,76,0,0,0,108,0,0,0,77,0,0,0,109,0,0,0,78,0,0,0,110,0,0,0,79,0,0,0,111,0,0,0,80,0,0,0,112,0,0,0,81,0,0,0,113,0,0,0,82,0,0,0,114,0,0,0,83,0,0,0,115,0,0,0,84,0,0,0,116,0,0,0,85,0,0,0,117,0,0,0,86,0,0,0,118,0,0,0,87,0,0,0,119,0,0,0,88,0,0,0,120,0,0,0,89,0,0,0,121,0,0,0,90,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,67,144,11,0,242,134,11,0,0,0,0,0,1,0,0,0,0,0,0,0,58,158,11,0,2,135,11,0,1,0,0,0,1,0,0,0,0,0,0,0,69,144,11,0,18,135,11,0,2,0,0,0,1,0,0,0,0,0,0,0,76,144,11,0,32,135,11,0,3,0,0,0,1,0,0,0,0,0,0,0,82,144,11,0,45,135,11,0,4,0,0,0,1,0,0,0,0,0,0,0,85,144,11,0,54,135,11,0,5,0,0,0,1,0,0,0,0,0,0,0,90,144,11,0,65,135,11,0,6,0,0,0,1,0,0,0,0,0,0,0,95,144,11,0,76,135,11,0,7,0,0,0,1,0,0,0,0,0,0,0,101,144,11,0,88,135,11,0,8,0,0,0,1,0,0,0,0,0,0,0,56,158,11,0,105,135,11,0,9,0,0,0,1,0,0,0,0,0,0,0,103,144,11,0,120,135,11,0,10,0,0,0,1,0,0,0,0,0,0,0,164,190,11,0,145,135,11,0,11,0,0,0,1,0,0,0,0,0,0,0,105,144,11,0,171,135,11,0,12,0,0,0,1,0,0,0,0,0,0,0,108,144,11,0,200,135,11,0,13,0,0,0,1,0,0,0,0,0,0,0,111,144,11,0,230,135,11,0,14,0,0,0,1,0,0,0,0,0,0,0,114,144,11,0,5,136,11,0,15,0,0,0,1,0,0,0,0,0,0,0,117,144,11,0,37,136,11,0,16,0,0,0,1,0,0,0,0,0,0,0,123,144,11,0,50,136,11,0,17,0,0,0,1,0,0,0,0,0,0,0,132,144,11,0,73,136,11,0,18,0,0,0,1,0,0,0,0,0,0,0,142,144,11,0,95,136,11,0,19,0,0,0,1,0,0,0,0,0,0,0,151,144,11,0,117,136,11,0,20,0,0,0,1,0,0,0,0,0,0,0,161,144,11,0,137,136,11,0,21,0,0,0,1,0,0,0,0,0,0,0,170,144,11,0,161,136,11,0,22,0,0,0,1,0,0,0,0,0,0,0,180,144,11,0,184,136,11,0,23,0,0,0,1,0,0,0,0,0,0,0,189,144,11,0,207,136,11,0,24,0,0,0,1,0,0,0,1,0,0,0,199,144,11,0,228,136,11,0,25,0,0,0,1,0,0,0,2,0,0,0,219,144,11,0,248,136,11,0,26,0,0,0,1,0,0,0,1,0,0,0,237,144,11,0,10,137,11,0,27,0,0,0,1,0,0,0,1,0,0,0,248,144,11,0,21,137,11,0,28,0,0,0,1,0,0,0,2,0,0,0,3,145,11,0,32,137,11,0,29,0,0,0,1,0,0,0,2,0,0,0,21,145,11,0,38,187,11,0,30,0,0,0,1,0,0,0,2,0,0,0,35,145,11,0,50,137,11,0,31,0,0,0,1,0,0,0,2,0,0,0,55,145,11,0,67,137,11,0,32,0,0,0,1,0,0,0,1,0,0,0,75,145,11,0,241,188,11,0,33,0,0,0,1,0,0,0,2,0,0,0,82,145,11,0,84,137,11,0,34,0,0,0,1,0,0,0,2,0,0,0,102,145,11,0,104,137,11,0,35,0,0,0,1,0,0,0,2,0,0,0,115,145,11,0,117,137,11,0,36,0,0,0,1,0,0,0,2,0,0,0,129,145,11,0,130,137,11,0,37,0,0,0,1,0,0,0,2,0,0,0,135,145,11,0,141,137,11,0,38,0,0,0,1,0,0,0,2,0,0,0,147,145,11,0,153,137,11,0,39,0,0,0,1,0,0,0,2,0,0,0,159,145,11,0,169,137,11,0,40,0,0,0,1,0,0,0,2,0,0,0,176,145,11,0,183,137,11,0,41,0,0,0,1,0,0,0,2,0,0,0,194,145,11,0,197,137,11,0,42,0,0,0,1,0,0,0,2,0,0,0,207,145,11,0,210,137,11,0,43,0,0,0,1,0,0,0,2,0,0,0,218,145,11,0,226,137,11,0,44,0,0,0,1,0,0,0,2,0,0,0,229,145,11,0,237,137,11,0,45,0,0,0,1,0,0,0,2,0,0,0,240,145,11,0,255,137,11,0,46,0,0,0,1,0,0,0,2,0,0,0,5,146,11,0,20,138,11,0,47,0,0,0,1,0,0,0,2,0,0,0,16,146,11,0,32,138,11,0,48,0,0,0,1,0,0,0,2,0,0,0,30,146,11,0,47,138,11,0,49,0,0,0,1,0,0,0,2,0,0,0,40,146,11,0,56,138,11,0,50,0,0,0,1,0,0,0,2,0,0,0,52,146,11,0,65,138,11,0,51,0,0,0,1,0,0,0,2,0,0,0,65,146,11,0,78,138,11,0,52,0,0,0,1,0,0,0,2,0,0,0,83,146,11,0,96,138,11,0,53,0,0,0,1,0,0,0,2,0,0,0,93,146,11,0,106,138,11,0,54,0,0,0,1,0,0,0,1,0,0,0,111,146,11,0,124,138,11,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,144,11,0,20,1,0,0,95,144,11,0,19,1,0,0,82,144,11,0,17,1,0,0,85,144,11,0,18,1,0,0,141,138,11,0,13,0,0,0,147,138,11,0,15,1,0,0,156,138,11,0,9,0,0,0,160,138,11,0,21,1,0,0,167,138,11,0,127,0,0,0,171,138,11,0,23,1,0,0,175,138,11,0,22,1,0,0,180,138,11,0,47,1,0,0,187,138,11,0,48,1,0,0,193,138,11,0,50,1,0,0,198,138,11,0,52,1,0,0,202,138,11,0,32,0,0,0,208,138,11,0,27,0,0,0,215,138,11,0,14,1,0,0,219,138,11,0,13,1,0,0,228,138,11,0,14,1,0,0,236,138,11,0,13,1,0,0,245,138,11,0,26,1,0,0,248,138,11,0,27,1,0,0,251,138,11,0,28,1,0,0,254,138,11,0,29,1,0,0,1,139,11,0,30,1,0,0,4,139,11,0,31,1,0,0,7,139,11,0,32,1,0,0,10,139,11,0,33,1,0,0,13,139,11,0,34,1,0,0,16,139,11,0,35,1,0,0,20,139,11,0,36,1,0,0,24,139,11,0,37,1,0,0,28,139,11,0,48,0,0,0,33,139,11,0,49,0,0,0,38,139,11,0,50,0,0,0,43,139,11,0,51,0,0,0,48,139,11,0,52,0,0,0,53,139,11,0,53,0,0,0,58,139,11,0,54,0,0,0,63,139,11,0,55,0,0,0,68,139,11,0,56,0,0,0,73,139,11,0,57,0,0,0,78,139,11,0,24,1,0,0,85,139,11,0,25,1,0,0,94,139,11,0,0,1,0,0,102,139,11,0,1,1,0,0,110,139,11,0,2,1,0,0,118,139,11,0,3,1,0,0,126,139,11,0,4,1,0,0,134,139,11,0,5,1,0,0,142,139,11,0,6,1,0,0,150,139,11,0,7,1,0,0,158,139,11,0,8,1,0,0,166,139,11,0,9,1,0,0,174,139,11,0,46,0,0,0,181,139,11,0,45,1,0,0,190,139,11,0,44,1,0,0,198,139,11,0,8,0,0,0,208,139,11,0,12,1,0,0,217,139,11,0,11,1,0,0,224,139,11,0,60,1,0,0,237,139,11,0,46,1,0,0,249,139,11,0,96,0,0,0,255,139,11,0,96,0,0,0,9,140,11,0,19,0,0,0,227,134,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+260856);
/* memory initializer */ allocate([65,140,11,0,79,140,11,0,93,140,11,0,107,140,11,0,121,140,11,0,135,140,11,0,149,140,11,0,163,140,11,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,178,140,11,0,6,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,241,143,11,0,14,0,0,0,15,0,0,0,67,144,11,0,0,0,0,0,58,158,11,0,1,0,0,0,69,144,11,0,2,0,0,0,76,144,11,0,3,0,0,0,82,144,11,0,4,0,0,0,85,144,11,0,5,0,0,0,90,144,11,0,6,0,0,0,95,144,11,0,7,0,0,0,101,144,11,0,8,0,0,0,56,158,11,0,9,0,0,0,103,144,11,0,10,0,0,0,164,190,11,0,11,0,0,0,105,144,11,0,12,0,0,0,108,144,11,0,13,0,0,0,111,144,11,0,14,0,0,0,114,144,11,0,15,0,0,0,117,144,11,0,16,0,0,0,123,144,11,0,17,0,0,0,132,144,11,0,18,0,0,0,142,144,11,0,19,0,0,0,151,144,11,0,20,0,0,0,161,144,11,0,21,0,0,0,170,144,11,0,22,0,0,0,180,144,11,0,23,0,0,0,189,144,11,0,24,0,0,0,199,144,11,0,25,0,0,0,219,144,11,0,26,0,0,0,237,144,11,0,27,0,0,0,248,144,11,0,28,0,0,0,3,145,11,0,29,0,0,0,21,145,11,0,30,0,0,0,35,145,11,0,31,0,0,0,55,145,11,0,32,0,0,0,75,145,11,0,33,0,0,0,82,145,11,0,34,0,0,0,102,145,11,0,35,0,0,0,115,145,11,0,36,0,0,0,129,145,11,0,37,0,0,0,135,145,11,0,38,0,0,0,147,145,11,0,39,0,0,0,159,145,11,0,40,0,0,0,176,145,11,0,41,0,0,0,194,145,11,0,42,0,0,0,207,145,11,0,43,0,0,0,218,145,11,0,44,0,0,0,229,145,11,0,45,0,0,0,240,145,11,0,46,0,0,0,5,146,11,0,47,0,0,0,16,146,11,0,48,0,0,0,30,146,11,0,49,0,0,0,40,146,11,0,50,0,0,0,52,146,11,0,51,0,0,0,65,146,11,0,52,0,0,0,83,146,11,0,53,0,0,0,93,146,11,0,54,0,0,0,111,146,11,0,55,0,0,0,11,0,0,0,10,0,0,0,9,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,40,98,0,0,232,106,0,0,236,30,4,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,129,172,11,0,21,0,0,0,22,0,0,0,23,0,0,0,217,173,11,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,47,174,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,3,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,40,98,0,0,152,31,4,0,0,0,0,0,64,1,0,0,240,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,184,182,11,0,0,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,1,1,0,0,4,1,0,0,4,2,0,0,4,3,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,37,191,11,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,0,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,0,0,0,0,40,33,4,0,62,0,0,0,63,0,0,0,64,0,0,0,169,199,11,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,191,0,0,128,63,84,33,4,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,0,0,0,0,230,199,11,0,36,48,0,0,8,0,0,0,35,48,0,0,8,0,0,0,34,48,0,0,8,0,0,0,33,48,0,0,8,0,0,0,51,48,0,0,4,0,0,0,56,48,0,0,152,48,0,0,2,0,0,0,56,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,207,11,0,60,206,11,0,175,205,11,0,255,204,11,0,100,204,11,0,228,203,11,0,222,203,11,0,223,203,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+269436);
/* memory initializer */ allocate([247,202,11,0,243,201,11,0,94,201,11,0,161,200,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+278376);
/* memory initializer */ allocate([130,212,11,0,252,130,4,0,159,212,11,0,0,131,4,0,198,212,11,0,4,131,4,0,220,212,11,0,8,131,4,0,239,212,11,0,12,131,4,0,254,212,11,0,16,131,4,0,15,213,11,0,20,131,4,0,38,213,11,0,24,131,4,0,54,213,11,0,28,131,4,0,73,213,11,0,32,131,4,0,96,213,11,0,36,131,4,0,122,213,11,0,40,131,4,0,151,213,11,0,44,131,4,0,177,213,11,0,48,131,4,0,198,213,11,0,52,131,4,0,222,213,11,0,56,131,4,0,243,213,11,0,60,131,4,0,6,214,11,0,64,131,4,0,28,214,11,0,68,131,4,0,49,214,11,0,72,131,4,0,72,214,11,0,76,131,4,0,93,214,11,0,80,131,4,0,110,214,11,0,84,131,4,0,126,214,11,0,88,131,4,0,140,214,11,0,92,131,4,0,157,214,11,0,96,131,4,0,174,214,11,0,100,131,4,0,212,220,12,0,104,131,4,0,0,0,0,0,0,0,0,0,229,214,11,0,2,0,0,0,234,214,11,0,3,0,0,0,239,214,11,0,5,0,0,0,244,214,11,0,4,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,255,0,0,0,85,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,100,16,183,29,200,32,110,59,172,48,217,38,144,65,220,118,244,81,107,107,88,97,178,77,60,113,5,80,32,131,184,237,68,147,15,240,232,163,214,214,140,179,97,203,176,194,100,155,212,210,211,134,120,226,10,160,28,242,189,189,1,1,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,7,4,0,92,0,0,0,93,0,0,0,94,0,0,0,0,0,0,0,200,7,4,0,95,0,0,0,96,0,0,0,97,0,0,0,0,0,0,0,224,7,4,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,0,0,0,0,0,8,4,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,0,0,0,0,8,8,4,0,116,0,0,0,117,0,0,0,118,0,0,0,0,0,0,0,24,8,4,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,0,0,0,0,40,8,4,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,129,0,0,0,139,0,0,0,0,0,0,0,140,0,0,0,1,0,0,0,141,0,0,0,2,0,0,0,142,0,0,0,3,0,0,0,143,0,0,0,4,0,0,0,144,0,0,0,7,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,8,4,0,123,0,0,0,146,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,147,0,0,0,130,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,151,0,0,0,138,0,0,0,152,0,0,0,153,0,0,0,0,0,0,0,80,8,4,0,154,0,0,0,155,0,0,0,121,0,0,0,122,0,0,0,0,0,0,0,120,8,4,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,0,0,0,0,136,8,4,0,163,0,0,0,164,0,0,0,165,0,0,0,159,0,0,0,166,0,0,0,161,0,0,0,0,0,0,0,0,1,0,0,240,0,0,0,0,1,0,0,240,0,0,0,171,170,170,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+295780);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,6,0,0,0,120,211,12,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,131,211,12,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,140,211,12,0,0,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,151,211,12,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,163,211,12,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,165,211,12,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,167,211,12,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,174,211,12,0,1,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,120,211,12,0,1,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,131,211,12,0,1,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,140,211,12,0,1,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,151,211,12,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,163,211,12,0,1,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,165,211,12,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,167,211,12,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,174,211,12,0,2,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,120,211,12,0,2,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,131,211,12,0,2,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,140,211,12,0,2,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,151,211,12,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,163,211,12,0,2,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,165,211,12,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,167,211,12,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,174,211,12,0,3,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,120,211,12,0,3,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,131,211,12,0,3,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,140,211,12,0,3,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,151,211,12,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,163,211,12,0,3,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,165,211,12,0,3,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,167,211,12,0,3,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,174,211,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,9,4,0,167,0,0,0,168,0,0,0,100,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,6,0,0,0,0,0,0,0,32,9,4,0,123,0,0,0,177,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,178,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,179,0,0,0,139,0,0,0,0,0,0,0,16,9,4,0,123,0,0,0,180,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,181,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,182,0,0,0,139,0,0,0,0,0,0,0,0,9,4,0,123,0,0,0,183,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,184,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,185,0,0,0,139,0,0,0,0,0,0,0,240,8,4,0,123,0,0,0,186,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,187,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,188,0,0,0,139,0,0,0,0,0,0,0,200,8,4,0,123,0,0,0,189,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,190,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,191,0,0,0,192,0,0,0,0,0,0,0,184,8,4,0,116,0,0,0,193,0,0,0,118,0,0,0,194,0,0,0,0,0,0,0,64,9,4,0,195,0,0,0,196,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,112,9,4,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,0,0,0,0,160,9,4,0,198,0,0,0,206,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,0,0,0,0,176,9,4,0,198,0,0,0,210,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0,56,214,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,24,82,8,0,136,82,8,0,136,82,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,0,0,0,217,0,0,0,103,238,12,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,0,0,0,217,0,0,0,95,234,12,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+543300);
/* memory initializer */ allocate([172,1,124,1,84,1,64,1,30,1,254,0,226,0,214,0,190,0,160,0,142,0,128,0,106,0,84,0,72,0,54,0,142,1,97,1,60,1,41,1,10,1,236,0,210,0,199,0,177,0,149,0,132,0,119,0,98,0,78,0,67,0,50,0,4,0,8,0,16,0,32,0,64,0,96,0,128,0,160,0,202,0,254,0,124,1,252,1,250,2,248,3,242,7,228,15,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,116,97,107,101,32,115,99,114,101,101,110,115,104,111,116,46,32,71,80,85,32,114,101,110,100,101,114,105,110,103,32,105,115,32,117,115,101,100,32,97,110,100,32,114,101,97,100,95,118,105,101,119,112,111,114,116,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10,0,82,101,116,114,111,65,114,99,104,58,32,84,97,107,105,110,103,32,115,99,114,101,101,110,115,104,111,116,46,10,0,84,97,107,105,110,103,32,115,99,114,101,101,110,115,104,111,116,46,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,116,97,107,101,32,115,99,114,101,101,110,115,104,111,116,32,46,46,46,10,0,70,97,105,108,101,100,32,116,111,32,116,97,107,101,32,115,99,114,101,101,110,115,104,111,116,46,0,114,101,116,114,111,97,114,99,104,46,99,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,117,115,101,115,32,116,104,114,101,97,100,101,100,32,97,117,100,105,111,46,32,67,97,110,110,111,116,32,117,115,101,32,114,101,119,105,110,100,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,115,97,118,101,32,115,116,97,116,101,115,46,32,67,97,110,110,111,116,32,117,115,101,32,114,101,119,105,110,100,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,114,101,119,105,110,100,32,98,117,102,102,101,114,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,112,101,114,102,111,114,109,32,105,110,105,116,105,97,108,32,115,101,114,105,97,108,105,122,97,116,105,111,110,32,102,111,114,32,114,101,119,105,110,100,46,10,0,82,101,116,114,111,65,114,99,104,58,32,73,110,105,116,105,110,103,32,114,101,119,105,110,100,32,98,117,102,102,101,114,32,119,105,116,104,32,115,105,122,101,58,32,37,117,32,77,66,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,32,114,101,119,105,110,100,32,98,117,102,102,101,114,46,32,82,101,119,105,110,100,105,110,103,32,119,105,108,108,32,98,101,32,100,105,115,97,98,108,101,100,46,10,0,37,115,37,117,0,76,111,97,100,101,100,32,115,116,97,116,101,32,102,114,111,109,32,115,108,111,116,32,35,37,117,46,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,115,116,97,116,101,32,102,114,111,109,32,34,37,115,34,46,0,67,111,114,101,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,115,97,118,101,32,115,116,97,116,101,115,46,0,83,97,118,101,100,32,115,116,97,116,101,32,116,111,32,115,108,111,116,32,35,37,117,46,0,70,97,105,108,101,100,32,116,111,32,115,97,118,101,32,115,116,97,116,101,32,116,111,32,34,37,115,34,46,0,83,97,118,101,32,115,116,97,116,101,47,109,111,118,105,101,32,115,108,111,116,58,32,37,117,0,82,101,116,114,111,65,114,99,104,58,32,82,101,115,101,116,116,105,110,103,32,103,97,109,101,46,10,0,82,101,115,101,116,46,0,65,112,112,101,110,100,101,100,32,100,105,115,107,58,32,37,115,0,69,106,101,99,116,101,100,0,67,108,111,115,101,100,0,37,115,32,118,105,114,116,117,97,108,32,100,105,115,107,32,116,114,97,121,46,0,101,106,101,99,116,0,99,108,111,115,101,0,70,97,105,108,101,100,32,116,111,32,37,115,32,118,105,114,116,117,97,108,32,100,105,115,107,32,116,114,97,121,46,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,37,115,10,0,83,101,116,116,105,110,103,32,100,105,115,107,32,37,117,32,111,102,32,37,117,32,105,110,32,116,114,97,121,46,0,82,101,109,111,118,101,100,32,100,105,115,107,32,102,114,111,109,32,116,114,97,121,46,0,70,97,105,108,101,100,32,116,111,32,115,101,116,32,100,105,115,107,32,37,117,32,111,102,32,37,117,46,0,70,97,105,108,101,100,32,116,111,32,114,101,109,111,118,101,32,100,105,115,107,32,102,114,111,109,32,116,114,97,121,46,0,0,118,48,0,82,101,116,114,111,65,114,99,104,32,58,32,37,115,32,37,115,0,90,73,80,124,122,105,112,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,116,97,108,32,101,114,114,111,114,32,114,101,99,101,105,118,101,100,32,105,110,58,32,34,37,115,34,10,0,61,61,61,32,66,117,105,108,100,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,0,82,101,116,114,111,65,114,99,104,58,32,83,107,105,112,112,105,110,103,32,83,82,65,77,32,108,111,97,100,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,82,65,77,32,119,105,108,108,32,110,111,116,32,98,101,32,115,97,118,101,100,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,101,109,111,118,105,110,103,32,116,101,109,112,111,97,114,121,32,82,79,77,32,102,105,108,101,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,114,101,109,111,118,101,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,58,32,37,115,46,10,0,114,101,116,114,111,97,114,99,104,0,82,101,116,114,111,65,114,99,104,58,32,85,115,105,110,103,32,82,79,77,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,78,111,32,82,79,77,44,32,115,116,97,114,116,105,110,103,32,100,117,109,109,121,32,99,111,114,101,46,10,0,45,45,109,101,110,117,0,45,115,0,45,83,0,45,99,0,45,118,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,71,111,116,32,105,110,118,97,108,105,100,32,100,105,115,107,32,105,110,100,101,120,32,102,114,111,109,32,108,105,98,114,101,116,114,111,46,10,0,46,115,104,97,100,101,114,0,46,99,103,0,46,99,103,112,0,83,104,97,100,101,114,32,35,37,117,58,32,34,37,115,34,46,0,82,101,116,114,111,65,114,99,104,58,32,65,112,112,108,121,105,110,103,32,115,104,97,100,101,114,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,97,112,112,108,121,32,115,104,97,100,101,114,46,10,0,83,116,111,112,112,105,110,103,32,109,111,118,105,101,32,114,101,99,111,114,100,46,0,82,101,116,114,111,65,114,99,104,58,32,83,116,111,112,112,105,110,103,32,109,111,118,105,101,32,114,101,99,111,114,100,46,10,0,37,115,37,117,46,98,115,118,0,37,115,46,98,115,118,0,83,116,97,114,116,105,110,103,32,109,111,118,105,101,32,114,101,99,111,114,100,32,116,111,32,34,37,115,34,46,0,70,97,105,108,101,100,32,116,111,32,115,116,97,114,116,32,109,111,118,105,101,32,114,101,99,111,114,100,46,0,82,101,116,114,111,65,114,99,104,58,32,83,116,97,114,116,105,110,103,32,109,111,118,105,101,32,114,101,99,111,114,100,32,116,111,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,115,116,97,114,116,32,109,111,118,105,101,32,114,101,99,111,114,100,46,10,0,77,111,118,105,101,32,112,108,97,121,98,97,99,107,32,101,110,100,101,100,46,0,82,101,116,114,111,65,114,99,104,58,32,77,111,118,105,101,32,112,108,97,121,98,97,99,107,32,101,110,100,101,100,46,10,0,83,108,111,119,32,109,111,116,105,111,110,32,114,101,119,105,110,100,46,0,83,108,111,119,32,109,111,116,105,111,110,46,0,82,101,119,105,110,100,105,110,103,46,0,82,101,97,99,104,101,100,32,101,110,100,32,111,102,32,114,101,119,105,110,100,32,98,117,102,102,101,114,46,0,82,101,116,114,111,65,114,99,104,58,32,80,97,117,115,101,100,46,10,0,82,101,116,114,111,65,114,99,104,58,32,85,110,112,97,117,115,101,100,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,114,101,115,117,109,101,32,97,117,100,105,111,32,100,114,105,118,101,114,46,32,87,105,108,108,32,99,111,110,116,105,110,117,101,32,119,105,116,104,111,117,116,32,97,117,100,105,111,46,10,0,82,101,116,114,111,65,114,99,104,58,32,71,114,97,98,32,109,111,117,115,101,32,115,116,97,116,101,58,32,37,115,46,10,0,86,111,108,117,109,101,58,32,37,46,49,102,32,100,66,0,65,117,100,105,111,32,109,117,116,101,100,46,0,65,117,100,105,111,32,117,110,109,117,116,101,100,46,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,117,110,109,117,116,101,32,97,117,100,105,111,46,10,0,70,101,97,116,117,114,101,115,58,0,9,37,115,58,10,9,9,37,115,58,32,37,115,10,0,83,68,76,0,83,68,76,32,100,114,105,118,101,114,115,0,84,104,114,101,97,100,115,0,84,104,114,101,97,100,105,110,103,32,115,117,112,112,111,114,116,0,79,112,101,110,71,76,0,79,112,101,110,71,76,32,100,114,105,118,101,114,0,75,77,83,0,75,77,83,47,69,71,76,32,99,111,110,116,101,120,116,32,115,117,112,112,111,114,116,0,69,71,76,0,69,71,76,32,99,111,110,116,101,120,116,32,115,117,112,112,111,114,116,0,79,112,101,110,86,71,0,79,112,101,110,86,71,32,111,117,116,112,117,116,32,115,117,112,112,111,114,116,0,88,86,105,100,101,111,0,88,86,105,100,101,111,32,111,117,116,112,117,116,0,65,76,83,65,0,97,117,100,105,111,32,100,114,105,118,101,114,0,79,83,83,0,74,97,99,107,0,82,83,111,117,110,100,0,82,111,97,114,65,117,100,105,111,0,80,117,108,115,101,65,117,100,105,111,0,68,105,114,101,99,116,83,111,117,110,100,0,88,65,117,100,105,111,50,0,122,108,105,98,0,80,78,71,32,101,110,99,111,100,101,47,100,101,99,111,100,101,32,97,110,100,32,46,122,105,112,32,101,120,116,114,97,99,116,105,111,110,0,79,112,101,110,65,76,0,69,120,116,101,114,110,97,108,0,69,120,116,101,114,110,97,108,32,102,105,108,116,101,114,32,97,110,100,32,112,108,117,103,105,110,32,115,117,112,112,111,114,116,0,67,103,0,67,103,32,112,105,120,101,108,32,115,104,97,100,101,114,115,0,108,105,98,120,109,108,50,0,108,105,98,120,109,108,50,32,88,77,76,32,112,97,114,115,105,110,103,0,83,68,76,95,105,109,97,103,101,0,83,68,76,95,105,109,97,103,101,32,105,109,97,103,101,32,108,111,97,100,105,110,103,0,70,66,79,0,79,112,101,110,71,76,32,114,101,110,100,101,114,45,116,111,45,116,101,120,116,117,114,101,32,40,109,117,108,116,105,45,112,97,115,115,32,115,104,97,100,101,114,115,41,0,68,121,110,97,109,105,99,0,68,121,110,97,109,105,99,32,114,117,110,45,116,105,109,101,32,108,111,97,100,105,110,103,32,111,102,32,108,105,98,114,101,116,114,111,32,108,105,98,114,97,114,121,0,70,70,109,112,101,103,0,79,110,45,116,104,101,45,102,108,121,32,114,101,99,111,114,100,105,110,103,32,111,102,32,103,97,109,101,112,108,97,121,32,119,105,116,104,32,108,105,98,97,118,99,111,100,101,99,0,70,114,101,101,84,121,112,101,0,84,84,70,32,102,111,110,116,32,114,101,110,100,101,114,105,110,103,32,119,105,116,104,32,70,114,101,101,84,121,112,101,0,78,101,116,112,108,97,121,0,80,101,101,114,45,116,111,45,112,101,101,114,32,110,101,116,112,108,97,121,0,80,121,116,104,111,110,0,83,99,114,105,112,116,32,115,117,112,112,111,114,116,32,105,110,32,115,104,97,100,101,114,115,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,82,101,116,114,111,65,114,99,104,58,32,70,114,111,110,116,101,110,100,32,102,111,114,32,108,105,98,114,101,116,114,111,32,45,45,32,118,48,46,57,46,57,46,51,32,45,45,0,85,115,97,103,101,58,32,114,101,116,114,111,97,114,99,104,32,91,114,111,109,32,102,105,108,101,93,32,91,111,112,116,105,111,110,115,46,46,46,93,0,9,45,104,47,45,45,104,101,108,112,58,32,83,104,111,119,32,116,104,105,115,32,104,101,108,112,32,109,101,115,115,97,103,101,46,0,9,45,45,109,101,110,117,58,32,68,111,32,110,111,116,32,114,101,113,117,105,114,101,32,82,79,77,32,111,114,32,108,105,98,114,101,116,114,111,32,99,111,114,101,32,116,111,32,98,101,32,108,111,97,100,101,100,44,32,115,116,97,114,116,115,32,100,105,114,101,99,116,108,121,32,105,110,32,109,101,110,117,46,0,9,9,73,102,32,110,111,32,97,114,103,117,109,101,110,116,115,32,97,114,101,32,112,97,115,115,101,100,32,116,111,32,82,101,116,114,111,65,114,99,104,44,32,105,116,32,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,111,32,117,115,105,110,103,32,45,45,109,101,110,117,32,97,115,32,111,110,108,121,32,97,114,103,117,109,101,110,116,46,0,9,45,45,102,101,97,116,117,114,101,115,58,32,80,114,105,110,116,115,32,97,118,97,105,108,97,98,108,101,32,102,101,97,116,117,114,101,115,32,99,111,109,112,105,108,101,100,32,105,110,116,111,32,82,101,116,114,111,65,114,99,104,46,0,9,45,115,47,45,45,115,97,118,101,58,32,80,97,116,104,32,102,111,114,32,115,97,118,101,32,102,105,108,101,32,40,42,46,115,114,109,41,46,0,9,45,102,47,45,45,102,117,108,108,115,99,114,101,101,110,58,32,83,116,97,114,116,32,82,101,116,114,111,65,114,99,104,32,105,110,32,102,117,108,108,115,99,114,101,101,110,32,114,101,103,97,114,100,108,101,115,115,32,111,102,32,99,111,110,102,105,103,32,115,101,116,116,105,110,103,115,46,0,9,45,83,47,45,45,115,97,118,101,115,116,97,116,101,58,32,80,97,116,104,32,116,111,32,117,115,101,32,102,111,114,32,115,97,118,101,32,115,116,97,116,101,115,46,32,73,102,32,110,111,116,32,115,101,108,101,99,116,101,100,44,32,42,46,115,116,97,116,101,32,119,105,108,108,32,98,101,32,97,115,115,117,109,101,100,46,0,9,45,99,47,45,45,99,111,110,102,105,103,58,32,80,97,116,104,32,102,111,114,32,99,111,110,102,105,103,32,102,105,108,101,46,10,9,9,66,121,32,100,101,102,97,117,108,116,32,108,111,111,107,115,32,102,111,114,32,99,111,110,102,105,103,32,105,110,32,36,88,68,71,95,67,79,78,70,73,71,95,72,79,77,69,47,114,101,116,114,111,97,114,99,104,47,114,101,116,114,111,97,114,99,104,46,99,102,103,44,10,9,9,36,72,79,77,69,47,46,99,111,110,102,105,103,47,114,101,116,114,111,97,114,99,104,47,114,101,116,114,111,97,114,99,104,46,99,102,103,44,10,9,9,97,110,100,32,36,72,79,77,69,47,46,114,101,116,114,111,97,114,99,104,46,99,102,103,46,0,9,45,45,97,112,112,101,110,100,99,111,110,102,105,103,58,32,69,120,116,114,97,32,99,111,110,102,105,103,32,102,105,108,101,115,32,97,114,101,32,108,111,97,100,101,100,32,105,110,44,32,97,110,100,32,116,97,107,101,32,112,114,105,111,114,105,116,121,32,111,118,101,114,32,99,111,110,102,105,103,32,115,101,108,101,99,116,101,100,32,105,110,32,45,99,32,40,111,114,32,100,101,102,97,117,108,116,41,46,0,9,9,77,117,108,116,105,112,108,101,32,99,111,110,102,105,103,115,32,97,114,101,32,100,101,108,105,109,105,116,101,100,32,98,121,32,39,44,39,46,0,9,45,103,47,45,45,103,97,109,101,98,111,121,58,32,80,97,116,104,32,116,111,32,71,97,109,101,98,111,121,32,82,79,77,46,32,76,111,97,100,32,83,117,112,101,114,71,97,109,101,66,111,121,32,97,115,32,116,104,101,32,114,101,103,117,108,97,114,32,114,111,109,46,0,9,45,98,47,45,45,98,115,120,58,32,80,97,116,104,32,116,111,32,66,83,88,32,114,111,109,46,32,76,111,97,100,32,66,83,88,32,66,73,79,83,32,97,115,32,116,104,101,32,114,101,103,117,108,97,114,32,114,111,109,46,0,9,45,66,47,45,45,98,115,120,115,108,111,116,58,32,80,97,116,104,32,116,111,32,66,83,88,32,115,108,111,116,116,101,100,32,114,111,109,46,32,76,111,97,100,32,66,83,88,32,66,73,79,83,32,97,115,32,116,104,101,32,114,101,103,117,108,97,114,32,114,111,109,46,0,9,45,45,115,117,102,97,109,105,65,58,32,80,97,116,104,32,116,111,32,65,32,115,108,111,116,32,111,102,32,83,117,102,97,109,105,32,84,117,114,98,111,46,32,76,111,97,100,32,83,117,102,97,109,105,32,98,97,115,101,32,99,97,114,116,32,97,115,32,114,101,103,117,108,97,114,32,114,111,109,46,0,9,45,45,115,117,102,97,109,105,66,58,32,80,97,116,104,32,116,111,32,66,32,115,108,111,116,32,111,102,32,83,117,102,97,109,105,32,84,117,114,98,111,46,0,9,45,78,47,45,45,110,111,100,101,118,105,99,101,58,32,68,105,115,99,111,110,110,101,99,116,115,32,99,111,110,116,114,111,108,108,101,114,32,100,101,118,105,99,101,32,99,111,110,110,101,99,116,101,100,32,116,111,32,112,111,114,116,32,40,49,32,116,111,32,37,100,41,46,10,0,9,45,65,47,45,45,100,117,97,108,97,110,97,108,111,103,58,32,67,111,110,110,101,99,116,32,97,32,68,117,97,108,65,110,97,108,111,103,32,99,111,110,116,114,111,108,108,101,114,32,116,111,32,112,111,114,116,32,40,49,32,116,111,32,37,100,41,46,10,0,9,45,109,47,45,45,109,111,117,115,101,58,32,67,111,110,110,101,99,116,32,97,32,109,111,117,115,101,32,105,110,116,111,32,112,111,114,116,32,111,102,32,116,104,101,32,100,101,118,105,99,101,32,40,49,32,116,111,32,37,100,41,46,10,0,9,45,112,47,45,45,115,99,111,112,101,58,32,67,111,110,110,101,99,116,32,97,32,118,105,114,116,117,97,108,32,83,117,112,101,114,83,99,111,112,101,32,105,110,116,111,32,112,111,114,116,32,50,46,32,40,83,78,69,83,32,115,112,101,99,105,102,105,99,41,46,0,9,45,106,47,45,45,106,117,115,116,105,102,105,101,114,58,32,67,111,110,110,101,99,116,32,97,32,118,105,114,116,117,97,108,32,75,111,110,97,109,105,32,74,117,115,116,105,102,105,101,114,32,105,110,116,111,32,112,111,114,116,32,50,46,32,40,83,78,69,83,32,115,112,101,99,105,102,105,99,41,46,0,9,45,74,47,45,45,106,117,115,116,105,102,105,101,114,115,58,32,68,97,105,115,121,32,99,104,97,105,110,32,116,119,111,32,118,105,114,116,117,97,108,32,75,111,110,97,109,105,32,74,117,115,116,105,102,105,101,114,115,32,105,110,116,111,32,112,111,114,116,32,50,46,32,40,83,78,69,83,32,115,112,101,99,105,102,105,99,41,46,0,9,45,52,47,45,45,109,117,108,116,105,116,97,112,58,32,67,111,110,110,101,99,116,32,97,32,83,78,69,83,32,109,117,108,116,105,116,97,112,32,116,111,32,112,111,114,116,32,50,46,32,40,83,78,69,83,32,115,112,101,99,105,102,105,99,41,46,0,9,45,80,47,45,45,98,115,118,112,108,97,121,58,32,80,108,97,121,98,97,99,107,32,97,32,66,83,86,32,109,111,118,105,101,32,102,105,108,101,46,0,9,45,82,47,45,45,98,115,118,114,101,99,111,114,100,58,32,83,116,97,114,116,32,114,101,99,111,114,100,105,110,103,32,97,32,66,83,86,32,109,111,118,105,101,32,102,105,108,101,32,102,114,111,109,32,116,104,101,32,98,101,103,105,110,110,105,110,103,46,0,9,45,77,47,45,45,115,114,97,109,45,109,111,100,101,58,32,84,97,107,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,116,101,108,108,105,110,103,32,104,111,119,32,83,82,65,77,32,115,104,111,117,108,100,32,98,101,32,104,97,110,100,108,101,100,32,105,110,32,116,104,101,32,115,101,115,115,105,111,110,46,0,9,9,123,110,111,44,125,108,111,97,100,45,123,110,111,44,125,115,97,118,101,32,100,101,115,99,114,105,98,101,115,32,105,102,32,83,82,65,77,32,115,104,111,117,108,100,32,98,101,32,108,111,97,100,101,100,44,32,97,110,100,32,105,102,32,83,82,65,77,32,115,104,111,117,108,100,32,98,101,32,115,97,118,101,100,46,0,9,9,68,111,32,110,111,116,101,32,116,104,97,116,32,110,111,108,111,97,100,45,115,97,118,101,32,105,109,112,108,105,101,115,32,116,104,97,116,32,115,97,118,101,32,102,105,108,101,115,32,119,105,108,108,32,98,101,32,100,101,108,101,116,101,100,32,97,110,100,32,111,118,101,114,119,114,105,116,116,101,110,46,0,9,45,118,47,45,45,118,101,114,98,111,115,101,58,32,86,101,114,98,111,115,101,32,108,111,103,103,105,110,103,46,0,9,45,85,47,45,45,117,112,115,58,32,83,112,101,99,105,102,105,101,115,32,112,97,116,104,32,102,111,114,32,85,80,83,32,112,97,116,99,104,32,116,104,97,116,32,119,105,108,108,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,82,79,77,46,0,9,45,45,98,112,115,58,32,83,112,101,99,105,102,105,101,115,32,112,97,116,104,32,102,111,114,32,66,80,83,32,112,97,116,99,104,32,116,104,97,116,32,119,105,108,108,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,82,79,77,46,0,9,45,45,105,112,115,58,32,83,112,101,99,105,102,105,101,115,32,112,97,116,104,32,102,111,114,32,73,80,83,32,112,97,116,99,104,32,116,104,97,116,32,119,105,108,108,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,82,79,77,46,0,9,45,45,110,111,45,112,97,116,99,104,58,32,68,105,115,97,98,108,101,115,32,97,108,108,32,102,111,114,109,115,32,111,102,32,114,111,109,32,112,97,116,99,104,105,110,103,46,0,9,45,88,47,45,45,120,109,108,58,32,83,112,101,99,105,102,105,101,115,32,112,97,116,104,32,116,111,32,88,77,76,32,109,101,109,111,114,121,32,109,97,112,46,0,9,45,68,47,45,45,100,101,116,97,99,104,58,32,68,101,116,97,99,104,32,82,101,116,114,111,65,114,99,104,32,102,114,111,109,32,116,104,101,32,114,117,110,110,105,110,103,32,99,111,110,115,111,108,101,46,32,78,111,116,32,114,101,108,101,118,97,110,116,32,102,111,114,32,97,108,108,32,112,108,97,116,102,111,114,109,115,46,10,0,46,97,117,116,111,0,115,117,99,99,101,101,100,101,100,0,102,97,105,108,101,100,0,82,101,116,114,111,65,114,99,104,58,32,65,117,116,111,32,115,97,118,101,32,115,116,97,116,101,32,116,111,32,34,37,115,34,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,97,118,105,110,103,32,114,101,103,117,108,97,114,32,83,82,65,77,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,82,77,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,82,84,67,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,83,97,118,105,110,103,32,71,97,109,101,98,111,121,32,83,82,65,77,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,97,118,105,110,103,32,66,83,88,32,40,80,41,82,65,77,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,82,77,58,32,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,80,83,82,77,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,83,97,118,105,110,103,32,83,117,102,97,109,105,32,116,117,114,98,111,32,65,47,66,32,82,65,77,46,10,0,82,101,116,114,111,65,114,99,104,58,32,65,83,82,77,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,66,83,82,77,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,109,111,118,105,101,32,102,105,108,101,58,32,34,37,115,34,46,10,0,105,110,105,116,95,109,111,118,105,101,40,41,0,83,116,97,114,116,105,110,103,32,109,111,118,105,101,32,112,108,97,121,98,97,99,107,46,0,82,101,116,114,111,65,114,99,104,58,32,83,116,97,114,116,105,110,103,32,109,111,118,105,101,32,112,108,97,121,98,97,99,107,46,10,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,97,117,116,111,32,115,97,118,101,115,116,97,116,101,32,105,110,58,32,37,115,10,0,65,117,116,111,45,108,111,97,100,105,110,103,32,115,97,118,101,115,116,97,116,101,32,102,114,111,109,32,34,37,115,34,32,37,115,46,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,108,97,115,116,32,115,116,97,116,101,32,115,108,111,116,58,32,35,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,86,101,114,115,105,111,110,32,111,102,32,108,105,98,114,101,116,114,111,32,65,80,73,58,32,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,67,111,109,112,105,108,101,100,32,97,103,97,105,110,115,116,32,65,80,73,58,32,37,117,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,82,101,116,114,111,65,114,99,104,32,105,115,32,99,111,109,112,105,108,101,100,32,97,103,97,105,110,115,116,32,97,32,100,105,102,102,101,114,101,110,116,32,118,101,114,115,105,111,110,32,111,102,32,108,105,98,114,101,116,114,111,32,116,104,97,110,32,116,104,105,115,32,108,105,98,114,101,116,114,111,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,46,10,0,10,67,111,109,112,105,108,101,114,58,32,0,67,108,97,110,103,47,76,76,86,77,32,40,37,115,41,32,37,117,45,98,105,116,10,0,52,46,50,46,49,32,67,111,109,112,97,116,105,98,108,101,32,67,108,97,110,103,32,51,46,55,46,48,32,0,66,117,105,108,116,58,32,37,115,10,0,83,101,112,32,49,49,32,50,48,49,53,0,109,101,110,117,0,104,101,108,112,0,115,97,118,101,0,102,117,108,108,115,99,114,101,101,110,0,118,101,114,98,111,115,101,0,103,97,109,101,98,111,121,0,99,111,110,102,105,103,0,97,112,112,101,110,100,99,111,110,102,105,103,0,109,111,117,115,101,0,110,111,100,101,118,105,99,101,0,115,99,111,112,101,0,106,117,115,116,105,102,105,101,114,0,106,117,115,116,105,102,105,101,114,115,0,100,117,97,108,97,110,97,108,111,103,0,115,97,118,101,115,116,97,116,101,0,98,115,120,0,98,115,120,115,108,111,116,0,109,117,108,116,105,116,97,112,0,115,117,102,97,109,105,65,0,115,117,102,97,109,105,66,0,98,115,118,112,108,97,121,0,98,115,118,114,101,99,111,114,100,0,115,114,97,109,45,109,111,100,101,0,117,112,115,0,98,112,115,0,105,112,115,0,110,111,45,112,97,116,99,104,0,120,109,108,0,100,101,116,97,99,104,0,102,101,97,116,117,114,101,115,0,104,115,58,102,118,83,58,109,58,112,52,106,74,65,58,103,58,98,58,99,58,66,58,89,58,90,58,85,58,68,78,58,88,58,80,58,82,58,77,58,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,110,110,101,99,116,32,100,117,97,108,97,110,97,108,111,103,32,116,111,32,97,32,118,97,108,105,100,32,112,111,114,116,46,10,0,112,97,114,115,101,95,105,110,112,117,116,40,41,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,110,110,101,99,116,32,109,111,117,115,101,32,116,111,32,97,32,118,97,108,105,100,32,112,111,114,116,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,68,105,115,99,111,110,110,101,99,116,32,100,101,118,105,99,101,32,102,114,111,109,32,97,32,118,97,108,105,100,32,112,111,114,116,46,10,0,110,111,108,111,97,100,45,110,111,115,97,118,101,0,110,111,108,111,97,100,45,115,97,118,101,0,108,111,97,100,45,110,111,115,97,118,101,0,108,111,97,100,45,115,97,118,101,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,105,110,32,45,45,115,114,97,109,45,109,111,100,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,69,114,114,111,114,32,112,97,114,115,105,110,103,32,97,114,103,117,109,101,110,116,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,45,45,109,101,110,117,32,119,97,115,32,117,115,101,100,44,32,98,117,116,32,82,79,77,32,102,105,108,101,32,119,97,115,32,112,97,115,115,101,100,32,97,115,32,119,101,108,108,46,10,0,46,112,115,114,109,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,83,117,102,97,109,105,32,84,117,114,98,111,32,83,82,65,77,32,112,97,116,104,115,32,119,105,108,108,32,98,101,32,105,110,102,101,114,114,101,100,32,102,114,111,109,32,116,104,101,105,114,32,114,101,115,112,101,99,116,105,118,101,32,112,97,116,104,115,32,116,111,32,97,118,111,105,100,32,99,111,110,102,108,105,99,116,115,46,10,0,46,117,112,115,0,46,98,112,115,0,46,105,112,115,0,46,120,109,108,0,82,101,116,114,111,65,114,99,104,58,32,82,101,100,105,114,101,99,116,105,110,103,32,115,97,118,101,32,102,105,108,101,32,116,111,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,101,100,105,114,101,99,116,105,110,103,32,115,97,118,101,32,115,116,97,116,101,32,116,111,32,34,37,115,34,46,10,0,46,99,102,103,0,82,101,116,114,111,65,114,99,104,58,32,82,101,100,105,114,101,99,116,105,110,103,32,99,111,110,102,105,103,32,102,105,108,101,32,116,111,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,58,32,68,105,100,32,110,111,116,32,102,105,110,100,32,99,111,110,102,105,103,32,102,105,108,101,46,32,85,115,105,110,103,32,115,121,115,116,101,109,32,100,101,102,97,117,108,116,46,10,0,82,101,116,114,111,65,114,99,104,58,32,68,105,115,99,111,110,110,101,99,116,105,110,103,32,100,101,118,105,99,101,32,102,114,111,109,32,112,111,114,116,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,67,111,110,110,101,99,116,105,110,103,32,100,117,97,108,97,110,97,108,111,103,32,116,111,32,112,111,114,116,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,67,111,110,110,101,99,116,105,110,103,32,109,111,117,115,101,32,116,111,32,112,111,114,116,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,67,111,110,110,101,99,116,105,110,103,32,74,117,115,116,105,102,105,101,114,32,116,111,32,112,111,114,116,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,67,111,110,110,101,99,116,105,110,103,32,74,117,115,116,105,102,105,101,114,115,32,116,111,32,112,111,114,116,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,67,111,110,110,101,99,116,105,110,103,32,77,117,108,116,105,116,97,112,32,116,111,32,112,111,114,116,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,67,111,110,110,101,99,116,105,110,103,32,115,99,111,112,101,32,116,111,32,112,111,114,116,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,65,117,100,105,111,32,98,97,99,107,101,110,100,32,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,46,32,87,105,108,108,32,99,111,110,116,105,110,117,101,32,119,105,116,104,111,117,116,32,115,111,117,110,100,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,68,105,100,110,39,116,32,114,101,97,100,32,119,104,111,108,101,32,102,105,108,101,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,97,118,105,110,103,32,115,116,97,116,101,58,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,115,97,118,101,32,115,116,97,116,101,32,98,117,102,102,101,114,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,116,97,116,101,32,115,105,122,101,58,32,37,100,32,98,121,116,101,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,115,97,118,101,32,115,116,97,116,101,32,116,111,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,58,32,76,111,97,100,105,110,103,32,115,116,97,116,101,58,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,115,116,97,116,101,32,102,114,111,109,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,116,97,116,101,32,115,105,122,101,58,32,37,117,32,98,121,116,101,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,66,108,111,99,107,105,110,103,32,83,82,65,77,32,111,118,101,114,119,114,105,116,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,115,97,118,101,32,83,82,65,77,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,65,116,116,101,109,112,116,105,110,103,32,116,111,32,114,101,99,111,118,101,114,32,46,46,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,97,118,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,116,111,32,34,37,115,34,46,10,0,122,105,112,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,101,120,116,114,97,99,116,32,82,79,77,32,102,114,111,109,32,122,105,112,112,101,100,32,102,105,108,101,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,110,118,97,108,105,100,32,82,79,77,32,116,121,112,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,83,101,118,101,114,97,108,32,112,97,116,99,104,101,115,32,97,114,101,32,101,120,112,108,105,99,105,116,108,121,32,100,101,102,105,110,101,100,44,32,105,103,110,111,114,105,110,103,32,97,108,108,32,46,46,46,10,0,85,80,83,0,66,80,83,0,73,80,83,0,82,101,116,114,111,65,114,99,104,58,32,68,105,100,32,110,111,116,32,102,105,110,100,32,97,32,118,97,108,105,100,32,82,79,77,32,112,97,116,99,104,46,10,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,37,115,32,102,105,108,101,32,105,110,32,34,37,115,34,44,32,97,116,116,101,109,112,116,105,110,103,32,116,111,32,112,97,116,99,104,32,46,46,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,112,97,116,99,104,101,100,32,82,79,77,32,46,46,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,79,77,32,112,97,116,99,104,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,115,41,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,112,97,116,99,104,32,37,115,58,32,69,114,114,111,114,32,35,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,67,82,67,51,50,58,32,48,120,37,120,44,32,83,72,65,50,53,54,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,88,77,76,32,109,101,109,111,114,121,32,109,97,112,32,105,110,32,34,37,115,34,10,0,82,101,116,114,111,65,114,99,104,58,32,76,111,97,100,105,110,103,32,82,79,77,32,102,105,108,101,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,82,79,77,32,102,105,108,101,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,79,77,32,115,105,122,101,58,32,37,117,32,98,121,116,101,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,79,77,32,108,111,97,100,105,110,103,32,115,107,105,112,112,101,100,46,32,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,119,105,108,108,32,108,111,97,100,32,105,116,32,111,110,32,105,116,115,32,111,119,110,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,82,79,77,32,102,105,108,101,58,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,103,97,109,101,46,10,0,46,114,116,99,0,46,112,114,97,109,0,46,97,114,97,109,0,46,98,114,97,109,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,78,111,32,82,79,77,32,105,115,32,117,115,101,100,44,32,98,117,116,32,108,105,98,114,101,116,114,111,32,99,111,114,101,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,116,104,105,115,46,10,0,37,115,47,82,101,116,114,111,65,114,99,104,45,114,101,99,111,118,101,114,121,45,0,37,89,45,37,109,45,37,100,45,37,72,45,37,77,45,37,83,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,83,117,99,99,101,101,100,101,100,32,105,110,32,115,97,118,105,110,103,32,82,65,77,32,100,97,116,97,32,116,111,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,97,105,108,101,100,32,46,46,46,32,67,97,110,110,111,116,32,114,101,99,111,118,101,114,32,115,97,118,101,32,102,105,108,101,46,10,0,46,46,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,100,105,114,101,99,116,111,114,121,58,32,34,37,115,34,10,0,102,105,108,101,95,112,97,116,104,46,99,0,46,37,115,0,82,101,116,114,111,65,114,99,104,45,37,109,37,100,45,37,72,37,77,37,83,46,0,47,112,114,111,99,47,37,117,47,37,115,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,114,101,115,111,108,118,101,32,97,112,112,108,105,99,97,116,105,111,110,32,112,97,116,104,33,32,84,104,105,115,32,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110,46,10,0,101,120,101,0,112,97,116,104,47,97,46,111,117,116,0,83,101,116,116,105,110,103,32,114,101,102,114,101,115,104,32,114,97,116,101,32,116,111,58,32,37,46,51,102,32,72,122,46,0,82,101,116,114,111,65,114,99,104,58,32,65,100,106,117,115,116,105,110,103,32,97,115,112,101,99,116,32,114,97,116,105,111,32,116,111,32,37,46,50,102,10,0,82,101,116,114,111,65,114,99,104,58,32,86,105,100,101,111,32,64,32,37,117,120,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,86,105,100,101,111,32,64,32,102,117,108,108,115,99,114,101,101,110,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,32,112,105,120,101,108,32,99,111,110,118,101,114,116,101,114,46,10,0,105,110,105,116,95,118,105,100,101,111,95,105,110,112,117,116,40,41,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,111,112,101,110,32,118,105,100,101,111,32,100,114,105,118,101,114,32,46,46,46,32,69,120,105,116,105,110,103,32,46,46,46,10,0,82,101,116,114,111,65,114,99,104,58,32,71,114,97,112,104,105,99,115,32,100,114,105,118,101,114,32,100,105,100,32,110,111,116,32,105,110,105,116,105,97,108,105], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+737520);
/* memory initializer */ allocate([122,101,32,97,110,32,105,110,112,117,116,32,100,114,105,118,101,114,46,32,65,116,116,101,109,112,116,105,110,103,32,116,111,32,112,105,99,107,32,97,32,115,117,105,116,97,98,108,101,32,100,114,105,118,101,114,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,105,110,105,116,32,105,110,112,117,116,32,100,114,105,118,101,114,46,32,69,120,105,116,105,110,103,32,46,46,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,102,105,110,100,32,105,110,112,117,116,32,100,114,105,118,101,114,46,32,69,120,105,116,105,110,103,32,46,46,46,10,0,100,114,105,118,101,114,46,99,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,97,117,100,105,111,32,100,114,105,118,101,114,46,32,87,105,108,108,32,99,111,110,116,105,110,117,101,32,119,105,116,104,111,117,116,32,97,117,100,105,111,46,10,0,40,100,101,102,97,117,108,116,41,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,114,101,115,97,109,112,108,101,114,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,65,117,100,105,111,32,114,97,116,101,32,99,111,110,116,114,111,108,32,119,97,115,32,100,101,115,105,114,101,100,44,32,98,117,116,32,100,114,105,118,101,114,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,110,101,101,100,101,100,32,102,101,97,116,117,114,101,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,77,111,110,105,116,111,114,32,70,80,83,32,101,115,116,105,109,97,116,105,111,110,32,105,115,32,100,105,115,97,98,108,101,100,32,102,111,114,32,116,104,114,101,97,100,101,100,32,118,105,100,101,111,46,10,0,82,101,116,114,111,65,114,99,104,58,32,68,111,101,115,32,110,111,116,32,104,97,118,101,32,101,110,111,117,103,104,32,115,97,109,112,108,101,115,32,102,111,114,32,109,111,110,105,116,111,114,32,114,101,102,114,101,115,104,32,114,97,116,101,32,101,115,116,105,109,97,116,105,111,110,46,32,82,101,113,117,105,114,101,115,32,116,111,32,114,117,110,32,102,111,114,32,97,116,32,108,101,97,115,116,32,37,117,32,102,114,97,109,101,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,65,118,101,114,97,103,101,32,109,111,110,105,116,111,114,32,72,122,58,32,37,46,54,102,32,72,122,46,32,40,37,46,51,102,32,37,37,32,102,114,97,109,101,32,116,105,109,101,32,100,101,118,105,97,116,105,111,110,44,32,98,97,115,101,100,32,111,110,32,37,117,32,108,97,115,116,32,115,97,109,112,108,101,115,41,46,10,0,82,101,116,114,111,65,114,99,104,58,32,65,118,101,114,97,103,101,32,97,117,100,105,111,32,98,117,102,102,101,114,32,115,97,116,117,114,97,116,105,111,110,58,32,37,46,50,102,32,37,37,44,32,115,116,97,110,100,97,114,100,32,100,101,118,105,97,116,105,111,110,32,40,112,101,114,99,101,110,116,97,103,101,32,112,111,105,110,116,115,41,58,32,37,46,50,102,32,37,37,46,10,0,82,101,116,114,111,65,114,99,104,58,32,65,109,111,117,110,116,32,111,102,32,116,105,109,101,32,115,112,101,110,116,32,99,108,111,115,101,32,116,111,32,117,110,100,101,114,114,117,110,58,32,37,46,50,102,32,37,37,46,32,67,108,111,115,101,32,116,111,32,98,108,111,99,107,105,110,103,58,32,37,46,50,102,32,37,37,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,48,82,71,66,49,53,53,53,32,112,105,120,101,108,32,102,111,114,109,97,116,32,105,115,32,100,101,112,114,101,99,97,116,101,100,44,32,97,110,100,32,119,105,108,108,32,98,101,32,115,108,111,119,101,114,46,32,70,111,114,32,49,53,47,49,54,45,98,105,116,44,32,82,71,66,53,54,53,32,102,111,114,109,97,116,32,105,115,32,112,114,101,102,101,114,114,101,100,46,10,0,115,104,97,100,101,114,124,99,103,124,99,103,112,124,103,108,115,108,124,103,108,115,108,112,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,115,104,97,100,101,114,32,34,37,115,34,10,0,82,101,116,114,111,65,114,99,104,58,32,84,105,109,105,110,103,115,32,100,101,118,105,97,116,101,32,116,111,111,32,109,117,99,104,46,32,87,105,108,108,32,110,111,116,32,97,100,106,117,115,116,46,32,40,68,105,115,112,108,97,121,32,61,32,37,46,50,102,32,72,122,44,32,71,97,109,101,32,61,32,37,46,50,102,32,72,122,41,10,0,82,101,116,114,111,65,114,99,104,58,32,71,97,109,101,32,70,80,83,32,62,32,77,111,110,105,116,111,114,32,70,80,83,46,32,67,97,110,110,111,116,32,114,101,108,121,32,111,110,32,86,83,121,110,99,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,101,116,32,97,117,100,105,111,32,105,110,112,117,116,32,114,97,116,101,32,116,111,58,32,37,46,50,102,32,72,122,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,102,105,110,100,32,97,110,121,32,105,110,112,117,116,32,100,114,105,118,101,114,32,110,97,109,101,100,32,34,37,115,34,10,0,65,118,97,105,108,97,98,108,101,32,105,110,112,117,116,32,100,114,105,118,101,114,115,32,97,114,101,58,10,0,9,37,115,10,0,102,105,110,100,95,105,110,112,117,116,95,100,114,105,118,101,114,40,41,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,102,105,110,100,32,97,110,121,32,118,105,100,101,111,32,100,114,105,118,101,114,32,110,97,109,101,100,32,34,37,115,34,10,0,65,118,97,105,108,97,98,108,101,32,118,105,100,101,111,32,100,114,105,118,101,114,115,32,97,114,101,58,10,0,102,105,110,100,95,118,105,100,101,111,95,100,114,105,118,101,114,40,41,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,102,105,110,100,32,97,110,121,32,97,117,100,105,111,32,100,114,105,118,101,114,32,110,97,109,101,100,32,34,37,115,34,10,0,65,118,97,105,108,97,98,108,101,32,97,117,100,105,111,32,100,114,105,118,101,114,115,32,97,114,101,58,10,0,102,105,110,100,95,97,117,100,105,111,95,100,114,105,118,101,114,40,41,0,82,101,116,114,111,65,114,99,104,58,32,91,67,111,110,102,105,103,93,58,32,81,117,101,114,121,105,110,103,32,97,112,112,108,105,99,97,116,105,111,110,32,112,97,116,104,58,32,37,115,46,10,0,49,0,102,97,108,115,101,0,48,0,37,102,0,37,120,0,35,105,110,99,108,117,100,101,32,34,37,115,34,10,0,37,115,32,61,32,34,37,115,34,10,0,40,105,110,99,108,117,100,101,100,41,0,37,115,32,61,32,34,37,115,34,32,37,115,10,0,34,0,32,10,9,12,13,11,0,105,110,99,108,117,100,101,32,0,33,33,33,32,35,105,110,99,108,117,100,101,32,100,101,112,116,104,32,101,120,99,101,101,100,101,100,32,102,111,114,32,99,111,110,102,105,103,46,32,77,105,103,104,116,32,98,101,32,97,32,99,121,99,108,101,46,10,0,0,115,101,116,116,105,110,103,115,46,99,0,0,44,0,82,101,116,114,111,65,114,99,104,58,32,65,112,112,101,110,100,105,110,103,32,99,111,110,102,105,103,32,34,37,115,34,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,97,112,112,101,110,100,32,99,111,110,102,105,103,32,34,37,115,34,10,0,61,61,61,32,67,111,110,102,105,103,32,61,61,61,10,0,61,61,61,32,67,111,110,102,105,103,32,101,110,100,32,61,61,61,10,0,118,105,100,101,111,95,120,115,99,97,108,101,0,118,105,100,101,111,95,121,115,99,97,108,101,0,118,105,100,101,111,95,102,117,108,108,115,99,114,101,101,110,95,120,0,118,105,100,101,111,95,102,117,108,108,115,99,114,101,101,110,95,121,0,118,105,100,101,111,95,102,117,108,108,115,99,114,101,101,110,0,118,105,100,101,111,95,119,105,110,100,111,119,101,100,95,102,117,108,108,115,99,114,101,101,110,0,118,105,100,101,111,95,109,111,110,105,116,111,114,95,105,110,100,101,120,0,118,105,100,101,111,95,100,105,115,97,98,108,101,95,99,111,109,112,111,115,105,116,105,111,110,0,118,105,100,101,111,95,118,115,121,110,99,0,118,105,100,101,111,95,104,97,114,100,95,115,121,110,99,0,118,105,100,101,111,95,104,97,114,100,95,115,121,110,99,95,102,114,97,109,101,115,0,118,105,100,101,111,95,98,108,97,99,107,95,102,114,97,109,101,95,105,110,115,101,114,116,105,111,110,0,118,105,100,101,111,95,115,119,97,112,95,105,110,116,101,114,118,97,108,0,118,105,100,101,111,95,116,104,114,101,97,100,101,100,0,118,105,100,101,111,95,115,109,111,111,116,104,0,118,105,100,101,111,95,102,111,114,99,101,95,97,115,112,101,99,116,0,118,105,100,101,111,95,115,99,97,108,101,95,105,110,116,101,103,101,114,0,118,105,100,101,111,95,99,114,111,112,95,111,118,101,114,115,99,97,110,0,118,105,100,101,111,95,97,115,112,101,99,116,95,114,97,116,105,111,0,97,115,112,101,99,116,95,114,97,116,105,111,95,105,110,100,101,120,0,118,105,100,101,111,95,97,115,112,101,99,116,95,114,97,116,105,111,95,97,117,116,111,0,118,105,100,101,111,95,114,101,102,114,101,115,104,95,114,97,116,101,0,118,105,100,101,111,95,115,104,97,100,101,114,0,118,105,100,101,111,95,115,104,97,100,101,114,95,101,110,97,98,108,101,0,118,105,100,101,111,95,97,108,108,111,119,95,114,111,116,97,116,101,0,118,105,100,101,111,95,102,111,110,116,95,112,97,116,104,0,118,105,100,101,111,95,102,111,110,116,95,115,105,122,101,0,118,105,100,101,111,95,102,111,110,116,95,101,110,97,98,108,101,0,118,105,100,101,111,95,102,111,110,116,95,115,99,97,108,101,0,118,105,100,101,111,95,109,101,115,115,97,103,101,95,112,111,115,95,120,0,118,105,100,101,111,95,109,101,115,115,97,103,101,95,112,111,115,95,121,0,118,105,100,101,111,95,114,111,116,97,116,105,111,110,0,99,117,115,116,111,109,95,118,105,101,119,112,111,114,116,95,120,0,99,117,115,116,111,109,95,118,105,101,119,112,111,114,116,95,121,0,99,117,115,116,111,109,95,118,105,101,119,112,111,114,116,95,119,105,100,116,104,0,99,117,115,116,111,109,95,118,105,101,119,112,111,114,116,95,104,101,105,103,104,116,0,118,105,100,101,111,95,109,101,115,115,97,103,101,95,99,111,108,111,114,0,118,105,100,101,111,95,112,111,115,116,95,102,105,108,116,101,114,95,114,101,99,111,114,100,0,118,105,100,101,111,95,103,112,117,95,114,101,99,111,114,100,0,118,105,100,101,111,95,103,112,117,95,115,99,114,101,101,110,115,104,111,116,0,118,105,100,101,111,95,115,104,97,100,101,114,95,100,105,114,0,100,101,102,97,117,108,116,0,105,110,112,117,116,95,97,120,105,115,95,116,104,114,101,115,104,111,108,100,0,110,101,116,112,108,97,121,95,99,108,105,101,110,116,95,115,119,97,112,95,105,110,112,117,116,0,105,110,112,117,116,95,112,108,97,121,101,114,37,117,95,106,111,121,112,97,100,95,105,110,100,101,120,0,105,110,112,117,116,95,108,105,98,114,101,116,114,111,95,100,101,118,105,99,101,95,112,37,117,0,97,117,100,105,111,95,101,110,97,98,108,101,0,97,117,100,105,111,95,111,117,116,95,114,97,116,101,0,97,117,100,105,111,95,98,108,111,99,107,95,102,114,97,109,101,115,0,97,117,100,105,111,95,100,101,118,105,99,101,0,97,117,100,105,111,95,108,97,116,101,110,99,121,0,97,117,100,105,111,95,115,121,110,99,0,97,117,100,105,111,95,114,97,116,101,95,99,111,110,116,114,111,108,0,97,117,100,105,111,95,114,97,116,101,95,99,111,110,116,114,111,108,95,100,101,108,116,97,0,97,117,100,105,111,95,118,111,108,117,109,101,0,118,105,100,101,111,95,100,114,105,118,101,114,0,118,105,100,101,111,95,103,108,95,99,111,110,116,101,120,116,0,97,117,100,105,111,95,100,114,105,118,101,114,0,97,117,100,105,111,95,100,115,112,95,112,108,117,103,105,110,0,105,110,112,117,116,95,100,114,105,118,101,114,0,105,110,112,117,116,95,106,111,121,112,97,100,95,100,114,105,118,101,114,0,108,105,98,114,101,116,114,111,95,112,97,116,104,0,99,111,114,101,95,111,112,116,105,111,110,115,95,112,97,116,104,0,115,99,114,101,101,110,115,104,111,116,95,100,105,114,101,99,116,111,114,121,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,115,99,114,101,101,110,115,104,111,116,95,100,105,114,101,99,116,111,114,121,32,105,115,32,110,111,116,32,97,110,32,101,120,105,115,116,105,110,103,32,100,105,114,101,99,116,111,114,121,44,32,105,103,110,111,114,105,110,103,32,46,46,46,10,0,114,103,117,105,95,98,114,111,119,115,101,114,95,100,105,114,101,99,116,111,114,121,0,111,118,101,114,108,97,121,95,100,105,114,101,99,116,111,114,121,0,105,110,112,117,116,95,111,118,101,114,108,97,121,0,105,110,112,117,116,95,111,118,101,114,108,97,121,95,111,112,97,99,105,116,121,0,105,110,112,117,116,95,111,118,101,114,108,97,121,95,115,99,97,108,101,0,114,101,119,105,110,100,95,101,110,97,98,108,101,0,114,101,119,105,110,100,95,98,117,102,102,101,114,95,115,105,122,101,0,114,101,119,105,110,100,95,103,114,97,110,117,108,97,114,105,116,121,0,115,108,111,119,109,111,116,105,111,110,95,114,97,116,105,111,0,102,97,115,116,102,111,114,119,97,114,100,95,114,97,116,105,111,0,112,97,117,115,101,95,110,111,110,97,99,116,105,118,101,0,97,117,116,111,115,97,118,101,95,105,110,116,101,114,118,97,108,0,99,104,101,97,116,95,100,97,116,97,98,97,115,101,95,112,97,116,104,0,99,104,101,97,116,95,115,101,116,116,105,110,103,115,95,112,97,116,104,0,98,108,111,99,107,95,115,114,97,109,95,111,118,101,114,119,114,105,116,101,0,115,97,118,101,115,116,97,116,101,95,97,117,116,111,95,105,110,100,101,120,0,115,97,118,101,115,116,97,116,101,95,97,117,116,111,95,115,97,118,101,0,115,97,118,101,115,116,97,116,101,95,97,117,116,111,95,108,111,97,100,0,110,101,116,119,111,114,107,95,99,109,100,95,101,110,97,98,108,101,0,110,101,116,119,111,114,107,95,99,109,100,95,112,111,114,116,0,115,116,100,105,110,95,99,109,100,95,101,110,97,98,108,101,0,103,97,109,101,95,104,105,115,116,111,114,121,95,112,97,116,104,0,103,97,109,101,95,104,105,115,116,111,114,121,95,115,105,122,101,0,105,110,112,117,116,95,116,117,114,98,111,95,112,101,114,105,111,100,0,105,110,112,117,116,95,100,117,116,121,95,99,121,99,108,101,0,105,110,112,117,116,95,100,101,98,117,103,95,101,110,97,98,108,101,0,105,110,112,117,116,95,97,117,116,111,100,101,116,101,99,116,95,101,110,97,98,108,101,0,106,111,121,112,97,100,95,97,117,116,111,99,111,110,102,105,103,95,100,105,114,0,99,111,110,102,105,103,95,115,97,118,101,95,111,110,95,101,120,105,116,0,115,97,118,101,102,105,108,101,95,100,105,114,101,99,116,111,114,121,0,46,115,114,109,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,115,97,118,101,102,105,108,101,95,100,105,114,101,99,116,111,114,121,32,105,115,32,110,111,116,32,97,32,100,105,114,101,99,116,111,114,121,44,32,105,103,110,111,114,105,110,103,32,46,46,46,10,0,115,97,118,101,115,116,97,116,101,95,100,105,114,101,99,116,111,114,121,0,46,115,116,97,116,101,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,115,97,118,101,115,116,97,116,101,95,100,105,114,101,99,116,111,114,121,32,105,115,32,110,111,116,32,97,32,100,105,114,101,99,116,111,114,121,44,32,105,103,110,111,114,105,110,103,32,46,46,46,10,0,115,121,115,116,101,109,95,100,105,114,101,99,116,111,114,121,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,115,121,115,116,101,109,95,100,105,114,101,99,116,111,114,121,32,105,115,32,110,111,116,32,115,101,116,32,105,110,32,99,111,110,102,105,103,46,32,65,115,115,117,109,105,110,103,32,115,121,115,116,101,109,32,100,105,114,101,99,116,111,114,121,32,105,115,32,115,97,109,101,32,102,111,108,100,101,114,32,97,115,32,103,97,109,101,58,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,58,32,83,97,118,105,110,103,32,99,111,110,102,105,103,32,97,116,32,112,97,116,104,58,32,34,37,115,34,10,0,103,97,109,109,97,95,99,111,114,114,101,99,116,105,111,110,0,116,114,105,112,108,101,95,98,117,102,102,101,114,105,110,103,95,101,110,97,98,108,101,0,105,110,102,111,95,109,115,103,95,101,110,97,98,108,101,0,115,111,102,116,95,102,105,108,116,101,114,95,101,110,97,98,108,101,0,102,108,105,99,107,101,114,95,102,105,108,116,101,114,95,101,110,97,98,108,101,0,102,108,105,99,107,101,114,95,102,105,108,116,101,114,95,105,110,100,101,120,0,115,111,102,116,95,102,105,108,116,101,114,95,105,110,100,101,120,0,99,117,114,114,101,110,116,95,114,101,115,111,108,117,116,105,111,110,95,105,100,0,115,111,117,110,100,95,109,111,100,101,0,115,116,97,116,101,95,115,108,111,116,0,99,117,115,116,111,109,95,98,103,109,95,101,110,97,98,108,101,0,105,110,112,117,116,95,100,112,97,100,95,101,109,117,108,97,116,105,111,110,95,112,37,117,0,105,110,112,117,116,95,100,101,118,105,99,101,95,112,37,117,0,46,47,103,101,110,101,114,97,108,46,104,0,88,68,71,95,67,79,78,70,73,71,95,72,79,77,69,0,72,79,77,69,0,37,115,47,114,101,116,114,111,97,114,99,104,47,114,101,116,114,111,97,114,99,104,46,99,102,103,0,37,115,47,46,99,111,110,102,105,103,47,114,101,116,114,111,97,114,99,104,47,114,101,116,114,111,97,114,99,104,46,99,102,103,0,82,101,116,114,111,65,114,99,104,58,32,76,111,111,107,105,110,103,32,102,111,114,32,99,111,110,102,105,103,32,105,110,58,32,34,37,115,34,46,10,0,37,115,47,46,114,101,116,114,111,97,114,99,104,46,99,102,103,0,47,101,116,99,0,114,101,116,114,111,97,114,99,104,46,99,102,103,0,82,101,116,114,111,65,114,99,104,58,32,76,111,97,100,105,110,103,32,99,111,110,102,105,103,32,102,114,111,109,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,76,111,97,100,105,110,103,32,100,101,102,97,117,108,116,32,99,111,110,102,105,103,46,10,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,100,101,102,97,117,108,116,32,99,111,110,102,105,103,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,102,105,110,100,32,99,111,110,102,105,103,32,97,116,32,112,97,116,104,58,32,34,37,115,34,10,0,112,97,114,115,101,95,99,111,110,102,105,103,95,102,105,108,101,40,41,0,82,101,116,114,111,80,97,100,32,66,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,89,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,83,101,108,101,99,116,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,83,116,97,114,116,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,68,45,80,97,100,32,85,112,0,82,101,116,114,111,80,97,100,32,68,45,80,97,100,32,68,111,119,110,0,82,101,116,114,111,80,97,100,32,68,45,80,97,100,32,76,101,102,116,0,82,101,116,114,111,80,97,100,32,68,45,80,97,100,32,82,105,103,104,116,0,82,101,116,114,111,80,97,100,32,65,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,88,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,76,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,82,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,76,50,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,82,50,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,76,51,32,66,117,116,116,111,110,0,82,101,116,114,111,80,97,100,32,82,51,32,66,117,116,116,111,110,0,84,117,114,98,111,32,69,110,97,98,108,101,0,76,101,102,116,32,65,110,97,108,111,103,32,88,32,43,0,76,101,102,116,32,65,110,97,108,111,103,32,88,32,45,0,76,101,102,116,32,65,110,97,108,111,103,32,89,32,43,0,76,101,102,116,32,65,110,97,108,111,103,32,89,32,45,0,82,105,103,104,116,32,65,110,97,108,111,103,32,88,32,43,0,82,105,103,104,116,32,65,110,97,108,111,103,32,88,32,45,0,82,105,103,104,116,32,65,110,97,108,111,103,32,89,32,43,0,82,105,103,104,116,32,65,110,97,108,111,103,32,89,32,45,0,70,97,115,116,32,70,111,114,119,97,114,100,0,70,97,115,116,32,70,111,114,119,97,114,100,32,72,111,108,100,0,70,117,108,108,115,99,114,101,101,110,32,84,111,103,103,108,101,0,81,117,105,116,32,75,101,121,0,83,116,97,116,101,32,83,108,111,116,32,80,108,117,115,0,83,116,97,116,101,32,83,108,111,116,32,77,105,110,117,115,0,77,111,118,105,101,32,82,101,99,111,114,100,32,84,111,103,103,108,101,0,80,97,117,115,101,32,84,111,103,103,108,101,0,70,114,97,109,101,32,65,100,118,97,110,99,101,0,82,101,115,101,116,0,78,101,120,116,32,83,104,97,100,101,114,0,80,114,101,118,105,111,117,115,32,83,104,97,100,101,114,0,67,104,101,97,116,32,73,110,100,101,120,32,80,108,117,115,0,67,104,101,97,116,32,73,110,100,101,120,32,77,105,110,117,115,0,67,104,101,97,116,32,84,111,103,103,108,101,0,83,99,114,101,101,110,115,104,111,116,0,68,83,80,32,67,111,110,102,105,103,0,78,101,116,112,108,97,121,32,70,108,105,112,32,80,108,97,121,101,114,115,0,83,108,111,119,109,111,116,105,111,110,0,69,110,97,98,108,101,32,72,111,116,107,101,121,0,86,111,108,117,109,101,32,85,112,0,86,111,108,117,109,101,32,68,111,119,110,0,78,101,120,116,32,79,118,101,114,108,97,121,0,68,105,115,107,32,69,106,101,99,116,32,84,111,103,103,108,101,0,68,105,115,107,32,83,119,97,112,32,78,101,120,116,0,77,101,110,117,32,116,111,103,103,108,101,0,37,48,50,120,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,71,69,84,95,79,86,69,82,83,67,65,78,58,32,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,71,69,84,95,67,65,78,95,68,85,80,69,58,32,116,114,117,101,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,71,69,84,95,86,65,82,73,65,66,76,69,32,37,115,58,10,0,82,101,116,114,111,65,114,99,104,58,32,9,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,86,65,82,73,65,66,76,69,83,46,10,0,46,114,101,116,114,111,97,114,99,104,45,99,111,114,101,45,111,112,116,105,111,110,115,46,99,102,103,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,77,69,83,83,65,71,69,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,82,79,84,65,84,73,79,78,58,32,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,72,85,84,68,79,87,78,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,80,69,82,70,79,82,77,65,78,67,69,95,76,69,86,69,76,58,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,89,83,84,69,77,95,68,73,82,69,67,84,79,82,89,58,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,80,73,88,69,76,95,70,79,82,77,65,84,58,32,48,82,71,66,49,53,53,53,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,80,73,88,69,76,95,70,79,82,77,65,84,58,32,82,71,66,53,54,53,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,80,73,88,69,76,95,70,79,82,77,65,84,58,32,88,82,71,66,56,56,56,56,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,73,78,80,85,84,95,68,69,83,67,82,73,80,84,79,82,83,58,10,0,82,101,116,114,111,65,114,99,104,58,32,9,82,101,116,114,111,80,97,100,44,32,80,108,97,121,101,114,32,37,117,44,32,66,117,116,116,111,110,32,34,37,115,34,32,61,62,32,34,37,115,34,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,75,69,89,66,79,65,82,68,95,67,65,76,76,66,65,67,75,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,68,73,83,75,95,67,79,78,84,82,79,76,95,73,78,84,69,82,70,65,67,69,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,72,87,95,82,69,78,68,69,82,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,101,113,117,101,115,116,105,110,103,32,110,111,32,72,87,32,99,111,110,116,101,120,116,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,101,113,117,101,115,116,105,110,103,32,79,112,101,110,71,76,69,83,50,32,99,111,110,116,101,120,116,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,82,101,113,117,101,115,116,105,110,103,32,79,112,101,110,71,76,32,99,111,110,116,101,120,116,44,32,98,117,116,32,82,101,116,114,111,65,114,99,104,32,105,115,32,99,111,109,112,105,108,101,100,32,97,103,97,105,110,115,116,32,79,112,101,110,71,76,69,83,50,46,32,67,97,110,110,111,116,32,117,115,101,32,72,87,32,99,111,110,116,101,120,116,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,101,113,117,101,115,116,105,110,103,32,117,110,107,110,111,119,110,32,99,111,110,116,101,120,116,46,10,0,121,101,115,0,110,111,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,83,85,80,80,79,82,84,95,78,79,95,71,65,77,69,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,83,69,84,95,70,82,65,77,69,95,84,73,77,69,95,67,65,76,76,66,65,67,75,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,40,80,114,105,118,97,116,101,41,32,83,69,84,95,76,73,66,82,69,84,82,79,95,80,65,84,72,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,40,80,114,105,118,97,116,101,41,32,69,88,69,67,95,69,83,67,65,80,69,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,40,80,114,105,118,97,116,101,41,32,69,88,69,67,46,10,0,82,101,116,114,111,65,114,99,104,58,32,69,110,118,105,114,111,110,32,85,78,83,85,80,80,79,82,84,69,68,32,40,35,37,117,41,46,10,0,66,32,40,98,111,116,116,111,109,41,0,89,32,40,108,101,102,116,41,0,65,32,40,114,105,103,104,116,41,0,88,32,40,117,112,41,0,114,101,119,105,110,100,46,99,0,82,101,116,114,111,65,114,99,104,58,32,82,101,97,100,106,117,115,116,101,100,32,114,101,119,105,110,100,32,98,117,102,102,101,114,32,115,105,122,101,32,116,111,32,37,117,32,77,105,66,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,111,112,101,110,32,66,83,86,32,34,37,115,34,32,102,111,114,32,114,101,99,111,114,100,105,110,103,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,111,112,101,110,32,66,83,86,32,102,105,108,101,32,34,37,115,34,32,102,111,114,32,112,108,97,121,98,97,99,107,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,114,101,97,100,32,109,111,118,105,101,32,104,101,97,100,101,114,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,77,111,118,105,101,32,102,105,108,101,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,66,83,86,49,32,102,105,108,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,67,82,67,51,50,32,99,104,101,99,107,115,117,109,32,109,105,115,109,97,116,99,104,32,98,101,116,119,101,101,110,32,82,79,77,32,102,105,108,101,32,97,110,100,32,115,97,118,101,100,32,82,79,77,32,99,104,101,99,107,115,117,109,32,105,110,32,114,101,112,108,97,121,32,102,105,108,101,32,104,101,97,100,101,114,59,32,114,101,112,108,97,121,32,104,105,103,104,108,121,32,108,105,107,101,108,121,32,116,111,32,100,101,115,121,110,99,32,111,110,32,112,108,97,121,98,97,99,107,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,114,101,97,100,32,115,116,97,116,101,32,102,114,111,109,32,109,111,118,105,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,77,111,118,105,101,32,102,111,114,109,97,116,32,115,101,101,109,115,32,116,111,32,104,97,118,101,32,97,32,100,105,102,102,101,114,101,110,116,32,115,101,114,105,97,108,105,122,101,114,32,118,101,114,115,105,111,110,46,32,87,105,108,108,32,109,111,115,116,32,108,105,107,101,108,121,32,102,97,105,108,46,10,0,78,111,114,109,97,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,48,32,100,101,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,56,48,32,100,101,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,55,48,32,100,101,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,32,124,124,32,70,80,83,58,32,37,54,46,49,102,32,124,124,32,70,114,97,109,101,115,58,32,37,100,0,37,117,58,37,117,32,40,49,58,49,32,80,65,82,41,0,37,115,95,37,115,0,105,110,112,117,116,0,37,115,95,37,115,95,98,116,110,0,110,117,108,0,37,115,95,37,115,95,97,120,105,115,0,66,32,98,117,116,116,111,110,32,40,100,111,119,110,41,0,89,32,98,117,116,116,111,110,32,40,108,101,102,116,41,0,83,101,108,101,99,116,32,98,117,116,116,111,110,0,83,116,97,114,116,32,98,117,116,116,111,110,0,85,112,32,68,45,112,97,100,0,68,111,119,110,32,68,45,112,97,100,0,76,101,102,116,32,68,45,112,97,100,0,82,105,103,104,116,32,68,45,112,97,100,0,65,32,98,117,116,116,111,110,32,40,114,105,103,104,116,41,0,88,32,98,117,116,116,111,110,32,40,116,111,112,41,0,76,32,98,117,116,116,111,110,32,40,108,101,102,116,32,115,104,111,117,108,100,101,114,41,0,82,32,98,117,116,116,111,110,32,40,114,105,103,104,116,32,115,104,111,117,108,100,101,114,41,0,76,50,32,98,117,116,116,111,110,32,40,108,101,102,116,32,115,104,111,117,108,100,101,114,32,35,50,41,0,82,50,32,98,117,116,116,111,110,32,40,114,105,103,104,116,32,115,104,111,117,108,100,101,114,32,35,50,41,0,76,51,32,98,117,116,116,111,110,32,40,108,101,102,116,32,97,110,97,108,111,103,32,98,117,116,116,111,110,41,0,82,51,32,98,117,116,116,111,110,32,40,114,105,103,104,116,32,97,110,97,108,111,103,32,98,117,116,116,111,110,41,0,84,117,114,98,111,32,101,110,97,98,108,101,0,76,101,102,116,32,97,110,97,108,111,103,32,88,43,32,40,114,105,103,104,116,41,0,76,101,102,116,32,97,110,97,108,111,103,32,88,45,32,40,108,101,102,116,41,0,76,101,102,116,32,97,110,97,108,111,103,32,89,43,32,40,100,111,119,110,41,0,76,101,102,116,32,97,110,97,108,111,103,32,89,45,32,40,117,112,41,0,82,105,103,104,116,32,97,110,97,108,111,103,32,88,43,32,40,114,105,103,104,116,41,0,82,105,103,104,116,32,97,110,97,108,111,103,32,88,45,32,40,108,101,102,116,41,0,82,105,103,104,116,32,97,110,97,108,111,103,32,89,43,32,40,100,111,119,110,41,0,82,105,103,104,116,32,97,110,97,108,111,103,32,89,45,32,40,117,112,41,0,70,97,115,116,32,102,111,114,119,97,114,100,32,116,111,103,103,108,101,0,70,97,115,116,32,102,111,114,119,97,114,100,32,104,111,108,100,0,76,111,97,100,32,115,116,97,116,101,0,83,97,118,101,32,115,116,97,116,101,0,70,117,108,108,115,99,114,101,101,110,32,116,111,103,103,108,101,0,83,97,118,101,115,116,97,116,101,32,115,108,111,116,32,43,0,83,97,118,101,115,116,97,116,101,32,115,108,111,116,32,45,0,77,111,118,105,101,32,114,101,99,111,114,100,32,116,111,103,103,108,101,0,80,97,117,115,101,32,116,111,103,103,108,101,0,70,114,97,109,101,97,100,118,97,110,99,101,0,82,101,115,101,116,32,103,97,109,101,0,78,101,120,116,32,115,104,97,100,101,114,0,80,114,101,118,105,111,117,115,32,115,104,97,100,101,114,0,67,104,101,97,116,32,105,110,100,101,120,32,43,0,67,104,101,97,116,32,105,110,100,101,120,32,45,0,67,104,101,97,116,32,116,111,103,103,108,101,0,84,97,107,101,32,115,99,114,101,101,110,115,104,111,116,0,68,83,80,32,99,111,110,102,105,103,0,65,117,100,105,111,32,109,117,116,101,32,116,111,103,103,108,101,0,78,101,116,112,108,97,121,32,102,108,105,112,32,112,108,97,121,101,114,115,0,83,108,111,119,32,109,111,116,105,111,110,0,69,110,97,98,108,101,32,104,111,116,107,101,121,115,0,86,111,108,117,109,101,32,43,0,86,111,108,117,109,101,32,45,0,79,118,101,114,108,97,121,32,110,101,120,116,0,68,105,115,107,32,101,106,101,99,116,32,116,111,103,103,108,101,0,68,105,115,107,32,110,101,120,116,0,71,114,97,98,32,109,111,117,115,101,32,116,111,103,103,108,101,0,82,71,85,73,32,109,101,110,117,32,116,111,103,103,108,101,0,101,110,116,101,114,0,107,112,95,101,110,116,101,114,0,116,97,98,0,105,110,115,101,114,116,0,100,101,108,0,101,110,100,0,104,111,109,101,0,114,115,104,105,102,116,0,115,104,105,102,116,0,99,116,114,108,0,97,108,116,0,115,112,97,99,101,0,101,115,99,97,112,101,0,97,100,100,0,115,117,98,116,114,97,99,116,0,107,112,95,112,108,117,115,0,107,112,95,109,105,110,117,115,0,102,49,0,102,50,0,102,51,0,102,52,0,102,53,0,102,54,0,102,55,0,102,56,0,102,57,0,102,49,48,0,102,49,49,0,102,49,50,0,110,117,109,48,0,110,117,109,49,0,110,117,109,50,0,110,117,109,51,0,110,117,109,52,0,110,117,109,53,0,110,117,109,54,0,110,117,109,55,0,110,117,109,56,0,110,117,109,57,0,112,97,103,101,117,112,0,112,97,103,101,100,111,119,110,0,107,101,121,112,97,100,48,0,107,101,121,112,97,100,49,0,107,101,121,112,97,100,50,0,107,101,121,112,97,100,51,0,107,101,121,112,97,100,52,0,107,101,121,112,97,100,53,0,107,101,121,112,97,100,54,0,107,101,121,112,97,100,55,0,107,101,121,112,97,100,56,0,107,101,121,112,97,100,57,0,112,101,114,105,111,100,0,99,97,112,115,108,111,99,107,0,110,117,109,108,111,99,107,0,98,97,99,107,115,112,97,99,101,0,109,117,108,116,105,112,108,121,0,100,105,118,105,100,101,0,112,114,105,110,116,95,115,99,114,101,101,110,0,115,99,114,111,108,108,95,108,111,99,107,0,116,105,108,100,101,0,98,97,99,107,113,117,111,116,101,0,112,97,117,115,101,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,111,117,110,100,32,105,110,118,97,108,105,100,32,104,97,116,32,105,110,32,99,111,110,102,105,103,33,10,0,105,110,112,117,116,95,112,108,97,121,101,114,49,0,105,110,112,117,116,95,112,108,97,121,101,114,50,0,105,110,112,117,116,95,112,108,97,121,101,114,51,0,105,110,112,117,116,95,112,108,97,121,101,114,52,0,105,110,112,117,116,95,112,108,97,121,101,114,53,0,105,110,112,117,116,95,112,108,97,121,101,114,54,0,105,110,112,117,116,95,112,108,97,121,101,114,55,0,105,110,112,117,116,95,112,108,97,121,101,114,56,0,0,114,119,101,98,105,110,112,117,116,0,59,32,0,82,101,116,114,111,65,114,99,104,58,32,67,111,114,101,32,111,112,116,105,111,110,58,10,0,82,101,116,114,111,65,114,99,104,58,32,9,68,101,115,99,114,105,112,116,105,111,110,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,9,75,101,121,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,9,67,117,114,114,101,110,116,32,118,97,108,117,101,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,9,80,111,115,115,105,98,108,101,32,118,97,108,117,101,115,58,10,0,82,101,116,114,111,65,114,99,104,58,32,9,9,37,115,10,0,99,111,109,112,97,116,47,99,111,109,112,97,116,46,99,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,85,115,105,110,103,32,82,88,77,76,32,97,115,32,100,114,111,112,32,105,110,32,102,111,114,32,108,105,98,120,109,108,50,46,32,66,101,104,97,118,105,111,114,32,109,105,103,104,116,32,98,101,32,118,101,114,121,32,98,117,103,103,121,46,10,0,32,10,9,12,11,13,0,61,34,0,47,62,0,60,47,37,115,62,0,60,33,91,67,68,65,84,65,91,0,93,93,62,0,60,47,0,60,33,45,45,0,45,45,62,0,60,63,120,109,108,0,63,62,10,0,98,109,112,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,102,105,108,101,32,34,37,115,34,32,102,111,114,32,115,99,114,101,101,110,115,104,111,116,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,105,109,97,103,101,32,104,101,97,100,101,114,46,10,0,100,97,116,97,98,97,115,101,0,99,97,114,116,114,105,100,103,101,0,115,104,97,50,53,54,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,103,114,97,98,32,99,104,101,97,116,115,46,32,84,104,105,115,32,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,68,105,100,32,110,111,116,32,102,105,110,100,32,97,110,121,32,99,104,101,97,116,115,32,105,110,32,88,77,76,32,102,105,108,101,58,32,37,115,10,0,100,101,115,99,114,105,112,116,105,111,110,0,99,111,100,101,0,43,0,67,104,101,97,116,58,32,35,37,117,32,91,37,115,93,58,32,37,115,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,115,97,118,101,32,88,77,76,32,99,104,101,97,116,32,115,101,116,116,105,110,103,115,46,10,0,37,117,59,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,88,77,76,32,99,104,101,97,116,32,115,101,116,116,105,110,103,115,32,116,111,32,34,37,115,34,46,32,67,104,101,99,107,32,112,101,114,109,105,115,115,105,111,110,115,46,10,0,110,97,109,101,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,99,104,101,97,116,32,102,111,114,32,103,97,109,101,58,32,34,37,115,34,10,0,99,104,101,97,116,0,114,119,101,98,97,117,100,105,111,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,79,118,101,114,108,97,121,32,105,110,116,101,114,102,97,99,101,32,105,115,32,110,111,116,32,112,114,101,115,101,110,116,32,105,110,32,118,105,100,101,111,32,100,114,105,118,101,114,46,10,0,98,0,115,101,108,101,99,116,0,115,116,97,114,116,0,117,112,0,100,111,119,110,0,108,101,102,116,0,114,105,103,104,116,0,97,0,108,0,108,50,0,114,50,0,108,51,0,114,51,0,116,117,114,98,111,0,108,95,120,95,112,108,117,115,0,108,95,120,95,109,105,110,117,115,0,108,95,121,95,112,108,117,115,0,108,95,121,95,109,105,110,117,115,0,114,95,120,95,112,108,117,115,0,114,95,120,95,109,105,110,117,115,0,114,95,121,95,112,108,117,115,0,114,95,121,95,109,105,110,117,115,0,116,111,103,103,108,101,95,102,97,115,116,95,102,111,114,119,97,114,100,0,104,111,108,100,95,102,97,115,116,95,102,111,114,119,97,114,100,0,108,111,97,100,95,115,116,97,116,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+747760);
/* memory initializer */ allocate([115,97,118,101,95,115,116,97,116,101,0,116,111,103,103,108,101,95,102,117,108,108,115,99,114,101,101,110,0,101,120,105,116,95,101,109,117,108,97,116,111,114,0,115,116,97,116,101,95,115,108,111,116,95,105,110,99,114,101,97,115,101,0,115,116,97,116,101,95,115,108,111,116,95,100,101,99,114,101,97,115,101,0,114,101,119,105,110,100,0,109,111,118,105,101,95,114,101,99,111,114,100,95,116,111,103,103,108,101,0,112,97,117,115,101,95,116,111,103,103,108,101,0,102,114,97,109,101,95,97,100,118,97,110,99,101,0,114,101,115,101,116,0,115,104,97,100,101,114,95,110,101,120,116,0,115,104,97,100,101,114,95,112,114,101,118,0,99,104,101,97,116,95,105,110,100,101,120,95,112,108,117,115,0,99,104,101,97,116,95,105,110,100,101,120,95,109,105,110,117,115,0,99,104,101,97,116,95,116,111,103,103,108,101,0,115,99,114,101,101,110,115,104,111,116,0,100,115,112,95,99,111,110,102,105,103,0,97,117,100,105,111,95,109,117,116,101,0,110,101,116,112,108,97,121,95,102,108,105,112,95,112,108,97,121,101,114,115,0,115,108,111,119,109,111,116,105,111,110,0,101,110,97,98,108,101,95,104,111,116,107,101,121,0,118,111,108,117,109,101,95,117,112,0,118,111,108,117,109,101,95,100,111,119,110,0,111,118,101,114,108,97,121,95,110,101,120,116,0,100,105,115,107,95,101,106,101,99,116,95,116,111,103,103,108,101,0,100,105,115,107,95,110,101,120,116,0,103,114,97,98,95,109,111,117,115,101,95,116,111,103,103,108,101,0,109,101,110,117,95,116,111,103,103,108,101,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,67,111,117,108,100,110,39,116,32,102,105,110,100,32,111,118,101,114,108,97,121,32,99,97,108,108,101,100,58,32,34,37,115,34,46,10,0,111,118,101,114,108,97,121,37,117,95,100,101,115,99,37,117,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,68,105,100,110,39,116,32,102,105,110,100,32,107,101,121,58,32,37,115,46,10,0,44,32,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,70,97,105,108,101,100,32,116,111,32,115,112,108,105,116,32,111,118,101,114,108,97,121,32,100,101,115,99,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,79,118,101,114,108,97,121,32,100,101,115,99,32,105,115,32,105,110,118,97,108,105,100,46,32,82,101,113,117,105,114,101,115,32,97,116,32,108,101,97,115,116,32,54,32,116,111,107,101,110,115,46,10,0,97,110,97,108,111,103,95,108,101,102,116,0,97,110,97,108,111,103,95,114,105,103,104,116,0,111,118,101,114,108,97,121,37,117,95,100,101,115,99,37,117,95,110,101,120,116,95,116,97,114,103,101,116,0,114,97,100,105,97,108,0,114,101,99,116,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,72,105,116,98,111,120,32,116,121,112,101,32,40,37,115,41,32,105,115,32,105,110,118,97,108,105,100,46,32,85,115,101,32,34,114,97,100,105,97,108,34,32,111,114,32,34,114,101,99,116,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,65,110,97,108,111,103,32,104,105,116,98,111,120,32,116,121,112,101,32,109,117,115,116,32,98,101,32,34,114,97,100,105,97,108,34,46,10,0,111,118,101,114,108,97,121,37,117,95,100,101,115,99,37,117,95,115,97,116,117,114,97,116,101,95,112,99,116,0,111,118,101,114,108,97,121,37,117,95,111,118,101,114,108,97,121,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,67,111,110,102,105,103,32,107,101,121,58,32,37,115,32,105,115,32,110,111,116,32,115,101,116,46,10,0,111,118,101,114,108,97,121,37,117,95,110,97,109,101,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,105,109,97,103,101,58,32,37,115,46,10,0,111,118,101,114,108,97,121,37,117,95,114,101,99,116,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,70,97,105,108,101,100,32,116,111,32,115,112,108,105,116,32,114,101,99,116,32,34,37,115,34,32,105,110,116,111,32,97,116,32,108,101,97,115,116,32,102,111,117,114,32,116,111,107,101,110,115,46,10,0,111,118,101,114,108,97,121,37,117,95,102,117,108,108,95,115,99,114,101,101,110,0,111,118,101,114,108,97,121,37,117,95,100,101,115,99,115,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,110,117,109,98,101,114,32,111,102,32,100,101,115,99,115,32,102,114,111,109,32,99,111,110,102,105,103,32,107,101,121,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,100,101,115,99,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,111,118,101,114,108,97,121,32,100,101,115,99,115,32,102,111,114,32,111,118,101,114,108,97,121,32,35,37,117,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,99,111,110,102,105,103,32,102,105,108,101,58,32,37,115,46,10,0,111,118,101,114,108,97,121,115,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,111,118,101,114,108,97,121,115,32,118,97,114,105,97,98,108,101,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,99,111,110,102,105,103,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,111,118,101,114,108,97,121,32,35,37,117,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,79,118,101,114,108,97,121,93,58,32,70,97,105,108,101,100,32,116,111,32,114,101,115,111,108,118,101,32,110,101,120,116,32,116,97,114,103,101,116,115,46,10,0,79,117,116,32,88,32,61,32,37,100,32,61,62,32,73,110,32,88,32,61,32,37,100,10,0,79,117,116,32,89,32,61,32,37,100,32,61,62,32,73,110,32,89,32,61,32,37,100,10,0,0,115,104,97,100,101,114,115,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,102,105,110,100,32,34,115,104,97,100,101,114,115,34,32,112,97,114,97,109,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,78,101,101,100,32,116,111,32,100,101,102,105,110,101,32,97,116,32,108,101,97,115,116,32,49,32,115,104,97,100,101,114,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,108,105,98,120,109,108,50,32,99,111,110,116,101,120,116,46,10,0,82,101,116,114,111,65,114,99,104,58,32,76,111,97,100,105,110,103,32,88,77,76,32,115,104,97,100,101,114,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,112,97,114,115,101,32,88,77,76,32,102,105,108,101,58,32,37,115,10,0,115,104,97,100,101,114,0,108,97,110,103,117,97,103,101,0,71,76,83,76,0,115,116,121,108,101,0,71,76,69,83,50,0,112,114,101,102,105,120,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,85,115,105,110,103,32,117,110,105,102,111,114,109,32,97,110,100,32,97,116,116,114,105,98,32,112,114,101,102,105,120,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,83,104,97,100,101,114,32,114,101,112,111,114,116,115,32,97,32,71,76,69,83,50,32,115,116,121,108,101,32,115,104,97,100,101,114,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,91,71,76,93,58,32,76,101,103,97,99,121,32,115,104,97,100,101,114,115,32,97,114,101,32,100,101,112,114,101,99,97,116,101,100,46,10,0,118,101,114,116,101,120,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,104,97,118,101,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,118,101,114,116,101,120,32,115,104,97,100,101,114,32,105,110,32,97,32,112,114,111,103,114,97,109,46,10,0,115,114,99,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,83,104,97,100,101,114,32,115,111,117,114,99,101,32,102,105,108,101,32,119,97,115,32,112,114,111,118,105,100,101,100,44,32,98,117,116,32,102,97,105,108,101,100,32,116,111,32,114,101,97,100,46,10,0,102,114,97,103,109,101,110,116,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,77,111,100,101,114,110,32,71,76,83,76,32,119,97,115,32,99,104,111,115,101,110,32,97,110,100,32,118,101,114,116,101,120,32,115,104,97,100,101,114,32,119,97,115,32,110,111,116,32,112,114,111,118,105,100,101,100,46,32,84,104,105,115,32,105,115,32,97,110,32,101,114,114,111,114,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,88,77,76,32,115,104,97,100,101,114,32,97,116,116,114,105,98,117,116,101,115,32,100,111,32,110,111,116,32,99,111,109,112,108,121,32,119,105,116,104,32,115,112,101,99,105,102,105,99,97,116,105,111,110,115,46,10,0,116,101,120,116,117,114,101,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,84,101,120,116,117,114,101,32,105,109,97,103,101,32,102,97,105,108,101,100,32,116,111,32,108,111,97,100,46,10,0,105,109,112,111,114,116,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,109,112,111,114,116,32,118,97,108,117,101,32,105,115,32,105,110,118,97,108,105,100,46,10,0,115,99,114,105,112,116,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,83,99,114,105,112,116,32,105,115,32,105,110,118,97,108,105,100,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,102,105,110,100,32,118,101,114,116,101,120,32,115,104,97,100,101,114,32,110,111,114,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,32,105,110,32,88,77,76,32,102,105,108,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,88,77,76,32,115,104,97,100,101,114,32,46,46,46,10,0,115,104,97,100,101,114,37,117,0,102,105,108,116,101,114,95,108,105,110,101,97,114,37,117,0,119,114,97,112,95,109,111,100,101,37,117,0,102,114,97,109,101,95,99,111,117,110,116,95,109,111,100,37,117,0,59,0,116,101,120,116,117,114,101,115,0,37,115,95,108,105,110,101,97,114,0,37,115,95,119,114,97,112,95,109,111,100,101,0,105,109,112,111,114,116,95,115,99,114,105,112,116,0,105,109,112,111,114,116,95,115,99,114,105,112,116,95,99,108,97,115,115,0,105,109,112,111,114,116,115,0,99,97,112,116,117,114,101,0,116,114,97,110,115,105,116,105,111,110,0,116,114,97,110,115,105,116,105,111,110,95,99,111,117,110,116,0,99,97,112,116,117,114,101,95,112,114,101,118,105,111,117,115,0,116,114,97,110,115,105,116,105,111,110,95,112,114,101,118,105,111,117,115,0,112,121,116,104,111,110,0,63,0,115,111,117,114,99,101,0,118,105,101,119,112,111,114,116,0,97,98,115,111,108,117,116,101,0,115,99,97,108,101,95,116,121,112,101,95,37,115,37,117,0,115,99,97,108,101,95,37,115,37,117,0,99,108,97,109,112,95,116,111,95,98,111,114,100,101,114,0,99,108,97,109,112,95,116,111,95,101,100,103,101,0,114,101,112,101,97,116,0,109,105,114,114,111,114,101,100,95,114,101,112,101,97,116,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,73,110,118,97,108,105,100,32,119,114,97,112,112,105,110,103,32,116,121,112,101,32,37,115,46,32,86,97,108,105,100,32,111,110,101,115,32,97,114,101,58,32,99,108,97,109,112,95,116,111,95,98,111,114,100,101,114,32,40,100,101,102,97,117,108,116,41,44,32,99,108,97,109,112,95,116,111,95,101,100,103,101,44,32,114,101,112,101,97,116,32,97,110,100,32,109,105,114,114,111,114,101,100,95,114,101,112,101,97,116,46,32,70,97,108,108,105,110,103,32,98,97,99,107,32,116,111,32,100,101,102,97,117,108,116,46,10,0,37,115,95,115,101,109,97,110,116,105,99,0,37,115,95,119,114,97,109,0,37,115,95,105,110,112,117,116,95,115,108,111,116,0,37,115,95,109,97,115,107,0,37,115,95,101,113,117,97,108,0,102,108,111,97,116,95,102,114,97,109,101,98,117,102,102,101,114,37,117,0,120,0,121,0,63,63,63,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,83,99,114,105,112,116,32,97,108,114,101,97,100,121,32,105,109,112,111,114,116,101,100,46,10,0,99,108,97,115,115,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,83,99,114,105,112,116,32,108,97,110,103,117,97,103,101,32,105,115,32,110,111,116,32,80,121,116,104,111,110,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,102,105,110,100,32,80,121,116,104,111,110,32,115,99,114,105,112,116,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,84,111,111,32,109,97,110,121,32,105,109,112,111,114,116,32,118,97,114,105,97,98,108,101,115,32,46,46,46,10,0,105,100,0,115,101,109,97,110,116,105,99,0,119,114,97,109,0,105,110,112,117,116,95,115,108,111,116,0,109,97,115,107,0,101,113,117,97,108,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,78,111,32,115,101,109,97,110,116,105,99,32,111,114,32,73,68,32,102,111,114,32,105,109,112,111,114,116,32,118,97,108,117,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,110,118,97,108,105,100,32,115,101,109,97,110,116,105,99,32,102,111,114,32,105,109,112,111,114,116,32,118,97,108,117,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,110,118,97,108,105,100,32,105,110,112,117,116,32,115,108,111,116,32,102,111,114,32,105,109,112,111,114,116,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,78,111,32,82,65,77,32,97,100,100,114,101,115,115,32,115,112,101,99,105,102,105,99,101,100,32,102,111,114,32,105,109,112,111,114,116,32,118,97,108,117,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,84,111,111,32,109,97,110,121,32,116,101,120,116,117,114,101,32,105,109,97,103,101,115,46,32,73,103,110,111,114,105,110,103,32,46,46,46,10,0,102,105,108,101,0,102,105,108,116,101,114,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,73,68,32,105,110,32,116,101,120,116,117,114,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,102,105,108,101,110,97,109,101,32,105,110,32,116,101,120,116,117,114,101,46,10,0,108,105,110,101,97,114,0,110,101,97,114,101,115,116,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,110,118,97,108,105,100,32,76,85,84,32,102,105,108,116,101,114,32,116,121,112,101,46,10,0,82,101,116,114,111,65,114,99,104,58,32,88,77,76,58,32,83,104,97,100,101,114,32,102,111,114,99,101,115,32,71,76,95,78,69,65,82,69,83,84,46,10,0,82,101,116,114,111,65,114,99,104,58,32,88,77,76,58,32,83,104,97,100,101,114,32,102,111,114,99,101,115,32,71,76,95,76,73,78,69,65,82,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,88,77,76,58,32,73,110,118,97,108,105,100,32,112,114,111,112,101,114,116,121,32,102,111,114,32,102,105,108,116,101,114,46,10,0,115,99,97,108,101,0,115,99,97,108,101,95,120,0,115,99,97,108,101,95,121,0,115,105,122,101,0,115,105,122,101,95,120,0,115,105,122,101,95,121,0,111,117,116,115,99,97,108,101,0,111,117,116,115,99,97,108,101,95,120,0,111,117,116,115,99,97,108,101,95,121,0,102,114,97,109,101,95,99,111,117,110,116,95,109,111,100,0,102,108,111,97,116,95,102,114,97,109,101,98,117,102,102,101,114,0,116,114,117,101,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,102,114,97,109,101,32,99,111,117,110,116,32,109,111,100,32,97,116,116,114,58,32,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,115,99,97,108,101,32,97,116,116,114,58,32,37,46,49,102,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,115,99,97,108,101,95,120,32,97,116,116,114,58,32,37,46,49,102,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,115,99,97,108,101,95,121,32,97,116,116,114,58,32,37,46,49,102,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,115,105,122,101,32,97,116,116,114,58,32,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,115,105,122,101,95,120,32,97,116,116,114,58,32,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,115,105,122,101,95,121,32,97,116,116,114,58,32,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,111,117,116,115,99,97,108,101,32,97,116,116,114,58,32,37,46,49,102,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,111,117,116,115,99,97,108,101,95,120,32,97,116,116,114,58,32,37,46,49,102,10,0,82,101,116,114,111,65,114,99,104,58,32,71,111,116,32,111,117,116,115,99,97,108,101,95,121,32,97,116,116,114,58,32,37,46,49,102,10,0,82,101,116,114,111,65,114,99,104,58,32,76,111,97,100,105,110,103,32,101,120,116,101,114,110,97,108,32,115,111,117,114,99,101,32,102,114,111,109,32,34,37,115,34,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,78,111,32,115,101,109,97,110,116,105,99,32,102,111,114,32,105,109,112,111,114,116,32,118,97,114,105,97,98,108,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,110,118,97,108,105,100,32,115,101,109,97,110,116,105,99,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,78,111,32,97,100,100,114,101,115,115,32,97,115,115,105,103,110,101,100,32,116,111,32,115,101,109,97,110,116,105,99,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,97,110,110,111,116,32,102,105,110,100,32,112,97,116,104,32,116,111,32,116,101,120,116,117,114,101,32,34,37,115,34,32,46,46,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,110,39,116,32,112,97,114,115,101,32,115,104,97,100,101,114,32,115,111,117,114,99,101,32,40,37,115,41,46,10,0,115,99,97,108,101,95,116,121,112,101,37,117,0,115,99,97,108,101,95,116,121,112,101,95,120,37,117,0,115,99,97,108,101,95,116,121,112,101,95,121,37,117,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,73,110,118,97,108,105,100,32,97,116,116,114,105,98,117,116,101,46,10,0,115,99,97,108,101,37,117,0,115,99,97,108,101,95,120,37,117,0,115,99,97,108,101,95,121,37,117,0,82,101,116,114,111,65,114,99,104,58,32,85,115,105,110,103,32,102,111,110,116,32,114,101,110,100,101,114,105,110,103,32,98,97,99,107,101,110,100,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,114,101,110,100,101,114,105,110,103,32,98,97,99,107,101,110,100,58,32,37,115,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,16,66,8,32,0,0,74,41,0,0,0,0,0,0,168,175,212,87,0,0,128,248,226,232,35,0,0,0,136,170,168,138,0,0,192,164,100,82,116,0,0,132,16,0,0,0,0,0,136,8,33,132,32,8,0,130,32,132,16,34,2,0,0,144,234,42,1,0,0,0,16,242,9,1,0,0,0,0,0,0,32,2,0,0,0,240,1,0,0,0,0,0,0,0,32,0,0,16,34,68,136,16,1,0,192,197,88,99,116,0,0,128,24,66,8,113,0,0,192,69,200,68,248,0,0,192,69,200,96,116,0,0,0,49,149,62,66,0,0,224,135,240,96,116,0,0,128,137,240,98,116,0,0,224,67,132,8,17,0,0,192,197,232,98,116,0,0,192,197,232,33,50,0,0,0,0,2,0,1,0,0,0,0,2,0,17,0,0,0,64,54,24,4,0,0,0,128,15,62,0,0,0,0,4,131,77,0,0,0,192,69,136,8,32,0,0,192,135,214,122,240,0,0,128,16,165,92,140,0,0,224,197,248,98,124,0,0,192,197,16,66,116,0,0,224,164,24,99,58,0,0,224,135,240,66,248,0,0,224,135,240,66,8,0,0,192,197,144,99,244,0,0,32,198,248,99,140,0,0,192,17,66,8,113,0,0,128,67,8,33,124,0,0,32,166,50,74,138,0,0,32,132,16,66,248,0,0,32,198,189,107,141,0,0,96,206,90,107,206,0,0,192,197,24,99,116,0,0,224,197,248,66,8,0,0,192,197,24,99,246,0,0,224,197,248,98,140,0,0,192,197,224,96,116,0,0,224,19,66,8,33,0,0,32,198,24,99,116,0,0,32,198,168,20,33,0,0,32,214,90,149,82,0,0,32,70,69,84,140,0,0,32,198,232,8,33,0,0,224,67,68,68,248,0,0,78,8,33,132,16,14,0,33,8,65,8,66,16,0,14,33,132,16,66,14,0,128,168,8,0,0,0,0,0,0,0,0,0,31,0,128,32,0,0,0,0,0,0,0,7,125,244,0,0,33,132,23,99,124,0,0,0,0,31,66,240,0,0,16,66,31,99,244,0,0,0,0,23,127,240,0,0,92,136,39,132,16,0,0,0,0,23,99,244,208,1,33,132,23,99,140,0,0,128,0,67,8,33,0,0,0,1,134,16,66,232,0,66,8,169,140,146,0,0,134,16,66,8,33,0,0,0,128,85,107,173,0,0,0,128,23,99,140,0,0,0,0,23,99,116,0,0,0,128,23,99,124,33,0,0,0,31,99,244,16,2,0,128,54,67,8,0,0,0,0,31,28,124,0,0,64,8,39,132,224,0,0,0,128,24,99,244,0,0,0,128,24,149,34,0,0,0,128,88,171,82,0,0,0,128,168,136,138,0,0,0,128,24,99,244,208,1,0,128,143,136,248,0,0,136,16,34,8,33,8,0,132,16,66,8,33,4,0,130,16,130,8,33,2,0,0,0,96,50,0,0,0,0,0,0,0,0,0,0,63,132,16,66,8,225,3,0,0,0,0,0,0,0,0,0,0,0,64,4,0,152,16,71,8,33,68,0,0,0,0,0,80,10,0,0,0,0,0,168,0,0,132,124,66,8,33,4,0,132,124,242,9,33,4,0,68,1,0,0,0,0,0,0,72,69,84,2,0,0,138,0,31,62,124,0,0,0,0,68,4,65,0,0,192,166,148,83,178,0,0,0,0,0,0,0,0,0,138,128,143,136,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,32,0,0,0,0,0,8,17,0,0,0,0,0,74,81,0,0,0,0,0,148,42,0,0,0,0,0,0,0,192,24,0,0,0,0,0,0,62,0,0,0,0,0,0,62,0,0,0,0,0,64,21,0,0,0,0,128,175,149,2,0,0,138,0,31,28,124,0,0,0,0,130,32,34,0,0,0,0,155,114,178,0,0,0,0,0,0,0,0,0,138,128,143,136,248,0,0,10,196,24,29,33,0,0,0,0,0,0,0,0,0,128,0,66,8,33,0,0,0,32,174,20,71,0,0,152,16,79,68,248,0,0,0,4,47,165,15,0,0,32,70,71,62,33,0,0,132,16,2,8,33,4,0,152,16,23,163,35,100,0,64,1,0,0,0,0,0,192,135,86,90,240,0,0,4,49,197,0,0,0,0,0,0,34,147,36,0,0,0,0,224,33,132,0,0,0,0,0,0,0,0,0,192,135,84,74,240,0,0,224,3,0,0,0,0,0,128,56,2,0,0,0,0,0,16,242,9,249,0,0,6,17,225,0,0,0,0,6,25,100,0,0,0,0,136,0,0,0,0,0,0,0,0,41,165,116,34,0,192,223,107,41,165,148,2,0,0,64,0,0,0,0,0,0,0,0,96,136,0,196,16,226,0,0,0,0,68,41,2,0,0,0,0,0,128,36,137,76,0,0,48,166,68,168,22,1,0,48,166,68,137,148,1,0,81,46,85,168,22,1,0,128,0,130,96,116,0,0,130,0,226,92,140,0,0,68,0,226,92,140,0,0,68,1,226,92,140,0,0,84,1,226,92,140,0,0,64,1,226,92,140,0,0,196,17,226,92,140,0,0,128,59,231,83,202,0,0,192,197,16,66,116,68,0,130,128,31,94,248,0,0,68,128,31,94,248,0,0,68,129,31,94,248,0,0,64,129,31,94,248,0,0,130,0,71,8,113,0,0,68,0,71,8,113,0,0,68,1,71,8,113,0,0,64,1,71,8,113,0,0,192,73,241,132,116,0,0,84,129,89,107,206,0,0,130,0,23,99,116,0,0,68,0,23,99,116,0,0,68,1,23,99,116,0,0,84,1,23,99,116,0,0,64,1,23,99,116,0,0,0,68,69,84,4,0,0,0,48,169,173,108,0,0,130,128,24,99,116,0,0,68,128,24,99,116,0,0,68,129,24,99,116,0,0,64,129,24,99,116,0,0,136,196,24,29,33,0,0,64,8,39,165,19,2,0,192,73,233,164,116,1,0,130,0,7,125,244,0,0,68,0,7,125,244,0,0,68,1,7,125,244,0,0,84,1,7,125,244,0,0,64,1,7,125,244,0,0,196,17,7,125,244,0,0,0,0,139,124,178,0,0,0,0,31,66,240,68,0,130,0,23,127,240,0,0,68,0,23,127,240,0,0,68,1,23,127,240,0,0,64,1,23,127,240,0,0,130,0,67,8,33,0,0,68,0,67,8,33,0,0,68,1,67,8,33,0,0,64,1,67,8,33,0,0,192,34,232,99,116,0,0,84,129,23,99,140,0,0,130,0,23,99,116,0,0,68,0,23,99,116,0,0,68,1,23,99,116,0,0,170,0,23,99,116,0,0,64,1,23,99,116,0,0,0,16,240,1,1,0,0,0,48,169,173,108,0,0,130,128,24,99,244,0,0,68,128,24,99,244,0,0,68,129,24,99,244,0,0,64,129,24,99,244,0,0,68,128,24,99,244,208,1,32,132,23,99,124,33,0,64,129,24,99,244,208,1,98,105,116,109,97,112,0,46,116,103,97,0,46,112,110,103,0,82,101,116,114,111,65,114,99,104,58,32,91,82,80,78,71,93,58,32,85,115,105,110,103,32,82,80,78,71,32,108,111,97,100,101,114,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,105,109,97,103,101,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,84,71,65,32,105,109,97,103,101,32,105,115,32,110,111,116,32,117,110,99,111,109,112,114,101,115,115,101,100,32,82,71,66,46,10,0,82,101,116,114,111,65,114,99,104,58,32,76,111,97,100,101,100,32,84,71,65,58,32,40,37,117,120,37,117,32,64,32,37,117,32,98,112,112,41,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,84,71,65,32,112,105,120,101,108,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,66,105,116,32,100,101,112,116,104,32,111,102,32,84,71,65,32,105,109,97,103,101,32,105,115,32,119,114,111,110,103,46,32,79,110,108,121,32,51,50,45,98,105,116,32,97,110,100,32,50,52,45,98,105,116,32,115,117,112,112,111,114,116,101,100,46,10,0,115,105,110,99,0,82,101,116,114,111,65,114,99,104,58,32,83,105,110,99,32,114,101,115,97,109,112,108,101,114,32,91,67,93,10,0,82,101,116,114,111,65,114,99,104,58,32,83,73,78,67,32,112,97,114,97,109,115,32,40,37,117,32,112,104,97,115,101,32,98,105,116,115,44,32,37,117,32,116,97,112,115,41,46,10,0,110,117,108,108,0,99,103,112,0,99,103,0,68,111,110,39,116,32,99,97,114,101,0,37,117,120,0,37,115,46,122,105,112,0,73,78,70,79,32,45,32,76,111,97,100,105,110,103,32,37,115,32,46,46,46,0,82,101,116,114,111,65,114,99,104,58,32,114,97,114,99,104,95,109,97,105,110,95,105,110,105,116,95,119,114,97,112,40,41,32,115,117,99,99,101,101,100,101,100,46,10,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,114,97,114,99,104,95,109,97,105,110,95,105,110,105,116,95,119,114,97,112,40,41,32,102,97,105,108,101,100,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,67,111,117,108,100,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,32,109,101,110,117,46,10,0,109,101,110,117,95,105,110,105,116,40,41,0,46,114,101,116,114,111,97,114,99,104,45,103,97,109,101,45,104,105,115,116,111,114,121,46,116,120,116,0,82,101,116,114,111,65,114,99,104,58,32,91,82,71,85,73,93,58,32,79,112,101,110,105,110,103,32,104,105,115,116,111,114,121,58,32,37,115,46,10,0,0,1,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,32,97,116,32,37,115,58,37,100,46,10,0,102,114,111,110,116,101,110,100,47,109,101,110,117,47,46,46,47,46,46,47,103,102,120,47,46,46,47,103,101,110,101,114,97,108,46,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,16,66,8,32,0,0,74,41,0,0,0,0,0,0,168,175,212,87,0,0,128,248,226,232,35,0,0,0,136,170,168,138,0,0,192,164,100,82,116,0,0,132,16,0,0,0,0,0,136,8,33,132,32,8,0,130,32,132,16,34,2,0,0,144,234,42,1,0,0,0,16,242,9,1,0,0,0,0,0,0,32,2,0,0,0,240,1,0,0,0,0,0,0,0,32,0,0,16,34,68,136,16,1,0,192,197,88,99,116,0,0,128,24,66,8,113,0,0,192,69,200,68,248,0,0,192,69,200,96,116,0,0,0,49,149,62,66,0,0,224,135,240,96,116,0,0,128,137,240,98,116,0,0,224,67,132,8,17,0,0,192,197,232,98,116,0,0,192,197,232,33,50,0,0,0,0,2,0,1,0,0,0,0,2,0,17,0,0,0,64,54,24,4,0,0,0,128,15,62,0,0,0,0,4,131,77,0,0,0,192,69,136,8,32,0,0,192,135,214,122,240,0,0,128,16,165,92,140,0,0,224,197,248,98,124,0,0,192,197,16,66,116,0,0,224,164,24,99,58,0,0,224,135,240,66,248,0,0,224,135,240,66,8,0,0,192,197,144,99,244,0,0,32,198,248,99,140,0,0,192,17,66,8,113,0,0,128,67,8,33,124,0,0,32,166,50,74,138,0,0,32,132,16,66,248,0,0,32,198,189,107,141,0,0,96,206,90,107,206,0,0,192,197,24,99,116,0,0,224,197,248,66,8,0,0,192,197,24,99,246,0,0,224,197,248,98,140,0,0,192,197,224,96,116,0,0,224,19,66,8,33,0,0,32,198,24,99,116,0,0,32,198,168,20,33,0,0,32,214,90,149,82,0,0,32,70,69,84,140,0,0,32,198,232,8,33,0,0,224,67,68,68,248,0,0,78,8,33,132,16,14,0,33,8,65,8,66,16,0,14,33,132,16,66,14,0,128,168,8,0,0,0,0,0,0,0,0,0,31,0,128,32,0,0,0,0,0,0,0,7,125,244,0,0,33,132,23,99,124,0,0,0,0,31,66,240,0,0,16,66,31,99,244,0,0,0,0,23,127,240,0,0,92,136,39,132,16,0,0,0,0,23,99,244,208,1,33,132,23,99,140,0,0,128,0,67,8,33,0,0,0,1,134,16,66,232,0,66,8,169,140,146,0,0,134,16,66,8,33,0,0,0,128,85,107,173,0,0,0,128,23,99,140,0,0,0,0,23,99,116,0,0,0,128,23,99,124,33,0,0,0,31,99,244,16,2,0,128,54,67,8,0,0,0,0,31,28,124,0,0,64,8,39,132,224,0,0,0,128,24,99,244,0,0,0,128,24,149,34,0,0,0,128,88,171,82,0,0,0,128,168,136,138,0,0,0,128,24,99,244,208,1,0,128,143,136,248,0,0,136,16,34,8,33,8,0,132,16,66,8,33,4,0,130,16,130,8,33,2,0,0,0,96,50,0,0,0,0,0,0,0,0,0,0,63,132,16,66,8,225,3,0,0,0,0,0,0,0,0,0,0,0,64,4,0,152,16,71,8,33,68,0,0,0,0,0,80,10,0,0,0,0,0,168,0,0,132,124,66,8,33,4,0,132,124,242,9,33,4,0,68,1,0,0,0,0,0,0,72,69,84,2,0,0,138,0,31,62,124,0,0,0,0,68,4,65,0,0,192,166,148,83,178,0,0,0,0,0,0,0,0,0,138,128,143,136,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,32,0,0,0,0,0,8,17,0,0,0,0,0,74,81,0,0,0,0,0,148,42,0,0,0,0,0,0,0,192,24,0,0,0,0,0,0,62,0,0,0,0,0,0,62,0,0,0,0,0,64,21,0,0,0,0,128,175,149,2,0,0,138,0,31,28,124,0,0,0,0,130,32,34,0,0,0,0,155,114,178,0,0,0,0,0,0,0,0,0,138,128,143,136,248,0,0,10,196,24,29,33,0,0,0,0,0,0,0,0,0,128,0,66,8,33,0,0,0,32,174,20,71,0,0,152,16,79,68,248,0,0,0,4,47,165,15,0,0,32,70,71,62,33,0,0,132,16,2,8,33,4,0,152,16,23,163,35,100,0,64,1,0,0,0,0,0,192,135,86,90,240,0,0,4,49,197,0,0,0,0,0,0,34,147,36,0,0,0,0,224,33,132,0,0,0,0,0,0,0,0,0,192,135,84,74,240,0,0,224,3,0,0,0,0,0,128,56,2,0,0,0,0,0,16,242,9,249,0,0,6,17,225,0,0,0,0,6,25,100,0,0,0,0,136,0,0,0,0,0,0,0,0,41,165,116,34,0,192,223,107,41,165,148,2,0,0,64,0,0,0,0,0,0,0,0,96,136,0,196,16,226,0,0,0,0,68,41,2,0,0,0,0,0,128,36,137,76,0,0,48,166,68,168,22,1,0,48,166,68,137,148,1,0,81,46,85,168,22,1,0,128,0,130,96,116,0,0,130,0,226,92,140,0,0,68,0,226,92,140,0,0,68,1,226,92,140,0,0,84,1,226,92,140,0,0,64,1,226,92,140,0,0,196,17,226,92,140,0,0,128,59,231,83,202,0,0,192,197,16,66,116,68,0,130,128,31,94,248,0,0,68,128,31,94,248,0,0,68,129,31,94,248,0,0,64,129,31,94,248,0,0,130,0,71,8,113,0,0,68,0,71,8,113,0,0,68,1,71,8,113,0,0,64,1,71,8,113,0,0,192,73,241,132,116,0,0,84,129,89,107,206,0,0,130,0,23,99,116,0,0,68,0,23,99,116,0,0,68,1,23,99,116,0,0,84,1,23,99,116,0,0,64,1,23,99,116,0,0,0,68,69,84,4,0,0,0,48,169,173,108,0,0,130,128,24,99,116,0,0,68,128,24,99,116,0,0,68,129,24,99,116,0,0,64,129,24,99,116,0,0,136,196,24,29,33,0,0,64,8,39,165,19,2,0,192,73,233,164,116,1,0,130,0,7,125,244,0,0,68,0,7,125,244,0,0,68,1,7,125,244,0,0,84,1,7,125,244,0,0,64,1,7,125,244,0,0,196,17,7,125,244,0,0,0,0,139,124,178,0,0,0,0,31,66,240,68,0,130,0,23,127,240,0,0,68,0,23,127,240,0,0,68,1,23,127,240,0,0,64,1,23,127,240,0,0,130,0,67,8,33,0,0,68,0,67,8,33,0,0,68,1,67,8,33,0,0,64,1,67,8,33,0,0,192,34,232,99,116,0,0,84,129,23,99,140,0,0,130,0,23,99,116,0,0,68,0,23,99,116,0,0,68,1,23,99,116,0,0,170,0,23,99,116,0,0,64,1,23,99,116,0,0,0,16,240,1,1,0,0,0,48,169,173,108,0,0,130,128,24,99,244,0,0,68,128,24,99,244,0,0,68,129,24,99,244,0,0,64,129,24,99,244,0,0,68,128,24,99,244,208,1,32,132,23,99,124,33,0,64,129,24,99,244,208,1,114,103,117,105,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,110,111,32,102,111,110,116,32,98,109,112,32,111,114,32,98,105,110,44,32,97,98,111,114,116,0,67,79,82,69,32,83,69,76,69,67,84,73,79,78,32,37,115,0,68,73,83,75,32,65,80,80,69,78,68,32,37,115,0,86,73,68,69,79,32,79,80,84,73,79,78,83,0,83,72,65,68,69,82,32,79,80,84,73,79,78,83,0,65,85,68,73,79,32,79,80,84,73,79,78,83,0,68,73,83,75,32,79,80,84,73,79,78,83,0,67,79,82,69,32,79,80,84,73,79,78,83,0,83,72,65,68,69,82,32,37,115,0,77,69,78,85,32,37,115,0,76,79,65,68,32,72,73,83,84,79,82,89,0,79,86,69,82,76,65,89,32,37,115,0,66,82,79,87,83,69,82,32,68,73,82,32,37,115,0,83,67,82,69,69,78,83,72,79,84,32,68,73,82,32,37,115,0,83,72,65,68,69,82,32,68,73,82,32,37,115,0,83,65,86,69,83,84,65,84,69,32,68,73,82,32,37,115,0,83,65,86,69,70,73,76,69,32,68,73,82,32,37,115,0,79,86,69,82,76,65,89,32,68,73,82,32,37,115,0,83,89,83,84,69,77,32,68,73,82,32,37,115,0,78,111,32,67,111,114,101,0,71,65,77,69,32,40,37,115,41,32,37,115,0,37,115,32,45,32,37,115,32,37,115,0,48,46,57,46,57,46,51,0,40,68,73,82,41,0,46,46,46,0,76,105,110,101,97,114,0,78,101,97,114,101,115,116,0,37,115,0,40,70,73,76,69,41,0,79,78,0,79,70,70,0,66,105,108,105,110,101,97,114,32,102,105,108,116,101,114,105,110,103,0,80,111,105,110,116,32,102,105,108,116,101,114,105,110,103,0,37,100,0,37,117,0,37,46,49,102,120,0,37,46,51,102,32,72,122,32,40,37,46,49,102,37,37,32,100,101,118,44,32,37,117,32,115,97,109,112,108,101,115,41,0,78,47,65,0,37,46,51,102,0,60,100,101,102,97,117,108,116,62,0,60,82,79,77,32,100,105,114,62,0,78,111,32,68,105,115,107,0,37,46,50,102,0,35,37,100,0,78,47,65,32,40,112,111,114,116,32,35,37,117,41,0,68,105,115,97,98,108,101,100,0,78,111,110,101,0,74,111,121,112,97,100,0,74,111,121,112,97,100,32,119,47,32,65,110,97,108,111,103,0,77,117,108,116,105,116,97,112,0,77], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+758000);
/* memory initializer */ allocate([111,117,115,101,0,74,117,115,116,105,102,105,101,114,0,74,117,115,116,105,102,105,101,114,115,0,83,117,112,101,114,83,99,111,112,101,0,85,110,107,110,111,119,110,0,76,101,102,116,32,83,116,105,99,107,0,68,117,97,108,32,65,110,97,108,111,103,0,82,105,103,104,116,32,83,116,105,99,107,0,37,99,32,37,45,42,46,42,115,32,37,45,42,115,0,47,0,99,103,112,124,103,108,115,108,112,0,99,103,124,103,108,115,108,0,99,102,103,0,37,115,124,122,105,112,0,60,85,115,101,32,116,104,105,115,32,100,105,114,101,99,116,111,114,121,62,0,37,115,32,40,37,115,41,0,78,47,65,32,40,115,116,111,99,107,41,0,82,101,116,114,111,65,114,99,104,58,32,83,101,116,116,105,110,103,32,82,71,85,73,32,115,104,97,100,101,114,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,83,101,116,116,105,110,103,32,82,71,85,73,32,67,71,80,32,102,97,105,108,101,100,46,10,0,83,101,116,32,115,99,97,108,101,0,37,115,32,40,37,52,117,120,37,52,117,44,32,37,117,32,120,32,37,117,32,115,99,97,108,101,41,0,83,101,116,32,85,112,112,101,114,45,76,101,102,116,32,67,111,114,110,101,114,0,83,101,116,32,66,111,116,116,111,109,45,82,105,103,104,116,32,67,111,114,110,101,114,0,37,115,32,40,37,100,44,32,37,100,32,58,32,37,52,117,120,37,52,117,41,0,76,111,97,100,32,71,97,109,101,32,40,72,105,115,116,111,114,121,41,0,76,111,97,100,32,71,97,109,101,0,67,111,114,101,32,79,112,116,105,111,110,115,0,86,105,100,101,111,32,79,112,116,105,111,110,115,0,65,117,100,105,111,32,79,112,116,105,111,110,115,0,73,110,112,117,116,32,79,112,116,105,111,110,115,0,80,97,116,104,32,79,112,116,105,111,110,115,0,83,101,116,116,105,110,103,115,0,68,105,115,107,32,79,112,116,105,111,110,115,0,83,97,118,101,32,83,116,97,116,101,0,76,111,97,100,32,83,116,97,116,101,0,84,97,107,101,32,83,99,114,101,101,110,115,104,111,116,0,82,101,115,117,109,101,32,71,97,109,101,0,82,101,115,116,97,114,116,32,71,97,109,101,0,82,101,115,116,97,114,116,32,82,101,116,114,111,65,114,99,104,0,81,117,105,116,32,82,101,116,114,111,65,114,99,104,0,65,112,112,108,121,32,83,104,97,100,101,114,32,67,104,97,110,103,101,115,0,68,101,102,97,117,108,116,32,70,105,108,116,101,114,0,76,111,97,100,32,83,104,97,100,101,114,32,80,114,101,115,101,116,0,83,104,97,100,101,114,32,80,97,115,115,101,115,0,83,104,97,100,101,114,32,35,37,117,0,83,104,97,100,101,114,32,35,37,117,32,70,105,108,116,101,114,0,83,104,97,100,101,114,32,35,37,117,32,83,99,97,108,101,0,83,104,97,100,101,114,32,79,112,116,105,111,110,115,0,73,110,116,101,103,101,114,32,83,99,97,108,101,0,65,115,112,101,99,116,32,82,97,116,105,111,0,67,117,115,116,111,109,32,82,97,116,105,111,0,84,111,103,103,108,101,32,70,117,108,108,115,99,114,101,101,110,0,82,111,116,97,116,105,111,110,0,86,83,121,110,99,0,72,97,114,100,32,71,80,85,32,83,121,110,99,0,72,97,114,100,32,71,80,85,32,83,121,110,99,32,70,114,97,109,101,115,0,66,108,97,99,107,32,70,114,97,109,101,32,73,110,115,101,114,116,105,111,110,0,86,83,121,110,99,32,83,119,97,112,32,73,110,116,101,114,118,97,108,0,87,105,110,100,111,119,101,100,32,83,99,97,108,101,32,40,88,41,0,87,105,110,100,111,119,101,100,32,83,99,97,108,101,32,40,89,41,0,67,114,111,112,32,79,118,101,114,115,99,97,110,32,40,114,101,108,111,97,100,41,0,69,115,116,105,109,97,116,101,100,32,77,111,110,105,116,111,114,32,70,80,83,0,68,105,115,107,32,73,110,100,101,120,0,68,105,115,107,32,73,109,97,103,101,32,65,112,112,101,110,100,0,77,117,116,101,32,65,117,100,105,111,0,82,97,116,101,32,67,111,110,116,114,111,108,32,68,101,108,116,97,0,78,111,32,111,112,116,105,111,110,115,32,97,118,97,105,108,97,98,108,101,46,0,82,101,119,105,110,100,0,82,101,119,105,110,100,32,71,114,97,110,117,108,97,114,105,116,121,0,71,80,85,32,83,99,114,101,101,110,115,104,111,116,115,0,67,111,110,102,105,103,32,83,97,118,101,32,79,110,32,69,120,105,116,0,68,101,98,117,103,32,73,110,102,111,32,77,101,115,115,97,103,101,115,0,66,114,111,119,115,101,114,32,68,105,114,101,99,116,111,114,121,0,83,104,97,100,101,114,32,68,105,114,101,99,116,111,114,121,0,83,97,118,101,115,116,97,116,101,32,68,105,114,101,99,116,111,114,121,0,83,97,118,101,102,105,108,101,32,68,105,114,101,99,116,111,114,121,0,79,118,101,114,108,97,121,32,68,105,114,101,99,116,111,114,121,0,83,121,115,116,101,109,32,68,105,114,101,99,116,111,114,121,0,83,99,114,101,101,110,115,104,111,116,32,68,105,114,101,99,116,111,114,121,0,79,118,101,114,108,97,121,32,80,114,101,115,101,116,0,79,118,101,114,108,97,121,32,79,112,97,99,105,116,121,0,79,118,101,114,108,97,121,32,83,99,97,108,101,0,80,108,97,121,101,114,0,68,101,118,105,99,101,0,68,101,118,105,99,101,32,84,121,112,101,0,68,80,97,100,32,69,109,117,108,97,116,105,111,110,0,85,112,0,68,111,119,110,0,76,101,102,116,0,82,105,103,104,116,0,88,0,89,0,76,0,82,0,76,50,0,82,50,0,76,51,0,82,51,0,82,101,116,114,111,65,114,99,104,58,32,65,112,112,108,121,105,110,103,32,115,104,97,100,101,114,32,46,46,46,10,0,114,103,117,105,46,103,108,115,108,112,0,114,103,117,105,46,99,103,112,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,111,118,101,114,108,97,121,46,10,0,114,0,119,0,37,115,10,37,115,10,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,67,114,101,97,116,105,110,103,32,70,66,79,32,37,100,32,64,32,37,117,120,37,117,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,70,66,79,32,116,97,114,103,101,116,115,46,32,87,105,108,108,32,99,111,110,116,105,110,117,101,32,119,105,116,104,111,117,116,32,70,66,79,46,10,0,103,108,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,67,97,110,110,111,116,32,102,105,110,100,32,115,104,97,100,101,114,32,99,111,114,101,32,102,111,114,32,112,97,116,104,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,91,71,76,93,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,109,117,108,116,105,112,97,115,115,32,115,104,97,100,101,114,46,32,70,97,108,108,105,110,103,32,98,97,99,107,32,116,111,32,115,116,111,99,107,46,10,0,82,101,116,114,111,65,114,99,104,58,32,71,76,58,32,85,115,105,110,103,32,37,117,32,116,101,120,116,117,114,101,115,46,10,0,111,102,102,0,111,110,0,82,101,116,114,111,65,114,99,104,58,32,71,76,32,86,83,121,110,99,32,61,62,32,37,115,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,69,71,76,32,105,109,97,103,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,114,101,105,110,105,116,32,70,66,79,32,116,101,120,116,117,114,101,46,10,0,82,101,116,114,111,65,114,99,104,58,32,82,101,99,114,101,97,116,105,110,103,32,70,66,79,32,116,101,120,116,117,114,101,32,35,37,100,58,32,37,117,120,37,117,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,71,76,58,32,73,110,118,97,108,105,100,32,101,110,117,109,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,71,76,58,32,73,110,118,97,108,105,100,32,118,97,108,117,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,71,76,58,32,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,71,76,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,78,111,110,32,115,112,101,99,105,102,105,101,100,32,71,76,32,101,114,114,111,114,46,10,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,73,110,105,116,105,97,108,105,122,105,110,103,32,72,87,32,114,101,110,100,101,114,32,40,37,117,32,120,32,37,117,41,46,10,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,77,97,120,32,116,101,120,116,117,114,101,32,115,105,122,101,58,32,37,100,32,112,120,44,32,114,101,110,100,101,114,98,117,102,102,101,114,32,115,105,122,101,58,32,37,117,32,112,120,46,10,0,79,69,83,95,112,97,99,107,101,100,95,100,101,112,116,104,95,115,116,101,110,99,105,108,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,72,87,32,114,101,110,100,101,114,32,70,66,79,32,35,37,117,44,32,101,114,114,111,114,58,32,48,120,37,117,46,10,0,79,69,83,95,114,103,98,56,95,114,103,98,97,56,0,65,82,77,95,97,114,103,98,56,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,91,71,76,93,58,32,51,50,45,98,105,116,32,70,66,79,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,32,70,97,108,108,105,110,103,32,98,97,99,107,32,116,111,32,49,54,45,98,105,116,46,10,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,78,111,116,32,108,111,97,100,105,110,103,32,97,110,121,32,115,104,97,100,101,114,46,10,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,85,115,105,110,103,32,71,76,83,76,32,115,104,97,100,101,114,32,98,97,99,107,101,110,100,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,68,105,100,110,39,116,32,102,105,110,100,32,118,97,108,105,100,32,115,104,97,100,101,114,32,98,97,99,107,101,110,100,46,32,67,111,110,116,105,110,117,105,110,103,32,119,105,116,104,111,117,116,32,115,104,97,100,101,114,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,32,115,104,97,100,101,114,44,32,102,97,108,108,105,110,103,32,98,97,99,107,32,116,111,32,115,116,111,99,107,46,10,0,66,71,82,65,56,56,56,56,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,66,71,82,65,56,56,56,56,32,101,120,116,101,110,115,105,111,110,32,102,111,117,110,100,32,102,111,114,32,71,76,69,83,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,91,71,76,93,58,32,71,76,69,83,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,66,71,82,65,56,56,56,56,32,101,120,116,101,110,115,105,111,110,46,10,51,50,45,98,105,116,32,112,97,116,104,32,119,105,108,108,32,114,101,113,117,105,114,101,32,99,111,110,118,101,114,115,105,111,110,46,10,0,79,112,101,110,71,76,32,69,83,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,98,105,110,100,32,65,80,73,32,37,115,32,116,111,32,99,111,110,116,101,120,116,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,32,71,76,32,99,111,110,116,101,120,116,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,68,105,100,110,39,116,32,102,105,110,100,32,71,76,32,99,111,110,116,101,120,116,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,71,76,32,99,111,110,116,101,120,116,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,68,101,116,101,99,116,105,110,103,32,115,99,114,101,101,110,32,114,101,115,111,108,117,116,105,111,110,32,37,117,120,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,86,101,110,100,111,114,58,32,37,115,44,32,82,101,110,100,101,114,101,114,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,86,101,114,115,105,111,110,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,58,32,71,76,58,32,85,115,105,110,103,32,114,101,115,111,108,117,116,105,111,110,32,37,117,120,37,117,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,83,104,97,100,101,114,32,105,110,105,116,32,102,97,105,108,101,100,46,10,0,82,101,116,114,111,65,114,99,104,58,32,71,76,58,32,76,111,97,100,101,100,32,37,117,32,112,114,111,103,114,97,109,40,115,41,46,10,0,101,120,105,115,116,115,0,100,111,101,115,110,39,116,32,101,120,105,115,116,0,82,101,116,114,111,65,114,99,104,58,32,81,117,101,114,121,105,110,103,32,71,76,32,101,120,116,101,110,115,105,111,110,58,32,37,115,32,61,62,32,37,115,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,117,112,32,102,114,97,109,101,32,98,117,102,102,101,114,32,111,98,106,101,99,116,115,46,32,77,117,108,116,105,45,112,97,115,115,32,115,104,97,100,105,110,103,32,119,105,108,108,32,110,111,116,32,119,111,114,107,46,10,0,79,69,83,95,116,101,120,116,117,114,101,95,102,108,111,97,116,95,108,105,110,101,97,114,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,79,69,83,95,116,101,120,116,117,114,101,95,102,108,111,97,116,95,108,105,110,101,97,114,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,46,10,0,82,101,116,114,111,65,114,99,104,58,32,70,66,79,32,112,97,115,115,32,35,37,100,32,105,115,32,102,108,111,97,116,105,110,103,45,112,111,105,110,116,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,66,79,32,116,101,120,116,117,114,101,115,32,101,120,99,101,101,100,101,100,32,109,97,120,105,109,117,109,32,115,105,122,101,32,111,102,32,71,80,85,32,40,37,117,120,37,117,41,46,32,82,101,115,105,122,105,110,103,32,116,111,32,102,105,116,46,10,0,71,76,32,114,97,115,116,101,114,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,67,111,117,108,100,110,39,116,32,105,110,105,116,32,102,111,110,116,32,114,101,110,100,101,114,101,114,46,10,0,0,101,109,115,99,114,105,112,116,101,110,0,82,101,116,114,111,65,114,99,104,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,91,69,77,83,67,82,73,80,84,69,78,47,69,71,76,93,58,32,73,110,105,116,105,97,108,105,122,105,110,103,46,46,46,10,0,82,101,116,114,111,65,114,99,104,58,32,91,69,77,83,67,82,73,80,84,69,78,47,69,71,76,93,58,32,65,116,116,101,109,112,116,101,100,32,116,111,32,114,101,45,105,110,105,116,105,97,108,105,122,101,32,100,114,105,118,101,114,46,10,0,82,101,116,114,111,65,114,99,104,58,32,91,69,77,83,67,82,73,80,84,69,78,47,69,71,76,93,58,32,68,105,109,101,110,115,105,111,110,115,58,32,37,117,120,37,117,10,0,0,0,35,105,102,100,101,102,32,71,76,95,69,83,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,10,35,101,110,100,105,102,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,84,101,120,116,117,114,101,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,116,101,120,95,99,111,111,114,100,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,99,111,108,111,114,32,42,32,116,101,120,116,117,114,101,50,68,40,84,101,120,116,117,114,101,44,32,116,101,120,95,99,111,111,114,100,41,59,10,125,0,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,84,101,120,116,117,114,101,59,10,105,110,32,118,101,99,50,32,116,101,120,95,99,111,111,114,100,59,10,105,110,32,118,101,99,52,32,99,111,108,111,114,59,10,111,117,116,32,118,101,99,52,32,70,114,97,103,67,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,70,114,97,103,67,111,108,111,114,32,61,32,99,111,108,111,114,32,42,32,116,101,120,116,117,114,101,40,84,101,120,116,117,114,101,44,32,116,101,120,95,99,111,111,114,100,41,59,10,125,0,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,84,101,120,67,111,111,114,100,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,86,101,114,116,101,120,67,111,111,114,100,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,67,111,108,111,114,59,10,117,110,105,102,111,114,109,32,109,97,116,52,32,77,86,80,77,97,116,114,105,120,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,116,101,120,95,99,111,111,114,100,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,77,86,80,77,97,116,114,105,120,32,42,32,118,101,99,52,40,86,101,114,116,101,120,67,111,111,114,100,44,32,48,46,48,44,32,49,46,48,41,59,10,32,32,32,116,101,120,95,99,111,111,114,100,32,61,32,84,101,120,67,111,111,114,100,59,10,32,32,32,99,111,108,111,114,32,61,32,67,111,108,111,114,59,10,125,0,105,110,32,118,101,99,50,32,84,101,120,67,111,111,114,100,59,10,105,110,32,118,101,99,50,32,86,101,114,116,101,120,67,111,111,114,100,59,10,105,110,32,118,101,99,52,32,67,111,108,111,114,59,10,117,110,105,102,111,114,109,32,109,97,116,52,32,77,86,80,77,97,116,114,105,120,59,10,111,117,116,32,118,101,99,50,32,116,101,120,95,99,111,111,114,100,59,10,111,117,116,32,118,101,99,52,32,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,77,86,80,77,97,116,114,105,120,32,42,32,118,101,99,52,40,86,101,114,116,101,120,67,111,111,114,100,44,32,48,46,48,44,32,49,46,48,41,59,10,32,32,32,116,101,120,95,99,111,111,114,100,32,61,32,84,101,120,67,111,111,114,100,59,10,32,32,32,99,111,108,111,114,32,61,32,67,111,108,111,114,59,10,125,0,0,114,117,98,121,0,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,84,101,120,116,117,114,101,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,99,111,108,111,114,32,42,32,116,101,120,116,117,114,101,50,68,40,84,101,120,116,117,114,101,44,32,103,108,95,84,101,120,67,111,111,114,100,91,48,93,46,120,121,41,59,10,125,0,118,97,114,121,105,110,103,32,118,101,99,52,32,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,103,108,95,77,111,100,101,108,86,105,101,119,80,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,32,42,32,103,108,95,86,101,114,116,101,120,59,10,32,32,32,103,108,95,84,101,120,67,111,111,114,100,91,48,93,32,61,32,103,108,95,77,117,108,116,105,84,101,120,67,111,111,114,100,48,59,10,32,32,32,99,111,108,111,114,32,61,32,103,108,95,67,111,108,111,114,59,10,125,0,35,105,102,100,101,102,32,71,76,95,69,83,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,10,35,101,110,100,105,102,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,84,101,120,116,117,114,101,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,116,101,120,95,99,111,111,114,100,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,116,101,120,116,117,114,101,50,68,40,84,101,120,116,117,114,101,44,32,116,101,120,95,99,111,111,114,100,41,46,114,103,98,44,32,49,46,48,41,59,10,125,0,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,84,101,120,116,117,114,101,59,10,105,110,32,118,101,99,50,32,116,101,120,95,99,111,111,114,100,59,10,111,117,116,32,118,101,99,52,32,70,114,97,103,67,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,116,101,120,116,117,114,101,40,84,101,120,116,117,114,101,44,32,116,101,120,95,99,111,111,114,100,41,46,114,103,98,44,32,49,46,48,41,59,10,125,0,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,84,101,120,67,111,111,114,100,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,86,101,114,116,101,120,67,111,111,114,100,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,67,111,108,111,114,59,10,117,110,105,102,111,114,109,32,109,97,116,52,32,77,86,80,77,97,116,114,105,120,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,116,101,120,95,99,111,111,114,100,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,77,86,80,77,97,116,114,105,120,32,42,32,118,101,99,52,40,86,101,114,116,101,120,67,111,111,114,100,44,32,48,46,48,44,32,49,46,48,41,59,10,32,32,32,116,101,120,95,99,111,111,114,100,32,61,32,84,101,120,67,111,111,114,100,59,10,125,0,105,110,32,118,101,99,50,32,84,101,120,67,111,111,114,100,59,10,105,110,32,118,101,99,50,32,86,101,114,116,101,120,67,111,111,114,100,59,10,105,110,32,118,101,99,52,32,67,111,108,111,114,59,10,117,110,105,102,111,114,109,32,109,97,116,52,32,77,86,80,77,97,116,114,105,120,59,10,111,117,116,32,118,101,99,50,32,116,101,120,95,99,111,111,114,100,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,77,86,80,77,97,116,114,105,120,32,42,32,118,101,99,52,40,86,101,114,116,101,120,67,111,111,114,100,44,32,48,46,48,44,32,49,46,48,41,59,10,32,32,32,116,101,120,95,99,111,111,114,100,32,61,32,84,101,120,67,111,111,114,100,59,10,125,0,37,115,37,115,0,84,101,120,116,117,114,101,0,84,101,120,116,117,114,101,83,105,122,101,0,73,110,112,117,116,83,105,122,101,0,84,101,120,67,111,111,114,100,0,77,86,80,77,97,116,114,105,120,0,86,101,114,116,101,120,67,111,111,114,100,0,67,111,108,111,114,0,76,85,84,84,101,120,67,111,111,114,100,0,79,117,116,112,117,116,83,105,122,101,0,70,114,97,109,101,67,111,117,110,116,0,70,114,97,109,101,68,105,114,101,99,116,105,111,110,0,79,114,105,103,0,80,97,115,115,80,114,101,118,37,117,0,80,97,115,115,37,117,0,80,114,101,118,0,80,114,101,118,37,117,0,82,101,116,114,111,65,114,99,104,58,32,76,111,97,100,105,110,103,32,116,101,120,116,117,114,101,32,105,109,97,103,101,32,102,114,111,109,58,32,34,37,115,34,32,46,46,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,116,101,120,116,117,114,101,32,105,109,97,103,101,32,102,114,111,109,58,32,34,37,115,34,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,71,76,83,76,32,115,104,97,100,101,114,58,32,37,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,71,76,32,112,114,111,103,114,97,109,32,35,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,76,105,110,107,101,114,32,108,111,103,58,32,37,115,10,0,82,101,116,114,111,65,114,99,104,58,32,83,104,97,100,101,114,32,108,111,103,58,32,37,115,10,0,35,118,101,114,115,105,111,110,0,35,118,101,114,115,105,111,110,32,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,91,71,76,93,58,32,85,115,105,110,103,32,71,76,83,76,32,118,101,114,115,105,111,110,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,71,76,83,76,32,118,101,114,116,101,120,32,115,104,97,100,101,114,46,10,0,35,100,101,102,105,110,101,32,86,69,82,84,69,88,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,118,101,114,116,101,120,32,115,104,97,100,101,114,32,35,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,70,111,117,110,100,32,71,76,83,76,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,46,10,0,35,100,101,102,105,110,101,32,70,82,65,71,77,69,78,84,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,32,35,37,117,10,0,82,101,116,114,111,65,114,99,104,58,32,76,105,110,107,105,110,103,32,71,76,83,76,32,112,114,111,103,114,97,109,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,108,105,110,107,32,112,114,111,103,114,97,109,32,35,37,117,46,10,0,103,108,115,108,0,103,108,115,108,112,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,70,97,105,108,101,100,32,116,111,32,112,97,114,115,101,32,71,76,83,76,32,115,104,97,100,101,114,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,91,71,76,93,58,32,83,116,111,99,107,32,71,76,83,76,32,115,104,97,100,101,114,115,32,119,105,108,108,32,98,101,32,117,115,101,100,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,71,76,69,83,32,99,111,110,116,101,120,116,32,105,115,32,117,115,101,100,44,32,98,117,116,32,115,104,97,100,101,114,32,105,115,32,110,111,116,32,109,111,100,101,114,110,46,32,67,97,110,110,111,116,32,117,115,101,32,105,116,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,71,76,83,76,32,115,116,111,99,107,32,112,114,111,103,114,97,109,115,32,102,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,91,71,76,93,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,76,85,84,115,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,32,115,116,97,116,101,32,116,114,97,99,107,101,114,46,10,0,103,108,69,71,76,73,109,97,103,101,84,97,114,103,101,116,84,101,120,116,117,114,101,50,68,79,69,83,0,103,108,69,71,76,73,109,97,103,101,84,97,114,103,101,116,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,79,69,83,0,103,108,71,101,116,80,114,111,103,114,97,109,66,105,110,97,114,121,79,69,83,0,103,108,80,114,111,103,114,97,109,66,105,110,97,114,121,79,69,83,0,103,108,77,97,112,66,117,102,102,101,114,79,69,83,0,103,108,85,110,109,97,112,66,117,102,102,101,114,79,69,83,0,103,108,71,101,116,66,117,102,102,101,114,80,111,105,110,116,101,114,118,79,69,83,0,103,108,84,101,120,73,109,97,103,101,51,68,79,69,83,0,103,108,84,101,120,83,117,98,73,109,97,103,101,51,68,79,69,83,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,51,68,79,69,83,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,51,68,79,69,83,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,51,68,79,69,83,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,51,68,79,69,83,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,79,69,83,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,103,108,73,115,86,101,114,116,101,120,65,114,114,97,121,79,69,83,0,103,108,68,101,98,117,103,77,101,115,115,97,103,101,67,111,110,116,114,111,108,0,103,108,68,101,98,117,103,77,101,115,115,97,103,101,73,110,115,101,114,116,0,103,108,68,101,98,117,103,77,101,115,115,97,103,101,67,97,108,108,98,97,99,107,0,103,108,71,101,116,68,101,98,117,103,77,101,115,115,97,103,101,76,111,103,0,103,108,80,117,115,104,68,101,98,117,103,71,114,111,117,112,0,103,108,80,111,112,68,101,98,117,103,71,114,111,117,112,0,103,108,79,98,106,101,99,116,76,97,98,101,108,0,103,108,71,101,116,79,98,106,101,99,116,76,97,98,101,108,0,103,108,79,98,106,101,99,116,80,116,114,76,97,98,101,108,0,103,108,71,101,116,79,98,106,101,99,116,80,116,114,76,97,98,101,108,0,91,82,80,78,71,93,58,32,69,114,114,111,114,32,105,110,32,108,105,110,101,32,37,100,46,10,0,137,80,78,71,13,10,26,10,73,72,68,82,0,73,68,65,84,0,73,69,78,68,0,80,76,84,69,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,76,105,98,114,101,116,114,111,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,110,121,32,118,97,108,105,100,32,101,120,116,101,110,115,105,111,110,115,46,32,67,97,110,110,111,116,32,117,110,122,105,112,32,119,105,116,104,111,117,116,32,107,110,111,119,105,110,103,32,116,104,105,115,46,10,0,124,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,90,73,80,32,101,120,116,114,97,99,116,105,111,110,32,102,97,105,108,101,100,32,97,116,32,108,105,110,101,58,32,37,100,46,10,0,82,101,116,114,111,65,114,99,104,58,32,79,70,70,83,69,84,58,32,37,117,44,32,67,83,73,90,69,58,32,37,117,44,32,83,73,90,69,58,32,37,117,46,10,0,82,101,116,114,111,65,114,99,104,32,91,69,82,82,79,82,93,32,58,58,32,68,105,100,110,39,116,32,102,105,110,100,32,97,110,121,32,82,79,77,83,32,116,104,97,116,32,109,97,116,99,104,101,100,32,118,97,108,105,100,32,101,120,116,101,110,115,105,111,110,115,32,102,111,114,32,108,105,98,114,101,116,114,111,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,46,10,0,82,101,116,114,111,65,114,99,104,32,91,87,65,82,78,93,32,58,58,32,70,105,108,101,32,67,82,67,32,100,105,102,102,101,114,115,32,102,114,111,109,32,90,73,80,32,67,82,67,46,32,70,105,108,101,58,32,48,120,37,120,44,32,90,73,80,58,32,48,120,37,120,46,10,0,5,5,4,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,2,3,7,0,3,3,11,0,49,53,83,116,100,95,70,105,108,101,95,87,114,105,116,101,114,0,49,48,77,101,109,95,87,114,105,116,101,114,0,49,50,77,117,108,116,105,95,66,117,102,102,101,114,0,49,49,77,111,110,111,95,66,117,102,102,101,114,0,78,111,116,32,97,110,32,105,78,69,83,32,102,105,108,101,0,85,110,115,117,112,112,111,114,116,101,100,32,109,97,112,112,101,114,0,102,102,102,0,42,136,20,18,168,59,0,164,92,0,126,110,0,64,108,7,0,87,29,0,52,53,0,12,73,0,0,82,0,0,79,8,0,64,78,0,0,0,0,0,0,0,0,0,174,174,174,21,95,218,66,64,254,118,39,255,161,27,205,184,30,124,181,50,32,153,79,0,108,110,0,56,135,0,13,148,0,0,144,50,0,124,142,0,0,0,0,0,0,0,0,0,254,254,254,100,176,254,147,144,254,199,119,254,243,106,254,254,110,205,254,130,112,235,159,35,189,191,0,137,217,0,93,229,48,69,225,130,72,206,223,79,79,79,0,0,0,0,0,0,254,254,254,193,224,254,212,211,254,233,200,254,251,195,254,254,197,235,254,205,198,247,217,166,229,230,149,208,240,151,190,245,171,180,243,205,181,236,243,184,184,184,0,0,0,0,0,0,114,83,79,0,23,113,32,0,145,71,0,141,104,0,103,122,0,41,120,0,0,99,10,0,64,34,0,24,54,0,0,63,0,0,60,0,0,45,54,0,0,0,0,0,0,0,0,0,190,148,143,37,69,187,83,38,228,134,13,224,177,1,174,200,4,92,198,24,1,170,53,0,124,84,0,73,109,0,30,122,0,6,118,19,9,98,110,0,0,0,0,0,0,0,0,0,254,222,215,122,142,254,168,110,254,220,85,254,254,72,247,254,76,164,254,96,71,254,125,0,210,157,0,158,183,0,114,195,7,90,191,89,93,172,182,79,79,79,0,0,0,0,0,0,254,222,215,214,190,233,233,177,250,254,166,248,254,161,228,254,163,194,254,171,157,254,183,125,250,196,108,229,206,110,211,211,130,201,210,164,203,202,202,184,184,184,0,0,0,0,0,0,75,106,64,0,46,98,0,22,130,32,3,126,65,0,88,82,0,26,80,11,0,59,34,0,24,58,0,0,77,0,0,86,0,0,83,0,0,68,39,0,0,0,0,0,0,0,0,0,136,180,122,0,101,166,29,69,208,80,44,203,123,32,153,146,36,72,144,55,0,116,84,0,70,116,0,19,141,0,0,153,0,0,149,0,0,130,90,0,0,0,0,0,0,0,0,0,207,254,188,51,183,233,98,151,254,150,126,254,193,113,220,217,117,137,214,137,45,186,166,0,140,198,0,88,224,0,44,236,0,20,232,63,23,213,155,79,79,79,0,0,0,0,0,0,207,254,188,144,231,207,163,218,224,184,207,222,201,202,201,211,204,168,210,212,130,198,224,99,180,237,81,159,247,83,141,252,104,131,251,137,132,243,175,184,184,184,0,0,0,0,0,0,83,83,55,0,23,89,0,0,121,40,0,117,73,0,79,90,0,17,88,0,0,67,10,0,32,34,0,0,53,0,0,63,0,0,60,0,0,45,30,0,0,0,0,0,0,0,0,0,147,148,110,0,69,154,40,38,196,91,12,191,134,0,141,157,4,60,155,23,0,127,52,0,81,84,0,30,109,0,0,121,0,0,117,0,0,98,78,0,0,0,0,0,0,0,0,0,221,222,173,65,142,217,112,110,254,164,84,255,208,72,204,231,76,122,229,95,29,200,125,0,154,157,0,102,182,0,58,195,0,34,191,47,37,171,140,79,79,79,0,0,0,0,0,0,221,222,173,158,189,191,177,176,208,198,166,206,216,161,185,225,163,152,224,171,114,213,183,83,194,195,66,173,206,68,155,211,88,145,209,122,146,201,159,184,184,184,0,0,0,0,0,0,87,87,133,0,26,167,5,2,198,44,0,195,77,0,157,95,0,94,93,0,25,71,14,0,36,38,0,0,57,0,0,66,0,0,63,38,0,49,108,0,0,0,0,0,0,0,0,0,153,153,216,0,74,254,46,43,254,97,17,254,140,5,247,164,9,165,161,28,74,133,57,0,87,89,0,36,114,0,0,126,10,0,122,92,0,103,183,0,0,0,0,0,0,0,0,0,229,228,254,74,148,254,120,116,254,172,91,254,216,78,254,239,82,254,237,102,166,208,131,89,162,163,46,110,189,51,66,201,102,42,197,184,45,178,254,79,79,79,0,0,0,0,0,0,229,228,254,166,196,254,185,183,254,206,172,254,224,167,254,233,169,254,232,177,252,221,189,220,202,202,203,181,212,205,163,217,226,153,216,254,154,208,254,184,184,184,0,0,0,0,0,0,90,71,97,0,11,130,8,0,162,47,0,158,80,0,120,98,0,58,96,0,0,74,0,0,39,22,0,0,42,0,0,51,0,0,48,2,0,33,72,0,0,0,0,0,0,0,0,0,158,132,166,4,53,210,50,22,252,101,0,247,144,0,197,168,0,116,165,7,25,137,36,0,91,68,0,40,93,0,0,105,0,0,101,42,0,82,134,0,0,0,0,0,0,0,0,0,234,201,246,79,121,254,125,89,254,177,63,254,221,51,254,245,55,195,242,74,102,214,104,24,167,136,0,115,161,0,71,174,37,48,170,120,50,150,213,79,79,79,0,0,0,0,0,0,234,201,246,171,168,254,190,155,254,211,145,254,229,140,254,239,142,225,237,150,187,226,162,156,207,174,139,186,185,141,168,190,161,159,188,195,160,180,232,184,184,184,0,0,0,0,0,0,66,85,88,0,25,121,0,1,153,23,0,149,56,0,111,74,0,49,72,0,0,51,12,0,16,36,0,0,55,0,0,65,0,0,62,0,0,47,63,0,0,0,0,0,0,0,0,0,125,151,154,0,72,198,17,40,240,69,15,235,112,3,185,135,7,104,132,26,12,104,55,0,59,87,0,7,112,0,0,124,0,0,120,30,0,101,121,0,0,0,0,0,0,0,0,0,192,225,230,37,145,254,83,114,254,135,88,254,179,76,254,202,80,179,200,99,86,171,129,8,125,160,0,73,186,0,29,198,21,5,194,104,8,175,197,79,79,79,0,0,0,0,0,0,192,225,230,129,193,248,148,180,254,169,170,254,187,165,242,196,166,209,195,174,171,184,186,140,165,199,123,144,209,125,126,214,145,116,213,179,118,205,216,184,184,184,0,0,0,0,0,0,69,69,69,0,16,110,0,0,142,33,0,138,66,0,100,84,0,38,82,0,0,60,3,0,25,27,0,0,46,0,0,56,0,0,53,0,0,38,51,0,0,0,0,0,0,0,0,0,134,134,134,0,64,187,35,32,228,86,7,223,129,0,174,153,0,92,150,18,1,122,47,0,76,79,0,25,104,0,0,116,0,0,112,19,0,93,110,0,0,0,0,0,0,0,0,0,207,207,207,60,136,254,107,104,254,159,79,254,203,66,248,226,70,165,224,90,72,195,119,0,149,151,0,97,177,0,53,189,8,29,185,91,32,166,183,79,79,79,0,0,0,0,0,0,207,207,207,148,178,229,166,165,246,188,155,244,205,150,224,215,152,190,214,159,152,202,171,121,183,184,104,162,195,106,145,200,126,135,198,160,136,190,197,184,184,184,0,0,0,0,0,0,55,78,101,115,95,69,109,117,0,49,53,78,101,115,95,70,105,108,101,95,87,114,105,116,101,114,0,49,53,78,101,115,95,70,105,108,101,95,82,101,97,100,101,114,0,49,48,78,101,115,95,77,97,112,112,101,114,0,49,49,77,97,112,112,101,114,95,77,109,99,51,0,49,54,78,101,115,95,83,116,97,116,101,95,82,101,97,100,101,114,0,49,49,68,97,116,97,95,82,101,97,100,101,114,0,49,49,70,105,108,101,95,82,101,97,100,101,114,0,49,53,77,101,109,95,70,105,108,101,95,82,101,97,100,101,114,0,49,53,83,116,100,95,70,105,108,101,95,82,101,97,100,101,114,0,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,32,105,110,116,101,114,110,97,108,32,117,115,97,103,101,32,98,117,103,0,32,102,105,108,101,32,110,111,116,32,102,111,117,110,100,0,32,99,111,117,108,100,110,39,116,32,111,112,101,110,32,102,105,108,101,0,32,114,101,97,100,47,119,114,105,116,101,32,101,114,114,111,114,0,32,116,114,117,110,99,97,116,101,100,32,102,105,108,101,0,81,117,105,99,107,78,69,83,0,118,49,0,110,101,115,0,88,82,71,66,56,56,56,56,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+768240);
/* memory initializer */ allocate([119,98,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,102,105,108,101,32,102,111,114,32,119,114,105,116,105,110,103,0,67,111,117,108,100,110,39,116,32,119,114,105,116,101,32,116,111,32,102,105,108,101,0,84,114,105,101,100,32,116,111,32,119,114,105,116,101,32,109,111,114,101,32,100,97,116,97,32,116,104,97,110,32,101,120,112,101,99,116,101,100,0,10,254,20,2,40,4,80,6,160,8,60,10,14,12,26,14,12,16,24,18,48,20,96,22,192,24,72,26,16,28,32,30,79,117,116,32,111,102,32,109,101,109,111,114,121,0,78,69,83,26,0,7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,149,149,149,213,149,149,213,245,70,105,108,101,32,105,115,32,119,114,111,110,103,32,116,121,112,101,0,84,114,105,101,100,32,116,111,32,103,111,32,112,97,115,116,32,101,110,100,32,111,102,32,98,108,111,99,107,115,0,84,114,105,101,100,32,116,111,32,115,107,105,112,32,112,97,115,116,32,101,110,100,32,111,102,32,100,97,116,97,0,0,0,1,2,3,4,5,6,7,7,8,9,10,11,12,13,14,15,15,16,17,18,19,20,20,21,22,23,24,24,25,26,27,27,28,29,30,31,31,32,33,33,34,35,36,36,37,38,38,39,40,41,41,42,43,43,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,59,60,60,61,61,62,63,63,64,64,65,65,66,66,67,67,68,68,69,70,70,71,71,72,72,73,73,74,74,75,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,82,83,15,1,0,1,0,2,2,13,8,16,8,36,0,0,4,44,0,1,52,3,0,4,0,20,0,58,0,2,0,32,44,8,78,111,116,32,97,32,115,116,97,116,101,32,115,110,97,112,115,104,111,116,32,102,105,108,101,0,114,98,0,49,50,109,109,99,51,95,115,116,97,116,101,95,116,0,49,49,68,97,116,97,95,87,114,105,116,101,114,0,49,54,78,101,115,95,83,116,97,116,101,95,87,114,105,116,101,114,0,49,49,77,97,112,112,101,114,95,77,109,99,49,0,49,50,109,109,99,49,95,115,116,97,116,101,95,116,0,49,50,77,97,112,112,101,114,95,67,110,114,111,109,0,49,50,77,97,112,112,101,114,95,65,111,114,111,109,0,49,50,77,97,112,112,101,114,95,85,110,114,111,109,0,49,49,77,97,112,112,101,114,95,78,114,111,109,0,49,51,83,105,108,101,110,116,95,66,117,102,102,101,114,0,68,45,80,97,100,32,76,101,102,116,0,68,45,80,97,100,32,85,112,0,68,45,80,97,100,32,68,111,119,110,0,68,45,80,97,100,32,82,105,103,104,116,0,66,0,65,0,83,101,108,101,99,116,0,83,116,97,114,116,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,69,88,84,0,65,82,66,0,79,69,83,0,65,78,71,76,69,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,85,115,101,80,114,111,103,114,97,109,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,103,108,71,101,116,83,116,114,105,110,103,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,103,108,71,101,116,70,108,111,97,116,118,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,84,101,120,73,109,97,103,101,50,68,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,84,101,120,116,117,114,101,0,103,108,71,101,110,66,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,66,117,102,102,101,114,68,97,116,97,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,103,108,85,110,105,102,111,114,109,49,102,0,103,108,85,110,105,102,111,114,109,50,102,0,103,108,85,110,105,102,111,114,109,51,102,0,103,108,85,110,105,102,111,114,109,52,102,0,103,108,85,110,105,102,111,114,109,49,105,0,103,108,85,110,105,102,111,114,109,50,105,0,103,108,85,110,105,102,111,114,109,51,105,0,103,108,85,110,105,102,111,114,109,52,105,0,103,108,85,110,105,102,111,114,109,49,105,118,0,103,108,85,110,105,102,111,114,109,50,105,118,0,103,108,85,110,105,102,111,114,109,51,105,118,0,103,108,85,110,105,102,111,114,109,52,105,118,0,103,108,85,110,105,102,111,114,109,49,102,118,0,103,108,85,110,105,102,111,114,109,50,102,118,0,103,108,85,110,105,102,111,114,109,51,102,118,0,103,108,85,110,105,102,111,114,109,52,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,103,108,66,105,110,100,66,117,102,102,101,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,103,108,73,115,83,104,97,100,101,114,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,103,108,73,115,80,114,111,103,114,97,109,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,71,101,116,73,110,102,111,76,111,103,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,103,108,77,97,116,114,105,120,77,111,100,101,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,103,108,70,114,117,115,116,117,109,0,103,108,82,111,116,97,116,101,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,114,97,119,65,114,114,97,121,115,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,103,108,68,101,112,116,104,70,117,110,99,0,103,108,69,110,97,98,108,101,0,103,108,68,105,115,97,98,108,101,0,103,108,70,114,111,110,116,70,97,99,101,0,103,108,67,117,108,108,70,97,99,101,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,103,108,68,101,112,116,104,77,97,115,107,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,103,108,66,108,101,110,100,70,117,110,99,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,103,108,72,105,110,116,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,103,108,83,116,101,110,99,105,108,79,112,0,103,108,86,105,101,119,112,111,114,116,0,103,108,67,108,101,97,114,67,111,108,111,114,0,103,108,83,99,105,115,115,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,103,108,67,111,108,111,114,77,97,115,107,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,66,108,101,110,100,67,111,108,111,114,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,68,114,97,119,66,117,102,102,101,114,115,0,123,32,77,111,100,117,108,101,46,112,114,105,110,116,69,114,114,40,39,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,39,32,43,32,91,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,44,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,93,41,59,32,125,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,47,112,114,111,99,47,115,101,108,102,47,102,100,47,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+839726);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+847455);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
          case 0x1903 /* GL_RED */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx['drawBuffers'](n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  
  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096)
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var RI={temp:null,contexts:[],eventHandler:function (event) {
           var i;
           switch (event.type) {
              case 'mousemove':
                 var x = event['movementX'] || event['mozMovementX'] || event['webkitMovementX'];
                 var y = event['movementY'] || event['mozMovementY'] || event['webkitMovementY'];
                 for (i = 0; i < RI.contexts.length; i++) {
                    var oldX = HEAP32[(((RI.contexts[i].state)+(32))>>2)];
                    var oldY = HEAP32[(((RI.contexts[i].state)+(36))>>2)];
                    x += oldX;
                    y += oldY;
                    HEAP32[(((RI.contexts[i].state)+(32))>>2)]=x;
                    HEAP32[(((RI.contexts[i].state)+(36))>>2)]=y;
                 }
                 break;
              case 'mouseup':
              case 'mousedown':
                 var value;
                 var offset;
                 if (event.button === 0) offset = 40;
                 else if (event.button === 2) offset = 41;
                 else break;
                 if (event.type === 'mouseup') value = 0;
                 else value = 1;
                 for (i = 0; i < RI.contexts.length; i++) {
                    HEAP8[(((RI.contexts[i].state)+(offset))>>0)]=value;
                 }
                 break;
              case 'keyup':
              case 'keydown':
                 var key = event.keyCode;
                 var offset = key >> 3;
                 var bit = 1 << (key & 7);
                 if (offset >= 32) throw 'key code error! bad code: ' + key;
                 for (i = 0; i < RI.contexts.length; i++) {
                    var value = HEAP8[(((RI.contexts[i].state)+(offset))>>0)];
                    if (event.type === 'keyup') value &= ~bit;
                    else value |= bit;
                    HEAP8[(((RI.contexts[i].state)+(offset))>>0)]=value;
                 }
                 event.preventDefault();
                 break;
              case 'blur':
              case 'visibilitychange':
                 for (i = 0; i < RI.contexts.length; i++) {
                    _memset(RI.contexts[i].state, 0, 42);
                 }
                 break;
           }
        }};function _RWebInputDestroy(context) {
        if (context === RI.contexts.length) {
           RI.contexts.pop();
           if (RI.contexts.length === 0) {
              document.removeEventListener('keyup', RI.eventHandler, false);
              document.removeEventListener('keydown', RI.eventHandler, false);
              document.removeEventListener('mousemove', RI.eventHandler, false);
              document.removeEventListener('mouseup', RI.eventHandler, false);
              document.removeEventListener('mousedown', RI.eventHandler, false);
              document.removeEventListener('blur', RI.eventHandler, false);
              document.removeEventListener('onvisbilitychange', RI.eventHandler, false);
           }
        }
     }

  var _UItoD=true;

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx.stencilMaskSeparate(x0, x1) }

  
  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }var RA={BUFFER_SIZE:256,context:null,buffers:[],numBuffers:0,bufIndex:0,bufOffset:0,startTime:0,nonblock:false,currentTimeWorkaround:false,setStartTime:function () {
           if (RA.context.currentTime) {
              RA.startTime = window['performance']['now']() - RA.context.currentTime * 1000;
              var time1 = RA.context.currentTime;
              _usleep(50);
              if (time1 === RA.context.currentTime) {
                 RA.currentTimeWorkaround = true;
                 if (RA.startTime === 0) throw 'startTime is 0';
              }
              Module["resumeMainLoop"]();
           } else window['setTimeout'](RA.setStartTime, 0);
        },getCurrentPerfTime:function () {
           if (!RA.currentTimeWorkaround) return RA.context.currentTime;
           else if (RA.startTime) return (window['performance']['now']() - RA.startTime) / 1000;
           else throw 'getCurrentPerfTime() called before start time set';
        },process:function (queueBuffers) {
           var currentTime = RA.getCurrentPerfTime();
           for (var i = 0; i < RA.bufIndex; i++) {
              if (RA.buffers[i].endTime < currentTime) {
                 var buf = RA.buffers.splice(i, 1);
                 RA.buffers[RA.numBuffers - 1] = buf[0];
                 i--;
                 RA.bufIndex--;
              }
           }
        },fillBuffer:function (buf, samples) {
           var count = 0;
           var leftBuffer = RA.buffers[RA.bufIndex].getChannelData(0);
           var rightBuffer = RA.buffers[RA.bufIndex].getChannelData(1);
           while (samples && RA.bufOffset !== RA.BUFFER_SIZE) {
              leftBuffer[RA.bufOffset] = HEAPF32[(((buf)+(count * 8))>>2)];
              rightBuffer[RA.bufOffset] = HEAPF32[(((buf)+(count * 8 + 4))>>2)];
              RA.bufOffset++;
              count++;
              samples--;
           }
  
           return count;
        },queueAudio:function () {
           var index = RA.bufIndex;
  
           var startTime;
           if (RA.bufIndex) startTime = RA.buffers[RA.bufIndex - 1].endTime;
           else startTime = RA.context.currentTime;
           RA.buffers[index].endTime = startTime + RA.buffers[index].duration;
  
           var bufferSource = RA.context.createBufferSource();
           bufferSource.buffer = RA.buffers[index];
           bufferSource.connect(RA.context.destination);
           bufferSource.start(startTime);
  
           RA.bufIndex++;
           RA.bufOffset = 0;
        },block:function () {
           do {
              RA.process();
           } while (RA.bufIndex === RA.numBuffers - 1);
        }};function _RWebAudioBufferSize() {
        return RA.numBuffers * RA.BUFFER_SIZE + RA.BUFFER_SIZE;
     }

  
  
  function _eglWaitClient() {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
        // TODO: read attribList.
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglTerminate(display) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.defaultDisplayInitialized = false;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glUniform3iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 3;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform3iv(location, value);
    }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  var _llvm_pow_f32=Math_pow;

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  var _abs=Math_abs;

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _RWebAudioFree() {
        RA.bufIndex = 0;
        RA.bufOffset = 0;
        return;
     }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glFrustum() {
  Module['printErr']('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _RWebAudioInit(latency) {
        var ac = window['AudioContext'] || window['webkitAudioContext'];
  
        if (!ac) return 0;
  
        RA.context = new ac();
  
        RA.numBuffers = ((latency * RA.context.sampleRate) / (1000 * RA.BUFFER_SIZE))|0;
        if (RA.numBuffers < 2) RA.numBuffers = 2;
  
        for (var i = 0; i < RA.numBuffers; i++) RA.buffers[i] = RA.context.createBuffer(2, RA.BUFFER_SIZE, RA.context.sampleRate);
  
        RA.nonblock = false;
        RA.startTime = 0;
        // chrome hack to get currentTime running
        RA.context.createGain();
        window['setTimeout'](RA.setStartTime, 0);
        Module["pauseMainLoop"]();
        return 1;
     }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  var _emscripten_preinvoke=true;

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3f(location, v0, v1, v2);
    }

  function _emscripten_glGetObjectParameterivARB() {
  Module['printErr']('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3i(location, v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  var _cosf=Math_cos;

  function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
        pixels = data.pixels;
      } else {
        pixels = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

  function _glDisable(x0) { GLctx.disable(x0) }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};
  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.buffer, addr, len);
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _emscripten_glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function ___lock() {}

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx.vertexAttrib3f(x0, x1, x2, x3) }

  function _emscripten_glNormalPointer() {
  Module['printErr']('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  
  var _emscripten_GetProcAddress=undefined;
  Module["_emscripten_GetProcAddress"] = _emscripten_GetProcAddress;function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }


  var _emscripten_get_longjmp_result=true;

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glGetVertexAttribfv(index, pname, params) {
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number') {
        HEAPF32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAPF32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_get_canvas_size(width, height, isFullscreen) {
      var canvas = Module['canvas'];
      HEAP32[((width)>>2)]=canvas.width;
      HEAP32[((height)>>2)]=canvas.height;
      HEAP32[((isFullscreen)>>2)]=Browser.isFullScreen ? 1 : 0;
    }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  var _sinf=Math_sin;

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _cos=Math_cos;

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number' || typeof data == 'boolean') {
        HEAP32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAP32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GL.currentContext.instancedArraysExt.drawArraysInstancedANGLE(mode, first, count, primcount);
    }

  function _emscripten_glEnableClientState() {
  Module['printErr']('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) { 
      return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _eglQuerySurface(display, surface, attribute, value) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (surface != 62006 /* Magic ID for Emscripten 'default surface' */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch(attribute) {
      case 0x3028: // EGL_CONFIG_ID
        HEAP32[((value)>>2)]=62002;
          return 1;
      case 0x3058: // EGL_LARGEST_PBUFFER
        // Odd EGL API: If surface is not a pbuffer surface, 'value' should not be written to. It's not specified as an error, so true should(?) be returned.
        // Existing Android implementation seems to do so at least.
        return 1;
      case 0x3057: // EGL_WIDTH
        HEAP32[((value)>>2)]=Module.canvas.width;
        return 1;
      case 0x3056: // EGL_HEIGHT
        HEAP32[((value)>>2)]=Module.canvas.height;
        return 1;
      case 0x3090: // EGL_HORIZONTAL_RESOLUTION
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3091: // EGL_VERTICAL_RESOLUTION
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3092: // EGL_PIXEL_ASPECT_RATIO
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3086: // EGL_RENDER_BUFFER
        // The main surface is bound to the visible canvas window - it's always backbuffered. 
        // Alternative to EGL_BACK_BUFFER would be EGL_SINGLE_BUFFER.
        HEAP32[((value)>>2)]=0x3084; 
        return 1;
      case 0x3099: // EGL_MULTISAMPLE_RESOLVE
        HEAP32[((value)>>2)]=0x309A; 
        return 1;
      case 0x3093: // EGL_SWAP_BEHAVIOR
        // The two possibilities are EGL_BUFFER_PRESERVED and EGL_BUFFER_DESTROYED. Slightly unsure which is the
        // case for browser environment, but advertise the 'weaker' behavior to be sure.
        HEAP32[((value)>>2)]=0x3095;
        return 1;
      case 0x3080: // EGL_TEXTURE_FORMAT
      case 0x3081: // EGL_TEXTURE_TARGET
      case 0x3082: // EGL_MIPMAP_TEXTURE
      case 0x3083: // EGL_MIPMAP_LEVEL
        // This is a window surface, not a pbuffer surface. Spec:
        // "Querying EGL_TEXTURE_FORMAT, EGL_TEXTURE_TARGET, EGL_MIPMAP_TEXTURE, or EGL_MIPMAP_LEVEL for a non-pbuffer surface is not an error, but value is not modified."
        // So pass-through.
        return 1;
      default:
        EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
        return 0;
      }
    }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glStencilMask(x0) { GLctx.stencilMask(x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx.stencilFuncSeparate(x0, x1, x2, x3) }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  var _emscripten_landingpad=true;

  function _glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, 'shader not bound to local id');
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glFinish() { GLctx.finish() }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDepthFunc(x0) { GLctx.depthFunc(x0) }

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  function _emscripten_glUniform4iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 4;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform4iv(location, value);
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _emscripten_glGetUniformiv(program, location, params) {
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        HEAP32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAP32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var data = GL.getTexPixelData(type, format, width, height, pixels, format);
      if (!data.pixels) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, data.pixels);
    }

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _eglCreateWindowSurface(display, config, win, attrib_list) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002 /* Magic ID for the only EGLConfig supported by Emscripten */) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      // TODO: Examine attrib_list! Parameters that can be present there are:
      // - EGL_RENDER_BUFFER (must be EGL_BACK_BUFFER)
      // - EGL_VG_COLORSPACE (can't be set)
      // - EGL_VG_ALPHA_FORMAT (can't be set)
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 62006; /* Magic ID for Emscripten 'default surface' */
    }

  var _emscripten_prep_setjmp=true;

  function _emscripten_glColorPointer() {
  Module['printErr']('missing function: emscripten_glColorPointer'); abort(-1);
  }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_glClearStencil(x0) { GLctx.clearStencil(x0) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for(var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GL.currentContext.vaoExt.deleteVertexArrayOES(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _eglDestroySurface(display, surface) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0; 
      }
      if (surface != 62006 /* Magic ID for the only EGLSurface supported by Emscripten */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 1;
      }
      if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0;
      }
      if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1; /* Magic ID for Emscripten 'default surface' */
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _emscripten_glSampleCoverage(x0, x1) { GLctx.sampleCoverage(x0, x1) }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glCullFace(x0) { GLctx.cullFace(x0) }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4f(location, v0, v1, v2, v3);
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glHint(x0, x1) { GLctx.hint(x0, x1) }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  var _SItoD=true;

  var _SItoF=true;

  function _emscripten_glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _abort() {
      Module['abort']();
    }

  function _RWebAudioSetNonblockState(state) {
        RA.nonblock = state;
     }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 2;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform2iv(location, value);
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _emscripten_glVertexAttrib1fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+4)>>2);
      GLctx.vertexAttrib1fv(index, v);
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  var _fabs=Math_abs;

  function _emscripten_glClear(x0) { GLctx.clear(x0) }

  function _RWebAudioStop() {
        RA.bufIndex = 0;
        RA.bufOffset = 0;
        return true;
     }

  var _sqrt=Math_sqrt;

  function _emscripten_glPolygonOffset(x0, x1) { GLctx.polygonOffset(x0, x1) }

  var _emscripten_asm_const_int=true;

  function _emscripten_glUniform2f(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2f(location, v0, v1);
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2i(location, v0, v1);
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function _emscripten_glDepthMask(x0) { GLctx.depthMask(x0) }


  function _emscripten_glGetPointerv() {
  Module['printErr']('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function _emscripten_glDepthRange(x0, x1) { GLctx.depthRange(x0, x1) }

  var _ceil=Math_ceil;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_setjmp=true;

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx.vertexAttrib1f(x0, x1) }

  function _RWebAudioStart() {
        return true;
     }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glUniform1fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[0];
        view[0] = HEAPF32[((value)>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(location, view);
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glBindProgramARB() {
  Module['printErr']('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDisable(x0) { GLctx.disable(x0) }

  function _emscripten_glVertexAttrib3fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+12)>>2);
      GLctx.vertexAttrib3fv(index, v);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && name) {
        writeStringToMemory(infoname, name);
        if (length) HEAP32[((length)>>2)]=infoname.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glLineWidth(x0) { GLctx.lineWidth(x0) }

  var _emscripten_resume=true;

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
        pixels = data.pixels;
      } else {
        pixels = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4i(location, v0, v1, v2, v3);
    }

  function _emscripten_glRotatef() {
  Module['printErr']('missing function: emscripten_glRotatef'); abort(-1);
  }

  function _emscripten_glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }

  var _emscripten_check_longjmp=true;

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glClientActiveTexture() {
  Module['printErr']('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx.stencilOpSeparate(x0, x1, x2, x3) }

  
  
  var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,requestedAnimationFrame:false,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.passiveMotionFunc, [lastX, lastY]);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.motionFunc, [lastX, lastY]);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
        _glutPostRedisplay();
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
                  (function() {});
        CFS.apply(document, []);
      }};function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }
  
  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }function _eglCreateContext(display, config, hmm, contextAttribs) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      // EGL 1.4 spec says default EGL_CONTEXT_CLIENT_VERSION is GLES1, but this is not supported by Emscripten.
      // So user must pass EGL_CONTEXT_CLIENT_VERSION == 2 to initialize EGL.
      var glesContextVersion = 1;
      for(;;) {
        var param = HEAP32[((contextAttribs)>>2)];
        if (param == 0x3098 /*EGL_CONTEXT_CLIENT_VERSION*/) {
          glesContextVersion = HEAP32[(((contextAttribs)+(4))>>2)];
        } else if (param == 0x3038 /*EGL_NONE*/) {
          break;
        } else {
          /* EGL1.4 specifies only EGL_CONTEXT_CLIENT_VERSION as supported attribute */
          EGL.setErrorCode(0x3004 /*EGL_BAD_ATTRIBUTE*/);
          return 0;
        }
        contextAttribs += 8;
      }
      if (glesContextVersion != 2) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0; /* EGL_NO_CONTEXT */
      }
  
      _glutInitDisplayMode(0xB2 /* GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE | GLUT_STENCIL */);
      EGL.windowID = _glutCreateWindow();
      if (EGL.windowID != 0) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        // Note: This function only creates a context, but it shall not make it active.
        return 62004; // Magic ID for Emscripten EGLContext
      } else {
        EGL.setErrorCode(0x3009 /* EGL_BAD_MATCH */); // By the EGL 1.4 spec, an implementation that does not support GLES2 (WebGL in this case), this error code is set.
        return 0; /* EGL_NO_CONTEXT */
      }
    }

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var data = GL.getTexPixelData(type, format, width, height, pixels, format);
      if (!data.pixels) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, data.pixels);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      assert(GL.currentContext.compressionExt);
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _eglBindAPI(api) {
      if (api == 0x30A0 /* EGL_OPENGL_ES_API */) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      } else { // if (api == 0x30A1 /* EGL_OPENVG_API */ || api == 0x30A2 /* EGL_OPENGL_API */) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _RWebInputInit(latency) {
        if (RI.contexts.length === 0) {
           document.addEventListener('keyup', RI.eventHandler, false);
           document.addEventListener('keydown', RI.eventHandler, false);
           document.addEventListener('mousemove', RI.eventHandler, false);
           document.addEventListener('mouseup', RI.eventHandler, false);
           document.addEventListener('mousedown', RI.eventHandler, false);
           document.addEventListener('blur', RI.eventHandler, false);
           document.addEventListener('onvisbilitychange', RI.eventHandler, false);
        }
        if (RI.temp === null) RI.temp = _malloc(42);
  
        var s = _malloc(42);
        _memset(s, 0, 42);
        RI.contexts.push({
           state: s
        });
        return RI.contexts.length;
     }

  function _emscripten_glIsEnabled(x0) { return GLctx.isEnabled(x0) }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx.vertexAttrib4f(x0, x1, x2, x3, x4) }

  function ___gxx_personality_v0() {
    }

  var _sin=Math_sin;

  function _emscripten_glClearDepthf(x0) { GLctx.clearDepth(x0) }

  function _RWebAudioWrite(buf, size) {
        RA.process();
        var samples = size / 8;
        var count = 0;
  
        while (samples) {
           var fill = RA.fillBuffer(buf, samples);
           samples -= fill;
           count += fill;
           buf += fill * 8;
  
           if (RA.bufOffset === RA.BUFFER_SIZE) {
              if (RA.bufIndex === RA.numBuffers - 1) {
                 if (RA.nonblock) break;
                 else RA.block();
              }
              RA.queueAudio();
           }
        }
  
        return count * 8;
     }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  var _emscripten_cleanup_setjmp=true;

  function _emscripten_glGetUniformfv(program, location, params) {
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number') {
        HEAPF32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAPF32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, 'shader not bound to local id');
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glFrontFace(x0) { GLctx.frontFace(x0) }

  function _emscripten_glDepthRangef(x0, x1) { GLctx.depthRange(x0, x1) }

  function _emscripten_glUniform1iv(location, count, value) {
      location = GL.uniforms[location];
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform1iv(location, value);
    }

  function _emscripten_glTexCoordPointer() {
  Module['printErr']('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glGetInfoLogARB() {
  Module['printErr']('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _RWebInputPoll(context) {
        context -= 1;
        var state = RI.contexts[context].state;
        _memcpy(RI.temp, state, 42);
        // reset mouse movements
        HEAP32[(((RI.contexts[context].state)+(32))>>2)]=0;
        HEAP32[(((RI.contexts[context].state)+(36))>>2)]=0;
        return RI.temp;
     }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function _eglInitialize(display, majorVersion, minorVersion) {
      if (display == 62000 /* Magic ID for Emscripten 'default display' */) {
        if (majorVersion) {
          HEAP32[((majorVersion)>>2)]=1; // Advertise EGL Major version: '1'
        }
        if (minorVersion) {
          HEAP32[((minorVersion)>>2)]=4; // Advertise EGL Minor version: '4'
        }
        EGL.defaultDisplayInitialized = true;
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      } 
      else {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx.blendColor(x0, x1, x2, x3) }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx.vertexAttrib2f(x0, x1, x2) }

  function _emscripten_glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx.blendEquationSeparate(x0, x1) }

  function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glDrawRangeElements() {
  Module['printErr']('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+8)>>2);
      GLctx.vertexAttrib2fv(index, v);
    }

  function _RWebAudioSampleRate() {
        return RA.context.sampleRate;
     }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && name) {
        writeStringToMemory(infoname, name);
        if (length) HEAP32[((length)>>2)]=infoname.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glDeleteObjectARB() {
  Module['printErr']('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  var _FtoIHigh=true;

  function _emscripten_glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glClearDepth(x0) { GLctx.clearDepth(x0) }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  function _glutDestroyWindow(name) {
      Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      return 1;
    }function _eglDestroyContext(display, context) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      if (context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glEnable(x0) { GLctx.enable(x0) }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx.scissor(x0, x1, x2, x3) }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  var _BDtoIHigh=true;

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glDrawBuffers(n, bufs) {
      var bufArray = [];
      for (var i = 0; i < n; i++)
        bufArray.push(HEAP32[(((bufs)+(i*4))>>2)]);
  
      GL.currentContext.drawBuffersExt(bufArray);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glBlendEquation(x0) { GLctx.blendEquation(x0) }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _emscripten_glVertexAttrib4fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+16)>>2);
      GLctx.vertexAttrib4fv(index, v);
    }

  var _BItoD=true;

  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      result = result.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && source) {
        writeStringToMemory(result, source);
        if (length) HEAP32[((length)>>2)]=result.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GL.currentContext.instancedArraysExt.vertexAttribDivisorANGLE(index, divisor);    
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GL.currentContext.instancedArraysExt.drawElementsInstancedANGLE(mode, count, type, indices, primcount);
    }

  function _eglMakeCurrent(display, draw, read, context) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0 /* EGL_FALSE */;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy. 
      if (context != 0 && context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
      if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006 /* Magic ID for Emscripten 'default surface' */)) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
      EGL.currentContext = context;
      EGL.currentDrawSurface = draw;
      EGL.currentReadSurface = read;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1 /* EGL_TRUE */;
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      assert(GL.currentContext.compressionExt);
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      // N.b. using array notation explicitly to not confuse Closure minification.
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data);
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glBindVertexArray(vao) {
  
      GL.currentContext.vaoExt.bindVertexArrayOES(GL.vaos[vao]);
    }

  var _floor=Math_floor;

  function _emscripten_glLoadMatrixf() {
  Module['printErr']('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function ___unlock() {}

  function _emscripten_glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _RWebAudioWriteAvail() {
        RA.process();
        return ((RA.numBuffers - RA.bufIndex) * RA.BUFFER_SIZE - RA.bufOffset) * 8;
     }

  function _emscripten_glFlush() { GLctx.flush() }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _emscripten_glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _eglGetDisplay(nativeDisplayType) {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      // Note: As a 'conformant' implementation of EGL, we would prefer to init here only if the user
      //       calls this function with EGL_DEFAULT_DISPLAY. Other display IDs would be preferred to be unsupported
      //       and EGL_NO_DISPLAY returned. Uncomment the following code lines to do this.
      // Instead, an alternative route has been preferred, namely that the Emscripten EGL implementation
      // "emulates" X11, and eglGetDisplay is expected to accept/receive a pointer to an X11 Display object.
      // Therefore, be lax and allow anything to be passed in, and return the magic handle to our default EGLDisplay object.
  
  //    if (nativeDisplayType == 0 /* EGL_DEFAULT_DISPLAY */) {
          return 62000; // Magic ID for Emscripten 'default display'
  //    }
  //    else
  //      return 0; // EGL_NO_DISPLAY
    }

  function _emscripten_set_canvas_size(width, height) {
      Browser.setCanvasSize(width, height);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for(var i = 0; i < n; i++) {
        var vao = GL.currentContext.vaoExt.createVertexArrayOES();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  var _FtoILow=true;

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function _emscripten_glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 < count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
var GLctx; GL.init()
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vd(x) { Module["printErr"]("Invalid function pointer called with signature 'vd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_id(x) { Module["printErr"]("Invalid function pointer called with signature 'id'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdi(x) { Module["printErr"]("Invalid function pointer called with signature 'vdi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    Module["dynCall_viiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_id(index,a1) {
  try {
    return Module["dynCall_id"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vd": nullFunc_vd, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viiiiiiiiiii": nullFunc_viiiiiiiiiii, "nullFunc_id": nullFunc_id, "nullFunc_viddd": nullFunc_viddd, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_viii": nullFunc_viii, "nullFunc_viid": nullFunc_viid, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_iid": nullFunc_iid, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_vdddddd": nullFunc_vdddddd, "nullFunc_vdddd": nullFunc_vdddd, "nullFunc_vdd": nullFunc_vdd, "nullFunc_v": nullFunc_v, "nullFunc_vdi": nullFunc_vdi, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiiiiiii": invoke_viiiiiiiiiii, "invoke_id": invoke_id, "invoke_viddd": invoke_viddd, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiid": invoke_iiid, "invoke_viii": invoke_viii, "invoke_viid": invoke_viid, "invoke_vidddd": invoke_vidddd, "invoke_iid": invoke_iid, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iii": invoke_iii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_vdddddd": invoke_vdddddd, "invoke_vdddd": invoke_vdddd, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_vdi": invoke_vdi, "invoke_viiii": invoke_viiii, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_glUseProgram": _glUseProgram, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glCullFace": _emscripten_glCullFace, "_RWebAudioBufferSize": _RWebAudioBufferSize, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glViewport": _emscripten_glViewport, "_glUniform2fv": _glUniform2fv, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_eglTerminate": _eglTerminate, "_glDeleteProgram": _glDeleteProgram, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_glBindBuffer": _glBindBuffer, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_clock_gettime": _clock_gettime, "_glDrawArrays": _glDrawArrays, "_glDeleteTextures": _glDeleteTextures, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_glBlendFunc": _glBlendFunc, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_glGetAttribLocation": _glGetAttribLocation, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_eglBindAPI": _eglBindAPI, "_glCompileShader": _glCompileShader, "_sysconf": _sysconf, "_eglCreateContext": _eglCreateContext, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_eglDestroySurface": _eglDestroySurface, "_RWebAudioWrite": _RWebAudioWrite, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_fabs": _fabs, "___lock": ___lock, "_cos": _cos, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_pthread_getspecific": _pthread_getspecific, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_RWebAudioInit": _RWebAudioInit, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_get_canvas_size": _emscripten_get_canvas_size, "__isLeapYear": __isLeapYear, "_glGetShaderiv": _glGetShaderiv, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_glFramebufferRenderbuffer": _glFramebufferRenderbuffer, "___syscall220": ___syscall220, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glScissor": _emscripten_glScissor, "_RWebInputPoll": _RWebInputPoll, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_pthread_cleanup_push": _pthread_cleanup_push, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_RWebInputDestroy": _RWebInputDestroy, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall85": ___syscall85, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_RWebInputInit": _RWebInputInit, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_glRenderbufferStorage": _glRenderbufferStorage, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_glIsShader": _emscripten_glIsShader, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_fabsf": _fabsf, "_glBindRenderbuffer": _glBindRenderbuffer, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glHint": _emscripten_glHint, "_glutInitDisplayMode": _glutInitDisplayMode, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_glViewport": _glViewport, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "___setErrNo": ___setErrNo, "_eglGetProcAddress": _eglGetProcAddress, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_llvm_pow_f32": _llvm_pow_f32, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_set_canvas_size": _emscripten_set_canvas_size, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "___resumeException": ___resumeException, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_abs": _abs, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_nanosleep": _nanosleep, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_glGenTextures": _glGenTextures, "_RWebAudioSampleRate": _RWebAudioSampleRate, "_glGetIntegerv": _glGetIntegerv, "_eglCreateWindowSurface": _eglCreateWindowSurface, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_sqrt": _sqrt, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_eglWaitClient": _eglWaitClient, "_emscripten_get_now": _emscripten_get_now, "___syscall10": ___syscall10, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_glAttachShader": _glAttachShader, "_RWebAudioStart": _RWebAudioStart, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glEnable": _emscripten_glEnable, "_glCreateProgram": _glCreateProgram, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_glDisable": _glDisable, "__addDays": __addDays, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glReadPixels": _emscripten_glReadPixels, "___syscall5": ___syscall5, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "_glDetachShader": _glDetachShader, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_glGenFramebuffers": _glGenFramebuffers, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_exit": _exit, "_eglGetDisplay": _eglGetDisplay, "_emscripten_asm_const_2": _emscripten_asm_const_2, "_glGetString": _glGetString, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_llvm_pow_f64": _llvm_pow_f64, "_glDeleteFramebuffers": _glDeleteFramebuffers, "___syscall54": ___syscall54, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_eglChooseConfig": _eglChooseConfig, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_sin": _sin, "_glCheckFramebufferStatus": _glCheckFramebufferStatus, "_emscripten_glFinish": _emscripten_glFinish, "_glFramebufferTexture2D": _glFramebufferTexture2D, "___syscall20": ___syscall20, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "___cxa_allocate_exception": ___cxa_allocate_exception, "_glVertexAttribPointer": _glVertexAttribPointer, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "___syscall221": ___syscall221, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_localtime_r": _localtime_r, "_tzset": _tzset, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_glClearColor": _glClearColor, "_pthread_once": _pthread_once, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_glBindTexture": _glBindTexture, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "___syscall197": ___syscall197, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "___syscall195": ___syscall195, "___cxa_end_catch": ___cxa_end_catch, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_glUniform1i": _glUniform1i, "_glutDestroyWindow": _glutDestroyWindow, "_strftime": _strftime, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "___syscall6": ___syscall6, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_glCreateShader": _glCreateShader, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_glGetError": _glGetError, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_getenv": _getenv, "_pthread_key_create": _pthread_key_create, "_glActiveTexture": _glActiveTexture, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_eglMakeCurrent": _eglMakeCurrent, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_eglQuerySurface": _eglQuerySurface, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_abort": _abort, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_eglDestroyContext": _eglDestroyContext, "_glDeleteBuffers": _glDeleteBuffers, "_ceil": _ceil, "_glTexImage2D": _glTexImage2D, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_localtime": _localtime, "_RWebAudioFree": _RWebAudioFree, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_floor": _floor, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_glGetAttachedShaders": _glGetAttachedShaders, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "___cxa_throw": ___cxa_throw, "_glDeleteShader": _glDeleteShader, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_glGetProgramiv": _glGetProgramiv, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "___buildEnvironment": ___buildEnvironment, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "___syscall40": ___syscall40, "_RWebAudioStop": _RWebAudioStop, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "__arraySum": __arraySum, "___cxa_pure_virtual": ___cxa_pure_virtual, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_glReadPixels": _glReadPixels, "_glDeleteRenderbuffers": _glDeleteRenderbuffers, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_eglInitialize": _eglInitialize, "_usleep": _usleep, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_glClear": _glClear, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_glGenRenderbuffers": _glGenRenderbuffers, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_glGetUniformLocation": _glGetUniformLocation, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "___gxx_personality_v0": ___gxx_personality_v0, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_sinf": _sinf, "__exit": __exit, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_glPixelStorei": _glPixelStorei, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_pthread_self": _pthread_self, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_glutCreateWindow": _glutCreateWindow, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glDetachShader": _emscripten_glDetachShader, "___unlock": ___unlock, "_glLinkProgram": _glLinkProgram, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_longjmp": _longjmp, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_pthread_setspecific": _pthread_setspecific, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_glBufferData": _glBufferData, "_cosf": _cosf, "_RWebAudioSetNonblockState": _RWebAudioSetNonblockState, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_RWebAudioWriteAvail": _RWebAudioWriteAvail, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_glTexParameteri": _glTexParameteri, "_emscripten_longjmp": _emscripten_longjmp, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_glUniform1f": _glUniform1f, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_glTexSubImage2D": _glTexSubImage2D, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vd=env.nullFunc_vd;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viiiiiiiiiii=env.nullFunc_viiiiiiiiiii;
  var nullFunc_id=env.nullFunc_id;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_iid=env.nullFunc_iid;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_vdddddd=env.nullFunc_vdddddd;
  var nullFunc_vdddd=env.nullFunc_vdddd;
  var nullFunc_vdd=env.nullFunc_vdd;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vdi=env.nullFunc_vdi;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vd=env.invoke_vd;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiiiiiii=env.invoke_viiiiiiiiiii;
  var invoke_id=env.invoke_id;
  var invoke_viddd=env.invoke_viddd;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viid=env.invoke_viid;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_iid=env.invoke_iid;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_v=env.invoke_v;
  var invoke_vdi=env.invoke_vdi;
  var invoke_viiii=env.invoke_viiii;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _glUseProgram=env._glUseProgram;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _RWebAudioBufferSize=env._RWebAudioBufferSize;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _glUniform2fv=env._glUniform2fv;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _eglTerminate=env._eglTerminate;
  var _glDeleteProgram=env._glDeleteProgram;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _glBindBuffer=env._glBindBuffer;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _clock_gettime=env._clock_gettime;
  var _glDrawArrays=env._glDrawArrays;
  var _glDeleteTextures=env._glDeleteTextures;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glBlendFunc=env._glBlendFunc;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _eglBindAPI=env._eglBindAPI;
  var _glCompileShader=env._glCompileShader;
  var _sysconf=env._sysconf;
  var _eglCreateContext=env._eglCreateContext;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _eglDestroySurface=env._eglDestroySurface;
  var _RWebAudioWrite=env._RWebAudioWrite;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _fabs=env._fabs;
  var ___lock=env.___lock;
  var _cos=env._cos;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _pthread_getspecific=env._pthread_getspecific;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var _RWebAudioInit=env._RWebAudioInit;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_get_canvas_size=env._emscripten_get_canvas_size;
  var __isLeapYear=env.__isLeapYear;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _glFramebufferRenderbuffer=env._glFramebufferRenderbuffer;
  var ___syscall220=env.___syscall220;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _RWebInputPoll=env._RWebInputPoll;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _RWebInputDestroy=env._RWebInputDestroy;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall85=env.___syscall85;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _RWebInputInit=env._RWebInputInit;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _glRenderbufferStorage=env._glRenderbufferStorage;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _fabsf=env._fabsf;
  var _glBindRenderbuffer=env._glBindRenderbuffer;
  var _emscripten_glClear=env._emscripten_glClear;
  var _emscripten_glHint=env._emscripten_glHint;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _glViewport=env._glViewport;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var ___setErrNo=env.___setErrNo;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_set_canvas_size=env._emscripten_set_canvas_size;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var ___resumeException=env.___resumeException;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _abs=env._abs;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _nanosleep=env._nanosleep;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _glEnable=env._glEnable;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _glGenTextures=env._glGenTextures;
  var _RWebAudioSampleRate=env._RWebAudioSampleRate;
  var _glGetIntegerv=env._glGetIntegerv;
  var _eglCreateWindowSurface=env._eglCreateWindowSurface;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _sqrt=env._sqrt;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _eglWaitClient=env._eglWaitClient;
  var _emscripten_get_now=env._emscripten_get_now;
  var ___syscall10=env.___syscall10;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _glAttachShader=env._glAttachShader;
  var _RWebAudioStart=env._RWebAudioStart;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _glCreateProgram=env._glCreateProgram;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var _glDisable=env._glDisable;
  var __addDays=env.__addDays;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var ___syscall5=env.___syscall5;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var _glDetachShader=env._glDetachShader;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _exit=env._exit;
  var _eglGetDisplay=env._eglGetDisplay;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _glGetString=env._glGetString;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _glDeleteFramebuffers=env._glDeleteFramebuffers;
  var ___syscall54=env.___syscall54;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _eglChooseConfig=env._eglChooseConfig;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _sin=env._sin;
  var _glCheckFramebufferStatus=env._glCheckFramebufferStatus;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var ___syscall20=env.___syscall20;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var ___syscall221=env.___syscall221;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _glClearColor=env._glClearColor;
  var _pthread_once=env._pthread_once;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _glBindTexture=env._glBindTexture;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var ___syscall197=env.___syscall197;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var ___syscall195=env.___syscall195;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _glUniform1i=env._glUniform1i;
  var _glutDestroyWindow=env._glutDestroyWindow;
  var _strftime=env._strftime;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var ___syscall6=env.___syscall6;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _glCreateShader=env._glCreateShader;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _glGetError=env._glGetError;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var _getenv=env._getenv;
  var _pthread_key_create=env._pthread_key_create;
  var _glActiveTexture=env._glActiveTexture;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _eglMakeCurrent=env._eglMakeCurrent;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _eglQuerySurface=env._eglQuerySurface;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _abort=env._abort;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _eglDestroyContext=env._eglDestroyContext;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _ceil=env._ceil;
  var _glTexImage2D=env._glTexImage2D;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _localtime=env._localtime;
  var _RWebAudioFree=env._RWebAudioFree;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _floor=env._floor;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _glGetAttachedShaders=env._glGetAttachedShaders;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var ___cxa_throw=env.___cxa_throw;
  var _glDeleteShader=env._glDeleteShader;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _glGetProgramiv=env._glGetProgramiv;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var ___buildEnvironment=env.___buildEnvironment;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var ___syscall40=env.___syscall40;
  var _RWebAudioStop=env._RWebAudioStop;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var __arraySum=env.__arraySum;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _glReadPixels=env._glReadPixels;
  var _glDeleteRenderbuffers=env._glDeleteRenderbuffers;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _eglInitialize=env._eglInitialize;
  var _usleep=env._usleep;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _glClear=env._glClear;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _glGenRenderbuffers=env._glGenRenderbuffers;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _sinf=env._sinf;
  var __exit=env.__exit;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _glPixelStorei=env._glPixelStorei;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _pthread_self=env._pthread_self;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _glutCreateWindow=env._glutCreateWindow;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var ___unlock=env.___unlock;
  var _glLinkProgram=env._glLinkProgram;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _longjmp=env._longjmp;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _pthread_setspecific=env._pthread_setspecific;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _glBufferData=env._glBufferData;
  var _cosf=env._cosf;
  var _RWebAudioSetNonblockState=env._RWebAudioSetNonblockState;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _RWebAudioWriteAvail=env._RWebAudioWriteAvail;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _glTexParameteri=env._glTexParameteri;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _glUniform1f=env._glUniform1f;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _glTexSubImage2D=env._glTexSubImage2D;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $init_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 _emscripten_set_canvas_size(800,600);
 _rarch_main_clear_state();
 _rarch_init_msg_queue();
 $3 = $1;
 $4 = $2;
 $5 = (_rarch_main_init($3,$4)|0);
 $init_ret = $5;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $init_ret;
  $0 = $7;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 _menu_init();
 $8 = (259656);
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $10 | 1;
 $15 = (259656);
 $16 = $15;
 HEAP32[$16>>2] = $14;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = HEAP8[(260857)>>0]|0;
 $20 = $19&1;
 if (!($20)) {
  _menu_rom_history_push_current();
 }
 $21 = HEAP8[(312)>>0]|0;
 $22 = $21&1;
 $23 = $22 ? 0 : 2147483647;
 _emscripten_set_main_loop((219|0),($23|0),1);
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _mainloop() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $r = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP8[(196976)>>0]|0;
 $1 = $0&1;
 if ($1) {
  _endloop();
  STACKTOP = sp;return;
 }
 $2 = HEAP8[737624>>0]|0;
 $3 = $2&1;
 if ($3) {
  $4 = (_menu_iterate()|0);
  if ($4) {
   STACKTOP = sp;return;
  }
  HEAP8[737624>>0] = 0;
  $5 = HEAP8[(40)>>0]|0;
  $6 = $5&1;
  _driver_set_nonblock_state($6);
  $7 = HEAP32[(20)>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = HEAP32[8>>2]|0;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[(20)>>2]|0;
   $13 = (FUNCTION_TABLE_ii[$11 & 511]($12)|0);
   if (!($13)) {
    $14 = HEAP32[(259664)>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = HEAP32[(259664)>>2]|0;
    $17 = HEAP32[544648>>2]|0;
    $18 = $15 ? $16 : $17;
    (_fprintf($18,739813,$vararg_buffer)|0);
    $19 = HEAP32[(259664)>>2]|0;
    $20 = ($19|0)!=(0|0);
    $21 = HEAP32[(259664)>>2]|0;
    $22 = HEAP32[544648>>2]|0;
    $23 = $20 ? $21 : $22;
    (_fflush($23)|0);
    HEAP8[(102649)>>0] = 0;
   }
  }
  $24 = (259656);
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = $26 & -5;
  $31 = (259656);
  $32 = $31;
  HEAP32[$32>>2] = $30;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
  STACKTOP = sp;return;
 }
 $35 = (259656);
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $37 & 2;
 $42 = ($41|0)!=(0);
 $43 = (0)!=(0);
 $44 = $42 | $43;
 if ($44) {
  _load_menu_game_prepare();
  $45 = (_load_menu_game()|0);
  if (!($45)) {
   STACKTOP = sp;return;
  }
  $46 = (259656);
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = $48 | 1;
  $53 = (259656);
  $54 = $53;
  HEAP32[$54>>2] = $52;
  $55 = (($53) + 4)|0;
  $56 = $55;
  HEAP32[$56>>2] = $51;
  $57 = (259656);
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = $59 & -3;
  $64 = (259656);
  $65 = $64;
  HEAP32[$65>>2] = $63;
  $66 = (($64) + 4)|0;
  $67 = $66;
  HEAP32[$67>>2] = $62;
  STACKTOP = sp;return;
 }
 $68 = (259656);
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = $70 & 1;
 $75 = ($74|0)!=(0);
 $76 = (0)!=(0);
 $77 = $75 | $76;
 if (!($77)) {
  $99 = (259656);
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = (($99) + 4)|0;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  $105 = $101 & 4;
  $106 = ($105|0)!=(0);
  $107 = (0)!=(0);
  $108 = $106 | $107;
  if (!($108)) {
   HEAP8[(196976)>>0] = 1;
   STACKTOP = sp;return;
  }
  $109 = (259656);
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = $111 | 32;
  $116 = (259656);
  $117 = $116;
  HEAP32[$117>>2] = $115;
  $118 = (($116) + 4)|0;
  $119 = $118;
  HEAP32[$119>>2] = $114;
  $120 = HEAP32[(12)>>2]|0;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = HEAP32[(24)>>2]|0;
  FUNCTION_TABLE_vii[$122 & 1023]($123,0);
  $124 = HEAP32[(20)>>2]|0;
  $125 = ($124|0)!=(0|0);
  if ($125) {
   $126 = HEAP32[8>>2]|0;
   $127 = ((($126)) + 8|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = HEAP32[(20)>>2]|0;
   (FUNCTION_TABLE_ii[$128 & 511]($129)|0);
  }
  HEAP8[737624>>0] = 1;
  STACKTOP = sp;return;
 }
 $78 = HEAP8[(259375)>>0]|0;
 $79 = $78&1;
 if ($79) {
  $80 = HEAP8[(259376)>>0]|0;
  $81 = $80&1;
  if ($81) {
   label = 16;
  } else {
   $82 = (_rarch_main_idle_iterate()|0);
   $83 = $82&1;
   $r = $83;
  }
 } else {
  label = 16;
 }
 if ((label|0) == 16) {
  $84 = (_rarch_main_iterate()|0);
  $85 = $84&1;
  $r = $85;
 }
 $86 = $r;
 $87 = $86&1;
 if ($87) {
  STACKTOP = sp;return;
 }
 $88 = (259656);
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = $90 & -2;
 $95 = (259656);
 $96 = $95;
 HEAP32[$96>>2] = $94;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = $93;
 STACKTOP = sp;return;
}
function _endloop() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(196976)>>0] = 0;
 _menu_free();
 $0 = HEAP8[(259670)>>0]|0;
 $1 = $0&1;
 if ($1) {
  $2 = HEAP8[(123154)>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = ($3|0)!=(0);
  if ($4) {
   (_config_save_file((123154))|0);
  }
 }
 $5 = HEAP8[(259668)>>0]|0;
 $6 = $5&1;
 if ($6) {
  _rarch_main_deinit();
 }
 _rarch_deinit_msg_queue();
 _rarch_main_clear_state();
 _exit(0);
 // unreachable;
}
function _rarch_take_screenshot() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $msg = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $viewport_read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(90316)>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = HEAP8[(135442)>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $or$cond = $1 | $3;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $ret = 0;
 $4 = HEAP8[(16771)>>0]|0;
 $5 = $4&1;
 $6 = HEAP32[(201640)>>2]|0;
 $7 = ($6|0)!=(0);
 $or$cond3 = $5 | $7;
 if ($or$cond3) {
  $8 = HEAP32[(12)>>2]|0;
  $9 = ((($8)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = HEAP32[(12)>>2]|0;
   $13 = ((($12)) + 44|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0|0);
   $17 = $15;
  } else {
   $17 = 0;
  }
 } else {
  $17 = 0;
 }
 $16 = $17&1;
 $viewport_read = $16;
 $18 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($18);
 $19 = $viewport_read;
 $20 = $19&1;
 if ($20) {
  $21 = HEAP32[(216)>>2]|0;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = HEAP32[(216)>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0|0);
   if ($26) {
    $27 = HEAP32[(216)>>2]|0;
    $28 = ((($27)) + 24|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[(24)>>2]|0;
    FUNCTION_TABLE_viii[$29 & 1023]($30,0,0);
   }
  }
  $31 = HEAP32[(12)>>2]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   _rarch_render_cached_frame();
  }
 }
 $33 = $viewport_read;
 $34 = $33&1;
 do {
  if ($34) {
   $35 = (_take_screenshot_viewport()|0);
   $36 = $35&1;
   $ret = $36;
  } else {
   $37 = HEAP32[(259416)>>2]|0;
   $38 = ($37|0)!=(0|0);
   $39 = HEAP32[(259416)>>2]|0;
   $40 = ($39|0)!=((-1)|0);
   $or$cond5 = $38 & $40;
   if ($or$cond5) {
    $41 = (_take_screenshot_raw()|0);
    $42 = $41&1;
    $ret = $42;
    break;
   } else {
    $43 = HEAP32[(259664)>>2]|0;
    $44 = ($43|0)!=(0|0);
    $45 = HEAP32[(259664)>>2]|0;
    $46 = HEAP32[544648>>2]|0;
    $47 = $44 ? $45 : $46;
    (_fprintf($47,737625,$vararg_buffer)|0);
    $48 = HEAP32[(259664)>>2]|0;
    $49 = ($48|0)!=(0|0);
    $50 = HEAP32[(259664)>>2]|0;
    $51 = HEAP32[544648>>2]|0;
    $52 = $49 ? $50 : $51;
    (_fflush($52)|0);
    break;
   }
  }
 } while(0);
 $msg = 0;
 $53 = $ret;
 $54 = $53&1;
 if ($54) {
  $55 = HEAP8[102648>>0]|0;
  $56 = $55&1;
  if ($56) {
   $57 = HEAP32[(259664)>>2]|0;
   $58 = ($57|0)!=(0|0);
   $59 = HEAP32[(259664)>>2]|0;
   $60 = HEAP32[544648>>2]|0;
   $61 = $58 ? $59 : $60;
   (_fprintf($61,737729,$vararg_buffer6)|0);
   $62 = HEAP32[(259664)>>2]|0;
   $63 = ($62|0)!=(0|0);
   $64 = HEAP32[(259664)>>2]|0;
   $65 = HEAP32[544648>>2]|0;
   $66 = $63 ? $64 : $65;
   (_fflush($66)|0);
  }
  $msg = 737760;
 } else {
  $67 = HEAP32[(259664)>>2]|0;
  $68 = ($67|0)!=(0|0);
  $69 = HEAP32[(259664)>>2]|0;
  $70 = HEAP32[544648>>2]|0;
  $71 = $68 ? $69 : $70;
  (_fprintf($71,737779,$vararg_buffer8)|0);
  $72 = HEAP32[(259664)>>2]|0;
  $73 = ($72|0)!=(0|0);
  $74 = HEAP32[(259664)>>2]|0;
  $75 = HEAP32[544648>>2]|0;
  $76 = $73 ? $74 : $75;
  (_fflush($76)|0);
  $msg = 737830;
 }
 $77 = HEAP8[(259375)>>0]|0;
 $78 = $77&1;
 $79 = HEAP32[(251148)>>2]|0;
 $80 = $msg;
 if ($78) {
  _msg_queue_push($79,$80,1,1);
  _rarch_render_cached_frame();
  STACKTOP = sp;return;
 } else {
  _msg_queue_push($79,$80,1,180);
  STACKTOP = sp;return;
 }
}
function _rarch_render_cached_frame() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $frame = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(259416)>>2]|0;
 $frame = $0;
 $1 = $frame;
 $2 = ($1|0)==((-1)|0);
 $$ = $2 ? 0 : $0;
 $frame = $$;
 $3 = $frame;
 $4 = HEAP32[(259420)>>2]|0;
 $5 = HEAP32[(259424)>>2]|0;
 $6 = HEAP32[(259428)>>2]|0;
 _video_frame($3,$4,$5,$6);
 STACKTOP = sp;return;
}
function _audio_sample_batch_rewind($data,$frames) {
 $data = $data|0;
 $frames = $frames|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $samples = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $frames;
 $2 = $1;
 $3 = $2 << 1;
 $samples = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $samples;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = (($8) + ($7<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = HEAP32[(201768)>>2]|0;
  $12 = (($11) + -1)|0;
  HEAP32[(201768)>>2] = $12;
  $13 = HEAP32[(201764)>>2]|0;
  $14 = (($13) + ($12<<1)|0);
  HEAP16[$14>>1] = $10;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = $1;
 STACKTOP = sp;return ($17|0);
}
function _audio_sample_batch($data,$frames) {
 $data = $data|0;
 $frames = $frames|0;
 var $$frames = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $frames;
 $2 = $1;
 $3 = ($2>>>0)>(1024);
 $$frames = $3 ? 1024 : $frames;
 $1 = $$frames;
 $4 = $0;
 $5 = $1;
 $6 = $5 << 1;
 $7 = (_audio_flush($4,$6)|0);
 $8 = HEAP8[(102649)>>0]|0;
 $9 = $8&1;
 $10 = $7 ? $9 : 0;
 $11 = $10&1;
 HEAP8[(102649)>>0] = $11;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _rarch_input_poll() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(16)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[(28)>>2]|0;
 FUNCTION_TABLE_vi[$2 & 1023]($3);
 $4 = HEAP32[(192)>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  return;
 }
 _input_poll_overlay();
 return;
}
function _rarch_init_msg_queue() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(251148)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (_msg_queue_new(8)|0);
 HEAP32[(251148)>>2] = $2;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[(259664)>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = HEAP32[544648>>2]|0;
  $8 = $5 ? $6 : $7;
  HEAP32[$vararg_buffer>>2] = 737857;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 1442;
  (_fprintf($8,765794,$vararg_buffer)|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  (_fflush($13)|0);
  _exit(2);
  // unreachable;
 }
}
function _rarch_deinit_msg_queue() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(251148)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(251148)>>2]|0;
 _msg_queue_free($2);
 HEAP32[(251148)>>2] = 0;
 return;
}
function _rarch_init_rewind() {
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $aligned_state_size = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(98508)>>0]|0;
 $1 = $0&1;
 $$not = $1 ^ 1;
 $2 = HEAP32[(251156)>>2]|0;
 $3 = ($2|0)!=(0|0);
 $or$cond = $$not | $3;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[(201604)>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[(259664)>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = HEAP32[(259664)>>2]|0;
  $9 = HEAP32[544648>>2]|0;
  $10 = $7 ? $8 : $9;
  (_fprintf($10,737869,$vararg_buffer)|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = HEAP32[544648>>2]|0;
  $15 = $12 ? $13 : $14;
  (_fflush($15)|0);
  STACKTOP = sp;return;
 }
 $16 = HEAP32[265104>>2]|0;
 $17 = (FUNCTION_TABLE_i[$16 & 511]()|0);
 HEAP32[(251164)>>2] = $17;
 $18 = HEAP32[(251164)>>2]|0;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = HEAP32[(259664)>>2]|0;
  $21 = ($20|0)!=(0|0);
  $22 = HEAP32[(259664)>>2]|0;
  $23 = HEAP32[544648>>2]|0;
  $24 = $21 ? $22 : $23;
  (_fprintf($24,737946,$vararg_buffer2)|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = ($25|0)!=(0|0);
  $27 = HEAP32[(259664)>>2]|0;
  $28 = HEAP32[544648>>2]|0;
  $29 = $26 ? $27 : $28;
  (_fflush($29)|0);
  STACKTOP = sp;return;
 }
 $30 = HEAP32[(251164)>>2]|0;
 $31 = (($30) + 3)|0;
 $32 = $31 & -4;
 $aligned_state_size = $32;
 $33 = $aligned_state_size;
 $34 = (_calloc(1,$33)|0);
 HEAP32[(251160)>>2] = $34;
 $35 = HEAP32[(251160)>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  $37 = HEAP32[(259664)>>2]|0;
  $38 = ($37|0)!=(0|0);
  $39 = HEAP32[(259664)>>2]|0;
  $40 = HEAP32[544648>>2]|0;
  $41 = $38 ? $39 : $40;
  (_fprintf($41,738032,$vararg_buffer4)|0);
  $42 = HEAP32[(259664)>>2]|0;
  $43 = ($42|0)!=(0|0);
  $44 = HEAP32[(259664)>>2]|0;
  $45 = HEAP32[544648>>2]|0;
  $46 = $43 ? $44 : $45;
  (_fflush($46)|0);
  STACKTOP = sp;return;
 }
 $47 = HEAP32[265108>>2]|0;
 $48 = HEAP32[(251160)>>2]|0;
 $49 = HEAP32[(251164)>>2]|0;
 $50 = (FUNCTION_TABLE_iii[$47 & 511]($48,$49)|0);
 if (!($50)) {
  $51 = HEAP32[(259664)>>2]|0;
  $52 = ($51|0)!=(0|0);
  $53 = HEAP32[(259664)>>2]|0;
  $54 = HEAP32[544648>>2]|0;
  $55 = $52 ? $53 : $54;
  (_fprintf($55,738099,$vararg_buffer6)|0);
  $56 = HEAP32[(259664)>>2]|0;
  $57 = ($56|0)!=(0|0);
  $58 = HEAP32[(259664)>>2]|0;
  $59 = HEAP32[544648>>2]|0;
  $60 = $57 ? $58 : $59;
  (_fflush($60)|0);
  $61 = HEAP32[(251160)>>2]|0;
  _free($61);
  HEAP32[(251160)>>2] = 0;
  STACKTOP = sp;return;
 }
 $62 = HEAP8[102648>>0]|0;
 $63 = $62&1;
 if ($63) {
  $64 = HEAP32[(259664)>>2]|0;
  $65 = ($64|0)!=(0|0);
  $66 = HEAP32[(259664)>>2]|0;
  $67 = HEAP32[544648>>2]|0;
  $68 = $65 ? $66 : $67;
  $69 = HEAP32[(98512)>>2]|0;
  $70 = (($69>>>0) / 1000000)&-1;
  HEAP32[$vararg_buffer8>>2] = $70;
  (_fprintf($68,738173,$vararg_buffer8)|0);
  $71 = HEAP32[(259664)>>2]|0;
  $72 = ($71|0)!=(0|0);
  $73 = HEAP32[(259664)>>2]|0;
  $74 = HEAP32[544648>>2]|0;
  $75 = $72 ? $73 : $74;
  (_fflush($75)|0);
 }
 $76 = $aligned_state_size;
 $77 = HEAP32[(98512)>>2]|0;
 $78 = HEAP32[(251160)>>2]|0;
 $79 = (_state_manager_new($76,$77,$78)|0);
 HEAP32[(251156)>>2] = $79;
 $80 = HEAP32[(251156)>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  STACKTOP = sp;return;
 }
 $82 = HEAP32[(259664)>>2]|0;
 $83 = ($82|0)!=(0|0);
 $84 = HEAP32[(259664)>>2]|0;
 $85 = HEAP32[544648>>2]|0;
 $86 = $83 ? $84 : $85;
 (_fprintf($86,738224,$vararg_buffer10)|0);
 $87 = HEAP32[(259664)>>2]|0;
 $88 = ($87|0)!=(0|0);
 $89 = HEAP32[(259664)>>2]|0;
 $90 = HEAP32[544648>>2]|0;
 $91 = $88 ? $89 : $90;
 (_fflush($91)|0);
 STACKTOP = sp;return;
}
function _rarch_deinit_rewind() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(251156)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(251156)>>2]|0;
  _state_manager_free($2);
 }
 HEAP32[(251156)>>2] = 0;
 $3 = HEAP32[(251160)>>2]|0;
 _free($3);
 HEAP32[(251160)>>2] = 0;
 return;
}
function _rarch_load_state() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $load_path = 0, $msg = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $load_path = sp + 552|0;
 $msg = sp + 40|0;
 $0 = HEAP32[(196888)>>2]|0;
 $1 = ($0>>>0)>(0);
 if ($1) {
  $2 = HEAP32[(196888)>>2]|0;
  HEAP32[$vararg_buffer>>2] = (164114);
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $2;
  (_snprintf($load_path,4096,738303,$vararg_buffer)|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = (164114);
  (_snprintf($load_path,4096,768042,$vararg_buffer2)|0);
 }
 $3 = HEAP32[265104>>2]|0;
 $4 = (FUNCTION_TABLE_i[$3 & 511]()|0);
 $size = $4;
 $5 = $size;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = (_load_state($load_path)|0);
   if ($7) {
    $8 = HEAP32[(196888)>>2]|0;
    HEAP32[$vararg_buffer5>>2] = $8;
    (_snprintf($msg,512,738308,$vararg_buffer5)|0);
    break;
   } else {
    HEAP32[$vararg_buffer8>>2] = $load_path;
    (_snprintf($msg,512,738336,$vararg_buffer8)|0);
    break;
   }
  } else {
   (_strlcpy_rarch__($msg,738368,512)|0);
  }
 } while(0);
 $9 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($9);
 $10 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($10,$msg,2,180);
 $11 = HEAP8[102648>>0]|0;
 $12 = $11&1;
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[(259664)>>2]|0;
 $14 = ($13|0)!=(0|0);
 $15 = HEAP32[(259664)>>2]|0;
 $16 = HEAP32[544648>>2]|0;
 $17 = $14 ? $15 : $16;
 HEAP32[$vararg_buffer11>>2] = $msg;
 (_fprintf($17,772081,$vararg_buffer11)|0);
 $18 = HEAP32[(259664)>>2]|0;
 $19 = ($18|0)!=(0|0);
 $20 = HEAP32[(259664)>>2]|0;
 $21 = HEAP32[544648>>2]|0;
 $22 = $19 ? $20 : $21;
 (_fflush($22)|0);
 STACKTOP = sp;return;
}
function _rarch_save_state() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $save_path = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $save_path = sp + 552|0;
 $msg = sp + 40|0;
 $0 = HEAP8[(98537)>>0]|0;
 $1 = $0&1;
 if ($1) {
  $2 = HEAP32[(196888)>>2]|0;
  $3 = (($2) + 1)|0;
  HEAP32[(196888)>>2] = $3;
 }
 $4 = HEAP32[(196888)>>2]|0;
 $5 = ($4>>>0)>(0);
 if ($5) {
  $6 = HEAP32[(196888)>>2]|0;
  HEAP32[$vararg_buffer>>2] = (164114);
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  (_snprintf($save_path,4096,738303,$vararg_buffer)|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = (164114);
  (_snprintf($save_path,4096,768042,$vararg_buffer2)|0);
 }
 $7 = HEAP32[265104>>2]|0;
 $8 = (FUNCTION_TABLE_i[$7 & 511]()|0);
 $size = $8;
 $9 = $size;
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = (_save_state($save_path)|0);
   if ($11) {
    $12 = HEAP32[(196888)>>2]|0;
    HEAP32[$vararg_buffer5>>2] = $12;
    (_snprintf($msg,512,738403,$vararg_buffer5)|0);
    break;
   } else {
    HEAP32[$vararg_buffer8>>2] = $save_path;
    (_snprintf($msg,512,738428,$vararg_buffer8)|0);
    break;
   }
  } else {
   (_strlcpy_rarch__($msg,738368,512)|0);
  }
 } while(0);
 $13 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($13);
 $14 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($14,$msg,2,180);
 $15 = HEAP8[102648>>0]|0;
 $16 = $15&1;
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[(259664)>>2]|0;
 $18 = ($17|0)!=(0|0);
 $19 = HEAP32[(259664)>>2]|0;
 $20 = HEAP32[544648>>2]|0;
 $21 = $18 ? $19 : $20;
 HEAP32[$vararg_buffer11>>2] = $msg;
 (_fprintf($21,772081,$vararg_buffer11)|0);
 $22 = HEAP32[(259664)>>2]|0;
 $23 = ($22|0)!=(0|0);
 $24 = HEAP32[(259664)>>2]|0;
 $25 = HEAP32[544648>>2]|0;
 $26 = $23 ? $24 : $25;
 (_fflush($26)|0);
 STACKTOP = sp;return;
}
function _rarch_set_fullscreen($fullscreen) {
 $fullscreen = $fullscreen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fullscreen&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 $4 = $3&1;
 HEAP8[(296)>>0] = $4;
 $5 = HEAP8[(201668)>>0]|0;
 $6 = $5&1;
 $7 = $6&1;
 HEAP8[(33)>>0] = $7;
 HEAP8[(34)>>0] = 0;
 _uninit_drivers();
 _init_drivers();
 HEAP8[(33)>>0] = 0;
 $8 = HEAP32[(16)>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[(16)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[(28)>>2]|0;
 FUNCTION_TABLE_vi[$12 & 1023]($13);
 STACKTOP = sp;return;
}
function _rarch_state_slot_increase() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $msg = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg = sp + 16|0;
 $0 = HEAP32[(196888)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(196888)>>2] = $1;
 $2 = HEAP32[(251148)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[(251148)>>2]|0;
  _msg_queue_clear($4);
 }
 $5 = HEAP32[(196888)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 (_snprintf($msg,256,738458,$vararg_buffer)|0);
 $6 = HEAP32[(251148)>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[(251148)>>2]|0;
  _msg_queue_push($8,$msg,1,180);
 }
 $9 = HEAP8[102648>>0]|0;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[(259664)>>2]|0;
 $12 = ($11|0)!=(0|0);
 $13 = HEAP32[(259664)>>2]|0;
 $14 = HEAP32[544648>>2]|0;
 $15 = $12 ? $13 : $14;
 HEAP32[$vararg_buffer1>>2] = $msg;
 (_fprintf($15,772081,$vararg_buffer1)|0);
 $16 = HEAP32[(259664)>>2]|0;
 $17 = ($16|0)!=(0|0);
 $18 = HEAP32[(259664)>>2]|0;
 $19 = HEAP32[544648>>2]|0;
 $20 = $17 ? $18 : $19;
 (_fflush($20)|0);
 STACKTOP = sp;return;
}
function _rarch_state_slot_decrease() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $msg = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg = sp + 16|0;
 $0 = HEAP32[(196888)>>2]|0;
 $1 = ($0>>>0)>(0);
 if ($1) {
  $2 = HEAP32[(196888)>>2]|0;
  $3 = (($2) + -1)|0;
  HEAP32[(196888)>>2] = $3;
 }
 $4 = HEAP32[(251148)>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[(251148)>>2]|0;
  _msg_queue_clear($6);
 }
 $7 = HEAP32[(196888)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $7;
 (_snprintf($msg,256,738458,$vararg_buffer)|0);
 $8 = HEAP32[(251148)>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[(251148)>>2]|0;
  _msg_queue_push($10,$msg,1,180);
 }
 $11 = HEAP8[102648>>0]|0;
 $12 = $11&1;
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[(259664)>>2]|0;
 $14 = ($13|0)!=(0|0);
 $15 = HEAP32[(259664)>>2]|0;
 $16 = HEAP32[544648>>2]|0;
 $17 = $14 ? $15 : $16;
 HEAP32[$vararg_buffer1>>2] = $msg;
 (_fprintf($17,772081,$vararg_buffer1)|0);
 $18 = HEAP32[(259664)>>2]|0;
 $19 = ($18|0)!=(0|0);
 $20 = HEAP32[(259664)>>2]|0;
 $21 = HEAP32[544648>>2]|0;
 $22 = $19 ? $20 : $21;
 (_fflush($22)|0);
 STACKTOP = sp;return;
}
function _rarch_game_reset() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP8[102648>>0]|0;
 $1 = $0&1;
 if ($1) {
  $2 = HEAP32[(259664)>>2]|0;
  $3 = ($2|0)!=(0|0);
  $4 = HEAP32[(259664)>>2]|0;
  $5 = HEAP32[544648>>2]|0;
  $6 = $3 ? $4 : $5;
  (_fprintf($6,738484,$vararg_buffer)|0);
  $7 = HEAP32[(259664)>>2]|0;
  $8 = ($7|0)!=(0|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = HEAP32[544648>>2]|0;
  $11 = $8 ? $9 : $10;
  (_fflush($11)|0);
 }
 $12 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($12);
 $13 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($13,738512,1,120);
 $14 = HEAP32[265096>>2]|0;
 FUNCTION_TABLE_v[$14 & 511]();
 _init_controllers();
 STACKTOP = sp;return;
}
function _rarch_disk_control_append_image($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $control = 0, $info = 0, $msg = 0, $new_index = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $info = sp + 16|0;
 $msg = sp + 48|0;
 $0 = $path;
 $control = (201612);
 _rarch_disk_control_set_eject(1,0);
 $1 = $control;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_i[$3 & 511]()|0);
 $4 = $control;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_i[$6 & 511]()|0);
 $new_index = $7;
 $8 = $new_index;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $new_index;
 $11 = (($10) + -1)|0;
 $new_index = $11;
 ;HEAP32[$info>>2]=0|0;HEAP32[$info+4>>2]=0|0;HEAP32[$info+8>>2]=0|0;HEAP32[$info+12>>2]=0|0;
 $12 = $0;
 HEAP32[$info>>2] = $12;
 $13 = $control;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $new_index;
 (FUNCTION_TABLE_iii[$15 & 511]($16,$info)|0);
 $17 = $new_index;
 _rarch_disk_control_set_index($17);
 $18 = $0;
 HEAP32[$vararg_buffer>>2] = $18;
 (_snprintf($msg,512,738519,$vararg_buffer)|0);
 $19 = HEAP8[102648>>0]|0;
 $20 = $19&1;
 if ($20) {
  $21 = HEAP32[(259664)>>2]|0;
  $22 = ($21|0)!=(0|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = HEAP32[544648>>2]|0;
  $25 = $22 ? $23 : $24;
  HEAP32[$vararg_buffer1>>2] = $msg;
  (_fprintf($25,772081,$vararg_buffer1)|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  (_fflush($30)|0);
 }
 $31 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($31);
 $32 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($32,$msg,0,180);
 $33 = $0;
 _set_paths($33);
 _fill_pathnames();
 _rarch_disk_control_set_eject(0,0);
 STACKTOP = sp;return;
}
function _rarch_disk_control_set_eject($new_state,$log) {
 $new_state = $new_state|0;
 $log = $log|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $control = 0, $error = 0, $msg = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg = sp + 32|0;
 $2 = $new_state&1;
 $0 = $2;
 $3 = $log&1;
 $1 = $3;
 $control = (201612);
 $4 = $control;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $error = 0;
 HEAP8[$msg>>0] = 0;
 $8 = $control;
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = $10&1;
 $12 = (FUNCTION_TABLE_ii[$9 & 511]($11)|0);
 if ($12) {
  $13 = $0;
  $14 = $13&1;
  $15 = $14 ? 738537 : 738545;
  HEAP32[$vararg_buffer>>2] = $15;
  (_snprintf($msg,256,738552,$vararg_buffer)|0);
 } else {
  $error = 1;
  $16 = $0;
  $17 = $16&1;
  $18 = $17 ? 738574 : 738580;
  HEAP32[$vararg_buffer1>>2] = $18;
  (_snprintf($msg,256,738586,$vararg_buffer1)|0);
 }
 $19 = HEAP8[$msg>>0]|0;
 $20 = ($19<<24>>24)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $error;
 $22 = $21&1;
 if ($22) {
  $23 = HEAP32[(259664)>>2]|0;
  $24 = ($23|0)!=(0|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = HEAP32[544648>>2]|0;
  $27 = $24 ? $25 : $26;
  HEAP32[$vararg_buffer4>>2] = $msg;
  (_fprintf($27,738618,$vararg_buffer4)|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = ($28|0)!=(0|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = HEAP32[544648>>2]|0;
  $32 = $29 ? $30 : $31;
  (_fflush($32)|0);
 } else {
  $33 = HEAP8[102648>>0]|0;
  $34 = $33&1;
  if ($34) {
   $35 = HEAP32[(259664)>>2]|0;
   $36 = ($35|0)!=(0|0);
   $37 = HEAP32[(259664)>>2]|0;
   $38 = HEAP32[544648>>2]|0;
   $39 = $36 ? $37 : $38;
   HEAP32[$vararg_buffer7>>2] = $msg;
   (_fprintf($39,772081,$vararg_buffer7)|0);
   $40 = HEAP32[(259664)>>2]|0;
   $41 = ($40|0)!=(0|0);
   $42 = HEAP32[(259664)>>2]|0;
   $43 = HEAP32[544648>>2]|0;
   $44 = $41 ? $42 : $43;
   (_fflush($44)|0);
  }
 }
 $45 = $1;
 $46 = $45&1;
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($47);
 $48 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($48,$msg,1,180);
 STACKTOP = sp;return;
}
function _rarch_disk_control_set_index($next_index) {
 $next_index = $next_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $control = 0, $error = 0, $msg = 0, $num_disks = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $msg = sp + 56|0;
 $0 = $next_index;
 $control = (201612);
 $1 = $control;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $error = 0;
 HEAP8[$msg>>0] = 0;
 $5 = $control;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_i[$7 & 511]()|0);
 $num_disks = $8;
 $9 = $control;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = (FUNCTION_TABLE_ii[$11 & 511]($12)|0);
 $14 = $0;
 $15 = $num_disks;
 $16 = ($14>>>0)<($15>>>0);
 do {
  if ($13) {
   if ($16) {
    $17 = $0;
    $18 = (($17) + 1)|0;
    $19 = $num_disks;
    HEAP32[$vararg_buffer>>2] = $18;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $19;
    (_snprintf($msg,256,738643,$vararg_buffer)|0);
    break;
   } else {
    (_snprintf($msg,256,738674,$vararg_buffer2)|0);
    break;
   }
  } else {
   if ($16) {
    $20 = $0;
    $21 = (($20) + 1)|0;
    $22 = $num_disks;
    HEAP32[$vararg_buffer4>>2] = $21;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $22;
    (_snprintf($msg,256,738698,$vararg_buffer4)|0);
   } else {
    (_snprintf($msg,256,738727,$vararg_buffer8)|0);
   }
   $error = 1;
  }
 } while(0);
 $23 = HEAP8[$msg>>0]|0;
 $24 = ($23<<24>>24)!=(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $error;
 $26 = $25&1;
 if ($26) {
  $27 = HEAP32[(259664)>>2]|0;
  $28 = ($27|0)!=(0|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = HEAP32[544648>>2]|0;
  $31 = $28 ? $29 : $30;
  HEAP32[$vararg_buffer10>>2] = $msg;
  (_fprintf($31,738618,$vararg_buffer10)|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  (_fflush($36)|0);
 } else {
  $37 = HEAP8[102648>>0]|0;
  $38 = $37&1;
  if ($38) {
   $39 = HEAP32[(259664)>>2]|0;
   $40 = ($39|0)!=(0|0);
   $41 = HEAP32[(259664)>>2]|0;
   $42 = HEAP32[544648>>2]|0;
   $43 = $40 ? $41 : $42;
   HEAP32[$vararg_buffer13>>2] = $msg;
   (_fprintf($43,772081,$vararg_buffer13)|0);
   $44 = HEAP32[(259664)>>2]|0;
   $45 = ($44|0)!=(0|0);
   $46 = HEAP32[(259664)>>2]|0;
   $47 = HEAP32[544648>>2]|0;
   $48 = $45 ? $46 : $47;
   (_fflush($48)|0);
  }
 }
 $49 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($49);
 $50 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($50,$msg,1,180);
 STACKTOP = sp;return;
}
function _rarch_check_overlay() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pressed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(192)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (_input_key_pressed_func(51)|0);
 $3 = $2&1;
 $pressed = $3;
 $4 = $pressed;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP8[738760>>0]|0;
  $7 = $6&1;
  if (!($7)) {
   $8 = HEAP32[(192)>>2]|0;
   _input_overlay_next($8);
  }
 }
 $9 = $pressed;
 $10 = $9&1;
 $11 = $10&1;
 HEAP8[738760>>0] = $11;
 STACKTOP = sp;return;
}
function _rarch_main_clear_state() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset((224|0),0,102424)|0;
 $0 = HEAP32[(259664)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(259664)>>2]|0;
  (_fclose($2)|0);
 }
 _memset((102648|0),0,158216)|0;
 _init_state_first();
 return;
}
function _rarch_init_system_info() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $info = (196912);
 $0 = HEAP32[265048>>2]|0;
 $1 = $info;
 FUNCTION_TABLE_vi[$0 & 1023]($1);
 $2 = $info;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = $info;
  HEAP32[$5>>2] = 768285;
 }
 $6 = $info;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $10 = $info;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 738761;
 }
 $12 = $info;
 $13 = HEAP32[$12>>2]|0;
 $14 = $info;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer>>2] = $13;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 (_snprintf((259436),64,738764,$vararg_buffer)|0);
 $17 = $info;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $24 = 738782;
  (_strlcpy_rarch__((197504),$24,4096)|0);
  $25 = $info;
  $26 = ((($25)) + 13|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&1;
  $29 = $28&1;
  HEAP8[(196988)>>0] = $29;
  STACKTOP = sp;return;
 }
 $21 = $info;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23;
 (_strlcpy_rarch__((197504),$24,4096)|0);
 $25 = $info;
 $26 = ((($25)) + 13|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&1;
 $29 = $28&1;
 HEAP8[(196988)>>0] = $29;
 STACKTOP = sp;return;
}
function _rarch_main_init($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$0 = 0, $$reg2mem100$0 = 0, $$reg2mem102$0 = 0, $$reg2mem104$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0, $cond17 = 0, $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0;
 var $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond34 = 0, $cond35 = 0, $cond36 = 0, $cond37 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $vararg_buffer = 0;
 var $vararg_buffer106 = 0, $vararg_buffer108 = 0, $vararg_buffer110 = 0, $vararg_buffer112 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer112 = sp + 32|0;
 $vararg_buffer110 = sp + 24|0;
 $vararg_buffer108 = sp + 16|0;
 $vararg_buffer106 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 invoke_v(220);
 $0 = __THREW__; __THREW__ = 0;
 if ((($0|0) != 0) & ((threwValue|0) != 0)) { $1 = _testSetjmp(HEAP32[$0>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1|0) == 0) { _longjmp($0|0, threwValue|0); } tempRet0 = (threwValue); } else { $1 = -1; };
 $2 = tempRet0;
 $cond = ($1|0)==(1);
 if ($cond) {
  $$reg2mem104$0 = $2;
 } else {
  _setjmpTable = _saveSetjmp((260696),1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
  __THREW__ = 0;
  $3 = __THREW__; __THREW__ = 0;
  if ((($3|0) != 0) & ((threwValue|0) != 0)) { $4 = _testSetjmp(HEAP32[$3>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($4|0) == 0) { _longjmp($3|0, threwValue|0); } tempRet0 = (threwValue); } else { $4 = -1; };
  $5 = tempRet0;
  $cond1 = ($4|0)==(1);
  if ($cond1) {
   $$reg2mem104$0 = $5;
  } else {
   $$reg2mem104$0 = 0;
  }
 }
 L4: while(1) {
  $6 = ($$reg2mem104$0|0)>(0);
  if ($6) {
   $7 = HEAP32[(259664)>>2]|0;
   $8 = ($7|0)!=(0|0);
   $9 = HEAP32[(259664)>>2]|0;
   $10 = HEAP32[544648>>2]|0;
   $11 = $8 ? $9 : $10;
   __THREW__ = 0;
   HEAP32[$vararg_buffer>>2] = (259671);
   (invoke_iiii(221,($11|0),(738790|0),($vararg_buffer|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   if ((($12|0) != 0) & ((threwValue|0) != 0)) { $13 = _testSetjmp(HEAP32[$12>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($13|0) == 0) { _longjmp($12|0, threwValue|0); } tempRet0 = (threwValue); } else { $13 = -1; };
   $14 = tempRet0;
   $cond36 = ($13|0)==(1);
   if ($cond36) {
    $$reg2mem104$0 = $14;
    continue;
   }
   $15 = HEAP32[(259664)>>2]|0;
   $16 = ($15|0)!=(0|0);
   $17 = HEAP32[(259664)>>2]|0;
   $18 = HEAP32[544648>>2]|0;
   $19 = $16 ? $17 : $18;
   __THREW__ = 0;
   (invoke_ii(222,($19|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = (threwValue); } else { $21 = -1; };
   $22 = tempRet0;
   $cond37 = ($21|0)==(1);
   if ($cond37) {
    $$reg2mem104$0 = $22;
    continue;
   } else {
    label = 7;
    break;
   }
  }
  HEAP8[(259669)>>0] = 1;
  __THREW__ = 0;
  invoke_vii(223,($argc|0),($argv|0));
  $23 = __THREW__; __THREW__ = 0;
  if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
  $25 = tempRet0;
  $cond2 = ($24|0)==(1);
  if ($cond2) {
   $$reg2mem104$0 = $25;
   continue;
  }
  $26 = HEAP8[102648>>0]|0;
  $27 = $26&1;
  if ($27) {
   $28 = HEAP8[102648>>0]|0;
   $29 = $28&1;
   if ($29) {
    $30 = HEAP32[(259664)>>2]|0;
    $31 = ($30|0)!=(0|0);
    $32 = HEAP32[(259664)>>2]|0;
    $33 = HEAP32[544648>>2]|0;
    $34 = $31 ? $32 : $33;
    __THREW__ = 0;
    (invoke_iiii(221,($34|0),(738842|0),($vararg_buffer106|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = (threwValue); } else { $36 = -1; };
    $37 = tempRet0;
    $cond34 = ($36|0)==(1);
    if ($cond34) {
     $$reg2mem104$0 = $37;
     continue;
    }
    $38 = HEAP32[(259664)>>2]|0;
    $39 = ($38|0)!=(0|0);
    $40 = HEAP32[(259664)>>2]|0;
    $41 = HEAP32[544648>>2]|0;
    $42 = $39 ? $40 : $41;
    __THREW__ = 0;
    (invoke_ii(222,($42|0))|0);
    $43 = __THREW__; __THREW__ = 0;
    if ((($43|0) != 0) & ((threwValue|0) != 0)) { $44 = _testSetjmp(HEAP32[$43>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($44|0) == 0) { _longjmp($43|0, threwValue|0); } tempRet0 = (threwValue); } else { $44 = -1; };
    $45 = tempRet0;
    $cond35 = ($44|0)==(1);
    if ($cond35) {
     $$reg2mem104$0 = $45;
     continue;
    }
   }
   $46 = HEAP32[544648>>2]|0;
   __THREW__ = 0;
   invoke_vi(224,($46|0));
   $47 = __THREW__; __THREW__ = 0;
   if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = (threwValue); } else { $48 = -1; };
   $49 = tempRet0;
   $cond31 = ($48|0)==(1);
   if ($cond31) {
    $$reg2mem104$0 = $49;
    continue;
   }
   $50 = HEAP8[102648>>0]|0;
   $51 = $50&1;
   if ($51) {
    $52 = HEAP32[(259664)>>2]|0;
    $53 = ($52|0)!=(0|0);
    $54 = HEAP32[(259664)>>2]|0;
    $55 = HEAP32[544648>>2]|0;
    $56 = $53 ? $54 : $55;
    __THREW__ = 0;
    (invoke_iiii(221,($56|0),(738892|0),($vararg_buffer108|0))|0);
    $57 = __THREW__; __THREW__ = 0;
    if ((($57|0) != 0) & ((threwValue|0) != 0)) { $58 = _testSetjmp(HEAP32[$57>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($58|0) == 0) { _longjmp($57|0, threwValue|0); } tempRet0 = (threwValue); } else { $58 = -1; };
    $59 = tempRet0;
    $cond32 = ($58|0)==(1);
    if ($cond32) {
     $$reg2mem104$0 = $59;
     continue;
    }
    $60 = HEAP32[(259664)>>2]|0;
    $61 = ($60|0)!=(0|0);
    $62 = HEAP32[(259664)>>2]|0;
    $63 = HEAP32[544648>>2]|0;
    $64 = $61 ? $62 : $63;
    __THREW__ = 0;
    (invoke_ii(222,($64|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    if ((($65|0) != 0) & ((threwValue|0) != 0)) { $66 = _testSetjmp(HEAP32[$65>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($66|0) == 0) { _longjmp($65|0, threwValue|0); } tempRet0 = (threwValue); } else { $66 = -1; };
    $67 = tempRet0;
    $cond33 = ($66|0)==(1);
    if ($cond33) {
     $$reg2mem104$0 = $67;
     continue;
    }
   }
  }
  __THREW__ = 0;
  invoke_v(225);
  $68 = __THREW__; __THREW__ = 0;
  if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } tempRet0 = (threwValue); } else { $69 = -1; };
  $70 = tempRet0;
  $cond3 = ($69|0)==(1);
  if ($cond3) {
   $$reg2mem104$0 = $70;
   continue;
  }
  __THREW__ = 0;
  invoke_v(226);
  $71 = __THREW__; __THREW__ = 0;
  if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = (threwValue); } else { $72 = -1; };
  $73 = tempRet0;
  $cond4 = ($72|0)==(1);
  if ($cond4) {
   $$reg2mem104$0 = $73;
   continue;
  }
  $74 = HEAP8[(260857)>>0]|0;
  $75 = $74&1;
  __THREW__ = 0;
  invoke_vi(227,($75|0));
  $76 = __THREW__; __THREW__ = 0;
  if ((($76|0) != 0) & ((threwValue|0) != 0)) { $77 = _testSetjmp(HEAP32[$76>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($77|0) == 0) { _longjmp($76|0, threwValue|0); } tempRet0 = (threwValue); } else { $77 = -1; };
  $78 = tempRet0;
  $cond5 = ($77|0)==(1);
  if ($cond5) {
   $$reg2mem104$0 = $78;
   continue;
  }
  __THREW__ = 0;
  invoke_v(228);
  $79 = __THREW__; __THREW__ = 0;
  if ((($79|0) != 0) & ((threwValue|0) != 0)) { $80 = _testSetjmp(HEAP32[$79>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($80|0) == 0) { _longjmp($79|0, threwValue|0); } tempRet0 = (threwValue); } else { $80 = -1; };
  $81 = tempRet0;
  $cond6 = ($80|0)==(1);
  if ($cond6) {
   $$reg2mem104$0 = $81;
   continue;
  }
  __THREW__ = 0;
  invoke_v(229);
  $82 = __THREW__; __THREW__ = 0;
  if ((($82|0) != 0) & ((threwValue|0) != 0)) { $83 = _testSetjmp(HEAP32[$82>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($83|0) == 0) { _longjmp($82|0, threwValue|0); } tempRet0 = (threwValue); } else { $83 = -1; };
  $84 = tempRet0;
  $cond7 = ($83|0)==(1);
  if ($cond7) {
   $$reg2mem104$0 = $84;
   continue;
  }
  __THREW__ = 0;
  invoke_v(230);
  $85 = __THREW__; __THREW__ = 0;
  if ((($85|0) != 0) & ((threwValue|0) != 0)) { $86 = _testSetjmp(HEAP32[$85>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($86|0) == 0) { _longjmp($85|0, threwValue|0); } tempRet0 = (threwValue); } else { $86 = -1; };
  $87 = tempRet0;
  $cond8 = ($86|0)==(1);
  if ($cond8) {
   $$reg2mem104$0 = $87;
   continue;
  }
  $88 = HEAP32[265056>>2]|0;
  __THREW__ = 0;
  invoke_v($88|0);
  $89 = __THREW__; __THREW__ = 0;
  if ((($89|0) != 0) & ((threwValue|0) != 0)) { $90 = _testSetjmp(HEAP32[$89>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($90|0) == 0) { _longjmp($89|0, threwValue|0); } tempRet0 = (threwValue); } else { $90 = -1; };
  $91 = tempRet0;
  $cond9 = ($90|0)==(1);
  if ($cond9) {
   $$reg2mem104$0 = $91;
   continue;
  }
  $92 = HEAP8[(260857)>>0]|0;
  $93 = $92&1;
  if ($93) {
   $$reg2mem102$0 = 0;
  } else {
   $94 = HEAP8[(260856)>>0]|0;
   $95 = $94&1;
   $96 = $95 ^ 1;
   $$reg2mem102$0 = $96;
  }
  $97 = $$reg2mem102$0&1;
  HEAP8[(259374)>>0] = $97;
  $98 = HEAP8[(260856)>>0]|0;
  $99 = $98&1;
  if ($99) {
   $100 = HEAP8[(260857)>>0]|0;
   $101 = $100&1;
   if ($101) {
    label = 32;
   } else {
    $102 = HEAP32[(106752)>>2]|0;
    __THREW__ = 0;
    $103 = (invoke_ii(231,($102|0))|0);
    $104 = __THREW__; __THREW__ = 0;
    if ((($104|0) != 0) & ((threwValue|0) != 0)) { $105 = _testSetjmp(HEAP32[$104>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($105|0) == 0) { _longjmp($104|0, threwValue|0); } tempRet0 = (threwValue); } else { $105 = -1; };
    $106 = tempRet0;
    $cond30 = ($105|0)==(1);
    if ($cond30) {
     $$reg2mem104$0 = $106;
     continue;
    }
    if (!($103)) {
     label = 63;
    }
   }
  } else {
   label = 32;
  }
  if ((label|0) == 32) {
   label = 0;
   $107 = HEAP8[(260857)>>0]|0;
   $108 = $107&1;
   if (!($108)) {
    __THREW__ = 0;
    invoke_v(232);
    $109 = __THREW__; __THREW__ = 0;
    if ((($109|0) != 0) & ((threwValue|0) != 0)) { $110 = _testSetjmp(HEAP32[$109>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($110|0) == 0) { _longjmp($109|0, threwValue|0); } tempRet0 = (threwValue); } else { $110 = -1; };
    $111 = tempRet0;
    $cond10 = ($110|0)==(1);
    if ($cond10) {
     $$reg2mem104$0 = $111;
     continue;
    }
    $112 = HEAP32[(106752)>>2]|0;
    __THREW__ = 0;
    $113 = (invoke_ii(231,($112|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    if ((($114|0) != 0) & ((threwValue|0) != 0)) { $115 = _testSetjmp(HEAP32[$114>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($115|0) == 0) { _longjmp($114|0, threwValue|0); } tempRet0 = (threwValue); } else { $115 = -1; };
    $116 = tempRet0;
    $cond11 = ($115|0)==(1);
    if ($cond11) {
     $$reg2mem104$0 = $116;
     continue;
    }
    if ($113) {
     __THREW__ = 0;
     invoke_v(233);
     $117 = __THREW__; __THREW__ = 0;
     if ((($117|0) != 0) & ((threwValue|0) != 0)) { $118 = _testSetjmp(HEAP32[$117>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($118|0) == 0) { _longjmp($117|0, threwValue|0); } tempRet0 = (threwValue); } else { $118 = -1; };
     $119 = tempRet0;
     $cond16 = ($118|0)==(1);
     if ($cond16) {
      $$reg2mem104$0 = $119;
      continue;
     }
     $120 = HEAP8[(259372)>>0]|0;
     $121 = $120&1;
     do {
      if ($121) {
       $125 = HEAP8[102648>>0]|0;
       $126 = $125&1;
       if (!($126)) {
        break;
       }
       $127 = HEAP32[(259664)>>2]|0;
       $128 = ($127|0)!=(0|0);
       $129 = HEAP32[(259664)>>2]|0;
       $130 = HEAP32[544648>>2]|0;
       $131 = $128 ? $129 : $130;
       __THREW__ = 0;
       (invoke_iiii(221,($131|0),(738943|0),($vararg_buffer110|0))|0);
       $132 = __THREW__; __THREW__ = 0;
       if ((($132|0) != 0) & ((threwValue|0) != 0)) { $133 = _testSetjmp(HEAP32[$132>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($133|0) == 0) { _longjmp($132|0, threwValue|0); } tempRet0 = (threwValue); } else { $133 = -1; };
       $134 = tempRet0;
       $cond20 = ($133|0)==(1);
       if ($cond20) {
        $$reg2mem104$0 = $134;
        continue L4;
       }
       $135 = HEAP32[(259664)>>2]|0;
       $136 = ($135|0)!=(0|0);
       $137 = HEAP32[(259664)>>2]|0;
       $138 = HEAP32[544648>>2]|0;
       $139 = $136 ? $137 : $138;
       __THREW__ = 0;
       (invoke_ii(222,($139|0))|0);
       $140 = __THREW__; __THREW__ = 0;
       if ((($140|0) != 0) & ((threwValue|0) != 0)) { $141 = _testSetjmp(HEAP32[$140>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($141|0) == 0) { _longjmp($140|0, threwValue|0); } tempRet0 = (threwValue); } else { $141 = -1; };
       $142 = tempRet0;
       $cond21 = ($141|0)==(1);
       if ($cond21) {
        $$reg2mem104$0 = $142;
        continue L4;
       }
      } else {
       __THREW__ = 0;
       invoke_v(234);
       $122 = __THREW__; __THREW__ = 0;
       if ((($122|0) != 0) & ((threwValue|0) != 0)) { $123 = _testSetjmp(HEAP32[$122>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($123|0) == 0) { _longjmp($122|0, threwValue|0); } tempRet0 = (threwValue); } else { $123 = -1; };
       $124 = tempRet0;
       $cond17 = ($123|0)==(1);
       if ($cond17) {
        $$reg2mem104$0 = $124;
        continue L4;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_v(235);
     $143 = __THREW__; __THREW__ = 0;
     if ((($143|0) != 0) & ((threwValue|0) != 0)) { $144 = _testSetjmp(HEAP32[$143>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($144|0) == 0) { _longjmp($143|0, threwValue|0); } tempRet0 = (threwValue); } else { $144 = -1; };
     $145 = tempRet0;
     $cond18 = ($144|0)==(1);
     if ($cond18) {
      $$reg2mem104$0 = $145;
      continue;
     }
     __THREW__ = 0;
     invoke_v(236);
     $146 = __THREW__; __THREW__ = 0;
     if ((($146|0) != 0) & ((threwValue|0) != 0)) { $147 = _testSetjmp(HEAP32[$146>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($147|0) == 0) { _longjmp($146|0, threwValue|0); } tempRet0 = (threwValue); } else { $147 = -1; };
     $148 = tempRet0;
     $cond19 = ($147|0)==(1);
     if ($cond19) {
      $$reg2mem104$0 = $148;
      continue;
     }
    } else {
     label = 63;
    }
   }
  }
  if ((label|0) == 63) {
   label = 0;
   __THREW__ = 0;
   invoke_v(243);
   $203 = __THREW__; __THREW__ = 0;
   if ((($203|0) != 0) & ((threwValue|0) != 0)) { $204 = _testSetjmp(HEAP32[$203>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($204|0) == 0) { _longjmp($203|0, threwValue|0); } tempRet0 = (threwValue); } else { $204 = -1; };
   $205 = tempRet0;
   $cond12 = ($204|0)==(1);
   if ($cond12) {
    $$reg2mem104$0 = $205;
    continue;
   }
   $206 = HEAP32[265132>>2]|0;
   __THREW__ = 0;
   invoke_v($206|0);
   $207 = __THREW__; __THREW__ = 0;
   if ((($207|0) != 0) & ((threwValue|0) != 0)) { $208 = _testSetjmp(HEAP32[$207>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($208|0) == 0) { _longjmp($207|0, threwValue|0); } tempRet0 = (threwValue); } else { $208 = -1; };
   $209 = tempRet0;
   $cond13 = ($208|0)==(1);
   if ($cond13) {
    $$reg2mem104$0 = $209;
    continue;
   }
   $210 = HEAP32[265060>>2]|0;
   __THREW__ = 0;
   invoke_v($210|0);
   $211 = __THREW__; __THREW__ = 0;
   if ((($211|0) != 0) & ((threwValue|0) != 0)) { $212 = _testSetjmp(HEAP32[$211>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($212|0) == 0) { _longjmp($211|0, threwValue|0); } tempRet0 = (threwValue); } else { $212 = -1; };
   $213 = tempRet0;
   $cond14 = ($212|0)==(1);
   if ($cond14) {
    $$reg2mem104$0 = $213;
    continue;
   }
   __THREW__ = 0;
   invoke_v(244);
   $214 = __THREW__; __THREW__ = 0;
   if ((($214|0) != 0) & ((threwValue|0) != 0)) { $215 = _testSetjmp(HEAP32[$214>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($215|0) == 0) { _longjmp($214|0, threwValue|0); } tempRet0 = (threwValue); } else { $215 = -1; };
   $216 = tempRet0;
   $cond15 = ($215|0)==(1);
   if ($cond15) {
    $$reg2mem104$0 = $216;
    continue;
   } else {
    label = 67;
    break;
   }
  }
  __THREW__ = 0;
  invoke_v(237);
  $149 = __THREW__; __THREW__ = 0;
  if ((($149|0) != 0) & ((threwValue|0) != 0)) { $150 = _testSetjmp(HEAP32[$149>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($150|0) == 0) { _longjmp($149|0, threwValue|0); } tempRet0 = (threwValue); } else { $150 = -1; };
  $151 = tempRet0;
  $cond22 = ($150|0)==(1);
  if ($cond22) {
   $$reg2mem104$0 = $151;
   continue;
  }
  __THREW__ = 0;
  invoke_v(238);
  $152 = __THREW__; __THREW__ = 0;
  if ((($152|0) != 0) & ((threwValue|0) != 0)) { $153 = _testSetjmp(HEAP32[$152>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($153|0) == 0) { _longjmp($152|0, threwValue|0); } tempRet0 = (threwValue); } else { $153 = -1; };
  $154 = tempRet0;
  $cond23 = ($153|0)==(1);
  if ($cond23) {
   $$reg2mem104$0 = $154;
   continue;
  }
  __THREW__ = 0;
  invoke_v(239);
  $155 = __THREW__; __THREW__ = 0;
  if ((($155|0) != 0) & ((threwValue|0) != 0)) { $156 = _testSetjmp(HEAP32[$155>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($156|0) == 0) { _longjmp($155|0, threwValue|0); } tempRet0 = (threwValue); } else { $156 = -1; };
  $157 = tempRet0;
  $cond24 = ($156|0)==(1);
  if ($cond24) {
   $$reg2mem104$0 = $157;
   continue;
  }
  __THREW__ = 0;
  invoke_v(240);
  $158 = __THREW__; __THREW__ = 0;
  if ((($158|0) != 0) & ((threwValue|0) != 0)) { $159 = _testSetjmp(HEAP32[$158>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($159|0) == 0) { _longjmp($158|0, threwValue|0); } tempRet0 = (threwValue); } else { $159 = -1; };
  $160 = tempRet0;
  $cond25 = ($159|0)==(1);
  if ($cond25) {
   $$reg2mem104$0 = $160;
   continue;
  }
  __THREW__ = 0;
  invoke_v(241);
  $161 = __THREW__; __THREW__ = 0;
  if ((($161|0) != 0) & ((threwValue|0) != 0)) { $162 = _testSetjmp(HEAP32[$161>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($162|0) == 0) { _longjmp($161|0, threwValue|0); } tempRet0 = (threwValue); } else { $162 = -1; };
  $163 = tempRet0;
  $cond26 = ($162|0)==(1);
  if ($cond26) {
   $$reg2mem104$0 = $163;
   continue;
  }
  $164 = HEAP8[(259374)>>0]|0;
  $165 = $164&1;
  if ($165) {
   $166 = HEAP8[(259373)>>0]|0;
   $167 = $166&1;
   $168 = $167 ^ 1;
   $$reg2mem100$0 = $168;
  } else {
   $$reg2mem100$0 = 0;
  }
  $169 = $$reg2mem100$0&1;
  HEAP8[(259374)>>0] = $169;
  $170 = HEAP8[(259374)>>0]|0;
  $171 = $170&1;
  do {
   if (!($171)) {
    $172 = HEAP8[102648>>0]|0;
    $173 = $172&1;
    if (!($173)) {
     break;
    }
    $174 = HEAP32[(259664)>>2]|0;
    $175 = ($174|0)!=(0|0);
    $176 = HEAP32[(259664)>>2]|0;
    $177 = HEAP32[544648>>2]|0;
    $178 = $175 ? $176 : $177;
    __THREW__ = 0;
    (invoke_iiii(221,($178|0),(738975|0),($vararg_buffer112|0))|0);
    $179 = __THREW__; __THREW__ = 0;
    if ((($179|0) != 0) & ((threwValue|0) != 0)) { $180 = _testSetjmp(HEAP32[$179>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($180|0) == 0) { _longjmp($179|0, threwValue|0); } tempRet0 = (threwValue); } else { $180 = -1; };
    $181 = tempRet0;
    $cond27 = ($180|0)==(1);
    if ($cond27) {
     $$reg2mem104$0 = $181;
     continue L4;
    }
    $182 = HEAP32[(259664)>>2]|0;
    $183 = ($182|0)!=(0|0);
    $184 = HEAP32[(259664)>>2]|0;
    $185 = HEAP32[544648>>2]|0;
    $186 = $183 ? $184 : $185;
    __THREW__ = 0;
    (invoke_ii(222,($186|0))|0);
    $187 = __THREW__; __THREW__ = 0;
    if ((($187|0) != 0) & ((threwValue|0) != 0)) { $188 = _testSetjmp(HEAP32[$187>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($188|0) == 0) { _longjmp($187|0, threwValue|0); } tempRet0 = (threwValue); } else { $188 = -1; };
    $189 = tempRet0;
    $cond28 = ($188|0)==(1);
    if ($cond28) {
     $$reg2mem104$0 = $189;
     continue L4;
    }
   }
  } while(0);
  $190 = HEAP32[(251172)>>2]|0;
  $191 = ($190|0)!=(0|0);
  $192 = $191 ^ 1;
  $193 = $192&1;
  $194 = 1&1;
  $195 = $194&1;
  $196 = $195 & $193;
  $197 = ($196|0)!=(0);
  $198 = $197&1;
  $199 = $198&1;
  if (!($199)) {
   break;
  }
  __THREW__ = 0;
  invoke_v(242);
  $200 = __THREW__; __THREW__ = 0;
  if ((($200|0) != 0) & ((threwValue|0) != 0)) { $201 = _testSetjmp(HEAP32[$200>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($201|0) == 0) { _longjmp($200|0, threwValue|0); } tempRet0 = (threwValue); } else { $201 = -1; };
  $202 = tempRet0;
  $cond29 = ($201|0)==(1);
  if ($cond29) {
   $$reg2mem104$0 = $202;
  } else {
   label = 61;
   break;
  }
 }
 if ((label|0) == 7) {
  $$0 = $$reg2mem104$0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 61) {
 }
 else if ((label|0) == 67) {
  HEAP8[(259668)>>0] = 0;
  $$0 = 1;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[(259669)>>0] = 0;
 HEAP8[(259668)>>0] = 1;
 $$0 = 0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($$0|0);
}
function _rarch_main_iterate() {
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP8[(196976)>>0]|0;
 $2 = $1&1;
 do {
  if ($2) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $3 = (_input_key_pressed_func(30)|0);
   if (!($3)) {
    $4 = HEAP32[(12)>>2]|0;
    $5 = ((($4)) + 12|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = HEAP32[(24)>>2]|0;
    $8 = (FUNCTION_TABLE_ii[$6 & 511]($7)|0);
    if ($8) {
     $9 = (_check_enter_rgui()|0);
     if ($9) {
      $$expand_i1_val4 = 0;
      HEAP8[$0>>0] = $$expand_i1_val4;
      break;
     }
     $10 = HEAP8[(251152)>>0]|0;
     $11 = $10&1;
     if ($11) {
      HEAP8[(251152)>>0] = 0;
      $$expand_i1_val6 = 0;
      HEAP8[$0>>0] = $$expand_i1_val6;
      break;
     }
     _do_state_checks();
     $12 = HEAP32[(251172)>>2]|0;
     $13 = ($12|0)!=(0|0);
     if ($13) {
      $14 = HEAP32[(251172)>>2]|0;
      _bsv_movie_set_frame_start($14);
     }
     _update_frame_time();
     $15 = HEAP32[265100>>2]|0;
     FUNCTION_TABLE_v[$15 & 511]();
     _limit_frame_time();
     $16 = HEAP32[(251172)>>2]|0;
     $17 = ($16|0)!=(0|0);
     if ($17) {
      $18 = HEAP32[(251172)>>2]|0;
      _bsv_movie_set_frame_end($18);
     }
     $$expand_i1_val8 = 1;
     HEAP8[$0>>0] = $$expand_i1_val8;
     break;
    }
   }
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $19 = $$pre_trunc&1;
 STACKTOP = sp;return ($19|0);
}
function _rarch_main_deinit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(259374)>>0]|0;
 $1 = $0&1;
 if ($1) {
  _save_files();
 }
 _rarch_deinit_rewind();
 _deinit_cheats();
 _deinit_movie();
 $2 = HEAP8[(260857)>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP8[(260856)>>0]|0;
  $5 = $4&1;
  if (!($5)) {
   _save_auto_state();
  }
 }
 _uninit_drivers();
 $6 = HEAP32[265132>>2]|0;
 FUNCTION_TABLE_v[$6 & 511]();
 $7 = HEAP32[265060>>2]|0;
 FUNCTION_TABLE_v[$7 & 511]();
 _uninit_libretro_sym();
 $8 = HEAP8[(102652)>>0]|0;
 $9 = $8&1;
 if (!($9)) {
  HEAP8[(259668)>>0] = 0;
  STACKTOP = sp;return;
 }
 $10 = HEAP8[102648>>0]|0;
 $11 = $10&1;
 if ($11) {
  $12 = HEAP32[(259664)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = HEAP32[544648>>2]|0;
  $16 = $13 ? $14 : $15;
  HEAP32[$vararg_buffer>>2] = (102653);
  (_fprintf($16,739011,$vararg_buffer)|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  (_fflush($21)|0);
 }
 $22 = (_remove((102653))|0);
 $23 = ($22|0)<(0);
 if ($23) {
  $24 = HEAP32[(259664)>>2]|0;
  $25 = ($24|0)!=(0|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = HEAP32[544648>>2]|0;
  $28 = $25 ? $26 : $27;
  HEAP32[$vararg_buffer1>>2] = (102653);
  (_fprintf($28,739055,$vararg_buffer1)|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = ($29|0)!=(0|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = HEAP32[544648>>2]|0;
  $33 = $30 ? $31 : $32;
  (_fflush($33)|0);
 }
 HEAP8[(102652)>>0] = 0;
 HEAP8[(259668)>>0] = 0;
 STACKTOP = sp;return;
}
function _rarch_main_init_wrap($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $argc = 0, $argv = 0, $argv_copy = 0, $i = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $argv = sp + 152|0;
 $argv_copy = sp + 24|0;
 $0 = $args;
 $1 = HEAP8[(259668)>>0]|0;
 $2 = $1&1;
 if ($2) {
  _rarch_main_deinit();
 }
 $argc = 0;
 dest=$argv; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = (___strdup(739114)|0);
 $4 = $argc;
 $5 = (($4) + 1)|0;
 $argc = $5;
 $6 = (($argv) + ($4<<2)|0);
 HEAP32[$6>>2] = $3;
 $7 = $0;
 $8 = ((($7)) + 21|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 do {
  if (!($10)) {
   $11 = $0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(0|0);
   $14 = HEAP8[102648>>0]|0;
   $15 = $14&1;
   if ($13) {
    if ($15) {
     $16 = HEAP32[(259664)>>2]|0;
     $17 = ($16|0)!=(0|0);
     $18 = HEAP32[(259664)>>2]|0;
     $19 = HEAP32[544648>>2]|0;
     $20 = $17 ? $18 : $19;
     $21 = $0;
     $22 = HEAP32[$21>>2]|0;
     HEAP32[$vararg_buffer>>2] = $22;
     (_fprintf($20,739124,$vararg_buffer)|0);
     $23 = HEAP32[(259664)>>2]|0;
     $24 = ($23|0)!=(0|0);
     $25 = HEAP32[(259664)>>2]|0;
     $26 = HEAP32[544648>>2]|0;
     $27 = $24 ? $25 : $26;
     (_fflush($27)|0);
    }
    $28 = $0;
    $29 = HEAP32[$28>>2]|0;
    $30 = (___strdup($29)|0);
    $31 = $argc;
    $32 = (($31) + 1)|0;
    $argc = $32;
    $33 = (($argv) + ($31<<2)|0);
    HEAP32[$33>>2] = $30;
    break;
   } else {
    if ($15) {
     $34 = HEAP32[(259664)>>2]|0;
     $35 = ($34|0)!=(0|0);
     $36 = HEAP32[(259664)>>2]|0;
     $37 = HEAP32[544648>>2]|0;
     $38 = $35 ? $36 : $37;
     (_fprintf($38,739151,$vararg_buffer1)|0);
     $39 = HEAP32[(259664)>>2]|0;
     $40 = ($39|0)!=(0|0);
     $41 = HEAP32[(259664)>>2]|0;
     $42 = HEAP32[544648>>2]|0;
     $43 = $40 ? $41 : $42;
     (_fflush($43)|0);
    }
    $44 = (___strdup(739192)|0);
    $45 = $argc;
    $46 = (($45) + 1)|0;
    $argc = $46;
    $47 = (($argv) + ($45<<2)|0);
    HEAP32[$47>>2] = $44;
    break;
   }
  }
 } while(0);
 $48 = $0;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = (___strdup(739199)|0);
  $53 = $argc;
  $54 = (($53) + 1)|0;
  $argc = $54;
  $55 = (($argv) + ($53<<2)|0);
  HEAP32[$55>>2] = $52;
  $56 = $0;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (___strdup($58)|0);
  $60 = $argc;
  $61 = (($60) + 1)|0;
  $argc = $61;
  $62 = (($argv) + ($60<<2)|0);
  HEAP32[$62>>2] = $59;
 }
 $63 = $0;
 $64 = ((($63)) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = (___strdup(739202)|0);
  $68 = $argc;
  $69 = (($68) + 1)|0;
  $argc = $69;
  $70 = (($argv) + ($68<<2)|0);
  HEAP32[$70>>2] = $67;
  $71 = $0;
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (___strdup($73)|0);
  $75 = $argc;
  $76 = (($75) + 1)|0;
  $argc = $76;
  $77 = (($argv) + ($75<<2)|0);
  HEAP32[$77>>2] = $74;
 }
 $78 = $0;
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = (___strdup(739205)|0);
  $83 = $argc;
  $84 = (($83) + 1)|0;
  $argc = $84;
  $85 = (($argv) + ($83<<2)|0);
  HEAP32[$85>>2] = $82;
  $86 = $0;
  $87 = ((($86)) + 12|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (___strdup($88)|0);
  $90 = $argc;
  $91 = (($90) + 1)|0;
  $argc = $91;
  $92 = (($argv) + ($90<<2)|0);
  HEAP32[$92>>2] = $89;
 }
 $93 = $0;
 $94 = ((($93)) + 20|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&1;
 if ($96) {
  $97 = (___strdup(739208)|0);
  $98 = $argc;
  $99 = (($98) + 1)|0;
  $argc = $99;
  $100 = (($argv) + ($98<<2)|0);
  HEAP32[$100>>2] = $97;
 }
 dest=$argv_copy; src=$argv; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $101 = $argc;
 $102 = (_rarch_main_init($101,$argv)|0);
 $ret = $102;
 $i = 0;
 while(1) {
  $103 = $i;
  $104 = ($103>>>0)<(32);
  if (!($104)) {
   break;
  }
  $105 = $i;
  $106 = (($argv_copy) + ($105<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  _free($107);
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 $110 = $ret;
 STACKTOP = sp;return ($110|0);
}
function _rarch_main_idle_iterate() {
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (_input_key_pressed_func(30)|0);
 if (!($1)) {
  $2 = HEAP32[(12)>>2]|0;
  $3 = ((($2)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[(24)>>2]|0;
  $6 = (FUNCTION_TABLE_ii[$4 & 511]($5)|0);
  if ($6) {
   _do_state_checks();
   _rarch_input_poll();
   _rarch_sleep(10);
   $$expand_i1_val2 = 1;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $7 = $$pre_trunc&1;
   STACKTOP = sp;return ($7|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function _take_screenshot_viewport() {
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $screenshot_dir = 0, $screenshot_path = 0, $vp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4128|0;
 $vp = sp + 8|0;
 $screenshot_path = sp + 32|0;
 ;HEAP32[$vp>>2]=0|0;HEAP32[$vp+4>>2]=0|0;HEAP32[$vp+8>>2]=0|0;HEAP32[$vp+12>>2]=0|0;HEAP32[$vp+16>>2]=0|0;HEAP32[$vp+20>>2]=0|0;
 $1 = HEAP32[(12)>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(24)>>2]|0;
 FUNCTION_TABLE_vii[$3 & 1023]($4,$vp);
 $5 = ((($vp)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = ((($vp)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = ((($vp)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($vp)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = Math_imul($12, $14)|0;
   $16 = ($15*3)|0;
   $17 = (_malloc($16)|0);
   $buffer = $17;
   $18 = $buffer;
   $19 = ($18|0)!=(0|0);
   if (!($19)) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $40 = $$pre_trunc&1;
    STACKTOP = sp;return ($40|0);
   }
   $20 = HEAP32[(12)>>2]|0;
   $21 = ((($20)) + 48|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[(24)>>2]|0;
   $24 = $buffer;
   $25 = (FUNCTION_TABLE_iii[$22 & 511]($23,$24)|0);
   if (!($25)) {
    $26 = $buffer;
    _free($26);
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $40 = $$pre_trunc&1;
    STACKTOP = sp;return ($40|0);
   }
   $screenshot_dir = (90316);
   $27 = HEAP8[(90316)>>0]|0;
   $28 = ($27<<24>>24)!=(0);
   if (!($28)) {
    _fill_pathname_basedir($screenshot_path,(135442),4096);
    $screenshot_dir = $screenshot_path;
   }
   $29 = $screenshot_dir;
   $30 = $buffer;
   $31 = ((($vp)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($vp)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($vp)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36*3)|0;
   $38 = (_screenshot_dump($29,$30,$32,$34,$37,1)|0);
   $39 = $buffer;
   _free($39);
   if ($38) {
    $$expand_i1_val8 = 1;
    HEAP8[$0>>0] = $$expand_i1_val8;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $40 = $$pre_trunc&1;
    STACKTOP = sp;return ($40|0);
   } else {
    $$expand_i1_val6 = 0;
    HEAP8[$0>>0] = $$expand_i1_val6;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $40 = $$pre_trunc&1;
    STACKTOP = sp;return ($40|0);
   }
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $40 = $$pre_trunc&1;
 STACKTOP = sp;return ($40|0);
}
function _take_screenshot_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $height = 0;
 var $pitch = 0, $screenshot_dir = 0, $screenshot_path = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $screenshot_path = sp + 24|0;
 $0 = HEAP32[(259416)>>2]|0;
 $data = $0;
 $1 = HEAP32[(259420)>>2]|0;
 $width = $1;
 $2 = HEAP32[(259424)>>2]|0;
 $height = $2;
 $3 = HEAP32[(259428)>>2]|0;
 $pitch = $3;
 $screenshot_dir = (90316);
 $4 = HEAP8[(90316)>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 if (!($5)) {
  _fill_pathname_basedir($screenshot_path,(135442),4096);
  $screenshot_dir = $screenshot_path;
 }
 $6 = $screenshot_dir;
 $7 = $data;
 $8 = $height;
 $9 = (($8) - 1)|0;
 $10 = $pitch;
 $11 = Math_imul($9, $10)|0;
 $12 = (($7) + ($11)|0);
 $13 = $width;
 $14 = $height;
 $15 = $pitch;
 $16 = (0 - ($15))|0;
 $17 = (_screenshot_dump($6,$12,$13,$14,$16,0)|0);
 STACKTOP = sp;return ($17|0);
}
function _video_frame($data,$width,$height,$pitch) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $pitch = $pitch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $msg = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $width;
 $2 = $height;
 $3 = $pitch;
 $4 = HEAP8[(102650)>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 HEAP32[(259416)>>2] = $6;
 $7 = $1;
 HEAP32[(259420)>>2] = $7;
 $8 = $2;
 HEAP32[(259424)>>2] = $8;
 $9 = $3;
 HEAP32[(259428)>>2] = $9;
 $10 = HEAP32[(196984)>>2]|0;
 $11 = ($10|0)==(0);
 $12 = $0;
 $13 = ($12|0)!=(0|0);
 $or$cond = $11 & $13;
 $14 = $0;
 $15 = ($14|0)!=((-1)|0);
 $or$cond3 = $or$cond & $15;
 if ($or$cond3) {
  $16 = $1;
  HEAP32[(56)>>2] = $16;
  $17 = $2;
  HEAP32[(60)>>2] = $17;
  $18 = $1;
  HEAP32[(68)>>2] = $18;
  $19 = $2;
  HEAP32[(72)>>2] = $19;
  $20 = $3;
  HEAP32[(64)>>2] = $20;
  $21 = $1;
  $22 = $21<<1;
  HEAP32[(76)>>2] = $22;
  $23 = HEAP32[(184)>>2]|0;
  $24 = $0;
  _scaler_ctx_scale((56),$23,$24);
  $25 = HEAP32[(184)>>2]|0;
  $0 = $25;
  $26 = HEAP32[(76)>>2]|0;
  $3 = $26;
 }
 $27 = HEAP32[(251148)>>2]|0;
 $28 = (_msg_queue_pull($27)|0);
 $msg = $28;
 $29 = $msg;
 HEAP32[(220)>>2] = $29;
 $30 = HEAP32[(12)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[(24)>>2]|0;
 $34 = $0;
 $35 = $1;
 $36 = $2;
 $37 = $3;
 $38 = $msg;
 $39 = (FUNCTION_TABLE_iiiiiii[$32 & 255]($33,$34,$35,$36,$37,$38)|0);
 if ($39) {
  STACKTOP = sp;return;
 }
 HEAP8[(102650)>>0] = 0;
 STACKTOP = sp;return;
}
function _audio_flush($data,$samples) {
 $data = $data|0;
 $samples = $samples|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $output_data = 0, $output_frames = 0, $src_data = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $0 = sp + 52|0;
 $src_data = sp;
 $1 = $data;
 $2 = $samples;
 $3 = HEAP8[(259375)>>0]|0;
 $4 = $3&1;
 if (!($4)) {
  $5 = HEAP8[(201753)>>0]|0;
  $6 = $5&1;
  if (!($6)) {
   $7 = HEAP8[(102649)>>0]|0;
   $8 = $7&1;
   if (!($8)) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $83 = $$pre_trunc&1;
    STACKTOP = sp;return ($83|0);
   }
   $output_data = 0;
   $output_frames = 0;
   ;HEAP32[$src_data>>2]=0|0;HEAP32[$src_data+4>>2]=0|0;HEAP32[$src_data+8>>2]=0|0;HEAP32[$src_data+12>>2]=0|0;HEAP32[$src_data+16>>2]=0|0;HEAP32[$src_data+20>>2]=0|0;
   $9 = HEAP32[(201720)>>2]|0;
   $10 = $1;
   $11 = $2;
   $12 = +HEAPF32[(201808)>>2];
   _audio_convert_s16_to_float_C($9,$10,$11,$12);
   $13 = HEAP32[(201720)>>2]|0;
   HEAP32[$src_data>>2] = $13;
   $14 = $2;
   $15 = $14 >>> 1;
   $16 = ((($src_data)) + 8|0);
   HEAP32[$16>>2] = $15;
   $17 = HEAP32[(201756)>>2]|0;
   $18 = ((($src_data)) + 4|0);
   HEAP32[$18>>2] = $17;
   $19 = HEAP8[(201788)>>0]|0;
   $20 = $19&1;
   if ($20) {
    _readjust_audio_input_rate();
   }
   $21 = +HEAPF64[(201744)>>3];
   $22 = ((($src_data)) + 16|0);
   HEAPF64[$22>>3] = $21;
   $23 = HEAP8[(259377)>>0]|0;
   $24 = $23&1;
   if ($24) {
    $25 = +HEAPF32[(98520)>>2];
    $26 = $25;
    $27 = ((($src_data)) + 16|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $28 * $26;
    HEAPF64[$27>>3] = $29;
   }
   $30 = HEAP32[(201716)>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[(201712)>>2]|0;
   FUNCTION_TABLE_vii[$32 & 1023]($33,$src_data);
   $34 = HEAP32[(201756)>>2]|0;
   $output_data = $34;
   $35 = ((($src_data)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $output_frames = $36;
   $37 = HEAP8[(201752)>>0]|0;
   $38 = $37&1;
   if ($38) {
    $39 = HEAP32[8>>2]|0;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[(20)>>2]|0;
    $43 = $output_data;
    $44 = $output_frames;
    $45 = $44<<2;
    $46 = $45<<1;
    $47 = (FUNCTION_TABLE_iiii[$41 & 1023]($42,$43,$46)|0);
    $48 = ($47|0)<(0);
    if ($48) {
     $49 = HEAP32[(259664)>>2]|0;
     $50 = ($49|0)!=(0|0);
     $51 = HEAP32[(259664)>>2]|0;
     $52 = HEAP32[544648>>2]|0;
     $53 = $50 ? $51 : $52;
     (_fprintf($53,745517,$vararg_buffer)|0);
     $54 = HEAP32[(259664)>>2]|0;
     $55 = ($54|0)!=(0|0);
     $56 = HEAP32[(259664)>>2]|0;
     $57 = HEAP32[544648>>2]|0;
     $58 = $55 ? $56 : $57;
     (_fflush($58)|0);
     $$expand_i1_val6 = 0;
     HEAP8[$0>>0] = $$expand_i1_val6;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $83 = $$pre_trunc&1;
     STACKTOP = sp;return ($83|0);
    }
   } else {
    $59 = HEAP32[(201760)>>2]|0;
    $60 = $output_data;
    $61 = $output_frames;
    $62 = $61<<1;
    _audio_convert_float_to_s16_C($59,$60,$62);
    $63 = HEAP32[8>>2]|0;
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = HEAP32[(20)>>2]|0;
    $67 = HEAP32[(201760)>>2]|0;
    $68 = $output_frames;
    $69 = $68<<1;
    $70 = $69<<1;
    $71 = (FUNCTION_TABLE_iiii[$65 & 1023]($66,$67,$70)|0);
    $72 = ($71|0)<(0);
    if ($72) {
     $73 = HEAP32[(259664)>>2]|0;
     $74 = ($73|0)!=(0|0);
     $75 = HEAP32[(259664)>>2]|0;
     $76 = HEAP32[544648>>2]|0;
     $77 = $74 ? $75 : $76;
     (_fprintf($77,745517,$vararg_buffer1)|0);
     $78 = HEAP32[(259664)>>2]|0;
     $79 = ($78|0)!=(0|0);
     $80 = HEAP32[(259664)>>2]|0;
     $81 = HEAP32[544648>>2]|0;
     $82 = $79 ? $80 : $81;
     (_fflush($82)|0);
     $$expand_i1_val8 = 0;
     HEAP8[$0>>0] = $$expand_i1_val8;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $83 = $$pre_trunc&1;
     STACKTOP = sp;return ($83|0);
    }
   }
   $$expand_i1_val10 = 1;
   HEAP8[$0>>0] = $$expand_i1_val10;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $83 = $$pre_trunc&1;
   STACKTOP = sp;return ($83|0);
  }
 }
 $$expand_i1_val = 1;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $83 = $$pre_trunc&1;
 STACKTOP = sp;return ($83|0);
}
function _input_poll_overlay() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $device = 0, $i = 0, $j = 0, $polled = 0, $polled_data = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $polled_data = sp;
 ;HEAP32[(200)>>2]=0|0;HEAP32[(200)+4>>2]=0|0;HEAP32[(200)+8>>2]=0|0;HEAP32[(200)+12>>2]=0|0;
 $0 = HEAP32[(192)>>2]|0;
 $1 = (_input_overlay_full_screen($0)|0);
 $2 = $1 ? 65542 : 6;
 $device = $2;
 $polled = 0;
 $i = 0;
 while(1) {
  $3 = HEAP32[(16)>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[(28)>>2]|0;
  $7 = $device;
  $8 = $i;
  $9 = (FUNCTION_TABLE_iiiiiii[$5 & 255]($6,0,0,$7,$8,2)|0);
  $10 = ($9<<16>>16)!=(0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[(16)>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[(28)>>2]|0;
  $15 = $device;
  $16 = $i;
  $17 = (FUNCTION_TABLE_iiiiiii[$13 & 255]($14,0,0,$15,$16,0)|0);
  $x = $17;
  $18 = HEAP32[(16)>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[(28)>>2]|0;
  $22 = $device;
  $23 = $i;
  $24 = (FUNCTION_TABLE_iiiiiii[$20 & 255]($21,0,0,$22,$23,1)|0);
  $y = $24;
  $25 = HEAP32[(192)>>2]|0;
  $26 = $x;
  $27 = $y;
  _input_overlay_poll($25,$polled_data,$26,$27);
  $28 = $polled_data;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (200);
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = $36 | $30;
  $41 = $39 | $33;
  $42 = (200);
  $43 = $42;
  HEAP32[$43>>2] = $40;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = $41;
  $j = 0;
  while(1) {
   $46 = $j;
   $47 = ($46>>>0)<(4);
   if (!($47)) {
    break;
   }
   $48 = $j;
   $49 = ((208) + ($48<<1)|0);
   $50 = HEAP16[$49>>1]|0;
   $51 = $50 << 16 >> 16;
   $52 = ($51|0)==(0);
   if ($52) {
    $53 = $j;
    $54 = ((($polled_data)) + 8|0);
    $55 = (($54) + ($53<<1)|0);
    $56 = HEAP16[$55>>1]|0;
    $57 = $j;
    $58 = ((208) + ($57<<1)|0);
    HEAP16[$58>>1] = $56;
   }
   $59 = $j;
   $60 = (($59) + 1)|0;
   $j = $60;
  }
  $polled = 1;
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $63 = $polled;
 $64 = $63&1;
 if ($64) {
  STACKTOP = sp;return;
 }
 $65 = HEAP32[(192)>>2]|0;
 _input_overlay_poll_clear($65);
 STACKTOP = sp;return;
}
function _init_controllers() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $device = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0>>>0)<(8);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ((60976) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $device = $4;
  $5 = $device;
  $6 = ($5|0)==(1);
  L4: do {
   if (!($6)) {
    $7 = HEAP32[265092>>2]|0;
    $8 = $i;
    $9 = $device;
    FUNCTION_TABLE_vii[$7 & 1023]($8,$9);
    $10 = $device;
    switch ($10|0) {
    case 0:  {
     $11 = HEAP8[102648>>0]|0;
     $12 = $11&1;
     if (!($12)) {
      break L4;
     }
     $13 = HEAP32[(259664)>>2]|0;
     $14 = ($13|0)!=(0|0);
     $15 = HEAP32[(259664)>>2]|0;
     $16 = HEAP32[544648>>2]|0;
     $17 = $14 ? $15 : $16;
     $18 = $i;
     $19 = (($18) + 1)|0;
     HEAP32[$vararg_buffer>>2] = $19;
     (_fprintf($17,745207,$vararg_buffer)|0);
     $20 = HEAP32[(259664)>>2]|0;
     $21 = ($20|0)!=(0|0);
     $22 = HEAP32[(259664)>>2]|0;
     $23 = HEAP32[544648>>2]|0;
     $24 = $21 ? $22 : $23;
     (_fflush($24)|0);
     break L4;
     break;
    }
    case 5:  {
     $25 = HEAP8[102648>>0]|0;
     $26 = $25&1;
     if (!($26)) {
      break L4;
     }
     $27 = HEAP32[(259664)>>2]|0;
     $28 = ($27|0)!=(0|0);
     $29 = HEAP32[(259664)>>2]|0;
     $30 = HEAP32[544648>>2]|0;
     $31 = $28 ? $29 : $30;
     $32 = $i;
     $33 = (($32) + 1)|0;
     HEAP32[$vararg_buffer1>>2] = $33;
     (_fprintf($31,745254,$vararg_buffer1)|0);
     $34 = HEAP32[(259664)>>2]|0;
     $35 = ($34|0)!=(0|0);
     $36 = HEAP32[(259664)>>2]|0;
     $37 = HEAP32[544648>>2]|0;
     $38 = $35 ? $36 : $37;
     (_fflush($38)|0);
     break L4;
     break;
    }
    case 2:  {
     $39 = HEAP8[102648>>0]|0;
     $40 = $39&1;
     if (!($40)) {
      break L4;
     }
     $41 = HEAP32[(259664)>>2]|0;
     $42 = ($41|0)!=(0|0);
     $43 = HEAP32[(259664)>>2]|0;
     $44 = HEAP32[544648>>2]|0;
     $45 = $42 ? $43 : $44;
     $46 = $i;
     $47 = (($46) + 1)|0;
     HEAP32[$vararg_buffer4>>2] = $47;
     (_fprintf($45,745300,$vararg_buffer4)|0);
     $48 = HEAP32[(259664)>>2]|0;
     $49 = ($48|0)!=(0|0);
     $50 = HEAP32[(259664)>>2]|0;
     $51 = HEAP32[544648>>2]|0;
     $52 = $49 ? $50 : $51;
     (_fflush($52)|0);
     break L4;
     break;
    }
    case 516:  {
     $53 = HEAP8[102648>>0]|0;
     $54 = $53&1;
     if (!($54)) {
      break L4;
     }
     $55 = HEAP32[(259664)>>2]|0;
     $56 = ($55|0)!=(0|0);
     $57 = HEAP32[(259664)>>2]|0;
     $58 = HEAP32[544648>>2]|0;
     $59 = $56 ? $57 : $58;
     $60 = $i;
     $61 = (($60) + 1)|0;
     HEAP32[$vararg_buffer7>>2] = $61;
     (_fprintf($59,745341,$vararg_buffer7)|0);
     $62 = HEAP32[(259664)>>2]|0;
     $63 = ($62|0)!=(0|0);
     $64 = HEAP32[(259664)>>2]|0;
     $65 = HEAP32[544648>>2]|0;
     $66 = $63 ? $64 : $65;
     (_fflush($66)|0);
     break L4;
     break;
    }
    case 772:  {
     $67 = HEAP8[102648>>0]|0;
     $68 = $67&1;
     if (!($68)) {
      break L4;
     }
     $69 = HEAP32[(259664)>>2]|0;
     $70 = ($69|0)!=(0|0);
     $71 = HEAP32[(259664)>>2]|0;
     $72 = HEAP32[544648>>2]|0;
     $73 = $70 ? $71 : $72;
     $74 = $i;
     $75 = (($74) + 1)|0;
     HEAP32[$vararg_buffer10>>2] = $75;
     (_fprintf($73,745386,$vararg_buffer10)|0);
     $76 = HEAP32[(259664)>>2]|0;
     $77 = ($76|0)!=(0|0);
     $78 = HEAP32[(259664)>>2]|0;
     $79 = HEAP32[544648>>2]|0;
     $80 = $77 ? $78 : $79;
     (_fflush($80)|0);
     break L4;
     break;
    }
    case 257:  {
     $81 = HEAP8[102648>>0]|0;
     $82 = $81&1;
     if (!($82)) {
      break L4;
     }
     $83 = HEAP32[(259664)>>2]|0;
     $84 = ($83|0)!=(0|0);
     $85 = HEAP32[(259664)>>2]|0;
     $86 = HEAP32[544648>>2]|0;
     $87 = $84 ? $85 : $86;
     $88 = $i;
     $89 = (($88) + 1)|0;
     HEAP32[$vararg_buffer13>>2] = $89;
     (_fprintf($87,745432,$vararg_buffer13)|0);
     $90 = HEAP32[(259664)>>2]|0;
     $91 = ($90|0)!=(0|0);
     $92 = HEAP32[(259664)>>2]|0;
     $93 = HEAP32[544648>>2]|0;
     $94 = $91 ? $92 : $93;
     (_fflush($94)|0);
     break L4;
     break;
    }
    case 260:  {
     $95 = HEAP8[102648>>0]|0;
     $96 = $95&1;
     if (!($96)) {
      break L4;
     }
     $97 = HEAP32[(259664)>>2]|0;
     $98 = ($97|0)!=(0|0);
     $99 = HEAP32[(259664)>>2]|0;
     $100 = HEAP32[544648>>2]|0;
     $101 = $98 ? $99 : $100;
     $102 = $i;
     $103 = (($102) + 1)|0;
     HEAP32[$vararg_buffer16>>2] = $103;
     (_fprintf($101,745476,$vararg_buffer16)|0);
     $104 = HEAP32[(259664)>>2]|0;
     $105 = ($104|0)!=(0|0);
     $106 = HEAP32[(259664)>>2]|0;
     $107 = HEAP32[544648>>2]|0;
     $108 = $105 ? $106 : $107;
     (_fflush($108)|0);
     break L4;
     break;
    }
    default: {
     break L4;
    }
    }
   }
  } while(0);
  $109 = $i;
  $110 = (($109) + 1)|0;
  $i = $110;
 }
 STACKTOP = sp;return;
}
function _set_paths($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $path;
 $1 = $0;
 _set_basename($1);
 $2 = HEAP8[(123144)>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  _fill_pathname_noext((143634),(135442),751562,4096);
 }
 $4 = HEAP8[(123145)>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  _fill_pathname_noext((164114),(135442),751660,4096);
 }
 $6 = (_path_is_directory((143634))|0);
 if ($6) {
  _fill_pathname_dir((143634),(135442),751562,4096);
  $7 = HEAP8[102648>>0]|0;
  $8 = $7&1;
  if ($8) {
   $9 = HEAP32[(259664)>>2]|0;
   $10 = ($9|0)!=(0|0);
   $11 = HEAP32[(259664)>>2]|0;
   $12 = HEAP32[544648>>2]|0;
   $13 = $10 ? $11 : $12;
   HEAP32[$vararg_buffer>>2] = (143634);
   (_fprintf($13,745010,$vararg_buffer)|0);
   $14 = HEAP32[(259664)>>2]|0;
   $15 = ($14|0)!=(0|0);
   $16 = HEAP32[(259664)>>2]|0;
   $17 = HEAP32[544648>>2]|0;
   $18 = $15 ? $16 : $17;
   (_fflush($18)|0);
  }
 }
 $19 = (_path_is_directory((164114))|0);
 if ($19) {
  _fill_pathname_dir((164114),(135442),751660,4096);
  $20 = HEAP8[102648>>0]|0;
  $21 = $20&1;
  if ($21) {
   $22 = HEAP32[(259664)>>2]|0;
   $23 = ($22|0)!=(0|0);
   $24 = HEAP32[(259664)>>2]|0;
   $25 = HEAP32[544648>>2]|0;
   $26 = $23 ? $24 : $25;
   HEAP32[$vararg_buffer1>>2] = (164114);
   (_fprintf($26,745053,$vararg_buffer1)|0);
   $27 = HEAP32[(259664)>>2]|0;
   $28 = ($27|0)!=(0|0);
   $29 = HEAP32[(259664)>>2]|0;
   $30 = HEAP32[544648>>2]|0;
   $31 = $28 ? $29 : $30;
   (_fflush($31)|0);
  }
 }
 $32 = HEAP8[(94412)>>0]|0;
 $33 = ($32<<24>>24)!=(0);
 if (!($33)) {
  $34 = $0;
  _fill_pathname_basedir((94412),$34,4096);
 }
 $35 = HEAP8[(123154)>>0]|0;
 $36 = $35 << 24 >> 24;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = (_path_is_directory((123154))|0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 _fill_pathname_dir((123154),(135442),745097,4096);
 $39 = HEAP8[102648>>0]|0;
 $40 = $39&1;
 if ($40) {
  $41 = HEAP32[(259664)>>2]|0;
  $42 = ($41|0)!=(0|0);
  $43 = HEAP32[(259664)>>2]|0;
  $44 = HEAP32[544648>>2]|0;
  $45 = $42 ? $43 : $44;
  HEAP32[$vararg_buffer4>>2] = (123154);
  (_fprintf($45,745102,$vararg_buffer4)|0);
  $46 = HEAP32[(259664)>>2]|0;
  $47 = ($46|0)!=(0|0);
  $48 = HEAP32[(259664)>>2]|0;
  $49 = HEAP32[544648>>2]|0;
  $50 = $47 ? $48 : $49;
  (_fflush($50)|0);
 }
 $51 = (_path_file_exists((123154))|0);
 if ($51) {
  STACKTOP = sp;return;
 }
 HEAP8[(123154)>>0] = 0;
 $52 = HEAP8[102648>>0]|0;
 $53 = $52&1;
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = HEAP32[(259664)>>2]|0;
 $55 = ($54|0)!=(0|0);
 $56 = HEAP32[(259664)>>2]|0;
 $57 = HEAP32[544648>>2]|0;
 $58 = $55 ? $56 : $57;
 (_fprintf($58,745147,$vararg_buffer7)|0);
 $59 = HEAP32[(259664)>>2]|0;
 $60 = ($59|0)!=(0|0);
 $61 = HEAP32[(259664)>>2]|0;
 $62 = HEAP32[544648>>2]|0;
 $63 = $60 ? $61 : $62;
 (_fflush($63)|0);
 STACKTOP = sp;return;
}
function _fill_pathnames() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(106752)>>2]|0;
 switch ($0|0) {
 case 3: case 2:  {
  $1 = HEAP8[(123144)>>0]|0;
  $2 = $1&1;
  if (!($2)) {
   _fill_pathname((143634),(110856),751562,4096);
  }
  _fill_pathname((151826),(143634),744874,4096);
  $3 = HEAP8[(123145)>>0]|0;
  $4 = $3&1;
  if (!($4)) {
   _fill_pathname((164114),(110856),751660,4096);
  }
  break;
 }
 case 4:  {
  $5 = HEAP8[(123144)>>0]|0;
  $6 = $5&1;
  if ($6) {
   $7 = HEAP8[(114952)>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = ($8|0)!=(0);
   if ($9) {
    $10 = HEAP8[(119048)>>0]|0;
    $11 = $10 << 24 >> 24;
    $12 = ($11|0)!=(0);
    if ($12) {
     $13 = HEAP32[(259664)>>2]|0;
     $14 = ($13|0)!=(0|0);
     $15 = HEAP32[(259664)>>2]|0;
     $16 = HEAP32[544648>>2]|0;
     $17 = $14 ? $15 : $16;
     (_fprintf($17,744880,$vararg_buffer)|0);
     $18 = HEAP32[(259664)>>2]|0;
     $19 = ($18|0)!=(0|0);
     $20 = HEAP32[(259664)>>2]|0;
     $21 = HEAP32[544648>>2]|0;
     $22 = $19 ? $20 : $21;
     (_fflush($22)|0);
    }
   }
  }
  _fill_pathname((155922),(114952),751562,4096);
  _fill_pathname((160018),(119048),751562,4096);
  $23 = HEAP8[(123145)>>0]|0;
  $24 = $23&1;
  if (!($24)) {
   $25 = HEAP8[(114952)>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)!=(0);
   $28 = $27 ? (114952) : (119048);
   _fill_pathname((164114),$28,751660,4096);
  }
  break;
 }
 case 1:  {
  $29 = HEAP8[(123144)>>0]|0;
  $30 = $29&1;
  if (!($30)) {
   _fill_pathname((143634),(106760),751562,4096);
  }
  $31 = HEAP8[(123145)>>0]|0;
  $32 = $31&1;
  if (!($32)) {
   _fill_pathname((164114),(106760),751660,4096);
  }
  _fill_pathname((147730),(143634),746994,4096);
  break;
 }
 default: {
  _fill_pathname((147730),(143634),746994,4096);
 }
 }
 _fill_pathname((251176),(143634),773086,4096);
 $33 = HEAP8[(135442)>>0]|0;
 $34 = ($33<<24>>24)!=(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = HEAP8[(184598)>>0]|0;
 $36 = ($35<<24>>24)!=(0);
 if (!($36)) {
  _fill_pathname_noext((184598),(135442),744990,4096);
 }
 $37 = HEAP8[(188694)>>0]|0;
 $38 = ($37<<24>>24)!=(0);
 if (!($38)) {
  _fill_pathname_noext((188694),(135442),744995,4096);
 }
 $39 = HEAP8[(192790)>>0]|0;
 $40 = ($39<<24>>24)!=(0);
 if (!($40)) {
  _fill_pathname_noext((192790),(135442),745000,4096);
 }
 $41 = HEAP8[(168210)>>0]|0;
 $42 = ($41<<24>>24)!=(0);
 if ($42) {
  STACKTOP = sp;return;
 }
 _fill_pathname_noext((168210),(135442),745005,4096);
 STACKTOP = sp;return;
}
function _input_key_pressed_func($key) {
 $key = $key|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 5|0;
 $1 = $key;
 $2 = HEAP8[(39)>>0]|0;
 $3 = $2&1;
 if ($3) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $32 = $$pre_trunc&1;
  STACKTOP = sp;return ($32|0);
 } else {
  $4 = HEAP32[(16)>>2]|0;
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[(28)>>2]|0;
  $8 = $1;
  $9 = (FUNCTION_TABLE_iii[$6 & 511]($7,$8)|0);
  $10 = $9&1;
  $ret = $10;
  $11 = (200);
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = (_bitshift64Shl(1,0,($17|0))|0);
  $19 = tempRet0;
  $20 = $13 & $18;
  $21 = $16 & $19;
  $22 = $ret;
  $23 = $22&1;
  $24 = $23&1;
  $25 = $24 | $20;
  $26 = ($25|0)!=(0);
  $27 = ($21|0)!=(0);
  $28 = $26 | $27;
  $29 = $28&1;
  $ret = $29;
  $30 = $ret;
  $31 = $30&1;
  $$expand_i1_val2 = $31&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $32 = $$pre_trunc&1;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _init_state_first() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _init_state();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0>>>0)<(8);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ((60976) + ($2<<2)|0);
  HEAP32[$3>>2] = 1;
  $4 = $i;
  $5 = (($4) + 1)|0;
  $i = $5;
 }
 STACKTOP = sp;return;
}
function _init_state() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(102650)>>0] = 1;
 HEAP8[(102649)>>0] = 1;
 HEAP32[(106752)>>2] = 0;
 return;
}
function _parse_input($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $opts = 0;
 var $optstring = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $port = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $val = sp + 552|0;
 $opts = sp + 56|0;
 $0 = $argc;
 $1 = $argv;
 HEAP8[(260856)>>0] = 0;
 HEAP8[(260857)>>0] = 0;
 HEAP8[(123144)>>0] = 0;
 HEAP8[(123145)>>0] = 0;
 $2 = $0;
 $3 = ($2|0)<(2);
 if ($3) {
  HEAP8[(260857)>>0] = 1;
  STACKTOP = sp;return;
 }
 HEAP32[544644>>2] = 0;
 HEAP32[$val>>2] = 0;
 HEAP32[$opts>>2] = 744196;
 $4 = ((($opts)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($opts)) + 8|0);
 HEAP32[$5>>2] = $val;
 $6 = ((($opts)) + 12|0);
 HEAP32[$6>>2] = 77;
 $7 = ((($opts)) + 16|0);
 HEAP32[$7>>2] = 744201;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($7)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($7)) + 12|0);
 HEAP32[$10>>2] = 104;
 $11 = ((($7)) + 16|0);
 HEAP32[$11>>2] = 744206;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 1;
 $13 = ((($11)) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($11)) + 12|0);
 HEAP32[$14>>2] = 115;
 $15 = ((($11)) + 16|0);
 HEAP32[$15>>2] = 744211;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($15)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($15)) + 12|0);
 HEAP32[$18>>2] = 102;
 $19 = ((($15)) + 16|0);
 HEAP32[$19>>2] = 744222;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($19)) + 12|0);
 HEAP32[$22>>2] = 118;
 $23 = ((($19)) + 16|0);
 HEAP32[$23>>2] = 744230;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 1;
 $25 = ((($23)) + 8|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($23)) + 12|0);
 HEAP32[$26>>2] = 103;
 $27 = ((($23)) + 16|0);
 HEAP32[$27>>2] = 744238;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = 1;
 $29 = ((($27)) + 8|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($27)) + 12|0);
 HEAP32[$30>>2] = 99;
 $31 = ((($27)) + 16|0);
 HEAP32[$31>>2] = 744245;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = 1;
 $33 = ((($31)) + 8|0);
 HEAP32[$33>>2] = $val;
 $34 = ((($31)) + 12|0);
 HEAP32[$34>>2] = 67;
 $35 = ((($31)) + 16|0);
 HEAP32[$35>>2] = 744258;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 1;
 $37 = ((($35)) + 8|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($35)) + 12|0);
 HEAP32[$38>>2] = 109;
 $39 = ((($35)) + 16|0);
 HEAP32[$39>>2] = 744264;
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = 1;
 $41 = ((($39)) + 8|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($39)) + 12|0);
 HEAP32[$42>>2] = 78;
 $43 = ((($39)) + 16|0);
 HEAP32[$43>>2] = 744273;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($43)) + 8|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($43)) + 12|0);
 HEAP32[$46>>2] = 112;
 $47 = ((($43)) + 16|0);
 HEAP32[$47>>2] = 744279;
 $48 = ((($47)) + 4|0);
 HEAP32[$48>>2] = 0;
 $49 = ((($47)) + 8|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($47)) + 12|0);
 HEAP32[$50>>2] = 106;
 $51 = ((($47)) + 16|0);
 HEAP32[$51>>2] = 744289;
 $52 = ((($51)) + 4|0);
 HEAP32[$52>>2] = 0;
 $53 = ((($51)) + 8|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($51)) + 12|0);
 HEAP32[$54>>2] = 74;
 $55 = ((($51)) + 16|0);
 HEAP32[$55>>2] = 744300;
 $56 = ((($55)) + 4|0);
 HEAP32[$56>>2] = 1;
 $57 = ((($55)) + 8|0);
 HEAP32[$57>>2] = 0;
 $58 = ((($55)) + 12|0);
 HEAP32[$58>>2] = 65;
 $59 = ((($55)) + 16|0);
 HEAP32[$59>>2] = 744311;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 1;
 $61 = ((($59)) + 8|0);
 HEAP32[$61>>2] = 0;
 $62 = ((($59)) + 12|0);
 HEAP32[$62>>2] = 83;
 $63 = ((($59)) + 16|0);
 HEAP32[$63>>2] = 744321;
 $64 = ((($63)) + 4|0);
 HEAP32[$64>>2] = 1;
 $65 = ((($63)) + 8|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($63)) + 12|0);
 HEAP32[$66>>2] = 98;
 $67 = ((($63)) + 16|0);
 HEAP32[$67>>2] = 744325;
 $68 = ((($67)) + 4|0);
 HEAP32[$68>>2] = 1;
 $69 = ((($67)) + 8|0);
 HEAP32[$69>>2] = 0;
 $70 = ((($67)) + 12|0);
 HEAP32[$70>>2] = 66;
 $71 = ((($67)) + 16|0);
 HEAP32[$71>>2] = 744333;
 $72 = ((($71)) + 4|0);
 HEAP32[$72>>2] = 0;
 $73 = ((($71)) + 8|0);
 HEAP32[$73>>2] = 0;
 $74 = ((($71)) + 12|0);
 HEAP32[$74>>2] = 52;
 $75 = ((($71)) + 16|0);
 HEAP32[$75>>2] = 744342;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = 1;
 $77 = ((($75)) + 8|0);
 HEAP32[$77>>2] = 0;
 $78 = ((($75)) + 12|0);
 HEAP32[$78>>2] = 89;
 $79 = ((($75)) + 16|0);
 HEAP32[$79>>2] = 744350;
 $80 = ((($79)) + 4|0);
 HEAP32[$80>>2] = 1;
 $81 = ((($79)) + 8|0);
 HEAP32[$81>>2] = 0;
 $82 = ((($79)) + 12|0);
 HEAP32[$82>>2] = 90;
 $83 = ((($79)) + 16|0);
 HEAP32[$83>>2] = 744358;
 $84 = ((($83)) + 4|0);
 HEAP32[$84>>2] = 1;
 $85 = ((($83)) + 8|0);
 HEAP32[$85>>2] = 0;
 $86 = ((($83)) + 12|0);
 HEAP32[$86>>2] = 80;
 $87 = ((($83)) + 16|0);
 HEAP32[$87>>2] = 744366;
 $88 = ((($87)) + 4|0);
 HEAP32[$88>>2] = 1;
 $89 = ((($87)) + 8|0);
 HEAP32[$89>>2] = 0;
 $90 = ((($87)) + 12|0);
 HEAP32[$90>>2] = 82;
 $91 = ((($87)) + 16|0);
 HEAP32[$91>>2] = 744376;
 $92 = ((($91)) + 4|0);
 HEAP32[$92>>2] = 1;
 $93 = ((($91)) + 8|0);
 HEAP32[$93>>2] = 0;
 $94 = ((($91)) + 12|0);
 HEAP32[$94>>2] = 77;
 $95 = ((($91)) + 16|0);
 HEAP32[$95>>2] = 744386;
 $96 = ((($95)) + 4|0);
 HEAP32[$96>>2] = 1;
 $97 = ((($95)) + 8|0);
 HEAP32[$97>>2] = 0;
 $98 = ((($95)) + 12|0);
 HEAP32[$98>>2] = 85;
 $99 = ((($95)) + 16|0);
 HEAP32[$99>>2] = 744390;
 $100 = ((($99)) + 4|0);
 HEAP32[$100>>2] = 1;
 $101 = ((($99)) + 8|0);
 HEAP32[$101>>2] = $val;
 $102 = ((($99)) + 12|0);
 HEAP32[$102>>2] = 66;
 $103 = ((($99)) + 16|0);
 HEAP32[$103>>2] = 744394;
 $104 = ((($103)) + 4|0);
 HEAP32[$104>>2] = 1;
 $105 = ((($103)) + 8|0);
 HEAP32[$105>>2] = $val;
 $106 = ((($103)) + 12|0);
 HEAP32[$106>>2] = 73;
 $107 = ((($103)) + 16|0);
 HEAP32[$107>>2] = 744398;
 $108 = ((($107)) + 4|0);
 HEAP32[$108>>2] = 0;
 $109 = ((($107)) + 8|0);
 HEAP32[$109>>2] = $val;
 $110 = ((($107)) + 12|0);
 HEAP32[$110>>2] = 110;
 $111 = ((($107)) + 16|0);
 HEAP32[$111>>2] = 744407;
 $112 = ((($111)) + 4|0);
 HEAP32[$112>>2] = 1;
 $113 = ((($111)) + 8|0);
 HEAP32[$113>>2] = 0;
 $114 = ((($111)) + 12|0);
 HEAP32[$114>>2] = 88;
 $115 = ((($111)) + 16|0);
 HEAP32[$115>>2] = 744411;
 $116 = ((($115)) + 4|0);
 HEAP32[$116>>2] = 0;
 $117 = ((($115)) + 8|0);
 HEAP32[$117>>2] = 0;
 $118 = ((($115)) + 12|0);
 HEAP32[$118>>2] = 68;
 $119 = ((($115)) + 16|0);
 HEAP32[$119>>2] = 744418;
 $120 = ((($119)) + 4|0);
 HEAP32[$120>>2] = 0;
 $121 = ((($119)) + 8|0);
 HEAP32[$121>>2] = $val;
 $122 = ((($119)) + 12|0);
 HEAP32[$122>>2] = 102;
 $123 = ((($119)) + 16|0);
 HEAP32[$123>>2] = 0;
 $124 = ((($123)) + 4|0);
 HEAP32[$124>>2] = 0;
 $125 = ((($123)) + 8|0);
 HEAP32[$125>>2] = 0;
 $126 = ((($123)) + 12|0);
 HEAP32[$126>>2] = 0;
 $optstring = 744427;
 L5: while(1) {
  HEAP32[$val>>2] = 0;
  $127 = $0;
  $128 = $1;
  $129 = $optstring;
  $130 = (___getopt_long_rarch($127,$128,$129,$opts,0)|0);
  $c = $130;
  $131 = $c;
  $132 = ($131|0)==(-1);
  if ($132) {
   label = 50;
   break;
  }
  $133 = $c;
  do {
   switch ($133|0) {
   case 68:  {
    continue L5;
    break;
   }
   case 104:  {
    label = 6;
    break L5;
    break;
   }
   case 52:  {
    HEAP32[(60980)>>2] = 257;
    HEAP8[(123147)>>0] = 1;
    continue L5;
    break;
   }
   case 106:  {
    HEAP32[(60980)>>2] = 516;
    HEAP8[(123147)>>0] = 1;
    continue L5;
    break;
   }
   case 74:  {
    HEAP32[(60980)>>2] = 772;
    HEAP8[(123147)>>0] = 1;
    continue L5;
    break;
   }
   case 65:  {
    $134 = HEAP32[269508>>2]|0;
    $135 = (_strtol($134,0,0)|0);
    $port = $135;
    $136 = $port;
    $137 = ($136|0)<(1);
    $138 = $port;
    $139 = ($138|0)>(8);
    $or$cond = $137 | $139;
    if ($or$cond) {
     $140 = HEAP32[(259664)>>2]|0;
     $141 = ($140|0)!=(0|0);
     $142 = HEAP32[(259664)>>2]|0;
     $143 = HEAP32[544648>>2]|0;
     $144 = $141 ? $142 : $143;
     (_fprintf($144,744468,$vararg_buffer)|0);
     $145 = HEAP32[(259664)>>2]|0;
     $146 = ($145|0)!=(0|0);
     $147 = HEAP32[(259664)>>2]|0;
     $148 = HEAP32[544648>>2]|0;
     $149 = $146 ? $147 : $148;
     (_fflush($149)|0);
     _print_help();
     _rarch_fail(1,744526);
    }
    $150 = $port;
    $151 = (($150) - 1)|0;
    $152 = ((60976) + ($151<<2)|0);
    HEAP32[$152>>2] = 5;
    $153 = $port;
    $154 = (($153) - 1)|0;
    $155 = ((123146) + ($154)|0);
    HEAP8[$155>>0] = 1;
    continue L5;
    break;
   }
   case 115:  {
    $156 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((143634),$156,4096)|0);
    HEAP8[(123144)>>0] = 1;
    continue L5;
    break;
   }
   case 102:  {
    HEAP8[(102651)>>0] = 1;
    continue L5;
    break;
   }
   case 103:  {
    $157 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((106760),$157,4096)|0);
    HEAP32[(106752)>>2] = 1;
    continue L5;
    break;
   }
   case 98:  {
    $158 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((110856),$158,4096)|0);
    HEAP32[(106752)>>2] = 2;
    continue L5;
    break;
   }
   case 66:  {
    $159 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((110856),$159,4096)|0);
    HEAP32[(106752)>>2] = 3;
    continue L5;
    break;
   }
   case 89:  {
    $160 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((114952),$160,4096)|0);
    HEAP32[(106752)>>2] = 4;
    continue L5;
    break;
   }
   case 90:  {
    $161 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((119048),$161,4096)|0);
    HEAP32[(106752)>>2] = 4;
    continue L5;
    break;
   }
   case 83:  {
    $162 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((164114),$162,4096)|0);
    HEAP8[(123145)>>0] = 1;
    continue L5;
    break;
   }
   case 118:  {
    HEAP8[102648>>0] = 1;
    continue L5;
    break;
   }
   case 109:  {
    $163 = HEAP32[269508>>2]|0;
    $164 = (_strtol($163,0,0)|0);
    $port = $164;
    $165 = $port;
    $166 = ($165|0)<(1);
    $167 = $port;
    $168 = ($167|0)>(8);
    $or$cond3 = $166 | $168;
    if ($or$cond3) {
     $169 = HEAP32[(259664)>>2]|0;
     $170 = ($169|0)!=(0|0);
     $171 = HEAP32[(259664)>>2]|0;
     $172 = HEAP32[544648>>2]|0;
     $173 = $170 ? $171 : $172;
     (_fprintf($173,744540,$vararg_buffer6)|0);
     $174 = HEAP32[(259664)>>2]|0;
     $175 = ($174|0)!=(0|0);
     $176 = HEAP32[(259664)>>2]|0;
     $177 = HEAP32[544648>>2]|0;
     $178 = $175 ? $176 : $177;
     (_fflush($178)|0);
     _print_help();
     _rarch_fail(1,744526);
    }
    $179 = $port;
    $180 = (($179) - 1)|0;
    $181 = ((60976) + ($180<<2)|0);
    HEAP32[$181>>2] = 2;
    $182 = $port;
    $183 = (($182) - 1)|0;
    $184 = ((123146) + ($183)|0);
    HEAP8[$184>>0] = 1;
    continue L5;
    break;
   }
   case 78:  {
    $185 = HEAP32[269508>>2]|0;
    $186 = (_strtol($185,0,0)|0);
    $port = $186;
    $187 = $port;
    $188 = ($187|0)<(1);
    $189 = $port;
    $190 = ($189|0)>(8);
    $or$cond5 = $188 | $190;
    if ($or$cond5) {
     $191 = HEAP32[(259664)>>2]|0;
     $192 = ($191|0)!=(0|0);
     $193 = HEAP32[(259664)>>2]|0;
     $194 = HEAP32[544648>>2]|0;
     $195 = $192 ? $193 : $194;
     (_fprintf($195,744593,$vararg_buffer8)|0);
     $196 = HEAP32[(259664)>>2]|0;
     $197 = ($196|0)!=(0|0);
     $198 = HEAP32[(259664)>>2]|0;
     $199 = HEAP32[544648>>2]|0;
     $200 = $197 ? $198 : $199;
     (_fflush($200)|0);
     _print_help();
     _rarch_fail(1,744526);
    }
    $201 = $port;
    $202 = (($201) - 1)|0;
    $203 = ((60976) + ($202<<2)|0);
    HEAP32[$203>>2] = 0;
    $204 = $port;
    $205 = (($204) - 1)|0;
    $206 = ((123146) + ($205)|0);
    HEAP8[$206>>0] = 1;
    continue L5;
    break;
   }
   case 112:  {
    HEAP32[(60980)>>2] = 260;
    HEAP8[(123147)>>0] = 1;
    continue L5;
    break;
   }
   case 99:  {
    $207 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((123154),$207,4096)|0);
    continue L5;
    break;
   }
   case 82: case 80:  {
    $208 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((255273),$208,4096)|0);
    $209 = $c;
    $210 = ($209|0)==(80);
    $211 = $210&1;
    HEAP8[(259370)>>0] = $211;
    $212 = $c;
    $213 = ($212|0)==(82);
    $214 = $213&1;
    HEAP8[(259369)>>0] = $214;
    continue L5;
    break;
   }
   case 77:  {
    $215 = HEAP32[269508>>2]|0;
    $216 = (_strcmp($215,744652)|0);
    $217 = ($216|0)==(0);
    if ($217) {
     HEAP8[(259372)>>0] = 1;
     HEAP8[(259373)>>0] = 1;
     continue L5;
    }
    $218 = HEAP32[269508>>2]|0;
    $219 = (_strcmp($218,744666)|0);
    $220 = ($219|0)==(0);
    if ($220) {
     HEAP8[(259372)>>0] = 1;
     continue L5;
    }
    $221 = HEAP32[269508>>2]|0;
    $222 = (_strcmp($221,744678)|0);
    $223 = ($222|0)==(0);
    if ($223) {
     HEAP8[(259373)>>0] = 1;
     continue L5;
    }
    $224 = HEAP32[269508>>2]|0;
    $225 = (_strcmp($224,744690)|0);
    $226 = ($225|0)!=(0);
    if (!($226)) {
     continue L5;
    }
    $227 = HEAP32[(259664)>>2]|0;
    $228 = ($227|0)!=(0|0);
    $229 = HEAP32[(259664)>>2]|0;
    $230 = HEAP32[544648>>2]|0;
    $231 = $228 ? $229 : $230;
    (_fprintf($231,744700,$vararg_buffer10)|0);
    $232 = HEAP32[(259664)>>2]|0;
    $233 = ($232|0)!=(0|0);
    $234 = HEAP32[(259664)>>2]|0;
    $235 = HEAP32[544648>>2]|0;
    $236 = $233 ? $234 : $235;
    (_fflush($236)|0);
    _print_help();
    _rarch_fail(1,744526);
    continue L5;
    break;
   }
   case 85:  {
    $237 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((184598),$237,4096)|0);
    HEAP8[(184595)>>0] = 1;
    continue L5;
    break;
   }
   case 88:  {
    $238 = HEAP32[269508>>2]|0;
    (_strlcpy_rarch__((168210),$238,4096)|0);
    continue L5;
    break;
   }
   case 0:  {
    $239 = HEAP32[$val>>2]|0;
    switch ($239|0) {
    case 102:  {
     label = 47;
     break L5;
     break;
    }
    case 77:  {
     HEAP8[(260857)>>0] = 1;
     continue L5;
     break;
    }
    case 67:  {
     $240 = HEAP32[269508>>2]|0;
     (_strlcpy_rarch__((127250),$240,4096)|0);
     continue L5;
     break;
    }
    case 66:  {
     $241 = HEAP32[269508>>2]|0;
     (_strlcpy_rarch__((188694),$241,4096)|0);
     HEAP8[(184596)>>0] = 1;
     continue L5;
     break;
    }
    case 73:  {
     $242 = HEAP32[269508>>2]|0;
     (_strlcpy_rarch__((192790),$242,4096)|0);
     HEAP8[(184597)>>0] = 1;
     continue L5;
     break;
    }
    case 110:  {
     HEAP8[(184594)>>0] = 1;
     continue L5;
     break;
    }
    default: {
     continue L5;
    }
    }
    break;
   }
   case 63:  {
    _print_help();
    _rarch_fail(1,744526);
    break;
   }
   default: {
   }
   }
  } while(0);
  $243 = HEAP32[(259664)>>2]|0;
  $244 = ($243|0)!=(0|0);
  $245 = HEAP32[(259664)>>2]|0;
  $246 = HEAP32[544648>>2]|0;
  $247 = $244 ? $245 : $246;
  (_fprintf($247,744755,$vararg_buffer12)|0);
  $248 = HEAP32[(259664)>>2]|0;
  $249 = ($248|0)!=(0|0);
  $250 = HEAP32[(259664)>>2]|0;
  $251 = HEAP32[544648>>2]|0;
  $252 = $249 ? $250 : $251;
  (_fflush($252)|0);
  _rarch_fail(1,744526);
 }
 if ((label|0) == 6) {
  _print_help();
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 47) {
  _print_features();
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 50) {
  $253 = HEAP8[(260857)>>0]|0;
  $254 = $253&1;
  $255 = HEAP32[544644>>2]|0;
  $256 = $0;
  $257 = ($255|0)<($256|0);
  do {
   if ($254) {
    if ($257) {
     $258 = HEAP32[(259664)>>2]|0;
     $259 = ($258|0)!=(0|0);
     $260 = HEAP32[(259664)>>2]|0;
     $261 = HEAP32[544648>>2]|0;
     $262 = $259 ? $260 : $261;
     (_fprintf($262,744802,$vararg_buffer14)|0);
     $263 = HEAP32[(259664)>>2]|0;
     $264 = ($263|0)!=(0|0);
     $265 = HEAP32[(259664)>>2]|0;
     $266 = HEAP32[544648>>2]|0;
     $267 = $264 ? $265 : $266;
     (_fflush($267)|0);
     _rarch_fail(1,744526);
    }
   } else {
    if ($257) {
     $268 = HEAP32[544644>>2]|0;
     $269 = $1;
     $270 = (($269) + ($268<<2)|0);
     $271 = HEAP32[$270>>2]|0;
     _set_paths($271);
     break;
    } else {
     HEAP8[(260856)>>0] = 1;
     break;
    }
   }
  } while(0);
  $272 = HEAP8[(123144)>>0]|0;
  $273 = $272&1;
  if ($273) {
   $274 = (_path_is_directory((143634))|0);
   if ($274) {
    (_strlcpy_rarch__((172306),(143634),4096)|0);
   }
  }
  $275 = HEAP8[(123145)>>0]|0;
  $276 = $275&1;
  if (!($276)) {
   STACKTOP = sp;return;
  }
  $277 = (_path_is_directory((164114))|0);
  if (!($277)) {
   STACKTOP = sp;return;
  }
  (_strlcpy_rarch__((176402),(164114),4096)|0);
  STACKTOP = sp;return;
 }
}
function _print_compiler($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $file;
 $1 = $0;
 (_fprintf($1,744107,$vararg_buffer)|0);
 $2 = $0;
 HEAP32[$vararg_buffer1>>2] = 744143;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = 32;
 (_fprintf($2,744119,$vararg_buffer1)|0);
 $3 = $0;
 HEAP32[$vararg_buffer4>>2] = 744184;
 (_fprintf($3,744173,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _validate_cpu_features() {
 var $cpu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cpu = sp;
 _rarch_get_cpu_features($cpu);
 STACKTOP = sp;return;
}
function _verify_api_version() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[102648>>0]|0;
 $1 = $0&1;
 if ($1) {
  $2 = HEAP32[(259664)>>2]|0;
  $3 = ($2|0)!=(0|0);
  $4 = HEAP32[(259664)>>2]|0;
  $5 = HEAP32[544648>>2]|0;
  $6 = $3 ? $4 : $5;
  $7 = HEAP32[265064>>2]|0;
  $8 = (FUNCTION_TABLE_i[$7 & 511]()|0);
  HEAP32[$vararg_buffer>>2] = $8;
  (_fprintf($6,743912,$vararg_buffer)|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  (_fflush($13)|0);
 }
 $14 = HEAP8[102648>>0]|0;
 $15 = $14&1;
 if ($15) {
  $16 = HEAP32[(259664)>>2]|0;
  $17 = ($16|0)!=(0|0);
  $18 = HEAP32[(259664)>>2]|0;
  $19 = HEAP32[544648>>2]|0;
  $20 = $17 ? $18 : $19;
  HEAP32[$vararg_buffer1>>2] = 1;
  (_fprintf($20,743952,$vararg_buffer1)|0);
  $21 = HEAP32[(259664)>>2]|0;
  $22 = ($21|0)!=(0|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = HEAP32[544648>>2]|0;
  $25 = $22 ? $23 : $24;
  (_fflush($25)|0);
 }
 $26 = HEAP32[265064>>2]|0;
 $27 = (FUNCTION_TABLE_i[$26 & 511]()|0);
 $28 = ($27|0)!=(1);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[(259664)>>2]|0;
 $30 = ($29|0)!=(0|0);
 $31 = HEAP32[(259664)>>2]|0;
 $32 = HEAP32[544648>>2]|0;
 $33 = $30 ? $31 : $32;
 (_fprintf($33,743989,$vararg_buffer4)|0);
 $34 = HEAP32[(259664)>>2]|0;
 $35 = ($34|0)!=(0|0);
 $36 = HEAP32[(259664)>>2]|0;
 $37 = HEAP32[544648>>2]|0;
 $38 = $35 ? $36 : $37;
 (_fflush($38)|0);
 STACKTOP = sp;return;
}
function _set_savestate_auto_index() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dir_elem = 0, $dir_list = 0, $elem_base = 0, $end = 0;
 var $i = 0, $index = 0, $max_index = 0, $state_base = 0, $state_dir = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $state_dir = sp + 8224|0;
 $state_base = sp + 4128|0;
 $elem_base = sp + 32|0;
 $0 = HEAP8[(98537)>>0]|0;
 $1 = $0&1;
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _fill_pathname_basedir($state_dir,(164114),4096);
 _fill_pathname_base($state_base,(164114),4096);
 $max_index = 0;
 $2 = (_dir_list_new($state_dir,0,0)|0);
 $dir_list = $2;
 $3 = $dir_list;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $dir_list;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = $dir_list;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10<<3)|0);
  $14 = HEAP32[$13>>2]|0;
  $dir_elem = $14;
  $15 = $dir_elem;
  _fill_pathname_base($elem_base,$15,4096);
  $16 = (_strstr($elem_base,$state_base)|0);
  $17 = ($16|0)!=($elem_base|0);
  if (!($17)) {
   $18 = $dir_elem;
   $19 = $dir_elem;
   $20 = (_strlen($19)|0);
   $21 = (($18) + ($20)|0);
   $end = $21;
   while(1) {
    $22 = $end;
    $23 = $dir_elem;
    $24 = ($22>>>0)>($23>>>0);
    if ($24) {
     $25 = $end;
     $26 = ((($25)) + -1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27 << 24 >> 24;
     $29 = (_isdigit($28)|0);
     $30 = ($29|0)!=(0);
     $55 = $30;
    } else {
     $55 = 0;
    }
    $31 = $end;
    if (!($55)) {
     break;
    }
    $32 = ((($31)) + -1|0);
    $end = $32;
   }
   $33 = (_strtoul($31,0,0)|0);
   $index = $33;
   $34 = $index;
   $35 = $max_index;
   $36 = ($34>>>0)>($35>>>0);
   if ($36) {
    $37 = $index;
    $max_index = $37;
   }
  }
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 $40 = $dir_list;
 _dir_list_free($40);
 $41 = $max_index;
 HEAP32[(196888)>>2] = $41;
 $42 = HEAP8[102648>>0]|0;
 $43 = $42&1;
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $44 = HEAP32[(259664)>>2]|0;
 $45 = ($44|0)!=(0|0);
 $46 = HEAP32[(259664)>>2]|0;
 $47 = HEAP32[544648>>2]|0;
 $48 = $45 ? $46 : $47;
 $49 = HEAP32[(196888)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $49;
 (_fprintf($48,743873,$vararg_buffer)|0);
 $50 = HEAP32[(259664)>>2]|0;
 $51 = ($50|0)!=(0|0);
 $52 = HEAP32[(259664)>>2]|0;
 $53 = HEAP32[544648>>2]|0;
 $54 = $51 ? $52 : $53;
 (_fflush($54)|0);
 STACKTOP = sp;return;
}
function _load_save_files() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(106752)>>2]|0;
 switch ($0|0) {
 case 0:  {
  _load_ram_file((143634),0);
  _load_ram_file((147730),1);
  return;
  break;
 }
 case 1:  {
  _load_ram_file((143634),1280);
  _load_ram_file((147730),1537);
  return;
  break;
 }
 case 3: case 2:  {
  _load_ram_file((143634),256);
  _load_ram_file((151826),512);
  return;
  break;
 }
 case 4:  {
  _load_ram_file((155922),768);
  _load_ram_file((160018),1024);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _load_auto_state() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $ret = 0, $savestate_name_auto = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $savestate_name_auto = sp + 4128|0;
 $msg = sp + 24|0;
 $0 = HEAP8[(98539)>>0]|0;
 $1 = $0&1;
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _fill_pathname_noext($savestate_name_auto,(164114),743341,4096);
 $2 = (_path_file_exists($savestate_name_auto)|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[102648>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = HEAP32[(259664)>>2]|0;
  $6 = ($5|0)!=(0|0);
  $7 = HEAP32[(259664)>>2]|0;
  $8 = HEAP32[544648>>2]|0;
  $9 = $6 ? $7 : $8;
  HEAP32[$vararg_buffer>>2] = $savestate_name_auto;
  (_fprintf($9,743796,$vararg_buffer)|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = HEAP32[544648>>2]|0;
  $14 = $11 ? $12 : $13;
  (_fflush($14)|0);
 }
 $15 = (_load_state($savestate_name_auto)|0);
 $16 = $15&1;
 $ret = $16;
 $17 = $ret;
 $18 = $17&1;
 $19 = $18 ? 743347 : 743357;
 HEAP32[$vararg_buffer1>>2] = $savestate_name_auto;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $19;
 (_snprintf($msg,4096,743836,$vararg_buffer1)|0);
 $20 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($20,$msg,1,180);
 $21 = HEAP8[102648>>0]|0;
 $22 = $21&1;
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[(259664)>>2]|0;
 $24 = ($23|0)!=(0|0);
 $25 = HEAP32[(259664)>>2]|0;
 $26 = HEAP32[544648>>2]|0;
 $27 = $24 ? $25 : $26;
 HEAP32[$vararg_buffer5>>2] = $msg;
 (_fprintf($27,772081,$vararg_buffer5)|0);
 $28 = HEAP32[(259664)>>2]|0;
 $29 = ($28|0)!=(0|0);
 $30 = HEAP32[(259664)>>2]|0;
 $31 = HEAP32[544648>>2]|0;
 $32 = $29 ? $30 : $31;
 (_fflush($32)|0);
 STACKTOP = sp;return;
}
function _init_movie() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $msg = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg = sp + 40|0;
 $0 = HEAP8[(259370)>>0]|0;
 $1 = $0&1;
 if ($1) {
  $2 = (_bsv_movie_init((255273),0)|0);
  HEAP32[(251172)>>2] = $2;
  $3 = HEAP32[(251172)>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   $5 = HEAP32[(259664)>>2]|0;
   $6 = ($5|0)!=(0|0);
   $7 = HEAP32[(259664)>>2]|0;
   $8 = HEAP32[544648>>2]|0;
   $9 = $6 ? $7 : $8;
   HEAP32[$vararg_buffer>>2] = (255273);
   (_fprintf($9,743666,$vararg_buffer)|0);
   $10 = HEAP32[(259664)>>2]|0;
   $11 = ($10|0)!=(0|0);
   $12 = HEAP32[(259664)>>2]|0;
   $13 = HEAP32[544648>>2]|0;
   $14 = $11 ? $12 : $13;
   (_fflush($14)|0);
   _rarch_fail(1,743721);
  }
  HEAP8[(255272)>>0] = 1;
  $15 = HEAP32[(251148)>>2]|0;
  _msg_queue_push($15,743734,2,180);
  $16 = HEAP8[102648>>0]|0;
  $17 = $16&1;
  if ($17) {
   $18 = HEAP32[(259664)>>2]|0;
   $19 = ($18|0)!=(0|0);
   $20 = HEAP32[(259664)>>2]|0;
   $21 = HEAP32[544648>>2]|0;
   $22 = $19 ? $20 : $21;
   (_fprintf($22,743759,$vararg_buffer1)|0);
   $23 = HEAP32[(259664)>>2]|0;
   $24 = ($23|0)!=(0|0);
   $25 = HEAP32[(259664)>>2]|0;
   $26 = HEAP32[544648>>2]|0;
   $27 = $24 ? $25 : $26;
   (_fflush($27)|0);
  }
  HEAP32[(98516)>>2] = 1;
  STACKTOP = sp;return;
 }
 $28 = HEAP8[(259369)>>0]|0;
 $29 = $28&1;
 if (!($29)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer3>>2] = (255273);
 (_snprintf($msg,4096,739485,$vararg_buffer3)|0);
 $30 = (_bsv_movie_init((255273),1)|0);
 HEAP32[(251172)>>2] = $30;
 $31 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($31);
 $32 = HEAP32[(251148)>>2]|0;
 $33 = HEAP32[(251172)>>2]|0;
 $34 = ($33|0)!=(0|0);
 $35 = $34 ? $msg : 739516;
 _msg_queue_push($32,$35,1,180);
 $36 = HEAP32[(251172)>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $50 = HEAP32[(259664)>>2]|0;
  $51 = ($50|0)!=(0|0);
  $52 = HEAP32[(259664)>>2]|0;
  $53 = HEAP32[544648>>2]|0;
  $54 = $51 ? $52 : $53;
  (_fprintf($54,739589,$vararg_buffer9)|0);
  $55 = HEAP32[(259664)>>2]|0;
  $56 = ($55|0)!=(0|0);
  $57 = HEAP32[(259664)>>2]|0;
  $58 = HEAP32[544648>>2]|0;
  $59 = $56 ? $57 : $58;
  (_fflush($59)|0);
  STACKTOP = sp;return;
 }
 $38 = HEAP8[102648>>0]|0;
 $39 = $38&1;
 if ($39) {
  $40 = HEAP32[(259664)>>2]|0;
  $41 = ($40|0)!=(0|0);
  $42 = HEAP32[(259664)>>2]|0;
  $43 = HEAP32[544648>>2]|0;
  $44 = $41 ? $42 : $43;
  HEAP32[$vararg_buffer6>>2] = (255273);
  (_fprintf($44,739546,$vararg_buffer6)|0);
  $45 = HEAP32[(259664)>>2]|0;
  $46 = ($45|0)!=(0|0);
  $47 = HEAP32[(259664)>>2]|0;
  $48 = HEAP32[544648>>2]|0;
  $49 = $46 ? $47 : $48;
  (_fflush($49)|0);
 }
 HEAP32[(98516)>>2] = 1;
 STACKTOP = sp;return;
}
function _init_libretro_cbs() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _init_libretro_cbs_plain();
 return;
}
function _init_system_av_info() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[265068>>2]|0;
 FUNCTION_TABLE_vi[$0 & 1023]((196928));
 $1 = (_rarch_get_time_usec()|0);
 $2 = tempRet0;
 $3 = (196904);
 $4 = $3;
 HEAP32[$4>>2] = $1;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $2;
 $7 = +HEAPF64[(196952)>>3];
 $8 = +HEAPF32[(98524)>>2];
 $9 = $8;
 $10 = $7 * $9;
 $11 = 1.0E+6 / $10;
 $12 = $11;
 $13 = (+_roundf($12));
 $14 = (~~$13)>>>0;
 $15 = +Math_abs($13) >= 1.0 ? $13 > 0.0 ? (~~+Math_min(+Math_floor($13 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($13 - +(~~$13 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $16 = (196896);
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function _init_cheats() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(82124)>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 if (!($1)) {
  return;
 }
 $2 = (_cheat_manager_new((82124))|0);
 HEAP32[(259576)>>2] = $2;
 return;
}
function _check_enter_rgui() {
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rmenu_toggle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 1|0;
 $1 = (_input_key_pressed_func(55)|0);
 if ($1) {
  $8 = 1;
 } else {
  $2 = HEAP8[(260857)>>0]|0;
  $3 = $2&1;
  if ($3) {
   $4 = HEAP8[739211>>0]|0;
   $5 = $4&1;
   $6 = $5 ^ 1;
   $8 = $6;
  } else {
   $8 = 0;
  }
 }
 $7 = $8&1;
 $rmenu_toggle = $7;
 $9 = $rmenu_toggle;
 $10 = $9&1;
 if ($10) {
  $11 = HEAP8[739211>>0]|0;
  $12 = $11&1;
  if (!($12)) {
   $13 = (259656);
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + 4)|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   $19 = $15 | 4;
   $20 = (259656);
   $21 = $20;
   HEAP32[$21>>2] = $19;
   $22 = (($20) + 4)|0;
   $23 = $22;
   HEAP32[$23>>2] = $18;
   HEAP8[739211>>0] = 1;
   $24 = (201696);
   $25 = $24;
   HEAP32[$25>>2] = 0;
   $26 = (($24) + 4)|0;
   $27 = $26;
   HEAP32[$27>>2] = 0;
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $31 = $$pre_trunc&1;
   STACKTOP = sp;return ($31|0);
  }
 }
 $28 = $rmenu_toggle;
 $29 = $28&1;
 $30 = $29&1;
 HEAP8[739211>>0] = $30;
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $31 = $$pre_trunc&1;
 STACKTOP = sp;return ($31|0);
}
function _do_state_checks() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _check_block_hotkey();
 _check_screenshot();
 _check_mute();
 _check_volume();
 _check_turbo();
 _check_grab_mouse_toggle();
 _rarch_check_overlay();
 _check_pause();
 _check_oneshot();
 $0 = (_check_fullscreen()|0);
 if ($0) {
  $1 = HEAP8[(259375)>>0]|0;
  $2 = $1&1;
  if ($2) {
   _rarch_render_cached_frame();
  }
 }
 $3 = HEAP8[(259375)>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = HEAP8[(259376)>>0]|0;
  $6 = $5&1;
  if (!($6)) {
   return;
  }
 }
 _check_fast_forward_button();
 _check_stateslots();
 $7 = HEAP32[(251172)>>2]|0;
 $8 = ($7|0)!=(0|0);
 _check_savestates($8);
 _check_rewind();
 _check_slowmotion();
 _check_movie();
 _check_shader_dir();
 _check_cheats();
 _check_disk();
 _check_reset();
 return;
}
function _update_frame_time() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $delta = 0, $is_locked_fps = 0, $time = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $time = sp + 8|0;
 $delta = sp;
 $0 = HEAP32[(201680)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (_rarch_get_time_usec()|0);
 $3 = tempRet0;
 $4 = $time;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = $delta;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = HEAP8[(259375)>>0]|0;
 $13 = $12&1;
 $14 = HEAP8[(40)>>0]|0;
 $15 = $14&1;
 $16 = $13 ? 1 : $15;
 $17 = $16&1;
 $is_locked_fps = $17;
 $18 = (201696);
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)!=(0);
 $25 = ($23|0)!=(0);
 $26 = $24 | $25;
 if ($26) {
  $27 = $is_locked_fps;
  $28 = $27&1;
  if ($28) {
   label = 4;
  } else {
   $39 = $time;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (201696);
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (_i64Subtract(($41|0),($44|0),($47|0),($50|0))|0);
   $52 = tempRet0;
   $53 = $delta;
   $54 = $53;
   HEAP32[$54>>2] = $51;
   $55 = (($53) + 4)|0;
   $56 = $55;
   HEAP32[$56>>2] = $52;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $29 = (201688);
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $delta;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $34;
 }
 $57 = $is_locked_fps;
 $58 = $57&1;
 if (!($58)) {
  $59 = HEAP8[(259377)>>0]|0;
  $60 = $59&1;
  if ($60) {
   $61 = +HEAPF32[(98520)>>2];
   $62 = $delta;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($62) + 4)|0;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $68 = (+($64>>>0)) + (4294967296.0*(+($67|0)));
   $69 = $68 / $61;
   $70 = (~~$69)>>>0;
   $71 = +Math_abs($69) >= 1.0 ? $69 > 0.0 ? (~~+Math_min(+Math_floor($69 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($69 - +(~~$69 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $72 = $delta;
   $73 = $72;
   HEAP32[$73>>2] = $70;
   $74 = (($72) + 4)|0;
   $75 = $74;
   HEAP32[$75>>2] = $71;
  }
 }
 $76 = $is_locked_fps;
 $77 = $76&1;
 $78 = $time;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = $77 ? 0 : $80;
 $85 = $77 ? 0 : $83;
 $86 = (201696);
 $87 = $86;
 HEAP32[$87>>2] = $84;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = $85;
 $90 = HEAP32[(201680)>>2]|0;
 $91 = $delta;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($91) + 4)|0;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 FUNCTION_TABLE_vii[$90 & 1023]($93,$96);
 STACKTOP = sp;return;
}
function _limit_frame_time() {
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $current = 0, $target = 0, $to_sleep_ms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $current = sp + 16|0;
 $target = sp + 8|0;
 $to_sleep_ms = sp;
 $0 = +HEAPF32[(98524)>>2];
 $1 = $0 < 0.0;
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (_rarch_get_time_usec()|0);
 $3 = tempRet0;
 $4 = $current;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = (196904);
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (196896);
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (_i64Add(($10|0),($13|0),($16|0),($19|0))|0);
 $21 = tempRet0;
 $22 = $target;
 $23 = $22;
 HEAP32[$23>>2] = $20;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = $target;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $current;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (_i64Subtract(($28|0),($31|0),($34|0),($37|0))|0);
 $39 = tempRet0;
 $40 = (___divdi3(($38|0),($39|0),1000,0)|0);
 $41 = tempRet0;
 $42 = $to_sleep_ms;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $to_sleep_ms;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)>(0);
 $53 = ($48>>>0)>(0);
 $54 = ($51|0)==(0);
 $55 = $54 & $53;
 $56 = $52 | $55;
 if ($56) {
  $57 = $to_sleep_ms;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  _rarch_sleep($59);
  $63 = (196896);
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = (196904);
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (_i64Add(($71|0),($74|0),($65|0),($68|0))|0);
  $76 = tempRet0;
  $77 = (196904);
  $78 = $77;
  HEAP32[$78>>2] = $75;
  $79 = (($77) + 4)|0;
  $80 = $79;
  HEAP32[$80>>2] = $76;
  STACKTOP = sp;return;
 } else {
  $81 = (_rarch_get_time_usec()|0);
  $82 = tempRet0;
  $83 = (196904);
  $84 = $83;
  HEAP32[$84>>2] = $81;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  STACKTOP = sp;return;
 }
}
function _save_files() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(106752)>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP8[102648>>0]|0;
  $2 = $1&1;
  if ($2) {
   $3 = HEAP32[(259664)>>2]|0;
   $4 = ($3|0)!=(0|0);
   $5 = HEAP32[(259664)>>2]|0;
   $6 = HEAP32[544648>>2]|0;
   $7 = $4 ? $5 : $6;
   (_fprintf($7,743404,$vararg_buffer)|0);
   $8 = HEAP32[(259664)>>2]|0;
   $9 = ($8|0)!=(0|0);
   $10 = HEAP32[(259664)>>2]|0;
   $11 = HEAP32[544648>>2]|0;
   $12 = $9 ? $10 : $11;
   (_fflush($12)|0);
  }
  $13 = HEAP8[102648>>0]|0;
  $14 = $13&1;
  if ($14) {
   $15 = HEAP32[(259664)>>2]|0;
   $16 = ($15|0)!=(0|0);
   $17 = HEAP32[(259664)>>2]|0;
   $18 = HEAP32[544648>>2]|0;
   $19 = $16 ? $17 : $18;
   HEAP32[$vararg_buffer1>>2] = (143634);
   (_fprintf($19,743437,$vararg_buffer1)|0);
   $20 = HEAP32[(259664)>>2]|0;
   $21 = ($20|0)!=(0|0);
   $22 = HEAP32[(259664)>>2]|0;
   $23 = HEAP32[544648>>2]|0;
   $24 = $21 ? $22 : $23;
   (_fflush($24)|0);
  }
  $25 = HEAP8[102648>>0]|0;
  $26 = $25&1;
  if ($26) {
   $27 = HEAP32[(259664)>>2]|0;
   $28 = ($27|0)!=(0|0);
   $29 = HEAP32[(259664)>>2]|0;
   $30 = HEAP32[544648>>2]|0;
   $31 = $28 ? $29 : $30;
   HEAP32[$vararg_buffer3>>2] = (147730);
   (_fprintf($31,743457,$vararg_buffer3)|0);
   $32 = HEAP32[(259664)>>2]|0;
   $33 = ($32|0)!=(0|0);
   $34 = HEAP32[(259664)>>2]|0;
   $35 = HEAP32[544648>>2]|0;
   $36 = $33 ? $34 : $35;
   (_fflush($36)|0);
  }
  _save_ram_file((143634),0);
  _save_ram_file((147730),1);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $37 = HEAP8[102648>>0]|0;
  $38 = $37&1;
  if ($38) {
   $39 = HEAP32[(259664)>>2]|0;
   $40 = ($39|0)!=(0|0);
   $41 = HEAP32[(259664)>>2]|0;
   $42 = HEAP32[544648>>2]|0;
   $43 = $40 ? $41 : $42;
   (_fprintf($43,743477,$vararg_buffer6)|0);
   $44 = HEAP32[(259664)>>2]|0;
   $45 = ($44|0)!=(0|0);
   $46 = HEAP32[(259664)>>2]|0;
   $47 = HEAP32[544648>>2]|0;
   $48 = $45 ? $46 : $47;
   (_fflush($48)|0);
  }
  $49 = HEAP8[102648>>0]|0;
  $50 = $49&1;
  if ($50) {
   $51 = HEAP32[(259664)>>2]|0;
   $52 = ($51|0)!=(0|0);
   $53 = HEAP32[(259664)>>2]|0;
   $54 = HEAP32[544648>>2]|0;
   $55 = $52 ? $53 : $54;
   HEAP32[$vararg_buffer8>>2] = (143634);
   (_fprintf($55,743437,$vararg_buffer8)|0);
   $56 = HEAP32[(259664)>>2]|0;
   $57 = ($56|0)!=(0|0);
   $58 = HEAP32[(259664)>>2]|0;
   $59 = HEAP32[544648>>2]|0;
   $60 = $57 ? $58 : $59;
   (_fflush($60)|0);
  }
  $61 = HEAP8[102648>>0]|0;
  $62 = $61&1;
  if ($62) {
   $63 = HEAP32[(259664)>>2]|0;
   $64 = ($63|0)!=(0|0);
   $65 = HEAP32[(259664)>>2]|0;
   $66 = HEAP32[544648>>2]|0;
   $67 = $64 ? $65 : $66;
   HEAP32[$vararg_buffer11>>2] = (147730);
   (_fprintf($67,743457,$vararg_buffer11)|0);
   $68 = HEAP32[(259664)>>2]|0;
   $69 = ($68|0)!=(0|0);
   $70 = HEAP32[(259664)>>2]|0;
   $71 = HEAP32[544648>>2]|0;
   $72 = $69 ? $70 : $71;
   (_fflush($72)|0);
  }
  _save_ram_file((143634),1280);
  _save_ram_file((147730),1537);
  STACKTOP = sp;return;
  break;
 }
 case 3: case 2:  {
  $73 = HEAP8[102648>>0]|0;
  $74 = $73&1;
  if ($74) {
   $75 = HEAP32[(259664)>>2]|0;
   $76 = ($75|0)!=(0|0);
   $77 = HEAP32[(259664)>>2]|0;
   $78 = HEAP32[544648>>2]|0;
   $79 = $76 ? $77 : $78;
   (_fprintf($79,743510,$vararg_buffer14)|0);
   $80 = HEAP32[(259664)>>2]|0;
   $81 = ($80|0)!=(0|0);
   $82 = HEAP32[(259664)>>2]|0;
   $83 = HEAP32[544648>>2]|0;
   $84 = $81 ? $82 : $83;
   (_fflush($84)|0);
  }
  $85 = HEAP8[102648>>0]|0;
  $86 = $85&1;
  if ($86) {
   $87 = HEAP32[(259664)>>2]|0;
   $88 = ($87|0)!=(0|0);
   $89 = HEAP32[(259664)>>2]|0;
   $90 = HEAP32[544648>>2]|0;
   $91 = $88 ? $89 : $90;
   HEAP32[$vararg_buffer16>>2] = (143634);
   (_fprintf($91,743541,$vararg_buffer16)|0);
   $92 = HEAP32[(259664)>>2]|0;
   $93 = ($92|0)!=(0|0);
   $94 = HEAP32[(259664)>>2]|0;
   $95 = HEAP32[544648>>2]|0;
   $96 = $93 ? $94 : $95;
   (_fflush($96)|0);
  }
  $97 = HEAP8[102648>>0]|0;
  $98 = $97&1;
  if ($98) {
   $99 = HEAP32[(259664)>>2]|0;
   $100 = ($99|0)!=(0|0);
   $101 = HEAP32[(259664)>>2]|0;
   $102 = HEAP32[544648>>2]|0;
   $103 = $100 ? $101 : $102;
   HEAP32[$vararg_buffer19>>2] = (151826);
   (_fprintf($103,743562,$vararg_buffer19)|0);
   $104 = HEAP32[(259664)>>2]|0;
   $105 = ($104|0)!=(0|0);
   $106 = HEAP32[(259664)>>2]|0;
   $107 = HEAP32[544648>>2]|0;
   $108 = $105 ? $106 : $107;
   (_fflush($108)|0);
  }
  _save_ram_file((143634),256);
  _save_ram_file((151826),512);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $109 = HEAP8[102648>>0]|0;
  $110 = $109&1;
  if ($110) {
   $111 = HEAP32[(259664)>>2]|0;
   $112 = ($111|0)!=(0|0);
   $113 = HEAP32[(259664)>>2]|0;
   $114 = HEAP32[544648>>2]|0;
   $115 = $112 ? $113 : $114;
   (_fprintf($115,743583,$vararg_buffer22)|0);
   $116 = HEAP32[(259664)>>2]|0;
   $117 = ($116|0)!=(0|0);
   $118 = HEAP32[(259664)>>2]|0;
   $119 = HEAP32[544648>>2]|0;
   $120 = $117 ? $118 : $119;
   (_fflush($120)|0);
  }
  $121 = HEAP8[102648>>0]|0;
  $122 = $121&1;
  if ($122) {
   $123 = HEAP32[(259664)>>2]|0;
   $124 = ($123|0)!=(0|0);
   $125 = HEAP32[(259664)>>2]|0;
   $126 = HEAP32[544648>>2]|0;
   $127 = $124 ? $125 : $126;
   HEAP32[$vararg_buffer24>>2] = (155922);
   (_fprintf($127,743624,$vararg_buffer24)|0);
   $128 = HEAP32[(259664)>>2]|0;
   $129 = ($128|0)!=(0|0);
   $130 = HEAP32[(259664)>>2]|0;
   $131 = HEAP32[544648>>2]|0;
   $132 = $129 ? $130 : $131;
   (_fflush($132)|0);
  }
  $133 = HEAP8[102648>>0]|0;
  $134 = $133&1;
  if ($134) {
   $135 = HEAP32[(259664)>>2]|0;
   $136 = ($135|0)!=(0|0);
   $137 = HEAP32[(259664)>>2]|0;
   $138 = HEAP32[544648>>2]|0;
   $139 = $136 ? $137 : $138;
   HEAP32[$vararg_buffer27>>2] = (160018);
   (_fprintf($139,743645,$vararg_buffer27)|0);
   $140 = HEAP32[(259664)>>2]|0;
   $141 = ($140|0)!=(0|0);
   $142 = HEAP32[(259664)>>2]|0;
   $143 = HEAP32[544648>>2]|0;
   $144 = $141 ? $142 : $143;
   (_fflush($144)|0);
  }
  _save_ram_file((155922),768);
  _save_ram_file((160018),1024);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _deinit_cheats() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(259576)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(259576)>>2]|0;
 _cheat_manager_free($2);
 return;
}
function _deinit_movie() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(251172)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(251172)>>2]|0;
 _bsv_movie_free($2);
 return;
}
function _save_auto_state() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0;
 var $savestate_name_auto = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $savestate_name_auto = sp + 16|0;
 $0 = HEAP8[(98538)>>0]|0;
 $1 = $0&1;
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _fill_pathname_noext($savestate_name_auto,(164114),743341,4096);
 $2 = (_save_state($savestate_name_auto)|0);
 $3 = $2&1;
 $ret = $3;
 $4 = HEAP8[102648>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[(259664)>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = HEAP32[(259664)>>2]|0;
 $9 = HEAP32[544648>>2]|0;
 $10 = $7 ? $8 : $9;
 $11 = $ret;
 $12 = $11&1;
 $13 = $12 ? 743347 : 743357;
 HEAP32[$vararg_buffer>>2] = $savestate_name_auto;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 (_fprintf($10,743364,$vararg_buffer)|0);
 $14 = HEAP32[(259664)>>2]|0;
 $15 = ($14|0)!=(0|0);
 $16 = HEAP32[(259664)>>2]|0;
 $17 = HEAP32[544648>>2]|0;
 $18 = $15 ? $16 : $17;
 (_fflush($18)|0);
 STACKTOP = sp;return;
}
function _rarch_sleep($msec) {
 $msec = $msec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tv = sp;
 $0 = $msec;
 ;HEAP32[$tv>>2]=0|0;HEAP32[$tv+4>>2]=0|0;
 $1 = $0;
 $2 = (($1>>>0) / 1000)&-1;
 HEAP32[$tv>>2] = $2;
 $3 = $0;
 $4 = (($3>>>0) % 1000)&-1;
 $5 = ($4*1000000)|0;
 $6 = ((($tv)) + 4|0);
 HEAP32[$6>>2] = $5;
 (_nanosleep(($tv|0),(0|0))|0);
 STACKTOP = sp;return;
}
function _readjust_audio_input_rate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adjust = 0.0;
 var $avail = 0, $delta_mid = 0, $direction = 0.0, $half_size = 0, $write_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[8>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[(20)>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$2 & 511]($3)|0);
 $avail = $4;
 $5 = (234584);
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_i64Add(($7|0),($10|0),1,0)|0);
 $12 = tempRet0;
 $13 = (234584);
 $14 = $13;
 HEAP32[$14>>2] = $11;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = $7 & 8191;
 $write_index = $17;
 $18 = $avail;
 $19 = $write_index;
 $20 = ((201816) + ($19<<2)|0);
 HEAP32[$20>>2] = $18;
 $21 = HEAP32[(201800)>>2]|0;
 $22 = (($21>>>0) / 2)&-1;
 $half_size = $22;
 $23 = $avail;
 $24 = $half_size;
 $25 = (($23) - ($24))|0;
 $delta_mid = $25;
 $26 = $delta_mid;
 $27 = (+($26|0));
 $28 = $half_size;
 $29 = (+($28|0));
 $30 = $27 / $29;
 $direction = $30;
 $31 = +HEAPF32[(25024)>>2];
 $32 = $31;
 $33 = $direction;
 $34 = $32 * $33;
 $35 = 1.0 + $34;
 $adjust = $35;
 $36 = +HEAPF64[(201792)>>3];
 $37 = $adjust;
 $38 = $36 * $37;
 HEAPF64[(201744)>>3] = $38;
 STACKTOP = sp;return;
}
function _set_basename($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $dst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $0;
 (_strlcpy_rarch__((139538),$1,4096)|0);
 $2 = $0;
 (_strlcpy_rarch__((135442),$2,4096)|0);
 $3 = (_strrchr((135442),46)|0);
 $dst = $3;
 $4 = $dst;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $dst;
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function _print_help() {
 var $0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 (_puts(740723)|0);
 (_puts(740791)|0);
 $0 = HEAP32[544652>>2]|0;
 _print_compiler($0);
 (_puts(740723)|0);
 (_puts(740839)|0);
 (_puts(740880)|0);
 (_puts(740916)|0);
 (_puts(741000)|0);
 (_puts(741094)|0);
 (_puts(741158)|0);
 (_puts(741198)|0);
 (_puts(741277)|0);
 (_puts(741365)|0);
 (_puts(741545)|0);
 (_puts(741655)|0);
 (_puts(741696)|0);
 (_puts(741770)|0);
 (_puts(741832)|0);
 (_puts(741906)|0);
 (_puts(741988)|0);
 HEAP32[$vararg_buffer>>2] = 8;
 (_printf(742032,$vararg_buffer)|0);
 HEAP32[$vararg_buffer1>>2] = 8;
 (_printf(742108,$vararg_buffer1)|0);
 HEAP32[$vararg_buffer4>>2] = 8;
 (_printf(742178,$vararg_buffer4)|0);
 (_puts(742243)|0);
 (_puts(742315)|0);
 (_puts(742397)|0);
 (_puts(742487)|0);
 (_puts(742555)|0);
 (_puts(742597)|0);
 (_puts(742667)|0);
 (_puts(742753)|0);
 (_puts(742840)|0);
 (_puts(742924)|0);
 (_puts(742956)|0);
 (_puts(743025)|0);
 (_puts(743091)|0);
 (_puts(743157)|0);
 (_puts(743206)|0);
 (_puts(743251)|0);
 STACKTOP = sp;return;
}
function _rarch_fail($error_code,$error) {
 $error_code = $error_code|0;
 $error = $error|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $error_code;
 $1 = $error;
 $2 = HEAP8[(259669)>>0]|0;
 $3 = $2&1;
 if ($3) {
  $14 = $1;
  (_strlcpy_rarch__((259671),$14,1024)|0);
  $15 = $0;
  _longjmp(((260696)|0),($15|0));
  // unreachable;
 } else {
  $4 = HEAP32[(259664)>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = HEAP32[544648>>2]|0;
  $8 = $5 ? $6 : $7;
  HEAP32[$vararg_buffer>>2] = 752155;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 846;
  (_fprintf($8,765794,$vararg_buffer)|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  (_fflush($13)|0);
  _exit(2);
  // unreachable;
 }
}
function _print_features() {
 var $vararg_buffer = 0, $vararg_buffer103 = 0, $vararg_buffer108 = 0, $vararg_buffer113 = 0, $vararg_buffer118 = 0, $vararg_buffer123 = 0, $vararg_buffer128 = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer33 = 0, $vararg_buffer38 = 0, $vararg_buffer43 = 0, $vararg_buffer48 = 0, $vararg_buffer53 = 0, $vararg_buffer58 = 0, $vararg_buffer63 = 0, $vararg_buffer68 = 0;
 var $vararg_buffer73 = 0, $vararg_buffer78 = 0, $vararg_buffer8 = 0, $vararg_buffer83 = 0, $vararg_buffer88 = 0, $vararg_buffer93 = 0, $vararg_buffer98 = 0, $vararg_ptr1 = 0, $vararg_ptr101 = 0, $vararg_ptr102 = 0, $vararg_ptr106 = 0, $vararg_ptr107 = 0, $vararg_ptr11 = 0, $vararg_ptr111 = 0, $vararg_ptr112 = 0, $vararg_ptr116 = 0, $vararg_ptr117 = 0, $vararg_ptr12 = 0, $vararg_ptr121 = 0, $vararg_ptr122 = 0;
 var $vararg_ptr126 = 0, $vararg_ptr127 = 0, $vararg_ptr131 = 0, $vararg_ptr132 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr51 = 0;
 var $vararg_ptr52 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr6 = 0, $vararg_ptr61 = 0, $vararg_ptr62 = 0, $vararg_ptr66 = 0, $vararg_ptr67 = 0, $vararg_ptr7 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr76 = 0, $vararg_ptr77 = 0, $vararg_ptr81 = 0, $vararg_ptr82 = 0, $vararg_ptr86 = 0, $vararg_ptr87 = 0, $vararg_ptr91 = 0, $vararg_ptr92 = 0, $vararg_ptr96 = 0;
 var $vararg_ptr97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer128 = sp + 416|0;
 $vararg_buffer123 = sp + 400|0;
 $vararg_buffer118 = sp + 384|0;
 $vararg_buffer113 = sp + 368|0;
 $vararg_buffer108 = sp + 352|0;
 $vararg_buffer103 = sp + 336|0;
 $vararg_buffer98 = sp + 320|0;
 $vararg_buffer93 = sp + 304|0;
 $vararg_buffer88 = sp + 288|0;
 $vararg_buffer83 = sp + 272|0;
 $vararg_buffer78 = sp + 256|0;
 $vararg_buffer73 = sp + 240|0;
 $vararg_buffer68 = sp + 224|0;
 $vararg_buffer63 = sp + 208|0;
 $vararg_buffer58 = sp + 192|0;
 $vararg_buffer53 = sp + 176|0;
 $vararg_buffer48 = sp + 160|0;
 $vararg_buffer43 = sp + 144|0;
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 (_puts(773086)|0);
 (_puts(740019)|0);
 HEAP32[$vararg_buffer>>2] = 740044;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 740048;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 754330;
 (_printf(740029,$vararg_buffer)|0);
 HEAP32[$vararg_buffer3>>2] = 740060;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = 740068;
 $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
 HEAP32[$vararg_ptr7>>2] = 754330;
 (_printf(740029,$vararg_buffer3)|0);
 HEAP32[$vararg_buffer8>>2] = 740086;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = 740093;
 $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
 HEAP32[$vararg_ptr12>>2] = 754326;
 (_printf(740029,$vararg_buffer8)|0);
 HEAP32[$vararg_buffer13>>2] = 740107;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = 740111;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = 754330;
 (_printf(740029,$vararg_buffer13)|0);
 HEAP32[$vararg_buffer18>>2] = 740135;
 $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
 HEAP32[$vararg_ptr21>>2] = 740139;
 $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
 HEAP32[$vararg_ptr22>>2] = 754326;
 (_printf(740029,$vararg_buffer18)|0);
 HEAP32[$vararg_buffer23>>2] = 740159;
 $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
 HEAP32[$vararg_ptr26>>2] = 740166;
 $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
 HEAP32[$vararg_ptr27>>2] = 754330;
 (_printf(740029,$vararg_buffer23)|0);
 HEAP32[$vararg_buffer28>>2] = 740188;
 $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
 HEAP32[$vararg_ptr31>>2] = 740195;
 $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
 HEAP32[$vararg_ptr32>>2] = 754330;
 (_printf(740029,$vararg_buffer28)|0);
 HEAP32[$vararg_buffer33>>2] = 740209;
 $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
 HEAP32[$vararg_ptr36>>2] = 740214;
 $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
 HEAP32[$vararg_ptr37>>2] = 754330;
 (_printf(740029,$vararg_buffer33)|0);
 HEAP32[$vararg_buffer38>>2] = 740227;
 $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
 HEAP32[$vararg_ptr41>>2] = 740214;
 $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
 HEAP32[$vararg_ptr42>>2] = 754330;
 (_printf(740029,$vararg_buffer38)|0);
 HEAP32[$vararg_buffer43>>2] = 740231;
 $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
 HEAP32[$vararg_ptr46>>2] = 740214;
 $vararg_ptr47 = ((($vararg_buffer43)) + 8|0);
 HEAP32[$vararg_ptr47>>2] = 754330;
 (_printf(740029,$vararg_buffer43)|0);
 HEAP32[$vararg_buffer48>>2] = 740236;
 $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
 HEAP32[$vararg_ptr51>>2] = 740214;
 $vararg_ptr52 = ((($vararg_buffer48)) + 8|0);
 HEAP32[$vararg_ptr52>>2] = 754330;
 (_printf(740029,$vararg_buffer48)|0);
 HEAP32[$vararg_buffer53>>2] = 740243;
 $vararg_ptr56 = ((($vararg_buffer53)) + 4|0);
 HEAP32[$vararg_ptr56>>2] = 740214;
 $vararg_ptr57 = ((($vararg_buffer53)) + 8|0);
 HEAP32[$vararg_ptr57>>2] = 754330;
 (_printf(740029,$vararg_buffer53)|0);
 HEAP32[$vararg_buffer58>>2] = 740253;
 $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
 HEAP32[$vararg_ptr61>>2] = 740214;
 $vararg_ptr62 = ((($vararg_buffer58)) + 8|0);
 HEAP32[$vararg_ptr62>>2] = 754330;
 (_printf(740029,$vararg_buffer58)|0);
 HEAP32[$vararg_buffer63>>2] = 740264;
 $vararg_ptr66 = ((($vararg_buffer63)) + 4|0);
 HEAP32[$vararg_ptr66>>2] = 740214;
 $vararg_ptr67 = ((($vararg_buffer63)) + 8|0);
 HEAP32[$vararg_ptr67>>2] = 754330;
 (_printf(740029,$vararg_buffer63)|0);
 HEAP32[$vararg_buffer68>>2] = 740276;
 $vararg_ptr71 = ((($vararg_buffer68)) + 4|0);
 HEAP32[$vararg_ptr71>>2] = 740214;
 $vararg_ptr72 = ((($vararg_buffer68)) + 8|0);
 HEAP32[$vararg_ptr72>>2] = 754330;
 (_printf(740029,$vararg_buffer68)|0);
 HEAP32[$vararg_buffer73>>2] = 740284;
 $vararg_ptr76 = ((($vararg_buffer73)) + 4|0);
 HEAP32[$vararg_ptr76>>2] = 740289;
 $vararg_ptr77 = ((($vararg_buffer73)) + 8|0);
 HEAP32[$vararg_ptr77>>2] = 754326;
 (_printf(740029,$vararg_buffer73)|0);
 HEAP32[$vararg_buffer78>>2] = 740327;
 $vararg_ptr81 = ((($vararg_buffer78)) + 4|0);
 HEAP32[$vararg_ptr81>>2] = 740214;
 $vararg_ptr82 = ((($vararg_buffer78)) + 8|0);
 HEAP32[$vararg_ptr82>>2] = 754330;
 (_printf(740029,$vararg_buffer78)|0);
 HEAP32[$vararg_buffer83>>2] = 740334;
 $vararg_ptr86 = ((($vararg_buffer83)) + 4|0);
 HEAP32[$vararg_ptr86>>2] = 740343;
 $vararg_ptr87 = ((($vararg_buffer83)) + 8|0);
 HEAP32[$vararg_ptr87>>2] = 754330;
 (_printf(740029,$vararg_buffer83)|0);
 HEAP32[$vararg_buffer88>>2] = 740378;
 $vararg_ptr91 = ((($vararg_buffer88)) + 4|0);
 HEAP32[$vararg_ptr91>>2] = 740381;
 $vararg_ptr92 = ((($vararg_buffer88)) + 8|0);
 HEAP32[$vararg_ptr92>>2] = 754330;
 (_printf(740029,$vararg_buffer88)|0);
 HEAP32[$vararg_buffer93>>2] = 740398;
 $vararg_ptr96 = ((($vararg_buffer93)) + 4|0);
 HEAP32[$vararg_ptr96>>2] = 740406;
 $vararg_ptr97 = ((($vararg_buffer93)) + 8|0);
 HEAP32[$vararg_ptr97>>2] = 754330;
 (_printf(740029,$vararg_buffer93)|0);
 HEAP32[$vararg_buffer98>>2] = 740426;
 $vararg_ptr101 = ((($vararg_buffer98)) + 4|0);
 HEAP32[$vararg_ptr101>>2] = 740436;
 $vararg_ptr102 = ((($vararg_buffer98)) + 8|0);
 HEAP32[$vararg_ptr102>>2] = 754330;
 (_printf(740029,$vararg_buffer98)|0);
 HEAP32[$vararg_buffer103>>2] = 740460;
 $vararg_ptr106 = ((($vararg_buffer103)) + 4|0);
 HEAP32[$vararg_ptr106>>2] = 740464;
 $vararg_ptr107 = ((($vararg_buffer103)) + 8|0);
 HEAP32[$vararg_ptr107>>2] = 754326;
 (_printf(740029,$vararg_buffer103)|0);
 HEAP32[$vararg_buffer108>>2] = 740510;
 $vararg_ptr111 = ((($vararg_buffer108)) + 4|0);
 HEAP32[$vararg_ptr111>>2] = 740518;
 $vararg_ptr112 = ((($vararg_buffer108)) + 8|0);
 HEAP32[$vararg_ptr112>>2] = 754330;
 (_printf(740029,$vararg_buffer108)|0);
 HEAP32[$vararg_buffer113>>2] = 740563;
 $vararg_ptr116 = ((($vararg_buffer113)) + 4|0);
 HEAP32[$vararg_ptr116>>2] = 740570;
 $vararg_ptr117 = ((($vararg_buffer113)) + 8|0);
 HEAP32[$vararg_ptr117>>2] = 754330;
 (_printf(740029,$vararg_buffer113)|0);
 HEAP32[$vararg_buffer118>>2] = 740619;
 $vararg_ptr121 = ((($vararg_buffer118)) + 4|0);
 HEAP32[$vararg_ptr121>>2] = 740628;
 $vararg_ptr122 = ((($vararg_buffer118)) + 8|0);
 HEAP32[$vararg_ptr122>>2] = 754330;
 (_printf(740029,$vararg_buffer118)|0);
 HEAP32[$vararg_buffer123>>2] = 740661;
 $vararg_ptr126 = ((($vararg_buffer123)) + 4|0);
 HEAP32[$vararg_ptr126>>2] = 740669;
 $vararg_ptr127 = ((($vararg_buffer123)) + 8|0);
 HEAP32[$vararg_ptr127>>2] = 754330;
 (_printf(740029,$vararg_buffer123)|0);
 HEAP32[$vararg_buffer128>>2] = 740690;
 $vararg_ptr131 = ((($vararg_buffer128)) + 4|0);
 HEAP32[$vararg_ptr131>>2] = 740697;
 $vararg_ptr132 = ((($vararg_buffer128)) + 8|0);
 HEAP32[$vararg_ptr132>>2] = 754330;
 (_printf(740029,$vararg_buffer128)|0);
 STACKTOP = sp;return;
}
function _init_libretro_cbs_plain() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[265072>>2]|0;
 FUNCTION_TABLE_vi[$0 & 1023](245);
 $1 = HEAP32[265076>>2]|0;
 FUNCTION_TABLE_vi[$1 & 1023](246);
 $2 = HEAP32[265080>>2]|0;
 FUNCTION_TABLE_vi[$2 & 1023](247);
 $3 = HEAP32[265088>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023](248);
 $4 = HEAP32[265084>>2]|0;
 FUNCTION_TABLE_vi[$4 & 1023](249);
 return;
}
function _audio_sample($left,$right) {
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $right;
 $2 = $0;
 $3 = HEAP32[(201724)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(201724)>>2] = $4;
 $5 = HEAP32[(201760)>>2]|0;
 $6 = (($5) + ($3<<1)|0);
 HEAP16[$6>>1] = $2;
 $7 = $1;
 $8 = HEAP32[(201724)>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[(201724)>>2] = $9;
 $10 = HEAP32[(201760)>>2]|0;
 $11 = (($10) + ($8<<1)|0);
 HEAP16[$11>>1] = $7;
 $12 = HEAP32[(201724)>>2]|0;
 $13 = HEAP32[(201728)>>2]|0;
 $14 = ($12>>>0)<($13>>>0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[(201760)>>2]|0;
 $16 = HEAP32[(201724)>>2]|0;
 $17 = (_audio_flush($15,$16)|0);
 $18 = HEAP8[(102649)>>0]|0;
 $19 = $18&1;
 $20 = $17 ? $19 : 0;
 $21 = $20&1;
 HEAP8[(102649)>>0] = $21;
 HEAP32[(201724)>>2] = 0;
 STACKTOP = sp;return;
}
function _input_state($port,$device,$index,$id) {
 $port = $port|0;
 $device = $device|0;
 $index = $index|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $base = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $res = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ret = sp + 22|0;
 $1 = $port;
 $2 = $device;
 $3 = $index;
 $4 = $id;
 $5 = $2;
 $6 = $5 & 255;
 $2 = $6;
 $7 = HEAP32[(251172)>>2]|0;
 $8 = ($7|0)!=(0|0);
 do {
  if ($8) {
   $9 = HEAP8[(255272)>>0]|0;
   $10 = $9&1;
   if ($10) {
    $11 = HEAP32[(251172)>>2]|0;
    $12 = (_bsv_movie_get_input($11,$ret)|0);
    if (!($12)) {
     HEAP8[(259371)>>0] = 1;
     break;
    }
    $13 = HEAP16[$ret>>1]|0;
    $0 = $13;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
  }
 } while(0);
 $res = 0;
 $14 = $4;
 $15 = ($14>>>0)<(25);
 $16 = $2;
 $17 = ($16|0)==(3);
 $or$cond = $15 | $17;
 if ($or$cond) {
  $18 = HEAP32[(16)>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[(28)>>2]|0;
  $22 = $1;
  $23 = $2;
  $24 = $3;
  $25 = $4;
  $26 = (FUNCTION_TABLE_iiiiiii[$20 & 255]($21,264640,$22,$23,$24,$25)|0);
  $res = $26;
 }
 $27 = $2;
 $28 = ($27|0)==(1);
 $29 = $1;
 $30 = ($29|0)==(0);
 $or$cond3 = $28 & $30;
 if ($or$cond3) {
  $31 = (200);
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = $4;
  $38 = (_bitshift64Shl(1,0,($37|0))|0);
  $39 = tempRet0;
  $40 = $33 & $38;
  $41 = $36 & $39;
  $42 = ($40|0)!=(0);
  $43 = ($41|0)!=(0);
  $44 = $42 | $43;
  $45 = $44 ? 1 : 0;
  $46 = $res;
  $47 = $46 << 16 >> 16;
  $48 = $47 | $45;
  $49 = $48&65535;
  $res = $49;
 } else {
  $50 = $2;
  $51 = ($50|0)==(5);
  $52 = $1;
  $53 = ($52|0)==(0);
  $or$cond5 = $51 & $53;
  if ($or$cond5) {
   $54 = $3;
   $55 = ($54|0)==(1);
   $56 = $55 ? 2 : 0;
   $base = $56;
   $57 = $4;
   $58 = ($57|0)==(1);
   $59 = $58 ? 1 : 0;
   $60 = $base;
   $61 = (($60) + ($59))|0;
   $base = $61;
   $62 = $base;
   $63 = ((208) + ($62<<1)|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64 << 16 >> 16;
   $66 = $res;
   $67 = $66 << 16 >> 16;
   $68 = (($67) + ($65))|0;
   $69 = $68&65535;
   $res = $69;
  }
 }
 $70 = $2;
 $71 = ($70|0)==(1);
 if ($71) {
  $72 = $4;
  $73 = ($72>>>0)<(4);
  $74 = $4;
  $75 = ($74>>>0)>(7);
  $or$cond7 = $73 | $75;
  if ($or$cond7) {
   $76 = $1;
   $77 = $4;
   $78 = $res;
   $79 = ($78<<16>>16)!=(0);
   $80 = (_input_apply_turbo($76,$77,$79)|0);
   $81 = $80&1;
   $res = $81;
  }
 }
 $82 = HEAP32[(251172)>>2]|0;
 $83 = ($82|0)!=(0|0);
 if ($83) {
  $84 = HEAP8[(255272)>>0]|0;
  $85 = $84&1;
  if (!($85)) {
   $86 = HEAP32[(251172)>>2]|0;
   $87 = $res;
   _bsv_movie_set_input($86,$87);
  }
 }
 $88 = $res;
 $0 = $88;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function _input_apply_turbo($port,$id,$res) {
 $port = $port|0;
 $id = $id|0;
 $res = $res|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 9|0;
 $1 = $port;
 $2 = $id;
 $4 = $res&1;
 $3 = $4;
 $5 = $3;
 $6 = $5&1;
 if ($6) {
  $7 = $1;
  $8 = ((259378) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&1;
  if ($10) {
   $11 = $2;
   $12 = 1 << $11;
   $13 = $1;
   $14 = ((259386) + ($13<<1)|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = $15&65535;
   $17 = $16 | $12;
   $18 = $17&65535;
   HEAP16[$14>>1] = $18;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $19 = $3;
  $20 = $19&1;
  if (!($20)) {
   $21 = $2;
   $22 = 1 << $21;
   $23 = $22 ^ -1;
   $24 = $1;
   $25 = ((259386) + ($24<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = $27 & $23;
   $29 = $28&65535;
   HEAP16[$25>>1] = $29;
  }
 }
 $30 = $1;
 $31 = ((259386) + ($30<<1)|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = $2;
 $35 = 1 << $34;
 $36 = $33 & $35;
 $37 = ($36|0)!=(0);
 $38 = $3;
 $39 = $38&1;
 if ($37) {
  $40 = $39&1;
  $41 = HEAP32[(259404)>>2]|0;
  $42 = HEAP32[(61624)>>2]|0;
  $43 = (($41>>>0) % ($42>>>0))&-1;
  $44 = HEAP32[(61628)>>2]|0;
  $45 = ($43>>>0)<($44>>>0);
  $46 = $45&1;
  $47 = $40 & $46;
  $48 = ($47|0)!=(0);
  $$expand_i1_val = $48&1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 } else {
  $$expand_i1_val2 = $39&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _check_block_hotkey() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(39)>>0] = 0;
 $0 = HEAP32[264672>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[264672>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)==(65535);
  $13 = ($11|0)==(0);
  $14 = $12 & $13;
  if ($14) {
   $15 = HEAP32[264672>>2]|0;
   $16 = ((($15)) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(-1);
   if ($18) {
    return;
   }
  }
 }
 $19 = (_input_key_pressed_func(48)|0);
 $20 = $19 ^ 1;
 $21 = $20&1;
 HEAP8[(39)>>0] = $21;
 return;
}
function _check_screenshot() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $pressed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_input_key_pressed_func(43)|0);
 $1 = $0&1;
 $pressed = $1;
 $2 = $pressed;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP8[739212>>0]|0;
  $5 = $4&1;
  if (!($5)) {
   _rarch_take_screenshot();
  }
 }
 $6 = $pressed;
 $7 = $6&1;
 $8 = $7&1;
 HEAP8[739212>>0] = $8;
 STACKTOP = sp;return;
}
function _check_mute() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $pressed = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(102649)>>0]|0;
 $1 = $0&1;
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (_input_key_pressed_func(45)|0);
 $3 = $2&1;
 $pressed = $3;
 $4 = $pressed;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP8[739213>>0]|0;
  $7 = $6&1;
  if (!($7)) {
   $8 = HEAP8[(201753)>>0]|0;
   $9 = $8&1;
   $10 = $9 ^ 1;
   $11 = $10&1;
   HEAP8[(201753)>>0] = $11;
   $12 = HEAP8[(201753)>>0]|0;
   $13 = $12&1;
   $14 = $13 ? 739945 : 739958;
   $msg = $14;
   $15 = HEAP32[(251148)>>2]|0;
   _msg_queue_clear($15);
   $16 = HEAP32[(251148)>>2]|0;
   $17 = $msg;
   _msg_queue_push($16,$17,1,180);
   $18 = HEAP32[(20)>>2]|0;
   $19 = ($18|0)!=(0|0);
   do {
    if ($19) {
     $20 = HEAP8[(201753)>>0]|0;
     $21 = $20&1;
     $22 = HEAP32[8>>2]|0;
     if ($21) {
      $23 = ((($22)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = HEAP32[(20)>>2]|0;
      (FUNCTION_TABLE_ii[$24 & 511]($25)|0);
      break;
     }
     $26 = ((($22)) + 12|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = HEAP32[(20)>>2]|0;
     $29 = (FUNCTION_TABLE_ii[$27 & 511]($28)|0);
     if (!($29)) {
      $30 = HEAP32[(259664)>>2]|0;
      $31 = ($30|0)!=(0|0);
      $32 = HEAP32[(259664)>>2]|0;
      $33 = HEAP32[544648>>2]|0;
      $34 = $31 ? $32 : $33;
      (_fprintf($34,739973,$vararg_buffer)|0);
      $35 = HEAP32[(259664)>>2]|0;
      $36 = ($35|0)!=(0|0);
      $37 = HEAP32[(259664)>>2]|0;
      $38 = HEAP32[544648>>2]|0;
      $39 = $36 ? $37 : $38;
      (_fflush($39)|0);
      HEAP8[(102649)>>0] = 0;
     }
    }
   } while(0);
   $40 = HEAP8[102648>>0]|0;
   $41 = $40&1;
   if ($41) {
    $42 = HEAP32[(259664)>>2]|0;
    $43 = ($42|0)!=(0|0);
    $44 = HEAP32[(259664)>>2]|0;
    $45 = HEAP32[544648>>2]|0;
    $46 = $43 ? $44 : $45;
    $47 = $msg;
    HEAP32[$vararg_buffer1>>2] = $47;
    (_fprintf($46,772081,$vararg_buffer1)|0);
    $48 = HEAP32[(259664)>>2]|0;
    $49 = ($48|0)!=(0|0);
    $50 = HEAP32[(259664)>>2]|0;
    $51 = HEAP32[544648>>2]|0;
    $52 = $49 ? $50 : $51;
    (_fflush($52)|0);
   }
  }
 }
 $53 = $pressed;
 $54 = $53&1;
 $55 = $54&1;
 HEAP8[739213>>0] = $55;
 STACKTOP = sp;return;
}
function _check_volume() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $db_change = 0.0, $msg = 0, $pressed_down = 0, $pressed_up = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg = sp + 16|0;
 $0 = HEAP8[(102649)>>0]|0;
 $1 = $0&1;
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $db_change = 0.0;
 $2 = (_input_key_pressed_func(49)|0);
 $3 = $2&1;
 $pressed_up = $3;
 $4 = (_input_key_pressed_func(50)|0);
 $5 = $4&1;
 $pressed_down = $5;
 $6 = $pressed_up;
 $7 = $6&1;
 if (!($7)) {
  $8 = $pressed_down;
  $9 = $8&1;
  if (!($9)) {
   STACKTOP = sp;return;
  }
 }
 $10 = $pressed_up;
 $11 = $10&1;
 if ($11) {
  $12 = $db_change;
  $13 = $12 + 0.5;
  $db_change = $13;
 }
 $14 = $pressed_down;
 $15 = $14&1;
 if ($15) {
  $16 = $db_change;
  $17 = $16 - 0.5;
  $db_change = $17;
 }
 $18 = $db_change;
 $19 = +HEAPF32[(201804)>>2];
 $20 = $19 + $18;
 HEAPF32[(201804)>>2] = $20;
 $21 = +HEAPF32[(201804)>>2];
 $22 = $21 > 12.0;
 if ($22) {
  HEAPF32[(201804)>>2] = 12.0;
 } else {
  $23 = +HEAPF32[(201804)>>2];
  $24 = $23 < -80.0;
  if ($24) {
   HEAPF32[(201804)>>2] = -80.0;
  }
 }
 $25 = +HEAPF32[(201804)>>2];
 $26 = $25;
 HEAPF64[$vararg_buffer>>3] = $26;
 (_snprintf($msg,256,739929,$vararg_buffer)|0);
 $27 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($27);
 $28 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($28,$msg,1,180);
 $29 = HEAP8[102648>>0]|0;
 $30 = $29&1;
 if ($30) {
  $31 = HEAP32[(259664)>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = HEAP32[(259664)>>2]|0;
  $34 = HEAP32[544648>>2]|0;
  $35 = $32 ? $33 : $34;
  HEAP32[$vararg_buffer1>>2] = $msg;
  (_fprintf($35,772081,$vararg_buffer1)|0);
  $36 = HEAP32[(259664)>>2]|0;
  $37 = ($36|0)!=(0|0);
  $38 = HEAP32[(259664)>>2]|0;
  $39 = HEAP32[544648>>2]|0;
  $40 = $37 ? $38 : $39;
  (_fflush($40)|0);
 }
 $41 = +HEAPF32[(201804)>>2];
 $42 = (+_db_to_gain($41));
 HEAPF32[(201808)>>2] = $42;
 STACKTOP = sp;return;
}
function _db_to_gain($db) {
 $db = +$db;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $db;
 $1 = $0;
 $2 = $1 / 20.0;
 $3 = (+Math_pow(10.0,(+$2)));
 STACKTOP = sp;return (+$3);
}
function _check_turbo() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(259404)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(259404)>>2] = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(8);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[(16)>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[(28)>>2]|0;
  $8 = $i;
  $9 = (FUNCTION_TABLE_iiiiiii[$6 & 255]($7,264676,$8,1,0,16)|0);
  $10 = ($9<<16>>16)!=(0);
  $11 = $i;
  $12 = ((259378) + ($11)|0);
  $13 = $10&1;
  HEAP8[$12>>0] = $13;
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 STACKTOP = sp;return;
}
function _check_grab_mouse_toggle() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pressed = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_input_key_pressed_func(54)|0);
 if ($0) {
  $1 = HEAP32[(16)>>2]|0;
  $2 = ((($1)) + 28|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  $6 = $4;
 } else {
  $6 = 0;
 }
 $5 = $6&1;
 $pressed = $5;
 $7 = $pressed;
 $8 = $7&1;
 if ($8) {
  $9 = HEAP8[739214>>0]|0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP8[739215>>0]|0;
   $12 = $11&1;
   $13 = $12 ^ 1;
   $14 = $13&1;
   HEAP8[739215>>0] = $14;
   $15 = HEAP8[102648>>0]|0;
   $16 = $15&1;
   if ($16) {
    $17 = HEAP32[(259664)>>2]|0;
    $18 = ($17|0)!=(0|0);
    $19 = HEAP32[(259664)>>2]|0;
    $20 = HEAP32[544648>>2]|0;
    $21 = $18 ? $19 : $20;
    $22 = HEAP8[739215>>0]|0;
    $23 = $22&1;
    $24 = $23 ? 754326 : 754330;
    HEAP32[$vararg_buffer>>2] = $24;
    (_fprintf($21,739895,$vararg_buffer)|0);
    $25 = HEAP32[(259664)>>2]|0;
    $26 = ($25|0)!=(0|0);
    $27 = HEAP32[(259664)>>2]|0;
    $28 = HEAP32[544648>>2]|0;
    $29 = $26 ? $27 : $28;
    (_fflush($29)|0);
   }
   $30 = HEAP32[(16)>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[(28)>>2]|0;
   $34 = HEAP8[739215>>0]|0;
   $35 = $34&1;
   FUNCTION_TABLE_vii[$32 & 1023]($33,$35);
   $36 = HEAP32[(216)>>2]|0;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = HEAP32[(216)>>2]|0;
    $39 = ((($38)) + 32|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)!=(0|0);
    if ($41) {
     $42 = HEAP32[(216)>>2]|0;
     $43 = ((($42)) + 32|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = HEAP32[(24)>>2]|0;
     $46 = HEAP8[739215>>0]|0;
     $47 = $46&1;
     $48 = $47 ^ 1;
     FUNCTION_TABLE_vii[$44 & 1023]($45,$48);
    }
   }
  }
 }
 $49 = $pressed;
 $50 = $49&1;
 $51 = $50&1;
 HEAP8[739214>>0] = $51;
 STACKTOP = sp;return;
}
function _check_pause() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $focus = 0, $new_state = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_input_key_pressed_func(35)|0);
 $1 = $0&1;
 $new_state = $1;
 $2 = HEAP8[(259375)>>0]|0;
 $3 = $2&1;
 if ($3) {
  $6 = 0;
 } else {
  $4 = (_input_key_pressed_func(36)|0);
  $6 = $4;
 }
 $5 = $6&1;
 $7 = $new_state;
 $8 = $7&1;
 $9 = $8&1;
 $10 = $9 | $5;
 $11 = ($10|0)!=(0);
 $12 = $11&1;
 $new_state = $12;
 $focus = 1;
 $13 = HEAP8[(98528)>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = HEAP32[(12)>>2]|0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[(24)>>2]|0;
  $19 = (FUNCTION_TABLE_ii[$17 & 511]($18)|0);
  $20 = $19&1;
  $focus = $20;
 }
 $21 = $focus;
 $22 = $21&1;
 do {
  if ($22) {
   $23 = $new_state;
   $24 = $23&1;
   if ($24) {
    $25 = HEAP8[739216>>0]|0;
    $26 = $25&1;
    if ($26) {
     label = 19;
    } else {
     $27 = HEAP8[(259375)>>0]|0;
     $28 = $27&1;
     $29 = $28 ^ 1;
     $30 = $29&1;
     HEAP8[(259375)>>0] = $30;
     $31 = HEAP8[(259375)>>0]|0;
     $32 = $31&1;
     $33 = HEAP8[102648>>0]|0;
     $34 = $33&1;
     if ($32) {
      if ($34) {
       $35 = HEAP32[(259664)>>2]|0;
       $36 = ($35|0)!=(0|0);
       $37 = HEAP32[(259664)>>2]|0;
       $38 = HEAP32[544648>>2]|0;
       $39 = $36 ? $37 : $38;
       (_fprintf($39,739771,$vararg_buffer)|0);
       $40 = HEAP32[(259664)>>2]|0;
       $41 = ($40|0)!=(0|0);
       $42 = HEAP32[(259664)>>2]|0;
       $43 = HEAP32[544648>>2]|0;
       $44 = $41 ? $42 : $43;
       (_fflush($44)|0);
      }
      $45 = HEAP32[(20)>>2]|0;
      $46 = ($45|0)!=(0|0);
      if (!($46)) {
       break;
      }
      $47 = HEAP32[8>>2]|0;
      $48 = ((($47)) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = HEAP32[(20)>>2]|0;
      (FUNCTION_TABLE_ii[$49 & 511]($50)|0);
      break;
     }
     if ($34) {
      $51 = HEAP32[(259664)>>2]|0;
      $52 = ($51|0)!=(0|0);
      $53 = HEAP32[(259664)>>2]|0;
      $54 = HEAP32[544648>>2]|0;
      $55 = $52 ? $53 : $54;
      (_fprintf($55,739791,$vararg_buffer1)|0);
      $56 = HEAP32[(259664)>>2]|0;
      $57 = ($56|0)!=(0|0);
      $58 = HEAP32[(259664)>>2]|0;
      $59 = HEAP32[544648>>2]|0;
      $60 = $57 ? $58 : $59;
      (_fflush($60)|0);
     }
     $61 = HEAP32[(20)>>2]|0;
     $62 = ($61|0)!=(0|0);
     if ($62) {
      $63 = HEAP8[(201753)>>0]|0;
      $64 = $63&1;
      if (!($64)) {
       $65 = HEAP32[8>>2]|0;
       $66 = ((($65)) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = HEAP32[(20)>>2]|0;
       $69 = (FUNCTION_TABLE_ii[$67 & 511]($68)|0);
       if (!($69)) {
        $70 = HEAP32[(259664)>>2]|0;
        $71 = ($70|0)!=(0|0);
        $72 = HEAP32[(259664)>>2]|0;
        $73 = HEAP32[544648>>2]|0;
        $74 = $71 ? $72 : $73;
        (_fprintf($74,739813,$vararg_buffer3)|0);
        $75 = HEAP32[(259664)>>2]|0;
        $76 = ($75|0)!=(0|0);
        $77 = HEAP32[(259664)>>2]|0;
        $78 = HEAP32[544648>>2]|0;
        $79 = $76 ? $77 : $78;
        (_fflush($79)|0);
        HEAP8[(102649)>>0] = 0;
       }
      }
     }
    }
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   $80 = $focus;
   $81 = $80&1;
   if ($81) {
    $82 = HEAP8[739217>>0]|0;
    $83 = $82&1;
    if (!($83)) {
     $84 = HEAP8[102648>>0]|0;
     $85 = $84&1;
     if ($85) {
      $86 = HEAP32[(259664)>>2]|0;
      $87 = ($86|0)!=(0|0);
      $88 = HEAP32[(259664)>>2]|0;
      $89 = HEAP32[544648>>2]|0;
      $90 = $87 ? $88 : $89;
      (_fprintf($90,739791,$vararg_buffer5)|0);
      $91 = HEAP32[(259664)>>2]|0;
      $92 = ($91|0)!=(0|0);
      $93 = HEAP32[(259664)>>2]|0;
      $94 = HEAP32[544648>>2]|0;
      $95 = $92 ? $93 : $94;
      (_fflush($95)|0);
     }
     HEAP8[(259375)>>0] = 0;
     $96 = HEAP32[(20)>>2]|0;
     $97 = ($96|0)!=(0|0);
     if (!($97)) {
      break;
     }
     $98 = HEAP8[(201753)>>0]|0;
     $99 = $98&1;
     if ($99) {
      break;
     }
     $100 = HEAP32[8>>2]|0;
     $101 = ((($100)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = HEAP32[(20)>>2]|0;
     $104 = (FUNCTION_TABLE_ii[$102 & 511]($103)|0);
     if ($104) {
      break;
     }
     $105 = HEAP32[(259664)>>2]|0;
     $106 = ($105|0)!=(0|0);
     $107 = HEAP32[(259664)>>2]|0;
     $108 = HEAP32[544648>>2]|0;
     $109 = $106 ? $107 : $108;
     (_fprintf($109,739813,$vararg_buffer7)|0);
     $110 = HEAP32[(259664)>>2]|0;
     $111 = ($110|0)!=(0|0);
     $112 = HEAP32[(259664)>>2]|0;
     $113 = HEAP32[544648>>2]|0;
     $114 = $111 ? $112 : $113;
     (_fflush($114)|0);
     HEAP8[(102649)>>0] = 0;
     break;
    }
   }
   $115 = $focus;
   $116 = $115&1;
   if (!($116)) {
    $117 = HEAP8[739217>>0]|0;
    $118 = $117&1;
    if ($118) {
     $119 = HEAP8[102648>>0]|0;
     $120 = $119&1;
     if ($120) {
      $121 = HEAP32[(259664)>>2]|0;
      $122 = ($121|0)!=(0|0);
      $123 = HEAP32[(259664)>>2]|0;
      $124 = HEAP32[544648>>2]|0;
      $125 = $122 ? $123 : $124;
      (_fprintf($125,739771,$vararg_buffer9)|0);
      $126 = HEAP32[(259664)>>2]|0;
      $127 = ($126|0)!=(0|0);
      $128 = HEAP32[(259664)>>2]|0;
      $129 = HEAP32[544648>>2]|0;
      $130 = $127 ? $128 : $129;
      (_fflush($130)|0);
     }
     HEAP8[(259375)>>0] = 1;
     $131 = HEAP32[(20)>>2]|0;
     $132 = ($131|0)!=(0|0);
     if ($132) {
      $133 = HEAP32[8>>2]|0;
      $134 = ((($133)) + 8|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = HEAP32[(20)>>2]|0;
      (FUNCTION_TABLE_ii[$135 & 511]($136)|0);
     }
    }
   }
  }
 } while(0);
 $137 = $focus;
 $138 = $137&1;
 $139 = $138&1;
 HEAP8[739217>>0] = $139;
 $140 = $new_state;
 $141 = $140&1;
 $142 = $141&1;
 HEAP8[739216>>0] = $142;
 STACKTOP = sp;return;
}
function _check_oneshot() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_rewind_state = 0, $new_state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_input_key_pressed_func(36)|0);
 $1 = $0&1;
 $new_state = $1;
 $2 = $new_state;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP8[739218>>0]|0;
  $5 = $4&1;
  $6 = $5 ^ 1;
  $8 = $6;
 } else {
  $8 = 0;
 }
 $7 = $8&1;
 HEAP8[(259376)>>0] = $7;
 $9 = $new_state;
 $10 = $9&1;
 $11 = $10&1;
 HEAP8[739218>>0] = $11;
 $12 = (_input_key_pressed_func(33)|0);
 $13 = $12&1;
 $new_rewind_state = $13;
 $14 = $new_rewind_state;
 $15 = $14&1;
 if ($15) {
  $16 = HEAP8[739219>>0]|0;
  $17 = $16&1;
  $18 = $17 ^ 1;
  $20 = $18;
 } else {
  $20 = 0;
 }
 $19 = $20&1;
 $21 = HEAP8[(259376)>>0]|0;
 $22 = $21&1;
 $23 = $22&1;
 $24 = $23 | $19;
 $25 = ($24|0)!=(0);
 $26 = $25&1;
 HEAP8[(259376)>>0] = $26;
 $27 = $new_rewind_state;
 $28 = $27&1;
 $29 = $28&1;
 HEAP8[739219>>0] = $29;
 STACKTOP = sp;return;
}
function _check_fullscreen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pressed = 0, $toggle = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_input_key_pressed_func(29)|0);
 $1 = $0&1;
 $pressed = $1;
 $2 = $pressed;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP8[739220>>0]|0;
  $5 = $4&1;
  $6 = $5 ^ 1;
  $8 = $6;
 } else {
  $8 = 0;
 }
 $7 = $8&1;
 $toggle = $7;
 $9 = $toggle;
 $10 = $9&1;
 if ($10) {
  _settings_set(33554432,0);
  $11 = HEAP8[(296)>>0]|0;
  $12 = $11&1;
  _rarch_set_fullscreen($12);
 }
 $13 = $pressed;
 $14 = $13&1;
 $15 = $14&1;
 HEAP8[739220>>0] = $15;
 $16 = $toggle;
 $17 = $16&1;
 STACKTOP = sp;return ($17|0);
}
function _check_fast_forward_button() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_button_state = 0, $new_hold_button_state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_input_key_pressed_func(25)|0);
 $1 = $0&1;
 $new_button_state = $1;
 $2 = (_input_key_pressed_func(26)|0);
 $3 = $2&1;
 $new_hold_button_state = $3;
 $4 = $new_button_state;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP8[739221>>0]|0;
  $7 = $6&1;
  if ($7) {
   label = 4;
  } else {
   $8 = HEAP8[(40)>>0]|0;
   $9 = $8&1;
   $10 = $9 ^ 1;
   $11 = $10&1;
   HEAP8[(40)>>0] = $11;
   $12 = HEAP8[(40)>>0]|0;
   $13 = $12&1;
   _driver_set_nonblock_state($13);
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $14 = HEAP8[739222>>0]|0;
  $15 = $14&1;
  $16 = $15&1;
  $17 = $new_hold_button_state;
  $18 = $17&1;
  $19 = $18&1;
  $20 = ($16|0)!=($19|0);
  if ($20) {
   $21 = $new_hold_button_state;
   $22 = $21&1;
   $23 = $22&1;
   HEAP8[(40)>>0] = $23;
   $24 = HEAP8[(40)>>0]|0;
   $25 = $24&1;
   _driver_set_nonblock_state($25);
  }
 }
 $26 = $new_button_state;
 $27 = $26&1;
 $28 = $27&1;
 HEAP8[739221>>0] = $28;
 $29 = $new_hold_button_state;
 $30 = $29&1;
 $31 = $30&1;
 HEAP8[739222>>0] = $31;
 STACKTOP = sp;return;
}
function _check_stateslots() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $should_slot_decrease = 0, $should_slot_increase = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_input_key_pressed_func(31)|0);
 $1 = $0&1;
 $should_slot_increase = $1;
 $2 = $should_slot_increase;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP8[739223>>0]|0;
  $5 = $4&1;
  if (!($5)) {
   _rarch_state_slot_increase();
  }
 }
 $6 = $should_slot_increase;
 $7 = $6&1;
 $8 = $7&1;
 HEAP8[739223>>0] = $8;
 $9 = (_input_key_pressed_func(32)|0);
 $10 = $9&1;
 $should_slot_decrease = $10;
 $11 = $should_slot_decrease;
 $12 = $11&1;
 if ($12) {
  $13 = HEAP8[739224>>0]|0;
  $14 = $13&1;
  if (!($14)) {
   _rarch_state_slot_decrease();
  }
 }
 $15 = $should_slot_decrease;
 $16 = $15&1;
 $17 = $16&1;
 HEAP8[739224>>0] = $17;
 STACKTOP = sp;return;
}
function _check_savestates($immutable) {
 $immutable = $immutable|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $should_loadstate = 0, $should_savestate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $immutable&1;
 $0 = $1;
 $2 = (_input_key_pressed_func(28)|0);
 $3 = $2&1;
 $should_savestate = $3;
 $4 = $should_savestate;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP8[739225>>0]|0;
  $7 = $6&1;
  if (!($7)) {
   _rarch_save_state();
  }
 }
 $8 = $should_savestate;
 $9 = $8&1;
 $10 = $9&1;
 HEAP8[739225>>0] = $10;
 $11 = $0;
 $12 = $11&1;
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (_input_key_pressed_func(27)|0);
 $14 = $13&1;
 $should_loadstate = $14;
 $15 = $should_savestate;
 $16 = $15&1;
 if (!($16)) {
  $17 = $should_loadstate;
  $18 = $17&1;
  if ($18) {
   $19 = HEAP8[739226>>0]|0;
   $20 = $19&1;
   if (!($20)) {
    _rarch_load_state();
   }
  }
 }
 $21 = $should_loadstate;
 $22 = $21&1;
 $23 = $22&1;
 HEAP8[739226>>0] = $23;
 STACKTOP = sp;return;
}
function _check_rewind() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buf = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 _flush_rewind_audio();
 HEAP8[(251168)>>0] = 0;
 $0 = HEAP8[739227>>0]|0;
 $1 = $0&1;
 if ($1) {
  HEAP8[739227>>0] = 0;
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(251156)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (_input_key_pressed_func(33)|0);
 do {
  if ($4) {
   $5 = HEAP32[(251148)>>2]|0;
   _msg_queue_clear($5);
   $6 = HEAP32[(251156)>>2]|0;
   $7 = (_state_manager_pop($6,$buf)|0);
   if (!($7)) {
    $18 = HEAP32[(251148)>>2]|0;
    _msg_queue_push($18,739741,0,30);
    break;
   }
   HEAP8[(251168)>>0] = 1;
   _setup_rewind_audio();
   $8 = HEAP32[(251148)>>2]|0;
   $9 = HEAP8[(259375)>>0]|0;
   $10 = $9&1;
   $11 = $10 ? 1 : 30;
   _msg_queue_push($8,739730,0,$11);
   $12 = HEAP32[265112>>2]|0;
   $13 = HEAP32[$buf>>2]|0;
   $14 = HEAP32[(251164)>>2]|0;
   (FUNCTION_TABLE_iii[$12 & 511]($13,$14)|0);
   $15 = HEAP32[(251172)>>2]|0;
   $16 = ($15|0)!=(0|0);
   if ($16) {
    $17 = HEAP32[(251172)>>2]|0;
    _bsv_movie_frame_rewind($17);
   }
  } else {
   $19 = HEAP32[264708>>2]|0;
   $20 = (($19) + 1)|0;
   $21 = HEAP32[(98516)>>2]|0;
   $22 = ($21|0)!=(0);
   $23 = HEAP32[(98516)>>2]|0;
   $24 = $22 ? $23 : 1;
   $25 = (($20>>>0) % ($24>>>0))&-1;
   HEAP32[264708>>2] = $25;
   $26 = HEAP32[264708>>2]|0;
   $27 = ($26|0)==(0);
   $28 = HEAP32[(251172)>>2]|0;
   $29 = ($28|0)!=(0|0);
   $or$cond = $27 | $29;
   if ($or$cond) {
    $30 = HEAP32[265108>>2]|0;
    $31 = HEAP32[(251160)>>2]|0;
    $32 = HEAP32[(251164)>>2]|0;
    (FUNCTION_TABLE_iii[$30 & 511]($31,$32)|0);
    $33 = HEAP32[(251156)>>2]|0;
    $34 = HEAP32[(251160)>>2]|0;
    (_state_manager_push($33,$34)|0);
   }
  }
 } while(0);
 $35 = HEAP32[265076>>2]|0;
 $36 = HEAP8[(251168)>>0]|0;
 $37 = $36&1;
 $38 = $37 ? 250 : 246;
 FUNCTION_TABLE_vi[$35 & 1023]($38);
 $39 = HEAP32[265080>>2]|0;
 $40 = HEAP8[(251168)>>0]|0;
 $41 = $40&1;
 $42 = $41 ? 251 : 247;
 FUNCTION_TABLE_vi[$39 & 1023]($42);
 STACKTOP = sp;return;
}
function _flush_rewind_audio() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(251168)>>0]|0;
 $1 = $0&1;
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(201764)>>2]|0;
 $3 = HEAP32[(201768)>>2]|0;
 $4 = (($2) + ($3<<1)|0);
 $5 = HEAP32[(201772)>>2]|0;
 $6 = HEAP32[(201768)>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (_audio_flush($4,$7)|0);
 $9 = HEAP8[(102649)>>0]|0;
 $10 = $9&1;
 $11 = $8 ? $10 : 0;
 $12 = $11&1;
 HEAP8[(102649)>>0] = $12;
 return;
}
function _setup_rewind_audio() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(201772)>>2]|0;
 HEAP32[(201768)>>2] = $0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = HEAP32[(201724)>>2]|0;
  $3 = ($1>>>0)<($2>>>0);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (($4) + 1)|0;
  $6 = HEAP32[(201760)>>2]|0;
  $7 = (($6) + ($5<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = HEAP32[(201768)>>2]|0;
  $10 = (($9) + -1)|0;
  HEAP32[(201768)>>2] = $10;
  $11 = HEAP32[(201764)>>2]|0;
  $12 = (($11) + ($10<<1)|0);
  HEAP16[$12>>1] = $8;
  $13 = $i;
  $14 = (($13) + 0)|0;
  $15 = HEAP32[(201760)>>2]|0;
  $16 = (($15) + ($14<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = HEAP32[(201768)>>2]|0;
  $19 = (($18) + -1)|0;
  HEAP32[(201768)>>2] = $19;
  $20 = HEAP32[(201764)>>2]|0;
  $21 = (($20) + ($19<<1)|0);
  HEAP16[$21>>1] = $17;
  $22 = $i;
  $23 = (($22) + 2)|0;
  $i = $23;
 }
 HEAP32[(201724)>>2] = 0;
 STACKTOP = sp;return;
}
function _audio_sample_rewind($left,$right) {
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $right;
 $2 = $1;
 $3 = HEAP32[(201768)>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[(201768)>>2] = $4;
 $5 = HEAP32[(201764)>>2]|0;
 $6 = (($5) + ($4<<1)|0);
 HEAP16[$6>>1] = $2;
 $7 = $0;
 $8 = HEAP32[(201768)>>2]|0;
 $9 = (($8) + -1)|0;
 HEAP32[(201768)>>2] = $9;
 $10 = HEAP32[(201764)>>2]|0;
 $11 = (($10) + ($9<<1)|0);
 HEAP16[$11>>1] = $7;
 STACKTOP = sp;return;
}
function _check_slowmotion() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_input_key_pressed_func(47)|0);
 $1 = $0&1;
 HEAP8[(259377)>>0] = $1;
 $2 = HEAP8[(259377)>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  return;
 }
 $4 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($4);
 $5 = HEAP32[(251148)>>2]|0;
 $6 = HEAP8[(251168)>>0]|0;
 $7 = $6&1;
 $8 = $7 ? 739697 : 739717;
 _msg_queue_push($5,$8,0,30);
 return;
}
function _check_movie() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_button = 0, $pressed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_input_key_pressed_func(34)|0);
 $1 = $0&1;
 $new_button = $1;
 $2 = $new_button;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP8[739228>>0]|0;
  $5 = $4&1;
  $6 = $5 ^ 1;
  $8 = $6;
 } else {
  $8 = 0;
 }
 $7 = $8&1;
 $pressed = $7;
 $9 = HEAP8[(255272)>>0]|0;
 $10 = $9&1;
 $11 = $pressed;
 $12 = $11&1;
 if ($10) {
  _check_movie_playback($12);
 } else {
  _check_movie_record($12);
 }
 $13 = $new_button;
 $14 = $13&1;
 $15 = $14&1;
 HEAP8[739228>>0] = $15;
 STACKTOP = sp;return;
}
function _check_movie_playback($pressed) {
 $pressed = $pressed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $pressed&1;
 $0 = $1;
 $2 = HEAP8[(259371)>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  $4 = $0;
  $5 = $4&1;
  if (!($5)) {
   STACKTOP = sp;return;
  }
 }
 $6 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($6,739641,1,180);
 $7 = HEAP8[102648>>0]|0;
 $8 = $7&1;
 if ($8) {
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  (_fprintf($13,739663,$vararg_buffer)|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = ($14|0)!=(0|0);
  $16 = HEAP32[(259664)>>2]|0;
  $17 = HEAP32[544648>>2]|0;
  $18 = $15 ? $16 : $17;
  (_fflush($18)|0);
 }
 $19 = HEAP32[(251172)>>2]|0;
 _bsv_movie_free($19);
 HEAP32[(251172)>>2] = 0;
 HEAP8[(259371)>>0] = 0;
 HEAP8[(255272)>>0] = 0;
 STACKTOP = sp;return;
}
function _check_movie_record($pressed) {
 $pressed = $pressed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pressed&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 if ($3) {
  _movie_record_toggle();
 }
 STACKTOP = sp;return;
}
function _movie_record_toggle() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $path = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $path = sp + 4144|0;
 $msg = sp + 48|0;
 $0 = HEAP32[(251172)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(251148)>>2]|0;
  _msg_queue_clear($2);
  $3 = HEAP32[(251148)>>2]|0;
  _msg_queue_push($3,739411,2,180);
  $4 = HEAP8[102648>>0]|0;
  $5 = $4&1;
  if ($5) {
   $6 = HEAP32[(259664)>>2]|0;
   $7 = ($6|0)!=(0|0);
   $8 = HEAP32[(259664)>>2]|0;
   $9 = HEAP32[544648>>2]|0;
   $10 = $7 ? $8 : $9;
   (_fprintf($10,739434,$vararg_buffer)|0);
   $11 = HEAP32[(259664)>>2]|0;
   $12 = ($11|0)!=(0|0);
   $13 = HEAP32[(259664)>>2]|0;
   $14 = HEAP32[544648>>2]|0;
   $15 = $12 ? $13 : $14;
   (_fflush($15)|0);
  }
  $16 = HEAP32[(251172)>>2]|0;
  _bsv_movie_free($16);
  HEAP32[(251172)>>2] = 0;
  STACKTOP = sp;return;
 }
 HEAP32[(98516)>>2] = 1;
 $17 = HEAP32[(196888)>>2]|0;
 $18 = ($17>>>0)>(0);
 if ($18) {
  $19 = HEAP32[(196888)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = (251176);
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $19;
  (_snprintf($path,4096,739469,$vararg_buffer1)|0);
 } else {
  HEAP32[$vararg_buffer4>>2] = (251176);
  (_snprintf($path,4096,739478,$vararg_buffer4)|0);
 }
 HEAP32[$vararg_buffer7>>2] = $path;
 (_snprintf($msg,4096,739485,$vararg_buffer7)|0);
 $20 = (_bsv_movie_init($path,1)|0);
 HEAP32[(251172)>>2] = $20;
 $21 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($21);
 $22 = HEAP32[(251148)>>2]|0;
 $23 = HEAP32[(251172)>>2]|0;
 $24 = ($23|0)!=(0|0);
 $25 = $24 ? $msg : 739516;
 _msg_queue_push($22,$25,1,180);
 $26 = HEAP32[(251172)>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $40 = HEAP32[(259664)>>2]|0;
  $41 = ($40|0)!=(0|0);
  $42 = HEAP32[(259664)>>2]|0;
  $43 = HEAP32[544648>>2]|0;
  $44 = $41 ? $42 : $43;
  (_fprintf($44,739589,$vararg_buffer13)|0);
  $45 = HEAP32[(259664)>>2]|0;
  $46 = ($45|0)!=(0|0);
  $47 = HEAP32[(259664)>>2]|0;
  $48 = HEAP32[544648>>2]|0;
  $49 = $46 ? $47 : $48;
  (_fflush($49)|0);
  STACKTOP = sp;return;
 }
 $28 = HEAP8[102648>>0]|0;
 $29 = $28&1;
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = HEAP32[(259664)>>2]|0;
 $31 = ($30|0)!=(0|0);
 $32 = HEAP32[(259664)>>2]|0;
 $33 = HEAP32[544648>>2]|0;
 $34 = $31 ? $32 : $33;
 HEAP32[$vararg_buffer10>>2] = $path;
 (_fprintf($34,739546,$vararg_buffer10)|0);
 $35 = HEAP32[(259664)>>2]|0;
 $36 = ($35|0)!=(0|0);
 $37 = HEAP32[(259664)>>2]|0;
 $38 = HEAP32[544648>>2]|0;
 $39 = $36 ? $37 : $38;
 (_fflush($39)|0);
 STACKTOP = sp;return;
}
function _check_shader_dir() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ext = 0, $msg = 0, $pressed_next = 0, $pressed_prev = 0, $shader = 0, $should_apply = 0;
 var $type = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $msg = sp + 32|0;
 $0 = HEAP32[(259500)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(12)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $should_apply = 0;
 $6 = (_input_key_pressed_func(38)|0);
 $7 = $6&1;
 $pressed_next = $7;
 $8 = (_input_key_pressed_func(39)|0);
 $9 = $8&1;
 $pressed_prev = $9;
 $10 = $pressed_next;
 $11 = $10&1;
 if ($11) {
  $12 = HEAP8[739229>>0]|0;
  $13 = $12&1;
  if ($13) {
   label = 6;
  } else {
   $should_apply = 1;
   $14 = HEAP32[(259504)>>2]|0;
   $15 = (($14) + 1)|0;
   $16 = HEAP32[(259500)>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($15>>>0) % ($18>>>0))&-1;
   HEAP32[(259504)>>2] = $19;
  }
 } else {
  label = 6;
 }
 do {
  if ((label|0) == 6) {
   $20 = $pressed_prev;
   $21 = $20&1;
   if ($21) {
    $22 = HEAP8[739230>>0]|0;
    $23 = $22&1;
    if (!($23)) {
     $should_apply = 1;
     $24 = HEAP32[(259504)>>2]|0;
     $25 = ($24|0)==(0);
     if ($25) {
      $26 = HEAP32[(259500)>>2]|0;
      $27 = ((($26)) + 4|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = (($28) - 1)|0;
      HEAP32[(259504)>>2] = $29;
      break;
     } else {
      $30 = HEAP32[(259504)>>2]|0;
      $31 = (($30) + -1)|0;
      HEAP32[(259504)>>2] = $31;
      break;
     }
    }
   }
  }
 } while(0);
 $32 = $should_apply;
 $33 = $32&1;
 if ($33) {
  $34 = HEAP32[(259504)>>2]|0;
  $35 = HEAP32[(259500)>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($34<<3)|0);
  $38 = HEAP32[$37>>2]|0;
  $shader = $38;
  $type = 3;
  $39 = $shader;
  $40 = (_strrchr($39,46)|0);
  $ext = $40;
  $41 = $ext;
  $42 = ($41|0)!=(0|0);
  do {
   if ($42) {
    $43 = $ext;
    $44 = (_strcmp($43,739297)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $type = 2;
     break;
    }
    $46 = $ext;
    $47 = (_strcmp($46,739305)|0);
    $48 = ($47|0)==(0);
    if (!($48)) {
     $49 = $ext;
     $50 = (_strcmp($49,739309)|0);
     $51 = ($50|0)==(0);
     if (!($51)) {
      break;
     }
    }
    $type = 0;
   }
  } while(0);
  $52 = $type;
  $53 = ($52|0)==(3);
  if ($53) {
   STACKTOP = sp;return;
  }
  $54 = HEAP32[(251148)>>2]|0;
  _msg_queue_clear($54);
  $55 = HEAP32[(259504)>>2]|0;
  $56 = $shader;
  HEAP32[$vararg_buffer>>2] = $55;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $56;
  (_snprintf($msg,512,739314,$vararg_buffer)|0);
  $57 = HEAP32[(251148)>>2]|0;
  _msg_queue_push($57,$msg,1,120);
  $58 = HEAP8[102648>>0]|0;
  $59 = $58&1;
  if ($59) {
   $60 = HEAP32[(259664)>>2]|0;
   $61 = ($60|0)!=(0|0);
   $62 = HEAP32[(259664)>>2]|0;
   $63 = HEAP32[544648>>2]|0;
   $64 = $61 ? $62 : $63;
   $65 = $shader;
   HEAP32[$vararg_buffer2>>2] = $65;
   (_fprintf($64,739332,$vararg_buffer2)|0);
   $66 = HEAP32[(259664)>>2]|0;
   $67 = ($66|0)!=(0|0);
   $68 = HEAP32[(259664)>>2]|0;
   $69 = HEAP32[544648>>2]|0;
   $70 = $67 ? $68 : $69;
   (_fflush($70)|0);
  }
  $71 = HEAP32[(12)>>2]|0;
  $72 = ((($71)) + 20|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = HEAP32[(24)>>2]|0;
  $75 = $type;
  $76 = $shader;
  $77 = (FUNCTION_TABLE_iiii[$73 & 1023]($74,$75,$76)|0);
  if (!($77)) {
   $78 = HEAP32[(259664)>>2]|0;
   $79 = ($78|0)!=(0|0);
   $80 = HEAP32[(259664)>>2]|0;
   $81 = HEAP32[544648>>2]|0;
   $82 = $79 ? $80 : $81;
   (_fprintf($82,739366,$vararg_buffer5)|0);
   $83 = HEAP32[(259664)>>2]|0;
   $84 = ($83|0)!=(0|0);
   $85 = HEAP32[(259664)>>2]|0;
   $86 = HEAP32[544648>>2]|0;
   $87 = $84 ? $85 : $86;
   (_fflush($87)|0);
  }
 }
 $88 = $pressed_next;
 $89 = $88&1;
 $90 = $89&1;
 HEAP8[739229>>0] = $90;
 $91 = $pressed_prev;
 $92 = $91&1;
 $93 = $92&1;
 HEAP8[739230>>0] = $93;
 STACKTOP = sp;return;
}
function _check_cheats() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pressed_next = 0, $pressed_prev = 0, $pressed_toggle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(259576)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (_input_key_pressed_func(40)|0);
 $3 = $2&1;
 $pressed_next = $3;
 $4 = (_input_key_pressed_func(41)|0);
 $5 = $4&1;
 $pressed_prev = $5;
 $6 = (_input_key_pressed_func(42)|0);
 $7 = $6&1;
 $pressed_toggle = $7;
 $8 = $pressed_next;
 $9 = $8&1;
 if ($9) {
  $10 = HEAP8[739232>>0]|0;
  $11 = $10&1;
  if ($11) {
   label = 5;
  } else {
   $12 = HEAP32[(259576)>>2]|0;
   _cheat_manager_index_next($12);
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   $13 = $pressed_prev;
   $14 = $13&1;
   if ($14) {
    $15 = HEAP8[739231>>0]|0;
    $16 = $15&1;
    if (!($16)) {
     $17 = HEAP32[(259576)>>2]|0;
     _cheat_manager_index_prev($17);
     break;
    }
   }
   $18 = $pressed_toggle;
   $19 = $18&1;
   if ($19) {
    $20 = HEAP8[739233>>0]|0;
    $21 = $20&1;
    if (!($21)) {
     $22 = HEAP32[(259576)>>2]|0;
     _cheat_manager_toggle($22);
    }
   }
  }
 } while(0);
 $23 = $pressed_prev;
 $24 = $23&1;
 $25 = $24&1;
 HEAP8[739231>>0] = $25;
 $26 = $pressed_next;
 $27 = $26&1;
 $28 = $27&1;
 HEAP8[739232>>0] = $28;
 $29 = $pressed_toggle;
 $30 = $29&1;
 $31 = $30&1;
 HEAP8[739233>>0] = $31;
 STACKTOP = sp;return;
}
function _check_disk() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $control = 0, $current = 0, $new_state = 0, $next_index = 0, $num_disks = 0, $or$cond = 0, $pressed_eject = 0, $pressed_next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $control = (201612);
 $0 = $control;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (_input_key_pressed_func(52)|0);
 $5 = $4&1;
 $pressed_eject = $5;
 $6 = (_input_key_pressed_func(53)|0);
 $7 = $6&1;
 $pressed_next = $7;
 $8 = $pressed_eject;
 $9 = $8&1;
 if ($9) {
  $10 = HEAP8[739234>>0]|0;
  $11 = $10&1;
  if ($11) {
   label = 5;
  } else {
   $12 = $control;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (FUNCTION_TABLE_i[$14 & 511]()|0);
   $16 = $15 ^ 1;
   $17 = $16&1;
   $new_state = $17;
   $18 = $new_state;
   $19 = $18&1;
   _rarch_disk_control_set_eject($19,1);
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   $20 = $pressed_next;
   $21 = $20&1;
   if ($21) {
    $22 = HEAP8[739235>>0]|0;
    $23 = $22&1;
    if (!($23)) {
     $24 = $control;
     $25 = ((($24)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (FUNCTION_TABLE_i[$26 & 511]()|0);
     $num_disks = $27;
     $28 = $control;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_i[$30 & 511]()|0);
     $current = $31;
     $32 = $num_disks;
     $33 = ($32|0)!=(0);
     $34 = $num_disks;
     $35 = ($34|0)!=(-1);
     $or$cond = $33 & $35;
     if (!($or$cond)) {
      $46 = HEAP32[(259664)>>2]|0;
      $47 = ($46|0)!=(0|0);
      $48 = HEAP32[(259664)>>2]|0;
      $49 = HEAP32[544648>>2]|0;
      $50 = $47 ? $48 : $49;
      (_fprintf($50,739237,$vararg_buffer)|0);
      $51 = HEAP32[(259664)>>2]|0;
      $52 = ($51|0)!=(0|0);
      $53 = HEAP32[(259664)>>2]|0;
      $54 = HEAP32[544648>>2]|0;
      $55 = $52 ? $53 : $54;
      (_fflush($55)|0);
      break;
     }
     $36 = $current;
     $37 = $num_disks;
     $38 = ($36>>>0)>=($37>>>0);
     if ($38) {
      $44 = 0;
     } else {
      $39 = $current;
      $40 = (($39) + 1)|0;
      $41 = $num_disks;
      $42 = (($41) + 1)|0;
      $43 = (($40>>>0) % ($42>>>0))&-1;
      $44 = $43;
     }
     $next_index = $44;
     $45 = $next_index;
     _rarch_disk_control_set_index($45);
    }
   }
  }
 } while(0);
 $56 = $pressed_eject;
 $57 = $56&1;
 $58 = $57&1;
 HEAP8[739234>>0] = $58;
 $59 = $pressed_next;
 $60 = $59&1;
 $61 = $60&1;
 HEAP8[739235>>0] = $61;
 STACKTOP = sp;return;
}
function _check_reset() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $new_state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_input_key_pressed_func(37)|0);
 $1 = $0&1;
 $new_state = $1;
 $2 = $new_state;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP8[739236>>0]|0;
  $5 = $4&1;
  if (!($5)) {
   _rarch_game_reset();
  }
 }
 $6 = $new_state;
 $7 = $6&1;
 $8 = $7&1;
 HEAP8[739236>>0] = $8;
 STACKTOP = sp;return;
}
function _write_file($path,$data,$size) {
 $path = $path|0;
 $data = $data|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $file = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 17|0;
 $1 = $path;
 $2 = $data;
 $3 = $size;
 $4 = $1;
 $5 = (_fopen($4,839734)|0);
 $file = $5;
 $6 = $file;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  $9 = $3;
  $10 = $file;
  $11 = (_fwrite($8,1,$9,$10)|0);
  $12 = $3;
  $13 = ($11|0)==($12|0);
  $14 = $13&1;
  $ret = $14;
  $15 = $file;
  (_fclose($15)|0);
  $16 = $ret;
  $17 = $16&1;
  $$expand_i1_val2 = $17&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 } else {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _read_file($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $file = 0, $len = 0, $rc = 0, $rom_buf = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $path;
 $2 = $buf;
 $rom_buf = 0;
 $3 = $1;
 $4 = (_fopen($3,840413)|0);
 $file = $4;
 $rc = 0;
 $len = 0;
 $5 = $file;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $file;
   (_fseek($7,0,2)|0);
   $8 = $file;
   $9 = (_ftell($8)|0);
   $len = $9;
   $10 = $file;
   _rewind($10);
   $11 = $len;
   $12 = (($11) + 1)|0;
   $13 = (_malloc($12)|0);
   $rom_buf = $13;
   $14 = $rom_buf;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    $16 = HEAP32[(259664)>>2]|0;
    $17 = ($16|0)!=(0|0);
    $18 = HEAP32[(259664)>>2]|0;
    $19 = HEAP32[544648>>2]|0;
    $20 = $17 ? $18 : $19;
    (_fprintf($20,745599,$vararg_buffer)|0);
    $21 = HEAP32[(259664)>>2]|0;
    $22 = ($21|0)!=(0|0);
    $23 = HEAP32[(259664)>>2]|0;
    $24 = HEAP32[544648>>2]|0;
    $25 = $22 ? $23 : $24;
    (_fflush($25)|0);
    break;
   }
   $26 = $rom_buf;
   $27 = $len;
   $28 = $file;
   $29 = (_fread($26,1,$27,$28)|0);
   $rc = $29;
   $30 = $len;
   $31 = ($29|0)<($30|0);
   if ($31) {
    $32 = HEAP32[(259664)>>2]|0;
    $33 = ($32|0)!=(0|0);
    $34 = HEAP32[(259664)>>2]|0;
    $35 = HEAP32[544648>>2]|0;
    $36 = $33 ? $34 : $35;
    (_fprintf($36,745647,$vararg_buffer1)|0);
    $37 = HEAP32[(259664)>>2]|0;
    $38 = ($37|0)!=(0|0);
    $39 = HEAP32[(259664)>>2]|0;
    $40 = HEAP32[544648>>2]|0;
    $41 = $38 ? $39 : $40;
    (_fflush($41)|0);
   }
   $42 = $rom_buf;
   $43 = $2;
   HEAP32[$43>>2] = $42;
   $44 = $len;
   $45 = $rom_buf;
   $46 = (($45) + ($44)|0);
   HEAP8[$46>>0] = 0;
   $47 = $file;
   (_fclose($47)|0);
   $48 = $rc;
   $0 = $48;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  }
 } while(0);
 $49 = $file;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $file;
  (_fclose($51)|0);
 }
 $52 = $rom_buf;
 _free($52);
 $53 = $2;
 HEAP32[$53>>2] = 0;
 $0 = -1;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _read_file_string($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bufsize = 0, $file = 0, $len = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = $path;
 $2 = $buf;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = (_fopen($4,769700)|0);
 $file = $5;
 $len = 0;
 $ptr = 0;
 $6 = $file;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $file;
  (_fseek($8,0,2)|0);
  $9 = $file;
  $10 = (_ftell($9)|0);
  $11 = (($10) + 2)|0;
  $len = $11;
  $12 = $file;
  _rewind($12);
  $13 = $len;
  $14 = (_calloc($13,1)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  $16 = $2;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $2;
   $20 = HEAP32[$19>>2]|0;
   $ptr = $20;
   while(1) {
    $21 = $ptr;
    $22 = ($21|0)!=(0|0);
    if (!($22)) {
     break;
    }
    $23 = $file;
    $24 = (_feof($23)|0);
    $25 = ($24|0)!=(0);
    $26 = $25 ^ 1;
    if (!($26)) {
     break;
    }
    $27 = $2;
    $28 = HEAP32[$27>>2]|0;
    $29 = $28;
    $30 = $len;
    $31 = (($29) + ($30))|0;
    $32 = $ptr;
    $33 = $32;
    $34 = (($31) - ($33))|0;
    $bufsize = $34;
    $35 = $ptr;
    $36 = $bufsize;
    $37 = $file;
    (_fgets($35,$36,$37)|0);
    $38 = $ptr;
    $39 = (_strlen($38)|0);
    $40 = $ptr;
    $41 = (($40) + ($39)|0);
    $ptr = $41;
   }
   $42 = $ptr;
   $43 = (_strchr($42,-1)|0);
   $ptr = $43;
   $44 = $ptr;
   $45 = ($44|0)!=(0|0);
   if ($45) {
    $46 = $ptr;
    HEAP8[$46>>0] = 0;
   }
   $47 = $file;
   (_fclose($47)|0);
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $56 = $$pre_trunc&1;
   STACKTOP = sp;return ($56|0);
  }
 }
 $48 = $file;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = $file;
  (_fclose($50)|0);
 }
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = $2;
  $55 = HEAP32[$54>>2]|0;
  _free($55);
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $56 = $$pre_trunc&1;
 STACKTOP = sp;return ($56|0);
}
function _save_state($path) {
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $data = 0;
 var $ret = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 41|0;
 $1 = $path;
 $2 = HEAP8[102648>>0]|0;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP32[(259664)>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = HEAP32[544648>>2]|0;
  $8 = $5 ? $6 : $7;
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_fprintf($8,745692,$vararg_buffer)|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = HEAP32[544648>>2]|0;
  $14 = $11 ? $12 : $13;
  (_fflush($14)|0);
 }
 $15 = HEAP32[265104>>2]|0;
 $16 = (FUNCTION_TABLE_i[$15 & 511]()|0);
 $size = $16;
 $17 = $size;
 $18 = ($17|0)==(0);
 if ($18) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $74 = $$pre_trunc&1;
  STACKTOP = sp;return ($74|0);
 }
 $19 = $size;
 $20 = (_malloc($19)|0);
 $data = $20;
 $21 = $data;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $23 = HEAP32[(259664)>>2]|0;
  $24 = ($23|0)!=(0|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = HEAP32[544648>>2]|0;
  $27 = $24 ? $25 : $26;
  (_fprintf($27,745724,$vararg_buffer1)|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = ($28|0)!=(0|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = HEAP32[544648>>2]|0;
  $32 = $29 ? $30 : $31;
  (_fflush($32)|0);
  $$expand_i1_val10 = 0;
  HEAP8[$0>>0] = $$expand_i1_val10;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $74 = $$pre_trunc&1;
  STACKTOP = sp;return ($74|0);
 }
 $33 = HEAP8[102648>>0]|0;
 $34 = $33&1;
 if ($34) {
  $35 = HEAP32[(259664)>>2]|0;
  $36 = ($35|0)!=(0|0);
  $37 = HEAP32[(259664)>>2]|0;
  $38 = HEAP32[544648>>2]|0;
  $39 = $36 ? $37 : $38;
  $40 = $size;
  HEAP32[$vararg_buffer3>>2] = $40;
  (_fprintf($39,745795,$vararg_buffer3)|0);
  $41 = HEAP32[(259664)>>2]|0;
  $42 = ($41|0)!=(0|0);
  $43 = HEAP32[(259664)>>2]|0;
  $44 = HEAP32[544648>>2]|0;
  $45 = $42 ? $43 : $44;
  (_fflush($45)|0);
 }
 $46 = HEAP32[265108>>2]|0;
 $47 = $data;
 $48 = $size;
 $49 = (FUNCTION_TABLE_iii[$46 & 511]($47,$48)|0);
 $50 = $49&1;
 $ret = $50;
 $51 = $ret;
 $52 = $51&1;
 if ($52) {
  $53 = $1;
  $54 = $data;
  $55 = $size;
  $56 = (_write_file($53,$54,$55)|0);
  $57 = $56&1;
  $ret = $57;
 }
 $58 = $ret;
 $59 = $58&1;
 if (!($59)) {
  $60 = HEAP32[(259664)>>2]|0;
  $61 = ($60|0)!=(0|0);
  $62 = HEAP32[(259664)>>2]|0;
  $63 = HEAP32[544648>>2]|0;
  $64 = $61 ? $62 : $63;
  $65 = $1;
  HEAP32[$vararg_buffer6>>2] = $65;
  (_fprintf($64,745829,$vararg_buffer6)|0);
  $66 = HEAP32[(259664)>>2]|0;
  $67 = ($66|0)!=(0|0);
  $68 = HEAP32[(259664)>>2]|0;
  $69 = HEAP32[544648>>2]|0;
  $70 = $67 ? $68 : $69;
  (_fflush($70)|0);
 }
 $71 = $data;
 _free($71);
 $72 = $ret;
 $73 = $72&1;
 $$expand_i1_val12 = $73&1;
 HEAP8[$0>>0] = $$expand_i1_val12;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $74 = $$pre_trunc&1;
 STACKTOP = sp;return ($74|0);
}
function _load_state($path) {
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $block_buf = 0, $block_size = 0, $block_type = 0, $buf = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $i5 = 0, $ptr = 0, $ptr4 = 0, $ret = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 93|0;
 $buf = sp + 84|0;
 $block_buf = sp + 72|0;
 $block_type = sp + 64|0;
 $block_size = sp + 56|0;
 $1 = $path;
 $2 = HEAP8[102648>>0]|0;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP32[(259664)>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = HEAP32[544648>>2]|0;
  $8 = $5 ? $6 : $7;
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_fprintf($8,745881,$vararg_buffer)|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = HEAP32[544648>>2]|0;
  $14 = $11 ? $12 : $13;
  (_fflush($14)|0);
 }
 HEAP32[$buf>>2] = 0;
 $15 = $1;
 $16 = (_read_file($15,$buf)|0);
 $size = $16;
 $17 = $size;
 $18 = ($17|0)<(0);
 if ($18) {
  $19 = HEAP32[(259664)>>2]|0;
  $20 = ($19|0)!=(0|0);
  $21 = HEAP32[(259664)>>2]|0;
  $22 = HEAP32[544648>>2]|0;
  $23 = $20 ? $21 : $22;
  $24 = $1;
  HEAP32[$vararg_buffer1>>2] = $24;
  (_fprintf($23,745914,$vararg_buffer1)|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = ($25|0)!=(0|0);
  $27 = HEAP32[(259664)>>2]|0;
  $28 = HEAP32[544648>>2]|0;
  $29 = $26 ? $27 : $28;
  (_fflush($29)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $157 = $$pre_trunc&1;
  STACKTOP = sp;return ($157|0);
 }
 $ret = 1;
 $30 = HEAP8[102648>>0]|0;
 $31 = $30&1;
 if ($31) {
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  $37 = $size;
  HEAP32[$vararg_buffer4>>2] = $37;
  (_fprintf($36,745968,$vararg_buffer4)|0);
  $38 = HEAP32[(259664)>>2]|0;
  $39 = ($38|0)!=(0|0);
  $40 = HEAP32[(259664)>>2]|0;
  $41 = HEAP32[544648>>2]|0;
  $42 = $39 ? $40 : $41;
  (_fflush($42)|0);
 }
 ;HEAP32[$block_buf>>2]=0|0;HEAP32[$block_buf+4>>2]=0|0;
 ;HEAP32[$block_type>>2]=HEAP32[264712>>2]|0;HEAP32[$block_type+4>>2]=HEAP32[264712+4>>2]|0;
 ;HEAP32[$block_size>>2]=0|0;HEAP32[$block_size+4>>2]=0|0;
 $43 = HEAP8[(98536)>>0]|0;
 $44 = $43&1;
 L11: do {
  if ($44) {
   $45 = HEAP8[102648>>0]|0;
   $46 = $45&1;
   if ($46) {
    $47 = HEAP32[(259664)>>2]|0;
    $48 = ($47|0)!=(0|0);
    $49 = HEAP32[(259664)>>2]|0;
    $50 = HEAP32[544648>>2]|0;
    $51 = $48 ? $49 : $50;
    (_fprintf($51,746002,$vararg_buffer7)|0);
    $52 = HEAP32[(259664)>>2]|0;
    $53 = ($52|0)!=(0|0);
    $54 = HEAP32[(259664)>>2]|0;
    $55 = HEAP32[544648>>2]|0;
    $56 = $53 ? $54 : $55;
    (_fflush($56)|0);
   }
   $57 = HEAP32[(106752)>>2]|0;
   switch ($57|0) {
   case 0:  {
    HEAP32[$block_type>>2] = 0;
    $58 = ((($block_type)) + 4|0);
    HEAP32[$58>>2] = 1;
    break L11;
    break;
   }
   case 3: case 2:  {
    HEAP32[$block_type>>2] = 256;
    $59 = ((($block_type)) + 4|0);
    HEAP32[$59>>2] = 512;
    break L11;
    break;
   }
   case 4:  {
    HEAP32[$block_type>>2] = 768;
    $60 = ((($block_type)) + 4|0);
    HEAP32[$60>>2] = 1024;
    break L11;
    break;
   }
   case 1:  {
    HEAP32[$block_type>>2] = 1280;
    $61 = ((($block_type)) + 4|0);
    HEAP32[$61>>2] = 1537;
    break L11;
    break;
   }
   default: {
    break L11;
   }
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $62 = $i;
  $63 = ($62>>>0)<(2);
  if (!($63)) {
   break;
  }
  $64 = $i;
  $65 = (($block_type) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)!=(-1);
  if ($67) {
   $68 = HEAP32[265144>>2]|0;
   $69 = $i;
   $70 = (($block_type) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (FUNCTION_TABLE_ii[$68 & 511]($71)|0);
   $73 = $i;
   $74 = (($block_size) + ($73<<2)|0);
   HEAP32[$74>>2] = $72;
  }
  $75 = $i;
  $76 = (($75) + 1)|0;
  $i = $76;
 }
 $i1 = 0;
 while(1) {
  $77 = $i1;
  $78 = ($77>>>0)<(2);
  if (!($78)) {
   break;
  }
  $79 = $i1;
  $80 = (($block_size) + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $i1;
   $84 = (($block_size) + ($83<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (_malloc($85)|0);
   $87 = $i1;
   $88 = (($block_buf) + ($87<<2)|0);
   HEAP32[$88>>2] = $86;
  }
  $89 = $i1;
  $90 = (($89) + 1)|0;
  $i1 = $90;
 }
 $i2 = 0;
 while(1) {
  $91 = $i2;
  $92 = ($91>>>0)<(2);
  if (!($92)) {
   break;
  }
  $93 = $i2;
  $94 = (($block_buf) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)!=(0|0);
  if ($96) {
   $97 = HEAP32[265140>>2]|0;
   $98 = $i2;
   $99 = (($block_type) + ($98<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (FUNCTION_TABLE_ii[$97 & 511]($100)|0);
   $ptr = $101;
   $102 = $ptr;
   $103 = ($102|0)!=(0|0);
   if ($103) {
    $104 = $i2;
    $105 = (($block_buf) + ($104<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $ptr;
    $108 = $i2;
    $109 = (($block_size) + ($108<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    _memcpy(($106|0),($107|0),($110|0))|0;
   }
  }
  $111 = $i2;
  $112 = (($111) + 1)|0;
  $i2 = $112;
 }
 $113 = HEAP32[265112>>2]|0;
 $114 = HEAP32[$buf>>2]|0;
 $115 = $size;
 $116 = (FUNCTION_TABLE_iii[$113 & 511]($114,$115)|0);
 $117 = $116&1;
 $ret = $117;
 $i3 = 0;
 while(1) {
  $118 = $i3;
  $119 = ($118>>>0)<(2);
  $120 = $ret;
  $121 = $120&1;
  $122 = $119 ? $121 : 0;
  if (!($122)) {
   break;
  }
  $123 = $i3;
  $124 = (($block_buf) + ($123<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)!=(0|0);
  if ($126) {
   $127 = HEAP32[265140>>2]|0;
   $128 = $i3;
   $129 = (($block_type) + ($128<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$127 & 511]($130)|0);
   $ptr4 = $131;
   $132 = $ptr4;
   $133 = ($132|0)!=(0|0);
   if ($133) {
    $134 = $ptr4;
    $135 = $i3;
    $136 = (($block_buf) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $i3;
    $139 = (($block_size) + ($138<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    _memcpy(($134|0),($137|0),($140|0))|0;
   }
  }
  $141 = $i3;
  $142 = (($141) + 1)|0;
  $i3 = $142;
 }
 $i5 = 0;
 while(1) {
  $143 = $i5;
  $144 = ($143>>>0)<(2);
  if (!($144)) {
   break;
  }
  $145 = $i5;
  $146 = (($block_buf) + ($145<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147|0)!=(0|0);
  if ($148) {
   $149 = $i5;
   $150 = (($block_buf) + ($149<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   _free($151);
  }
  $152 = $i5;
  $153 = (($152) + 1)|0;
  $i5 = $153;
 }
 $154 = HEAP32[$buf>>2]|0;
 _free($154);
 $155 = $ret;
 $156 = $155&1;
 $$expand_i1_val10 = $156&1;
 HEAP8[$0>>0] = $$expand_i1_val10;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $157 = $$pre_trunc&1;
 STACKTOP = sp;return ($157|0);
}
function _load_ram_file($path,$type) {
 $path = $path|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buf = 0, $data = 0, $or$cond = 0, $rc = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 4|0;
 $0 = $path;
 $1 = $type;
 $2 = HEAP32[265144>>2]|0;
 $3 = $1;
 $4 = (FUNCTION_TABLE_ii[$2 & 511]($3)|0);
 $size = $4;
 $5 = HEAP32[265140>>2]|0;
 $6 = $1;
 $7 = (FUNCTION_TABLE_ii[$5 & 511]($6)|0);
 $data = $7;
 $8 = $size;
 $9 = ($8|0)!=(0);
 $10 = $data;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 & $11;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$buf>>2] = 0;
 $12 = $0;
 $13 = (_read_file($12,$buf)|0);
 $rc = $13;
 $14 = $rc;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = $rc;
  $17 = $size;
  $18 = ($16|0)<=($17|0);
  if ($18) {
   $19 = $data;
   $20 = HEAP32[$buf>>2]|0;
   $21 = $rc;
   _memcpy(($19|0),($20|0),($21|0))|0;
  }
 }
 $22 = HEAP32[$buf>>2]|0;
 _free($22);
 STACKTOP = sp;return;
}
function _save_ram_file($path,$type) {
 $path = $path|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $or$cond = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $path;
 $1 = $type;
 $2 = HEAP32[265144>>2]|0;
 $3 = $1;
 $4 = (FUNCTION_TABLE_ii[$2 & 511]($3)|0);
 $size = $4;
 $5 = HEAP32[265140>>2]|0;
 $6 = $1;
 $7 = (FUNCTION_TABLE_ii[$5 & 511]($6)|0);
 $data = $7;
 $8 = $data;
 $9 = ($8|0)!=(0|0);
 $10 = $size;
 $11 = ($10>>>0)>(0);
 $or$cond = $9 & $11;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = $data;
 $14 = $size;
 $15 = (_write_file($12,$13,$14)|0);
 if (!($15)) {
  $16 = HEAP32[(259664)>>2]|0;
  $17 = ($16|0)!=(0|0);
  $18 = HEAP32[(259664)>>2]|0;
  $19 = HEAP32[544648>>2]|0;
  $20 = $17 ? $18 : $19;
  (_fprintf($20,746039,$vararg_buffer)|0);
  $21 = HEAP32[(259664)>>2]|0;
  $22 = ($21|0)!=(0|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = HEAP32[544648>>2]|0;
  $25 = $22 ? $23 : $24;
  (_fflush($25)|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  (_fprintf($30,746082,$vararg_buffer2)|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = HEAP32[(259664)>>2]|0;
  $34 = HEAP32[544648>>2]|0;
  $35 = $32 ? $33 : $34;
  (_fflush($35)|0);
  $36 = $data;
  $37 = $size;
  $38 = $1;
  _dump_to_file_desperate($36,$37,$38);
  STACKTOP = sp;return;
 }
 $39 = HEAP8[102648>>0]|0;
 $40 = $39&1;
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = HEAP32[(259664)>>2]|0;
 $42 = ($41|0)!=(0|0);
 $43 = HEAP32[(259664)>>2]|0;
 $44 = HEAP32[544648>>2]|0;
 $45 = $42 ? $43 : $44;
 $46 = $0;
 HEAP32[$vararg_buffer4>>2] = $46;
 (_fprintf($45,746129,$vararg_buffer4)|0);
 $47 = HEAP32[(259664)>>2]|0;
 $48 = ($47|0)!=(0|0);
 $49 = HEAP32[(259664)>>2]|0;
 $50 = HEAP32[544648>>2]|0;
 $51 = $48 ? $49 : $50;
 (_fflush($51)|0);
 STACKTOP = sp;return;
}
function _init_rom_file($type) {
 $type = $type|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = $type;
 $2 = HEAP8[(139538)>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = HEAP8[(196988)>>0]|0;
   $6 = $5&1;
   if ($6) {
    label = 8;
   } else {
    $7 = (_path_get_extension((139538))|0);
    $ext = $7;
    $8 = $ext;
    $9 = ($8|0)!=(0|0);
    if ($9) {
     $10 = $ext;
     $11 = (_strcasecmp($10,746169)|0);
     $12 = ($11|0)!=(0);
     if ($12) {
      label = 8;
     } else {
      HEAP8[(102652)>>0] = 1;
      $13 = (_zlib_extract_first_rom((139538),4096,(197504))|0);
      if ($13) {
       (_strlcpy_rarch__((102653),(139538),4096)|0);
       label = 8;
       break;
      } else {
       $14 = HEAP32[(259664)>>2]|0;
       $15 = ($14|0)!=(0|0);
       $16 = HEAP32[(259664)>>2]|0;
       $17 = HEAP32[544648>>2]|0;
       $18 = $15 ? $16 : $17;
       HEAP32[$vararg_buffer>>2] = (139538);
       (_fprintf($18,746173,$vararg_buffer)|0);
       $19 = HEAP32[(259664)>>2]|0;
       $20 = ($19|0)!=(0|0);
       $21 = HEAP32[(259664)>>2]|0;
       $22 = HEAP32[544648>>2]|0;
       $23 = $20 ? $21 : $22;
       (_fflush($23)|0);
       HEAP8[(102652)>>0] = 0;
       $$expand_i1_val = 0;
       HEAP8[$0>>0] = $$expand_i1_val;
       break;
      }
     }
    } else {
     label = 8;
    }
   }
  } else {
   label = 8;
  }
 } while(0);
 L9: do {
  if ((label|0) == 8) {
   $24 = $1;
   switch ($24|0) {
   case 1:  {
    $25 = (_load_sgb_rom()|0);
    if (!($25)) {
     $$expand_i1_val4 = 0;
     HEAP8[$0>>0] = $$expand_i1_val4;
     break L9;
    }
    break;
   }
   case 0:  {
    $26 = (_load_normal_rom()|0);
    if (!($26)) {
     $$expand_i1_val6 = 0;
     HEAP8[$0>>0] = $$expand_i1_val6;
     break L9;
    }
    break;
   }
   case 2:  {
    $27 = (_load_bsx_rom(0)|0);
    if (!($27)) {
     $$expand_i1_val8 = 0;
     HEAP8[$0>>0] = $$expand_i1_val8;
     break L9;
    }
    break;
   }
   case 3:  {
    $28 = (_load_bsx_rom(1)|0);
    if (!($28)) {
     $$expand_i1_val10 = 0;
     HEAP8[$0>>0] = $$expand_i1_val10;
     break L9;
    }
    break;
   }
   case 4:  {
    $29 = (_load_sufami_rom()|0);
    if (!($29)) {
     $$expand_i1_val12 = 0;
     HEAP8[$0>>0] = $$expand_i1_val12;
     break L9;
    }
    break;
   }
   default: {
    $30 = HEAP32[(259664)>>2]|0;
    $31 = ($30|0)!=(0|0);
    $32 = HEAP32[(259664)>>2]|0;
    $33 = HEAP32[544648>>2]|0;
    $34 = $31 ? $32 : $33;
    (_fprintf($34,746239,$vararg_buffer1)|0);
    $35 = HEAP32[(259664)>>2]|0;
    $36 = ($35|0)!=(0|0);
    $37 = HEAP32[(259664)>>2]|0;
    $38 = HEAP32[544648>>2]|0;
    $39 = $36 ? $37 : $38;
    (_fflush($39)|0);
    $$expand_i1_val14 = 0;
    HEAP8[$0>>0] = $$expand_i1_val14;
    break L9;
   }
   }
   $$expand_i1_val16 = 1;
   HEAP8[$0>>0] = $$expand_i1_val16;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $40 = $$pre_trunc&1;
 STACKTOP = sp;return ($40|0);
}
function _dump_to_file_desperate($data,$size,$type) {
 $data = $data|0;
 $size = $size|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base = 0, $path = 0, $time_ = 0, $timebuf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $path = sp + 4136|0;
 $timebuf = sp + 40|0;
 $time_ = sp + 20|0;
 $0 = $data;
 $1 = $size;
 $2 = $type;
 $3 = (_getenv((752183|0))|0);
 $base = $3;
 $4 = $base;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $base;
  HEAP32[$vararg_buffer>>2] = $6;
  (_snprintf($path,4096,747096,$vararg_buffer)|0);
  (_time(($time_|0))|0);
  $7 = (_localtime(($time_|0))|0);
  (_strftime(($timebuf|0),4096,(747119|0),($7|0))|0);
  (_strlcat_rarch__($path,$timebuf,4096)|0);
  $8 = $2;
  $9 = (_ramtype2str($8)|0);
  (_strlcat_rarch__($path,$9,4096)|0);
  $10 = $0;
  $11 = $1;
  $12 = (_write_file($path,$10,$11)|0);
  if ($12) {
   $13 = HEAP32[(259664)>>2]|0;
   $14 = ($13|0)!=(0|0);
   $15 = HEAP32[(259664)>>2]|0;
   $16 = HEAP32[544648>>2]|0;
   $17 = $14 ? $15 : $16;
   HEAP32[$vararg_buffer1>>2] = $path;
   (_fprintf($17,747137,$vararg_buffer1)|0);
   $18 = HEAP32[(259664)>>2]|0;
   $19 = ($18|0)!=(0|0);
   $20 = HEAP32[(259664)>>2]|0;
   $21 = HEAP32[544648>>2]|0;
   $22 = $19 ? $20 : $21;
   (_fflush($22)|0);
   STACKTOP = sp;return;
  }
 }
 $23 = HEAP32[(259664)>>2]|0;
 $24 = ($23|0)!=(0|0);
 $25 = HEAP32[(259664)>>2]|0;
 $26 = HEAP32[544648>>2]|0;
 $27 = $24 ? $25 : $26;
 (_fprintf($27,747196,$vararg_buffer4)|0);
 $28 = HEAP32[(259664)>>2]|0;
 $29 = ($28|0)!=(0|0);
 $30 = HEAP32[(259664)>>2]|0;
 $31 = HEAP32[544648>>2]|0;
 $32 = $29 ? $30 : $31;
 (_fflush($32)|0);
 STACKTOP = sp;return;
}
function _load_sgb_rom() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $path = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $path = sp;
 $0 = HEAP8[(139538)>>0]|0;
 $1 = $0 << 24 >> 24;
 $2 = ($1|0)!=(0);
 $3 = $2 ? (139538) : 0;
 HEAP32[$path>>2] = $3;
 $4 = ((($path)) + 4|0);
 HEAP32[$4>>2] = (106760);
 $5 = (_load_roms(260,$path,2)|0);
 STACKTOP = sp;return ($5|0);
}
function _load_normal_rom() {
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $path = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $path = sp + 4|0;
 $1 = HEAP8[(260856)>>0]|0;
 $2 = $1&1;
 if ($2) {
  $3 = HEAP8[(196990)>>0]|0;
  $4 = $3&1;
  if ($4) {
   $5 = HEAP32[265124>>2]|0;
   $6 = (FUNCTION_TABLE_ii[$5 & 511](0)|0);
   $$expand_i1_val = $6&1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $22 = $$pre_trunc&1;
   STACKTOP = sp;return ($22|0);
  }
 }
 $7 = HEAP8[(260856)>>0]|0;
 $8 = $7&1;
 if ($8) {
  $9 = HEAP8[(196990)>>0]|0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[(259664)>>2]|0;
   $12 = ($11|0)!=(0|0);
   $13 = HEAP32[(259664)>>2]|0;
   $14 = HEAP32[544648>>2]|0;
   $15 = $12 ? $13 : $14;
   (_fprintf($15,747017,$vararg_buffer)|0);
   $16 = HEAP32[(259664)>>2]|0;
   $17 = ($16|0)!=(0|0);
   $18 = HEAP32[(259664)>>2]|0;
   $19 = HEAP32[544648>>2]|0;
   $20 = $17 ? $18 : $19;
   (_fflush($20)|0);
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $22 = $$pre_trunc&1;
   STACKTOP = sp;return ($22|0);
  }
 }
 HEAP32[$path>>2] = (139538);
 $21 = (_load_roms(0,$path,1)|0);
 $$expand_i1_val4 = $21&1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $22 = $$pre_trunc&1;
 STACKTOP = sp;return ($22|0);
}
function _load_bsx_rom($slotted) {
 $slotted = $slotted|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $path = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $path = sp;
 $1 = $slotted&1;
 $0 = $1;
 $2 = HEAP8[(139538)>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)!=(0);
 $5 = $4 ? (139538) : 0;
 HEAP32[$path>>2] = $5;
 $6 = ((($path)) + 4|0);
 HEAP32[$6>>2] = (110856);
 $7 = $0;
 $8 = $7&1;
 $9 = $8 ? 258 : 257;
 $10 = (_load_roms($9,$path,2)|0);
 STACKTOP = sp;return ($10|0);
}
function _load_sufami_rom() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $path = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $path = sp;
 $0 = HEAP8[(139538)>>0]|0;
 $1 = $0 << 24 >> 24;
 $2 = ($1|0)!=(0);
 $3 = $2 ? (139538) : 0;
 HEAP32[$path>>2] = $3;
 $4 = ((($path)) + 4|0);
 $5 = HEAP8[(114952)>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)!=(0);
 $8 = $7 ? (114952) : 0;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 4|0);
 $10 = HEAP8[(119048)>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)!=(0);
 $13 = $12 ? (119048) : 0;
 HEAP32[$9>>2] = $13;
 $14 = (_load_roms(259,$path,3)|0);
 STACKTOP = sp;return ($14|0);
}
function _ramtype2str($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 256: case 1280: case 0:  {
  $0 = 751562;
  break;
 }
 case 1537: case 1:  {
  $0 = 746994;
  break;
 }
 case 512:  {
  $0 = 746999;
  break;
 }
 case 768:  {
  $0 = 747005;
  break;
 }
 case 1024:  {
  $0 = 747011;
  break;
 }
 default: {
  $0 = 773086;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _load_roms($rom_type,$rom_paths,$roms) {
 $rom_type = $rom_type|0;
 $rom_paths = $rom_paths|0;
 $roms = $roms|0;
 var $$expand_i1_val = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i = 0, $i1 = 0, $info = 0, $ret = 0, $rom_buf = 0, $rom_len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $xml_buf = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 165|0;
 $rom_buf = sp + 136|0;
 $rom_len = sp + 120|0;
 $info = sp + 56|0;
 $1 = $rom_type;
 $2 = $rom_paths;
 $3 = $roms;
 $ret = 1;
 $4 = $3;
 $5 = ($4|0)==(0);
 if ($5) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $156 = $$pre_trunc&1;
  STACKTOP = sp;return ($156|0);
 }
 $6 = $3;
 $7 = ($6>>>0)>(4);
 if ($7) {
  $$expand_i1_val14 = 0;
  HEAP8[$0>>0] = $$expand_i1_val14;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $156 = $$pre_trunc&1;
  STACKTOP = sp;return ($156|0);
 }
 ;HEAP32[$rom_buf>>2]=0|0;HEAP32[$rom_buf+4>>2]=0|0;HEAP32[$rom_buf+8>>2]=0|0;HEAP32[$rom_buf+12>>2]=0|0;
 ;HEAP32[$rom_len>>2]=0|0;HEAP32[$rom_len+4>>2]=0|0;HEAP32[$rom_len+8>>2]=0|0;HEAP32[$rom_len+12>>2]=0|0;
 dest=$info; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = (_load_xml_map((168210))|0);
 $xml_buf = $8;
 $9 = HEAP8[(196924)>>0]|0;
 $10 = $9&1;
 $11 = HEAP8[102648>>0]|0;
 $12 = $11&1;
 do {
  if ($10) {
   if ($12) {
    $52 = HEAP32[(259664)>>2]|0;
    $53 = ($52|0)!=(0|0);
    $54 = HEAP32[(259664)>>2]|0;
    $55 = HEAP32[544648>>2]|0;
    $56 = $53 ? $54 : $55;
    (_fprintf($56,746825,$vararg_buffer6)|0);
    $57 = HEAP32[(259664)>>2]|0;
    $58 = ($57|0)!=(0|0);
    $59 = HEAP32[(259664)>>2]|0;
    $60 = HEAP32[544648>>2]|0;
    $61 = $58 ? $59 : $60;
    (_fflush($61)|0);
    label = 14;
   } else {
    label = 14;
   }
  } else {
   if ($12) {
    $13 = HEAP32[(259664)>>2]|0;
    $14 = ($13|0)!=(0|0);
    $15 = HEAP32[(259664)>>2]|0;
    $16 = HEAP32[544648>>2]|0;
    $17 = $14 ? $15 : $16;
    $18 = $2;
    $19 = HEAP32[$18>>2]|0;
    HEAP32[$vararg_buffer>>2] = $19;
    (_fprintf($17,746712,$vararg_buffer)|0);
    $20 = HEAP32[(259664)>>2]|0;
    $21 = ($20|0)!=(0|0);
    $22 = HEAP32[(259664)>>2]|0;
    $23 = HEAP32[544648>>2]|0;
    $24 = $21 ? $22 : $23;
    (_fflush($24)|0);
   }
   $25 = $2;
   $26 = HEAP32[$25>>2]|0;
   $27 = (_read_rom_file($26,$rom_buf)|0);
   HEAP32[$rom_len>>2] = $27;
   $28 = ($27|0)==(-1);
   if ($28) {
    $29 = HEAP32[(259664)>>2]|0;
    $30 = ($29|0)!=(0|0);
    $31 = HEAP32[(259664)>>2]|0;
    $32 = HEAP32[544648>>2]|0;
    $33 = $30 ? $31 : $32;
    (_fprintf($33,746746,$vararg_buffer1)|0);
    $34 = HEAP32[(259664)>>2]|0;
    $35 = ($34|0)!=(0|0);
    $36 = HEAP32[(259664)>>2]|0;
    $37 = HEAP32[544648>>2]|0;
    $38 = $35 ? $36 : $37;
    (_fflush($38)|0);
    $ret = 0;
    break;
   }
   $39 = HEAP8[102648>>0]|0;
   $40 = $39&1;
   if ($40) {
    $41 = HEAP32[(259664)>>2]|0;
    $42 = ($41|0)!=(0|0);
    $43 = HEAP32[(259664)>>2]|0;
    $44 = HEAP32[544648>>2]|0;
    $45 = $42 ? $43 : $44;
    $46 = HEAP32[$rom_len>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $46;
    (_fprintf($45,746793,$vararg_buffer3)|0);
    $47 = HEAP32[(259664)>>2]|0;
    $48 = ($47|0)!=(0|0);
    $49 = HEAP32[(259664)>>2]|0;
    $50 = HEAP32[544648>>2]|0;
    $51 = $48 ? $49 : $50;
    (_fflush($51)|0);
    label = 14;
   } else {
    label = 14;
   }
  }
 } while(0);
 do {
  if ((label|0) == 14) {
   $62 = $2;
   $63 = HEAP32[$62>>2]|0;
   HEAP32[$info>>2] = $63;
   $64 = HEAP32[$rom_buf>>2]|0;
   $65 = ((($info)) + 4|0);
   HEAP32[$65>>2] = $64;
   $66 = HEAP32[$rom_len>>2]|0;
   $67 = ((($info)) + 8|0);
   HEAP32[$67>>2] = $66;
   $68 = $xml_buf;
   $69 = ((($info)) + 12|0);
   HEAP32[$69>>2] = $68;
   $i = 1;
   while(1) {
    $70 = $i;
    $71 = $3;
    $72 = ($70>>>0)<($71>>>0);
    if (!($72)) {
     break;
    }
    $73 = $i;
    $74 = $2;
    $75 = (($74) + ($73<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(0|0);
    if ($77) {
     $78 = HEAP8[(196924)>>0]|0;
     $79 = $78&1;
     if (!($79)) {
      $80 = $i;
      $81 = $2;
      $82 = (($81) + ($80<<2)|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $i;
      $85 = (($rom_buf) + ($84<<2)|0);
      $86 = (_read_file($83,$85)|0);
      $87 = $i;
      $88 = (($rom_len) + ($87<<2)|0);
      HEAP32[$88>>2] = $86;
      $89 = ($86|0)==(-1);
      if ($89) {
       label = 19;
       break;
      }
     }
    }
    $104 = $i;
    $105 = $2;
    $106 = (($105) + ($104<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $i;
    $109 = (($info) + ($108<<4)|0);
    HEAP32[$109>>2] = $107;
    $110 = $i;
    $111 = (($rom_buf) + ($110<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $i;
    $114 = (($info) + ($113<<4)|0);
    $115 = ((($114)) + 4|0);
    HEAP32[$115>>2] = $112;
    $116 = $i;
    $117 = (($rom_len) + ($116<<2)|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $i;
    $120 = (($info) + ($119<<4)|0);
    $121 = ((($120)) + 8|0);
    HEAP32[$121>>2] = $118;
    $122 = $i;
    $123 = (($122) + 1)|0;
    $i = $123;
   }
   if ((label|0) == 19) {
    $90 = HEAP32[(259664)>>2]|0;
    $91 = ($90|0)!=(0|0);
    $92 = HEAP32[(259664)>>2]|0;
    $93 = HEAP32[544648>>2]|0;
    $94 = $91 ? $92 : $93;
    $95 = $i;
    $96 = $2;
    $97 = (($96) + ($95<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    HEAP32[$vararg_buffer8>>2] = $98;
    (_fprintf($94,746898,$vararg_buffer8)|0);
    $99 = HEAP32[(259664)>>2]|0;
    $100 = ($99|0)!=(0|0);
    $101 = HEAP32[(259664)>>2]|0;
    $102 = HEAP32[544648>>2]|0;
    $103 = $100 ? $101 : $102;
    (_fflush($103)|0);
    $ret = 0;
    break;
   }
   $124 = $1;
   $125 = ($124|0)==(0);
   if ($125) {
    $126 = HEAP32[265124>>2]|0;
    $127 = (FUNCTION_TABLE_ii[$126 & 511]($info)|0);
    $128 = $127&1;
    $ret = $128;
   } else {
    $129 = HEAP32[265128>>2]|0;
    $130 = $1;
    $131 = $3;
    $132 = (FUNCTION_TABLE_iiii[$129 & 1023]($130,$info,$131)|0);
    $133 = $132&1;
    $ret = $133;
   }
   $134 = $ret;
   $135 = $134&1;
   if (!($135)) {
    $136 = HEAP32[(259664)>>2]|0;
    $137 = ($136|0)!=(0|0);
    $138 = HEAP32[(259664)>>2]|0;
    $139 = HEAP32[544648>>2]|0;
    $140 = $137 ? $138 : $139;
    (_fprintf($140,746951,$vararg_buffer11)|0);
    $141 = HEAP32[(259664)>>2]|0;
    $142 = ($141|0)!=(0|0);
    $143 = HEAP32[(259664)>>2]|0;
    $144 = HEAP32[544648>>2]|0;
    $145 = $142 ? $143 : $144;
    (_fflush($145)|0);
   }
  }
 } while(0);
 $i1 = 0;
 while(1) {
  $146 = $i1;
  $147 = ($146>>>0)<(4);
  if (!($147)) {
   break;
  }
  $148 = $i1;
  $149 = (($rom_buf) + ($148<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  _free($150);
  $151 = $i1;
  $152 = (($151) + 1)|0;
  $i1 = $152;
 }
 $153 = $xml_buf;
 _free($153);
 $154 = $ret;
 $155 = $154&1;
 $$expand_i1_val16 = $155&1;
 HEAP8[$0>>0] = $$expand_i1_val16;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $156 = $$pre_trunc&1;
 STACKTOP = sp;return ($156|0);
}
function _load_xml_map($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $xml_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $xml_buf = sp + 4|0;
 $0 = $path;
 HEAP32[$xml_buf>>2] = 0;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($3) {
  $4 = $0;
  $5 = (_read_file_string($4,$xml_buf)|0);
  if ($5) {
   $6 = HEAP8[102648>>0]|0;
   $7 = $6&1;
   if ($7) {
    $8 = HEAP32[(259664)>>2]|0;
    $9 = ($8|0)!=(0|0);
    $10 = HEAP32[(259664)>>2]|0;
    $11 = HEAP32[544648>>2]|0;
    $12 = $9 ? $10 : $11;
    $13 = $0;
    HEAP32[$vararg_buffer>>2] = $13;
    (_fprintf($12,746671,$vararg_buffer)|0);
    $14 = HEAP32[(259664)>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = HEAP32[(259664)>>2]|0;
    $17 = HEAP32[544648>>2]|0;
    $18 = $15 ? $16 : $17;
    (_fflush($18)|0);
   }
  }
 }
 $19 = HEAP32[$xml_buf>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _read_rom_file($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $ret_buf = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret_buf = sp + 12|0;
 $ret = sp + 8|0;
 $1 = $path;
 $2 = $buf;
 HEAP32[$ret_buf>>2] = 0;
 $3 = $1;
 $4 = (_read_file($3,$ret_buf)|0);
 HEAP32[$ret>>2] = $4;
 $5 = HEAP32[$ret>>2]|0;
 $6 = ($5|0)<=(0);
 if ($6) {
  $7 = HEAP32[$ret>>2]|0;
  $0 = $7;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $8 = HEAP8[(184594)>>0]|0;
 $9 = $8&1;
 if (!($9)) {
  _patch_rom($ret_buf,$ret);
 }
 $10 = HEAP32[$ret_buf>>2]|0;
 $11 = HEAP32[$ret>>2]|0;
 $12 = (_crc32_calculate($10,$11)|0);
 HEAP32[(106756)>>2] = $12;
 $13 = HEAP32[$ret_buf>>2]|0;
 $14 = HEAP32[$ret>>2]|0;
 _sha256_hash((259508),$13,$14);
 $15 = HEAP8[102648>>0]|0;
 $16 = $15&1;
 if ($16) {
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  $22 = HEAP32[(106756)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = (259508);
  (_fprintf($21,746635,$vararg_buffer)|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = ($23|0)!=(0|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = HEAP32[544648>>2]|0;
  $27 = $24 ? $25 : $26;
  (_fflush($27)|0);
 }
 $28 = HEAP32[$ret_buf>>2]|0;
 $29 = $2;
 HEAP32[$29>>2] = $28;
 $30 = HEAP32[$ret>>2]|0;
 $0 = $30;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _patch_rom($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $allow_bps = 0;
 var $allow_ips = 0, $allow_ups = 0, $err = 0, $func = 0, $patch_data = 0, $patch_desc = 0, $patch_path = 0, $patch_size = 0, $patched_rom = 0, $ret_buf = 0, $ret_size = 0, $success = 0, $target_size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $patch_data = sp + 56|0;
 $target_size = sp + 52|0;
 $0 = $buf;
 $1 = $size;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $ret_buf = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $ret_size = $5;
 $patch_desc = 0;
 $patch_path = 0;
 $err = 0;
 $func = 0;
 $patch_size = 0;
 HEAP32[$patch_data>>2] = 0;
 $success = 0;
 $6 = HEAP8[(184595)>>0]|0;
 $7 = $6&1;
 $8 = $7&1;
 $9 = HEAP8[(184596)>>0]|0;
 $10 = $9&1;
 $11 = $10&1;
 $12 = (($8) + ($11))|0;
 $13 = HEAP8[(184597)>>0]|0;
 $14 = $13&1;
 $15 = $14&1;
 $16 = (($12) + ($15))|0;
 $17 = ($16|0)>(1);
 if ($17) {
  $18 = HEAP32[(259664)>>2]|0;
  $19 = ($18|0)!=(0|0);
  $20 = HEAP32[(259664)>>2]|0;
  $21 = HEAP32[544648>>2]|0;
  $22 = $19 ? $20 : $21;
  (_fprintf($22,746279,$vararg_buffer)|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = ($23|0)!=(0|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = HEAP32[544648>>2]|0;
  $27 = $24 ? $25 : $26;
  (_fflush($27)|0);
  STACKTOP = sp;return;
 }
 $28 = HEAP8[(184595)>>0]|0;
 $29 = $28&1;
 if ($29) {
  $34 = 0;
 } else {
  $30 = HEAP8[(184597)>>0]|0;
  $31 = $30&1;
  $32 = $31 ^ 1;
  $34 = $32;
 }
 $33 = $34&1;
 $allow_bps = $33;
 $35 = HEAP8[(184596)>>0]|0;
 $36 = $35&1;
 if ($36) {
  $41 = 0;
 } else {
  $37 = HEAP8[(184597)>>0]|0;
  $38 = $37&1;
  $39 = $38 ^ 1;
  $41 = $39;
 }
 $40 = $41&1;
 $allow_ups = $40;
 $42 = HEAP8[(184595)>>0]|0;
 $43 = $42&1;
 if ($43) {
  $48 = 0;
 } else {
  $44 = HEAP8[(184596)>>0]|0;
  $45 = $44&1;
  $46 = $45 ^ 1;
  $48 = $46;
 }
 $47 = $48&1;
 $allow_ips = $47;
 $49 = $allow_ups;
 $50 = $49&1;
 if ($50) {
  $51 = HEAP8[(184598)>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = (_read_file((184598),$patch_data)|0);
   $patch_size = $54;
   $55 = ($54|0)>=(0);
   if ($55) {
    $patch_desc = 746357;
    $patch_path = (184598);
    $func = 252;
   } else {
    label = 13;
   }
  } else {
   label = 13;
  }
 } else {
  label = 13;
 }
 do {
  if ((label|0) == 13) {
   $56 = $allow_bps;
   $57 = $56&1;
   if ($57) {
    $58 = HEAP8[(188694)>>0]|0;
    $59 = $58 << 24 >> 24;
    $60 = ($59|0)!=(0);
    if ($60) {
     $61 = (_read_file((188694),$patch_data)|0);
     $patch_size = $61;
     $62 = ($61|0)>=(0);
     if ($62) {
      $patch_desc = 746361;
      $patch_path = (188694);
      $func = 253;
      break;
     }
    }
   }
   $63 = $allow_ips;
   $64 = $63&1;
   if ($64) {
    $65 = HEAP8[(192790)>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = ($66|0)!=(0);
    if ($67) {
     $68 = (_read_file((192790),$patch_data)|0);
     $patch_size = $68;
     $69 = ($68|0)>=(0);
     if ($69) {
      $patch_desc = 746365;
      $patch_path = (192790);
      $func = 254;
      break;
     }
    }
   }
   $70 = HEAP8[102648>>0]|0;
   $71 = $70&1;
   if (!($71)) {
    STACKTOP = sp;return;
   }
   $72 = HEAP32[(259664)>>2]|0;
   $73 = ($72|0)!=(0|0);
   $74 = HEAP32[(259664)>>2]|0;
   $75 = HEAP32[544648>>2]|0;
   $76 = $73 ? $74 : $75;
   (_fprintf($76,746369,$vararg_buffer1)|0);
   $77 = HEAP32[(259664)>>2]|0;
   $78 = ($77|0)!=(0|0);
   $79 = HEAP32[(259664)>>2]|0;
   $80 = HEAP32[544648>>2]|0;
   $81 = $78 ? $79 : $80;
   (_fflush($81)|0);
   STACKTOP = sp;return;
  }
 } while(0);
 $82 = HEAP8[102648>>0]|0;
 $83 = $82&1;
 if ($83) {
  $84 = HEAP32[(259664)>>2]|0;
  $85 = ($84|0)!=(0|0);
  $86 = HEAP32[(259664)>>2]|0;
  $87 = HEAP32[544648>>2]|0;
  $88 = $85 ? $86 : $87;
  $89 = $patch_desc;
  $90 = $patch_path;
  HEAP32[$vararg_buffer3>>2] = $89;
  $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $90;
  (_fprintf($88,746413,$vararg_buffer3)|0);
  $91 = HEAP32[(259664)>>2]|0;
  $92 = ($91|0)!=(0|0);
  $93 = HEAP32[(259664)>>2]|0;
  $94 = HEAP32[544648>>2]|0;
  $95 = $92 ? $93 : $94;
  (_fflush($95)|0);
 }
 $96 = $ret_size;
 $97 = $96<<2;
 HEAP32[$target_size>>2] = $97;
 $98 = HEAP32[$target_size>>2]|0;
 $99 = (_malloc($98)|0);
 $patched_rom = $99;
 $100 = $patched_rom;
 $101 = ($100|0)!=(0|0);
 if (!($101)) {
  $102 = HEAP32[(259664)>>2]|0;
  $103 = ($102|0)!=(0|0);
  $104 = HEAP32[(259664)>>2]|0;
  $105 = HEAP32[544648>>2]|0;
  $106 = $103 ? $104 : $105;
  (_fprintf($106,746472,$vararg_buffer6)|0);
  $107 = HEAP32[(259664)>>2]|0;
  $108 = ($107|0)!=(0|0);
  $109 = HEAP32[(259664)>>2]|0;
  $110 = HEAP32[544648>>2]|0;
  $111 = $108 ? $109 : $110;
  (_fflush($111)|0);
  $112 = $ret_buf;
  $113 = $0;
  HEAP32[$113>>2] = $112;
  $114 = $ret_size;
  $115 = $1;
  HEAP32[$115>>2] = $114;
  $116 = HEAP32[$patch_data>>2]|0;
  _free($116);
  STACKTOP = sp;return;
 }
 $117 = $func;
 $118 = HEAP32[$patch_data>>2]|0;
 $119 = $patch_size;
 $120 = $ret_buf;
 $121 = $ret_size;
 $122 = $patched_rom;
 $123 = (FUNCTION_TABLE_iiiiiii[$117 & 255]($118,$119,$120,$121,$122,$target_size)|0);
 $err = $123;
 $124 = $err;
 $125 = ($124|0)==(1);
 if ($125) {
  $126 = HEAP8[102648>>0]|0;
  $127 = $126&1;
  if ($127) {
   $128 = HEAP32[(259664)>>2]|0;
   $129 = ($128|0)!=(0|0);
   $130 = HEAP32[(259664)>>2]|0;
   $131 = HEAP32[544648>>2]|0;
   $132 = $129 ? $130 : $131;
   $133 = $patch_desc;
   HEAP32[$vararg_buffer8>>2] = $133;
   (_fprintf($132,746540,$vararg_buffer8)|0);
   $134 = HEAP32[(259664)>>2]|0;
   $135 = ($134|0)!=(0|0);
   $136 = HEAP32[(259664)>>2]|0;
   $137 = HEAP32[544648>>2]|0;
   $138 = $135 ? $136 : $137;
   (_fflush($138)|0);
  }
  $success = 1;
 } else {
  $139 = HEAP32[(259664)>>2]|0;
  $140 = ($139|0)!=(0|0);
  $141 = HEAP32[(259664)>>2]|0;
  $142 = HEAP32[544648>>2]|0;
  $143 = $140 ? $141 : $142;
  $144 = $patch_desc;
  $145 = $err;
  HEAP32[$vararg_buffer11>>2] = $144;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $145;
  (_fprintf($143,746583,$vararg_buffer11)|0);
  $146 = HEAP32[(259664)>>2]|0;
  $147 = ($146|0)!=(0|0);
  $148 = HEAP32[(259664)>>2]|0;
  $149 = HEAP32[544648>>2]|0;
  $150 = $147 ? $148 : $149;
  (_fflush($150)|0);
 }
 $151 = $success;
 $152 = $151&1;
 if ($152) {
  $153 = $ret_buf;
  _free($153);
  $154 = $patched_rom;
  $155 = $0;
  HEAP32[$155>>2] = $154;
  $156 = HEAP32[$target_size>>2]|0;
  $157 = $1;
  HEAP32[$157>>2] = $156;
 }
 $158 = HEAP32[$patch_data>>2]|0;
 _free($158);
 STACKTOP = sp;return;
}
function _crc32_calculate($data,$length) {
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $length;
 $2 = $0;
 $3 = $1;
 $4 = (_crc32(0,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _string_list_free($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($8<<3)|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 $15 = $0;
 $16 = HEAP32[$15>>2]|0;
 _free($16);
 $17 = $0;
 _free($17);
 STACKTOP = sp;return;
}
function _string_split($str,$delim) {
 $str = $str|0;
 $delim = $delim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attr = 0, $attr$byval_copy = 0, $copy = 0, $list = 0, $save = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $attr$byval_copy = sp + 32|0;
 $save = sp + 4|0;
 $attr = sp;
 $1 = $str;
 $2 = $delim;
 $copy = 0;
 $tmp = 0;
 $3 = (_string_list_new()|0);
 $list = $3;
 $4 = $list;
 $5 = ($4|0)!=(0|0);
 L1: do {
  if ($5) {
   $6 = $1;
   $7 = (___strdup($6)|0);
   $copy = $7;
   $8 = $copy;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $copy;
    $11 = $2;
    $12 = (_strtok_r($10,$11,$save)|0);
    $tmp = $12;
    while(1) {
     $13 = $tmp;
     $14 = ($13|0)!=(0|0);
     if (!($14)) {
      break;
     }
     ;HEAP32[$attr>>2]=0|0;
     $15 = $list;
     $16 = $tmp;
     ;HEAP32[$attr$byval_copy>>2]=HEAP32[$attr>>2]|0;
     $17 = (_string_list_append($15,$16,$attr$byval_copy)|0);
     if (!($17)) {
      break L1;
     }
     $18 = $2;
     $19 = (_strtok_r(0,$18,$save)|0);
     $tmp = $19;
    }
    $20 = $copy;
    _free($20);
    $21 = $list;
    $0 = $21;
    $24 = $0;
    STACKTOP = sp;return ($24|0);
   }
  }
 } while(0);
 $22 = $list;
 _string_list_free($22);
 $23 = $copy;
 _free($23);
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _string_list_find_elem($list,$elem) {
 $list = $list|0;
 $elem = $elem|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $list;
 $2 = $elem;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $i = 0;
   while(1) {
    $5 = $i;
    $6 = $1;
    $7 = ((($6)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($5>>>0)<($8>>>0);
    if (!($9)) {
     label = 8;
     break;
    }
    $10 = $i;
    $11 = $1;
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($10<<3)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $2;
    $16 = (_strcasecmp($14,$15)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     label = 6;
     break;
    }
    $18 = $i;
    $19 = (($18) + 1)|0;
    $i = $19;
   }
   if ((label|0) == 6) {
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
   else if ((label|0) == 8) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  } else {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function _string_list_find_elem_prefix($list,$prefix,$elem) {
 $list = $list|0;
 $prefix = $prefix|0;
 $elem = $elem|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $prefixed = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4120|0;
 $prefixed = sp + 24|0;
 $1 = $list;
 $2 = $prefix;
 $3 = $elem;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 $6 = $2;
 $7 = $3;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 (_snprintf($prefixed,4096,774111,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8>>>0)<($11>>>0);
  if (!($12)) {
   label = 9;
   break;
  }
  $13 = $i;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13<<3)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = (_strcasecmp($17,$18)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   label = 7;
   break;
  }
  $21 = $i;
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($21<<3)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_strcasecmp($25,$prefixed)|0);
  $27 = ($26|0)==(0);
  if ($27) {
   label = 7;
   break;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 if ((label|0) == 7) {
  $$expand_i1_val3 = 1;
  HEAP8[$0>>0] = $$expand_i1_val3;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 9) {
  $$expand_i1_val5 = 0;
  HEAP8[$0>>0] = $$expand_i1_val5;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _path_get_extension($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $1;
 $3 = (_strrchr($2,46)|0);
 $ext = $3;
 $4 = $ext;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $ext;
  $7 = ((($6)) + 1|0);
  $0 = $7;
 } else {
  $0 = 773086;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _dir_list_sort($list,$dir_first) {
 $list = $list|0;
 $dir_first = $dir_first|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $2 = $dir_first&1;
 $1 = $2;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10&1;
 $12 = $11 ? 255 : 256;
 _qsort($6,$9,8,$12);
 STACKTOP = sp;return;
}
function _dir_list_new($dir,$ext,$include_dirs) {
 $dir = $dir|0;
 $ext = $ext|0;
 $include_dirs = $include_dirs|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $attr = 0, $attr$byval_copy = 0, $directory = 0, $entry = 0, $ext_list = 0, $file_ext = 0, $file_path = 0, $is_dir = 0, $list = 0;
 var $name = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $attr$byval_copy = sp + 44|0;
 $vararg_buffer = sp;
 $file_path = sp + 56|0;
 $attr = sp + 4|0;
 $1 = $dir;
 $2 = $ext;
 $4 = $include_dirs&1;
 $3 = $4;
 $5 = (_string_list_new()|0);
 $list = $5;
 $6 = $list;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 $directory = 0;
 $entry = 0;
 $ext_list = 0;
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = (_string_split($10,776046)|0);
  $ext_list = $11;
 }
 $12 = $1;
 $13 = (_opendir($12)|0);
 $directory = $13;
 $14 = $directory;
 $15 = ($14|0)!=(0|0);
 L8: do {
  if ($15) {
   while(1) {
    $16 = $directory;
    $17 = (_readdir($16)|0);
    $entry = $17;
    $18 = ($17|0)!=(0|0);
    if (!($18)) {
     break;
    }
    $19 = $entry;
    $20 = ((($19)) + 11|0);
    $name = $20;
    $21 = $name;
    $22 = (_path_get_extension($21)|0);
    $file_ext = $22;
    $23 = $1;
    $24 = $name;
    _fill_pathname_join($file_path,$23,$24,4096);
    $25 = $entry;
    $26 = (_dirent_is_directory($file_path,$25)|0);
    $27 = $26&1;
    $is_dir = $27;
    $28 = $3;
    $29 = $28&1;
    if (!($29)) {
     $30 = $is_dir;
     $31 = $30&1;
     if ($31) {
      continue;
     }
    }
    $32 = $name;
    $33 = (_strcmp($32,847995)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     continue;
    }
    $35 = $name;
    $36 = (_strcmp($35,747254)|0);
    $37 = ($36|0)==(0);
    if ($37) {
     continue;
    }
    $38 = $is_dir;
    $39 = $38&1;
    $$not = $39 ^ 1;
    $40 = $ext_list;
    $41 = ($40|0)!=(0|0);
    $or$cond = $$not & $41;
    if ($or$cond) {
     $42 = $ext_list;
     $43 = $file_ext;
     $44 = (_string_list_find_elem_prefix($42,847995,$43)|0);
     if (!($44)) {
      continue;
     }
    }
    $45 = $is_dir;
    $46 = $45&1;
    $47 = $46&1;
    HEAP8[$attr>>0] = $47;
    $48 = $list;
    ;HEAP32[$attr$byval_copy>>2]=HEAP32[$attr>>2]|0;
    $49 = (_string_list_append($48,$file_path,$attr$byval_copy)|0);
    if (!($49)) {
     break L8;
    }
   }
   $50 = $directory;
   (_closedir($50)|0);
   $51 = $ext_list;
   _string_list_free($51);
   $52 = $list;
   $0 = $52;
   $69 = $0;
   STACKTOP = sp;return ($69|0);
  }
 } while(0);
 $53 = HEAP32[(259664)>>2]|0;
 $54 = ($53|0)!=(0|0);
 $55 = HEAP32[(259664)>>2]|0;
 $56 = HEAP32[544648>>2]|0;
 $57 = $54 ? $55 : $56;
 $58 = $1;
 HEAP32[$vararg_buffer>>2] = $58;
 (_fprintf($57,747257,$vararg_buffer)|0);
 $59 = HEAP32[(259664)>>2]|0;
 $60 = ($59|0)!=(0|0);
 $61 = HEAP32[(259664)>>2]|0;
 $62 = HEAP32[544648>>2]|0;
 $63 = $60 ? $61 : $62;
 (_fflush($63)|0);
 $64 = $directory;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = $directory;
  (_closedir($66)|0);
 }
 $67 = $list;
 _string_list_free($67);
 $68 = $ext_list;
 _string_list_free($68);
 $0 = 0;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _fill_pathname_join($out_path,$dir,$path,$size) {
 $out_path = $out_path|0;
 $dir = $dir|0;
 $path = $path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out_path;
 $1 = $dir;
 $2 = $path;
 $3 = $size;
 $4 = $0;
 $5 = $1;
 $6 = $3;
 $7 = (_strlcpy_rarch__($4,$5,$6)|0);
 $8 = $3;
 $9 = ($7>>>0)<($8>>>0);
 if (!($9)) {
  $10 = HEAP32[(259664)>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = HEAP32[544648>>2]|0;
  $14 = $11 ? $12 : $13;
  HEAP32[$vararg_buffer>>2] = 747310;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 573;
  (_fprintf($14,765794,$vararg_buffer)|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = HEAP32[544648>>2]|0;
  $19 = $16 ? $17 : $18;
  (_fflush($19)|0);
  _exit(2);
  // unreachable;
 }
 $20 = $0;
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)!=(0);
 if ($22) {
  $23 = $0;
  $24 = $3;
  _fill_pathname_slash($23,$24);
 }
 $25 = $0;
 $26 = $2;
 $27 = $3;
 $28 = (_strlcat_rarch__($25,$26,$27)|0);
 $29 = $3;
 $30 = ($28>>>0)<($29>>>0);
 if ($30) {
  STACKTOP = sp;return;
 } else {
  $31 = HEAP32[(259664)>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = HEAP32[(259664)>>2]|0;
  $34 = HEAP32[544648>>2]|0;
  $35 = $32 ? $33 : $34;
  HEAP32[$vararg_buffer2>>2] = 747310;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 578;
  (_fprintf($35,765794,$vararg_buffer2)|0);
  $36 = HEAP32[(259664)>>2]|0;
  $37 = ($36|0)!=(0|0);
  $38 = HEAP32[(259664)>>2]|0;
  $39 = HEAP32[544648>>2]|0;
  $40 = $37 ? $38 : $39;
  (_fflush($40)|0);
  _exit(2);
  // unreachable;
 }
}
function _dir_list_free($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $0;
 _string_list_free($1);
 STACKTOP = sp;return;
}
function _path_is_directory($path) {
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 80|0;
 $buf = sp;
 $1 = $path;
 $2 = $1;
 $3 = (_stat($2,$buf)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $5 = ((($buf)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 61440;
  $8 = ($7|0)==(16384);
  $$expand_i1_val2 = $8&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $9 = $$pre_trunc&1;
 STACKTOP = sp;return ($9|0);
}
function _path_file_exists($path) {
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $dummy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $path;
 $2 = $1;
 $3 = (_fopen($2,840413)|0);
 $dummy = $3;
 $4 = $dummy;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $dummy;
  (_fclose($6)|0);
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function _fill_pathname($out_path,$in_path,$replace,$size) {
 $out_path = $out_path|0;
 $in_path = $in_path|0;
 $replace = $replace|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp_path = 0, $tok = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $tmp_path = sp + 48|0;
 $0 = $out_path;
 $1 = $in_path;
 $2 = $replace;
 $3 = $size;
 $4 = $1;
 $5 = (_strlcpy_rarch__($tmp_path,$4,4096)|0);
 $6 = ($5>>>0)<(4096);
 if (!($6)) {
  $7 = HEAP32[(259664)>>2]|0;
  $8 = ($7|0)!=(0|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = HEAP32[544648>>2]|0;
  $11 = $8 ? $9 : $10;
  HEAP32[$vararg_buffer>>2] = 747310;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 409;
  (_fprintf($11,765794,$vararg_buffer)|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = HEAP32[544648>>2]|0;
  $16 = $13 ? $14 : $15;
  (_fflush($16)|0);
  _exit(2);
  // unreachable;
 }
 $17 = (_strrchr($tmp_path,46)|0);
 $tok = $17;
 $18 = $tok;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $tok;
  HEAP8[$20>>0] = 0;
 }
 $21 = $0;
 $22 = $3;
 $23 = (_strlcpy_rarch__($21,$tmp_path,$22)|0);
 $24 = $3;
 $25 = ($23>>>0)<($24>>>0);
 if (!($25)) {
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  HEAP32[$vararg_buffer2>>2] = 747310;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 414;
  (_fprintf($30,765794,$vararg_buffer2)|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = HEAP32[(259664)>>2]|0;
  $34 = HEAP32[544648>>2]|0;
  $35 = $32 ? $33 : $34;
  (_fflush($35)|0);
  _exit(2);
  // unreachable;
 }
 $36 = $0;
 $37 = $2;
 $38 = $3;
 $39 = (_strlcat_rarch__($36,$37,$38)|0);
 $40 = $3;
 $41 = ($39>>>0)<($40>>>0);
 if ($41) {
  STACKTOP = sp;return;
 } else {
  $42 = HEAP32[(259664)>>2]|0;
  $43 = ($42|0)!=(0|0);
  $44 = HEAP32[(259664)>>2]|0;
  $45 = HEAP32[544648>>2]|0;
  $46 = $43 ? $44 : $45;
  HEAP32[$vararg_buffer6>>2] = 747310;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 415;
  (_fprintf($46,765794,$vararg_buffer6)|0);
  $47 = HEAP32[(259664)>>2]|0;
  $48 = ($47|0)!=(0|0);
  $49 = HEAP32[(259664)>>2]|0;
  $50 = HEAP32[544648>>2]|0;
  $51 = $48 ? $49 : $50;
  (_fflush($51)|0);
  _exit(2);
  // unreachable;
 }
}
function _fill_pathname_noext($out_path,$in_path,$replace,$size) {
 $out_path = $out_path|0;
 $in_path = $in_path|0;
 $replace = $replace|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out_path;
 $1 = $in_path;
 $2 = $replace;
 $3 = $size;
 $4 = $0;
 $5 = $1;
 $6 = $3;
 $7 = (_strlcpy_rarch__($4,$5,$6)|0);
 $8 = $3;
 $9 = ($7>>>0)<($8>>>0);
 if (!($9)) {
  $10 = HEAP32[(259664)>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = HEAP32[544648>>2]|0;
  $14 = $11 ? $12 : $13;
  HEAP32[$vararg_buffer>>2] = 747310;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 420;
  (_fprintf($14,765794,$vararg_buffer)|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = HEAP32[544648>>2]|0;
  $19 = $16 ? $17 : $18;
  (_fflush($19)|0);
  _exit(2);
  // unreachable;
 }
 $20 = $0;
 $21 = $2;
 $22 = $3;
 $23 = (_strlcat_rarch__($20,$21,$22)|0);
 $24 = $3;
 $25 = ($23>>>0)<($24>>>0);
 if ($25) {
  STACKTOP = sp;return;
 } else {
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  HEAP32[$vararg_buffer2>>2] = 747310;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 421;
  (_fprintf($30,765794,$vararg_buffer2)|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = HEAP32[(259664)>>2]|0;
  $34 = HEAP32[544648>>2]|0;
  $35 = $32 ? $33 : $34;
  (_fflush($35)|0);
  _exit(2);
  // unreachable;
 }
}
function _fill_pathname_dir($in_dir,$in_basename,$replace,$size) {
 $in_dir = $in_dir|0;
 $in_basename = $in_basename|0;
 $replace = $replace|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $base = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $in_dir;
 $1 = $in_basename;
 $2 = $replace;
 $3 = $size;
 $4 = $0;
 $5 = $3;
 _fill_pathname_slash($4,$5);
 $6 = $1;
 $7 = (_path_basename($6)|0);
 $base = $7;
 $8 = $0;
 $9 = $base;
 $10 = $3;
 $11 = (_strlcat_rarch__($8,$9,$10)|0);
 $12 = $3;
 $13 = ($11>>>0)<($12>>>0);
 if (!($13)) {
  $14 = HEAP32[(259664)>>2]|0;
  $15 = ($14|0)!=(0|0);
  $16 = HEAP32[(259664)>>2]|0;
  $17 = HEAP32[544648>>2]|0;
  $18 = $15 ? $16 : $17;
  HEAP32[$vararg_buffer>>2] = 747310;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 457;
  (_fprintf($18,765794,$vararg_buffer)|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = ($19|0)!=(0|0);
  $21 = HEAP32[(259664)>>2]|0;
  $22 = HEAP32[544648>>2]|0;
  $23 = $20 ? $21 : $22;
  (_fflush($23)|0);
  _exit(2);
  // unreachable;
 }
 $24 = $0;
 $25 = $2;
 $26 = $3;
 $27 = (_strlcat_rarch__($24,$25,$26)|0);
 $28 = $3;
 $29 = ($27>>>0)<($28>>>0);
 if ($29) {
  STACKTOP = sp;return;
 } else {
  $30 = HEAP32[(259664)>>2]|0;
  $31 = ($30|0)!=(0|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = HEAP32[544648>>2]|0;
  $34 = $31 ? $32 : $33;
  HEAP32[$vararg_buffer2>>2] = 747310;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 458;
  (_fprintf($34,765794,$vararg_buffer2)|0);
  $35 = HEAP32[(259664)>>2]|0;
  $36 = ($35|0)!=(0|0);
  $37 = HEAP32[(259664)>>2]|0;
  $38 = HEAP32[544648>>2]|0;
  $39 = $36 ? $37 : $38;
  (_fflush($39)|0);
  _exit(2);
  // unreachable;
 }
}
function _path_basename($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $1;
 $3 = (_find_last_slash($2)|0);
 $last = $3;
 $4 = $last;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $last;
  $7 = ((($6)) + 1|0);
  $0 = $7;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $8 = $1;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _fill_pathname_base($out,$in_path,$size) {
 $out = $out|0;
 $in_path = $in_path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $in_path;
 $2 = $size;
 $3 = $1;
 $4 = (_find_last_slash($3)|0);
 $ptr = $4;
 $5 = $ptr;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $ptr;
  $8 = ((($7)) + 1|0);
  $ptr = $8;
 } else {
  $9 = $1;
  $ptr = $9;
 }
 $10 = $0;
 $11 = $ptr;
 $12 = $2;
 $13 = (_strlcpy_rarch__($10,$11,$12)|0);
 $14 = $2;
 $15 = ($13>>>0)<($14>>>0);
 if ($15) {
  STACKTOP = sp;return;
 } else {
  $16 = HEAP32[(259664)>>2]|0;
  $17 = ($16|0)!=(0|0);
  $18 = HEAP32[(259664)>>2]|0;
  $19 = HEAP32[544648>>2]|0;
  $20 = $17 ? $18 : $19;
  HEAP32[$vararg_buffer>>2] = 747310;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 470;
  (_fprintf($20,765794,$vararg_buffer)|0);
  $21 = HEAP32[(259664)>>2]|0;
  $22 = ($21|0)!=(0|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = HEAP32[544648>>2]|0;
  $25 = $22 ? $23 : $24;
  (_fflush($25)|0);
  _exit(2);
  // unreachable;
 }
}
function _fill_pathname_basedir($out_dir,$in_path,$size) {
 $out_dir = $out_dir|0;
 $in_path = $in_path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out_dir;
 $1 = $in_path;
 $2 = $size;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_strlcpy_rarch__($3,$4,$5)|0);
 $7 = $2;
 $8 = ($6>>>0)<($7>>>0);
 if ($8) {
  $19 = $0;
  _path_basedir($19);
  STACKTOP = sp;return;
 } else {
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  HEAP32[$vararg_buffer>>2] = 747310;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 475;
  (_fprintf($13,765794,$vararg_buffer)|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = ($14|0)!=(0|0);
  $16 = HEAP32[(259664)>>2]|0;
  $17 = HEAP32[544648>>2]|0;
  $18 = $15 ? $16 : $17;
  (_fflush($18)|0);
  _exit(2);
  // unreachable;
 }
}
function _path_basedir($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $path;
 $1 = $0;
 $2 = (_strlen($1)|0);
 $3 = ($2>>>0)<(2);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (_find_last_slash($4)|0);
 $last = $5;
 $6 = $last;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $last;
  $9 = ((($8)) + 1|0);
  HEAP8[$9>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $10 = $0;
  $11 = (_path_default_slash()|0);
  HEAP32[$vararg_buffer>>2] = $11;
  (_snprintf($10,3,747322,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _fill_dated_filename($out_filename,$ext,$size) {
 $out_filename = $out_filename|0;
 $ext = $ext|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cur_time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cur_time = sp;
 $0 = $out_filename;
 $1 = $ext;
 $2 = $size;
 (_time(($cur_time|0))|0);
 $3 = $0;
 $4 = $2;
 $5 = (_localtime(($cur_time|0))|0);
 (_strftime(($3|0),($4|0),(747326|0),($5|0))|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 (_strlcat_rarch__($6,$7,$8)|0);
 STACKTOP = sp;return;
}
function _path_is_absolute($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(47);
 STACKTOP = sp;return ($4|0);
}
function _path_resolve_realpath($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 16|0;
 $0 = $buf;
 $1 = $size;
 $2 = $0;
 (_strlcpy_rarch__($tmp,$2,4096)|0);
 $3 = $1;
 $4 = ($3>>>0)>=(4096);
 if (!($4)) {
  $5 = HEAP32[(259664)>>2]|0;
  $6 = ($5|0)!=(0|0);
  $7 = HEAP32[(259664)>>2]|0;
  $8 = HEAP32[544648>>2]|0;
  $9 = $6 ? $7 : $8;
  HEAP32[$vararg_buffer>>2] = 747310;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 545;
  (_fprintf($9,765794,$vararg_buffer)|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = HEAP32[544648>>2]|0;
  $14 = $11 ? $12 : $13;
  (_fflush($14)|0);
  _exit(2);
  // unreachable;
 }
 $15 = $0;
 $16 = (_realpath($tmp,$15)|0);
 $17 = ($16|0)!=(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = $1;
 (_strlcpy_rarch__($18,$tmp,$19)|0);
 STACKTOP = sp;return;
}
function _fill_pathname_resolve_relative($out_path,$in_refpath,$in_path,$size) {
 $out_path = $out_path|0;
 $in_refpath = $in_refpath|0;
 $in_path = $in_path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $out_path;
 $1 = $in_refpath;
 $2 = $in_path;
 $3 = $size;
 $4 = $2;
 $5 = (_path_is_absolute($4)|0);
 $6 = $0;
 if ($5) {
  $7 = $2;
  $8 = $3;
  $9 = (_strlcpy_rarch__($6,$7,$8)|0);
  $10 = $3;
  $11 = ($9>>>0)<($10>>>0);
  if ($11) {
   STACKTOP = sp;return;
  } else {
   $12 = HEAP32[(259664)>>2]|0;
   $13 = ($12|0)!=(0|0);
   $14 = HEAP32[(259664)>>2]|0;
   $15 = HEAP32[544648>>2]|0;
   $16 = $13 ? $14 : $15;
   HEAP32[$vararg_buffer>>2] = 747310;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 562;
   (_fprintf($16,765794,$vararg_buffer)|0);
   $17 = HEAP32[(259664)>>2]|0;
   $18 = ($17|0)!=(0|0);
   $19 = HEAP32[(259664)>>2]|0;
   $20 = HEAP32[544648>>2]|0;
   $21 = $18 ? $19 : $20;
   (_fflush($21)|0);
   _exit(2);
   // unreachable;
  }
 }
 $22 = $1;
 $23 = $3;
 $24 = (_strlcpy_rarch__($6,$22,$23)|0);
 $25 = $3;
 $26 = ($24>>>0)<($25>>>0);
 if (!($26)) {
  $27 = HEAP32[(259664)>>2]|0;
  $28 = ($27|0)!=(0|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = HEAP32[544648>>2]|0;
  $31 = $28 ? $29 : $30;
  HEAP32[$vararg_buffer2>>2] = 747310;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 565;
  (_fprintf($31,765794,$vararg_buffer2)|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  (_fflush($36)|0);
  _exit(2);
  // unreachable;
 }
 $37 = $0;
 _path_basedir($37);
 $38 = $0;
 $39 = $2;
 $40 = $3;
 $41 = (_strlcat_rarch__($38,$39,$40)|0);
 $42 = $3;
 $43 = ($41>>>0)<($42>>>0);
 if ($43) {
  STACKTOP = sp;return;
 } else {
  $44 = HEAP32[(259664)>>2]|0;
  $45 = ($44|0)!=(0|0);
  $46 = HEAP32[(259664)>>2]|0;
  $47 = HEAP32[544648>>2]|0;
  $48 = $45 ? $46 : $47;
  HEAP32[$vararg_buffer6>>2] = 747310;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 567;
  (_fprintf($48,765794,$vararg_buffer6)|0);
  $49 = HEAP32[(259664)>>2]|0;
  $50 = ($49|0)!=(0|0);
  $51 = HEAP32[(259664)>>2]|0;
  $52 = HEAP32[544648>>2]|0;
  $53 = $50 ? $51 : $52;
  (_fflush($53)|0);
  _exit(2);
  // unreachable;
 }
}
function _fill_pathname_application_path($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $link_path = 0, $pid = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $link_path = sp + 32|0;
 $0 = $buf;
 $1 = $size;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 HEAP8[$4>>0] = 0;
 $5 = (_getpid()|0);
 $pid = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6>>>0)<(3);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = $pid;
  $9 = $i;
  $10 = (264720 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  (_snprintf($link_path,4096,747349,$vararg_buffer)|0);
  $12 = $0;
  $13 = $1;
  $14 = (($13) - 1)|0;
  $15 = (_readlink($link_path,$12,$14)|0);
  $ret = $15;
  $16 = $ret;
  $17 = ($16|0)>=(0);
  if ($17) {
   label = 5;
   break;
  }
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 if ((label|0) == 5) {
  $18 = $ret;
  $19 = $0;
  $20 = (($19) + ($18)|0);
  HEAP8[$20>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $23 = HEAP32[(259664)>>2]|0;
  $24 = ($23|0)!=(0|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = HEAP32[544648>>2]|0;
  $27 = $24 ? $25 : $26;
  (_fprintf($27,747361,$vararg_buffer2)|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = ($28|0)!=(0|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = HEAP32[544648>>2]|0;
  $32 = $29 ? $30 : $31;
  (_fflush($32)|0);
  STACKTOP = sp;return;
 }
}
function _string_list_new() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_calloc(1,12)|0);
 $list = $1;
 $2 = $list;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = $list;
   $5 = (_string_list_capacity($4,32)|0);
   $6 = $list;
   if ($5) {
    $0 = $6;
    break;
   } else {
    _string_list_free($6);
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _string_list_append($list,$elem,$attr) {
 $list = $list|0;
 $elem = $elem|0;
 $attr = $attr|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $dup = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $list;
 $2 = $elem;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)>=($8>>>0);
 if ($9) {
  $10 = $1;
  $11 = $1;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13<<1;
  $15 = (_string_list_capacity($10,$14)|0);
  if (!($15)) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $38 = $$pre_trunc&1;
   STACKTOP = sp;return ($38|0);
  }
 }
 $16 = $2;
 $17 = (___strdup($16)|0);
 $dup = $17;
 $18 = $dup;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $dup;
  $21 = $1;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($23<<3)|0);
  HEAP32[$26>>2] = $20;
  $27 = $1;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($29<<3)|0);
  $33 = ((($32)) + 4|0);
  ;HEAP32[$33>>2]=HEAP32[$attr>>2]|0;
  $34 = $1;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$35>>2] = $37;
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $38 = $$pre_trunc&1;
  STACKTOP = sp;return ($38|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $38 = $$pre_trunc&1;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _qstrcmp_dir($a_,$b_) {
 $a_ = $a_|0;
 $b_ = $b_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $a_dir = 0, $b = 0, $b_dir = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a_;
 $2 = $b_;
 $3 = $1;
 $a = $3;
 $4 = $2;
 $b = $4;
 $5 = $a;
 $6 = ((($5)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 $9 = $8&1;
 $a_dir = $9;
 $10 = $b;
 $11 = ((($10)) + 4|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 $14 = $13&1;
 $b_dir = $14;
 $15 = $a_dir;
 $16 = $b_dir;
 $17 = ($15|0)!=($16|0);
 if ($17) {
  $18 = $b_dir;
  $19 = $a_dir;
  $20 = (($18) - ($19))|0;
  $0 = $20;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $21 = $a;
  $22 = HEAP32[$21>>2]|0;
  $23 = $b;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_strcasecmp($22,$24)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _qstrcmp_plain($a_,$b_) {
 $a_ = $a_|0;
 $b_ = $b_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a_;
 $1 = $b_;
 $2 = $0;
 $a = $2;
 $3 = $1;
 $b = $3;
 $4 = $a;
 $5 = HEAP32[$4>>2]|0;
 $6 = $b;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strcasecmp($5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _dirent_is_directory($path,$entry) {
 $path = $path|0;
 $entry = $entry|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $path;
 $2 = $entry;
 $3 = $2;
 $4 = ((($3)) + 10|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(4);
 do {
  if ($7) {
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $8 = $2;
   $9 = ((($8)) + 10|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = $2;
    $14 = ((($13)) + 10|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = ($16|0)==(10);
    if (!($17)) {
     $$expand_i1_val4 = 0;
     HEAP8[$0>>0] = $$expand_i1_val4;
     break;
    }
   }
   $18 = $1;
   $19 = (_path_is_directory($18)|0);
   $$expand_i1_val2 = $19&1;
   HEAP8[$0>>0] = $$expand_i1_val2;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function _fill_pathname_slash($path,$size) {
 $path = $path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $join_str = 0, $last_slash = 0, $path_len = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $join_str = sp + 32|0;
 $0 = $path;
 $1 = $size;
 $2 = $0;
 $3 = (_strlen($2)|0);
 $path_len = $3;
 $4 = $0;
 $5 = (_find_last_slash($4)|0);
 $last_slash = $5;
 $6 = $last_slash;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $last_slash;
  $9 = $0;
  $10 = $path_len;
  $11 = (($9) + ($10)|0);
  $12 = ((($11)) + -1|0);
  $13 = ($8|0)!=($12|0);
  if ($13) {
   $14 = $last_slash;
   $15 = HEAP8[$14>>0]|0;
   HEAP8[$join_str>>0] = $15;
   $16 = ((($join_str)) + 1|0);
   $17 = ((($join_str)) + 2|0);
   $18 = $16;
   while(1) {
    HEAP8[$18>>0] = 0;
    $19 = ((($18)) + 1|0);
    $20 = ($19|0)==($17|0);
    if ($20) {
     break;
    } else {
     $18 = $19;
    }
   }
   $21 = $0;
   $22 = $1;
   $23 = (_strlcat_rarch__($21,$join_str,$22)|0);
   $24 = $1;
   $25 = ($23>>>0)<($24>>>0);
   if ($25) {
    STACKTOP = sp;return;
   } else {
    $26 = HEAP32[(259664)>>2]|0;
    $27 = ($26|0)!=(0|0);
    $28 = HEAP32[(259664)>>2]|0;
    $29 = HEAP32[544648>>2]|0;
    $30 = $27 ? $28 : $29;
    HEAP32[$vararg_buffer>>2] = 747310;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 447;
    (_fprintf($30,765794,$vararg_buffer)|0);
    $31 = HEAP32[(259664)>>2]|0;
    $32 = ($31|0)!=(0|0);
    $33 = HEAP32[(259664)>>2]|0;
    $34 = HEAP32[544648>>2]|0;
    $35 = $32 ? $33 : $34;
    (_fflush($35)|0);
    _exit(2);
    // unreachable;
   }
  }
 }
 $36 = $last_slash;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = $0;
 $39 = (_path_default_slash()|0);
 $40 = $1;
 $41 = (_strlcat_rarch__($38,$39,$40)|0);
 $42 = $1;
 $43 = ($41>>>0)<($42>>>0);
 if ($43) {
  STACKTOP = sp;return;
 } else {
  $44 = HEAP32[(259664)>>2]|0;
  $45 = ($44|0)!=(0|0);
  $46 = HEAP32[(259664)>>2]|0;
  $47 = HEAP32[544648>>2]|0;
  $48 = $45 ? $46 : $47;
  HEAP32[$vararg_buffer2>>2] = 747310;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 450;
  (_fprintf($48,765794,$vararg_buffer2)|0);
  $49 = HEAP32[(259664)>>2]|0;
  $50 = ($49|0)!=(0|0);
  $51 = HEAP32[(259664)>>2]|0;
  $52 = HEAP32[544648>>2]|0;
  $53 = $50 ? $51 : $52;
  (_fflush($53)|0);
  _exit(2);
  // unreachable;
 }
}
function _find_last_slash($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $slash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $2 = (_strrchr($1,47)|0);
 $slash = $2;
 $3 = $slash;
 STACKTOP = sp;return ($3|0);
}
function _path_default_slash() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (768343|0);
}
function _string_list_capacity($list,$cap) {
 $list = $list|0;
 $cap = $cap|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_data = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = $list;
 $2 = $cap;
 $3 = $2;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3>>>0)>($6>>>0);
 if (!($7)) {
  $8 = HEAP32[(259664)>>2]|0;
  $9 = ($8|0)!=(0|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = HEAP32[544648>>2]|0;
  $12 = $9 ? $10 : $11;
  HEAP32[$vararg_buffer>>2] = 747310;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 69;
  (_fprintf($12,765794,$vararg_buffer)|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fflush($17)|0);
  _exit(2);
  // unreachable;
 }
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = $20<<3;
 $22 = (_realloc($19,$21)|0);
 $new_data = $22;
 $23 = $new_data;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $new_data;
  $26 = $1;
  HEAP32[$26>>2] = $25;
  $27 = $2;
  $28 = $1;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = $27;
  $$expand_i1_val3 = 1;
  HEAP8[$0>>0] = $$expand_i1_val3;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 } else {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _init_drivers_pre() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _find_audio_driver();
 _find_video_driver();
 _find_input_driver();
 return;
}
function _driver_set_monitor_refresh_rate($hz) {
 $hz = +$hz;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $msg = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg = sp + 16|0;
 $0 = $hz;
 $1 = $0;
 $2 = $1;
 HEAPF64[$vararg_buffer>>3] = $2;
 (_snprintf($msg,256,747455,$vararg_buffer)|0);
 $3 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($3,$msg,1,180);
 $4 = HEAP8[102648>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP32[(259664)>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = HEAP32[(259664)>>2]|0;
  $9 = HEAP32[544648>>2]|0;
  $10 = $7 ? $8 : $9;
  HEAP32[$vararg_buffer1>>2] = $msg;
  (_fprintf($10,772081,$vararg_buffer1)|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = HEAP32[544648>>2]|0;
  $15 = $12 ? $13 : $14;
  (_fflush($15)|0);
 }
 $16 = $0;
 HEAPF32[(8540)>>2] = $16;
 _adjust_system_rates();
 $17 = HEAP32[(16812)>>2]|0;
 $18 = (+($17>>>0));
 $19 = +HEAPF32[(16820)>>2];
 $20 = $19;
 $21 = $18 / $20;
 HEAPF64[(201744)>>3] = $21;
 HEAPF64[(201792)>>3] = $21;
 STACKTOP = sp;return;
}
function _driver_set_nonblock_state($nonblock) {
 $nonblock = $nonblock|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $video_nb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nonblock&1;
 $0 = $1;
 $2 = HEAP8[(102650)>>0]|0;
 $3 = $2&1;
 $4 = HEAP32[(24)>>2]|0;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $0;
  $7 = $6&1;
  $8 = $7&1;
  $video_nb = $8;
  $9 = HEAP8[(312)>>0]|0;
  $10 = $9&1;
  if ($10) {
   $11 = HEAP8[(196989)>>0]|0;
   $12 = $11&1;
   if ($12) {
    label = 4;
   }
  } else {
   label = 4;
  }
  if ((label|0) == 4) {
   $video_nb = 1;
  }
  $13 = HEAP32[(12)>>2]|0;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[(24)>>2]|0;
  $17 = $video_nb;
  $18 = $17&1;
  FUNCTION_TABLE_vii[$15 & 1023]($16,$18);
 }
 $19 = HEAP8[(102649)>>0]|0;
 $20 = $19&1;
 $21 = HEAP32[(20)>>2]|0;
 $22 = ($21|0)!=(0|0);
 $or$cond3 = $20 & $22;
 if (!($or$cond3)) {
  $34 = $0;
  $35 = $34&1;
  $36 = HEAP32[(201732)>>2]|0;
  $37 = HEAP32[(201736)>>2]|0;
  $38 = $35 ? $36 : $37;
  HEAP32[(201728)>>2] = $38;
  STACKTOP = sp;return;
 }
 $23 = HEAP32[8>>2]|0;
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(20)>>2]|0;
 $27 = HEAP8[(20924)>>0]|0;
 $28 = $27&1;
 if ($28) {
  $29 = $0;
  $30 = $29&1;
  $31 = $30&1;
  $33 = $31;
 } else {
  $33 = 1;
 }
 $32 = ($33|0)!=(0);
 FUNCTION_TABLE_vii[$25 & 1023]($26,$32);
 $34 = $0;
 $35 = $34&1;
 $36 = HEAP32[(201732)>>2]|0;
 $37 = HEAP32[(201736)>>2]|0;
 $38 = $35 ? $36 : $37;
 HEAP32[(201728)>>2] = $38;
 STACKTOP = sp;return;
}
function _driver_get_current_framebuffer() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(216)>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[(216)>>2]|0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = HEAP32[(216)>>2]|0;
   $8 = ((($7)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[(24)>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$9 & 511]($10)|0);
   $0 = $11;
   $12 = $0;
   STACKTOP = sp;return ($12|0);
  }
 }
 $0 = 0;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _driver_get_proc_address($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = HEAP32[(216)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[(216)>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = HEAP32[(216)>>2]|0;
   $9 = ((($8)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[(24)>>2]|0;
   $12 = $1;
   $13 = (FUNCTION_TABLE_iii[$10 & 511]($11,$12)|0);
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _init_drivers() {
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(24)>>2]|0;
 $1 = ($0|0)!=(0|0);
 $2 = $1 ^ 1;
 $3 = $2&1;
 HEAP8[(35)>>0] = $3;
 $4 = HEAP32[(20)>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $5 ^ 1;
 $7 = $6&1;
 HEAP8[(36)>>0] = $7;
 $8 = HEAP32[(28)>>2]|0;
 $9 = ($8|0)!=(0|0);
 $10 = $9 ^ 1;
 $11 = $10&1;
 HEAP8[(37)>>0] = $11;
 _adjust_system_rates();
 HEAP32[(259432)>>2] = 0;
 _init_video_input();
 $12 = HEAP8[(34)>>0]|0;
 $13 = $12&1;
 $$not = $13 ^ 1;
 $14 = HEAP32[(201644)>>2]|0;
 $15 = ($14|0)!=(0|0);
 $or$cond = $$not & $15;
 if ($or$cond) {
  $16 = HEAP32[(201644)>>2]|0;
  FUNCTION_TABLE_v[$16 & 511]();
 }
 HEAP8[(34)>>0] = 0;
 _init_audio();
 $17 = HEAP8[(40)>>0]|0;
 $18 = $17&1;
 if (!($18)) {
  $21 = (201696);
  $22 = $21;
  HEAP32[$22>>2] = 0;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  return;
 }
 $19 = HEAP8[(40)>>0]|0;
 $20 = $19&1;
 _driver_set_nonblock_state($20);
 $21 = (201696);
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 return;
}
function _init_video_input() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $base_width = 0, $geom = 0, $height = 0, $max_dim = 0, $or$cond = 0, $or$cond3 = 0, $scale = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, $video = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $video = sp + 72|0;
 _init_shader_dir();
 $geom = (196928);
 $0 = $geom;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $geom;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2>>>0)>($5>>>0);
 $7 = $geom;
 if ($6) {
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = ((($7)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
 }
 $max_dim = $12;
 $13 = $max_dim;
 $14 = (_next_pow2($13)|0);
 $15 = (($14>>>0) / 256)&-1;
 $scale = $15;
 $16 = $scale;
 $17 = ($16>>>0)>(1);
 $18 = $scale;
 $19 = $17 ? $18 : 1;
 $scale = $19;
 $20 = HEAP8[(250984)>>0]|0;
 $21 = $20&1;
 if ($21) {
  $22 = HEAP32[(251004)>>2]|0;
  $scale = $22;
 }
 $23 = +HEAPF32[(328)>>2];
 HEAPF32[(196968)>>2] = $23;
 $24 = +HEAPF32[(196968)>>2];
 $25 = $24 < 0.0;
 if ($25) {
  $26 = $geom;
  $27 = ((($26)) + 16|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 > 0.0;
  if ($29) {
   $30 = HEAP8[(332)>>0]|0;
   $31 = $30&1;
   if ($31) {
    $32 = $geom;
    $33 = ((($32)) + 16|0);
    $34 = +HEAPF32[$33>>2];
    HEAPF32[(196968)>>2] = $34;
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  if ((label|0) == 10) {
   $35 = $geom;
   $36 = HEAP32[$35>>2]|0;
   $37 = (+($36>>>0));
   $38 = $geom;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (+($40>>>0));
   $42 = $37 / $41;
   HEAPF32[(196968)>>2] = $42;
  }
  $43 = HEAP8[102648>>0]|0;
  $44 = $43&1;
  if ($44) {
   $45 = HEAP32[(259664)>>2]|0;
   $46 = ($45|0)!=(0|0);
   $47 = HEAP32[(259664)>>2]|0;
   $48 = HEAP32[544648>>2]|0;
   $49 = $46 ? $47 : $48;
   $50 = +HEAPF32[(196968)>>2];
   $51 = $50;
   HEAPF64[$vararg_buffer>>3] = $51;
   (_fprintf($49,747489,$vararg_buffer)|0);
   $52 = HEAP32[(259664)>>2]|0;
   $53 = ($52|0)!=(0|0);
   $54 = HEAP32[(259664)>>2]|0;
   $55 = HEAP32[544648>>2]|0;
   $56 = $53 ? $54 : $55;
   (_fflush($56)|0);
  }
 }
 $57 = HEAP8[(296)>>0]|0;
 $58 = $57&1;
 do {
  if ($58) {
   $59 = HEAP32[(304)>>2]|0;
   $width = $59;
   $60 = HEAP32[(308)>>2]|0;
   $height = $60;
  } else {
   $61 = HEAP8[(325)>>0]|0;
   $62 = $61&1;
   $63 = $geom;
   if ($62) {
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (+($65>>>0));
    $67 = +HEAPF32[(196968)>>2];
    $68 = $66 * $67;
    $69 = (+_roundf($68));
    $70 = (~~(($69))>>>0);
    $base_width = $70;
    $71 = $base_width;
    $72 = (+($71>>>0));
    $73 = +HEAPF32[(288)>>2];
    $74 = $72 * $73;
    $75 = (+_roundf($74));
    $76 = (~~(($75))>>>0);
    $width = $76;
    $77 = $geom;
    $78 = ((($77)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (+($79>>>0));
    $81 = +HEAPF32[(292)>>2];
    $82 = $80 * $81;
    $83 = (+_roundf($82));
    $84 = (~~(($83))>>>0);
    $height = $84;
    break;
   } else {
    $85 = HEAP32[$63>>2]|0;
    $86 = (+($85>>>0));
    $87 = +HEAPF32[(288)>>2];
    $88 = $86 * $87;
    $89 = (+_roundf($88));
    $90 = (~~(($89))>>>0);
    $width = $90;
    $91 = $geom;
    $92 = ((($91)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (+($93>>>0));
    $95 = +HEAPF32[(292)>>2];
    $96 = $94 * $95;
    $97 = (+_roundf($96));
    $98 = (~~(($97))>>>0);
    $height = $98;
    break;
   }
  }
 } while(0);
 $99 = $width;
 $100 = ($99|0)!=(0);
 $101 = $height;
 $102 = ($101|0)!=(0);
 $or$cond = $100 & $102;
 $103 = HEAP8[102648>>0]|0;
 $104 = $103&1;
 if ($or$cond) {
  if ($104) {
   $105 = HEAP32[(259664)>>2]|0;
   $106 = ($105|0)!=(0|0);
   $107 = HEAP32[(259664)>>2]|0;
   $108 = HEAP32[544648>>2]|0;
   $109 = $106 ? $107 : $108;
   $110 = $width;
   $111 = $height;
   HEAP32[$vararg_buffer4>>2] = $110;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $111;
   (_fprintf($109,747532,$vararg_buffer4)|0);
   $112 = HEAP32[(259664)>>2]|0;
   $113 = ($112|0)!=(0|0);
   $114 = HEAP32[(259664)>>2]|0;
   $115 = HEAP32[544648>>2]|0;
   $116 = $113 ? $114 : $115;
   (_fflush($116)|0);
  }
 } else {
  if ($104) {
   $117 = HEAP32[(259664)>>2]|0;
   $118 = ($117|0)!=(0|0);
   $119 = HEAP32[(259664)>>2]|0;
   $120 = HEAP32[544648>>2]|0;
   $121 = $118 ? $119 : $120;
   (_fprintf($121,747558,$vararg_buffer8)|0);
   $122 = HEAP32[(259664)>>2]|0;
   $123 = ($122|0)!=(0|0);
   $124 = HEAP32[(259664)>>2]|0;
   $125 = HEAP32[544648>>2]|0;
   $126 = $123 ? $124 : $125;
   (_fflush($126)|0);
  }
 }
 HEAP32[(52)>>2] = 0;
 HEAP32[(44)>>2] = 0;
 HEAP32[(48)>>2] = 0;
 $127 = $scale;
 $128 = $127<<8;
 $129 = (_init_video_pixel_converter($128)|0);
 if (!($129)) {
  $130 = HEAP32[(259664)>>2]|0;
  $131 = ($130|0)!=(0|0);
  $132 = HEAP32[(259664)>>2]|0;
  $133 = HEAP32[544648>>2]|0;
  $134 = $131 ? $132 : $133;
  (_fprintf($134,747589,$vararg_buffer10)|0);
  $135 = HEAP32[(259664)>>2]|0;
  $136 = ($135|0)!=(0|0);
  $137 = HEAP32[(259664)>>2]|0;
  $138 = HEAP32[544648>>2]|0;
  $139 = $136 ? $137 : $138;
  (_fflush($139)|0);
  _rarch_fail369(1,747643);
 }
 ;HEAP32[$video>>2]=0|0;HEAP32[$video+4>>2]=0|0;HEAP32[$video+8>>2]=0|0;HEAP32[$video+12>>2]=0|0;HEAP32[$video+16>>2]=0|0;
 $140 = $width;
 HEAP32[$video>>2] = $140;
 $141 = $height;
 $142 = ((($video)) + 4|0);
 HEAP32[$142>>2] = $141;
 $143 = HEAP8[(296)>>0]|0;
 $144 = $143&1;
 $145 = ((($video)) + 8|0);
 $146 = $144&1;
 HEAP8[$145>>0] = $146;
 $147 = HEAP8[(312)>>0]|0;
 $148 = $147&1;
 if ($148) {
  $149 = HEAP8[(196989)>>0]|0;
  $150 = $149&1;
  $151 = $150 ^ 1;
  $154 = $151;
 } else {
  $154 = 0;
 }
 $152 = ((($video)) + 9|0);
 $153 = $154&1;
 HEAP8[$152>>0] = $153;
 $155 = HEAP8[(325)>>0]|0;
 $156 = $155&1;
 $157 = ((($video)) + 10|0);
 $158 = $156&1;
 HEAP8[$157>>0] = $158;
 $159 = HEAP8[(324)>>0]|0;
 $160 = $159&1;
 $161 = ((($video)) + 11|0);
 $162 = $160&1;
 HEAP8[$161>>0] = $162;
 $163 = $scale;
 $164 = ((($video)) + 12|0);
 HEAP32[$164>>2] = $163;
 $165 = HEAP8[(250984)>>0]|0;
 $166 = $165&1;
 $167 = HEAP32[(196984)>>2]|0;
 $168 = ($167|0)==(1);
 $169 = $166 ? 1 : $168;
 $170 = ((($video)) + 16|0);
 $171 = $169&1;
 HEAP8[$170>>0] = $171;
 $172 = HEAP32[(16)>>2]|0;
 $tmp = $172;
 $173 = HEAP32[(12)>>2]|0;
 $174 = HEAP32[$173>>2]|0;
 $175 = (FUNCTION_TABLE_iiii[$174 & 1023]($video,(16),(28))|0);
 HEAP32[(24)>>2] = $175;
 $176 = HEAP32[(24)>>2]|0;
 $177 = ($176|0)==(0|0);
 if ($177) {
  $178 = HEAP32[(259664)>>2]|0;
  $179 = ($178|0)!=(0|0);
  $180 = HEAP32[(259664)>>2]|0;
  $181 = HEAP32[544648>>2]|0;
  $182 = $179 ? $180 : $181;
  (_fprintf($182,747662,$vararg_buffer12)|0);
  $183 = HEAP32[(259664)>>2]|0;
  $184 = ($183|0)!=(0|0);
  $185 = HEAP32[(259664)>>2]|0;
  $186 = HEAP32[544648>>2]|0;
  $187 = $184 ? $185 : $186;
  (_fflush($187)|0);
  _rarch_fail369(1,747643);
 }
 HEAP32[(216)>>2] = 0;
 $188 = HEAP32[(12)>>2]|0;
 $189 = ((($188)) + 56|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ($190|0)!=(0|0);
 if ($191) {
  $192 = HEAP32[(12)>>2]|0;
  $193 = ((($192)) + 56|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = HEAP32[(24)>>2]|0;
  FUNCTION_TABLE_vii[$194 & 1023]($195,(216));
 }
 $196 = HEAP32[(12)>>2]|0;
 $197 = ((($196)) + 40|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ($198|0)!=(0|0);
 if ($199) {
  $200 = HEAP32[(12)>>2]|0;
  $201 = ((($200)) + 40|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = HEAP32[(24)>>2]|0;
  $204 = HEAP32[(340)>>2]|0;
  $205 = HEAP32[(196972)>>2]|0;
  $206 = (($204) + ($205))|0;
  $207 = (($206>>>0) % 4)&-1;
  FUNCTION_TABLE_vii[$202 & 1023]($203,$207);
 }
 $208 = HEAP32[(216)>>2]|0;
 $209 = ($208|0)!=(0|0);
 if ($209) {
  $210 = HEAP32[(216)>>2]|0;
  $211 = ((($210)) + 12|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ($212|0)!=(0|0);
  $214 = HEAP32[(336)>>2]|0;
  $215 = ($214|0)!=(4);
  $or$cond3 = $213 & $215;
  if ($or$cond3) {
   $216 = HEAP32[(216)>>2]|0;
   $217 = ((($216)) + 12|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = HEAP32[(24)>>2]|0;
   $220 = HEAP32[(336)>>2]|0;
   FUNCTION_TABLE_vii[$218 & 1023]($219,$220);
  }
 }
 $221 = HEAP32[(16)>>2]|0;
 $222 = ($221|0)==(0|0);
 do {
  if ($222) {
   $223 = HEAP8[102648>>0]|0;
   $224 = $223&1;
   if ($224) {
    $225 = HEAP32[(259664)>>2]|0;
    $226 = ($225|0)!=(0|0);
    $227 = HEAP32[(259664)>>2]|0;
    $228 = HEAP32[544648>>2]|0;
    $229 = $226 ? $227 : $228;
    (_fprintf($229,747725,$vararg_buffer14)|0);
    $230 = HEAP32[(259664)>>2]|0;
    $231 = ($230|0)!=(0|0);
    $232 = HEAP32[(259664)>>2]|0;
    $233 = HEAP32[544648>>2]|0;
    $234 = $231 ? $232 : $233;
    (_fflush($234)|0);
   }
   $235 = $tmp;
   HEAP32[(16)>>2] = $235;
   $236 = HEAP32[(16)>>2]|0;
   $237 = ($236|0)!=(0|0);
   if (!($237)) {
    $253 = HEAP32[(259664)>>2]|0;
    $254 = ($253|0)!=(0|0);
    $255 = HEAP32[(259664)>>2]|0;
    $256 = HEAP32[544648>>2]|0;
    $257 = $254 ? $255 : $256;
    (_fprintf($257,747887,$vararg_buffer18)|0);
    $258 = HEAP32[(259664)>>2]|0;
    $259 = ($258|0)!=(0|0);
    $260 = HEAP32[(259664)>>2]|0;
    $261 = HEAP32[544648>>2]|0;
    $262 = $259 ? $260 : $261;
    (_fflush($262)|0);
    _rarch_fail369(1,747643);
    break;
   }
   $238 = HEAP32[(16)>>2]|0;
   $239 = HEAP32[$238>>2]|0;
   $240 = (FUNCTION_TABLE_i[$239 & 511]()|0);
   HEAP32[(28)>>2] = $240;
   $241 = HEAP32[(28)>>2]|0;
   $242 = ($241|0)==(0|0);
   if ($242) {
    $243 = HEAP32[(259664)>>2]|0;
    $244 = ($243|0)!=(0|0);
    $245 = HEAP32[(259664)>>2]|0;
    $246 = HEAP32[544648>>2]|0;
    $247 = $244 ? $245 : $246;
    (_fprintf($247,747827,$vararg_buffer16)|0);
    $248 = HEAP32[(259664)>>2]|0;
    $249 = ($248|0)!=(0|0);
    $250 = HEAP32[(259664)>>2]|0;
    $251 = HEAP32[544648>>2]|0;
    $252 = $249 ? $250 : $251;
    (_fflush($252)|0);
    _rarch_fail369(1,747643);
   }
  }
 } while(0);
 $263 = HEAP32[(192)>>2]|0;
 $264 = ($263|0)!=(0|0);
 if ($264) {
  $265 = HEAP32[(192)>>2]|0;
  _input_overlay_free($265);
  HEAP32[(192)>>2] = 0;
 }
 $266 = HEAP8[(61632)>>0]|0;
 $267 = ($266<<24>>24)!=(0);
 if (!($267)) {
  $281 = (250976);
  $282 = $281;
  HEAP32[$282>>2] = 0;
  $283 = (($281) + 4)|0;
  $284 = $283;
  HEAP32[$284>>2] = 0;
  STACKTOP = sp;return;
 }
 $268 = (_input_overlay_new((61632))|0);
 HEAP32[(192)>>2] = $268;
 $269 = HEAP32[(192)>>2]|0;
 $270 = ($269|0)!=(0|0);
 if ($270) {
  $281 = (250976);
  $282 = $281;
  HEAP32[$282>>2] = 0;
  $283 = (($281) + 4)|0;
  $284 = $283;
  HEAP32[$284>>2] = 0;
  STACKTOP = sp;return;
 }
 $271 = HEAP32[(259664)>>2]|0;
 $272 = ($271|0)!=(0|0);
 $273 = HEAP32[(259664)>>2]|0;
 $274 = HEAP32[544648>>2]|0;
 $275 = $272 ? $273 : $274;
 (_fprintf($275,769654,$vararg_buffer20)|0);
 $276 = HEAP32[(259664)>>2]|0;
 $277 = ($276|0)!=(0|0);
 $278 = HEAP32[(259664)>>2]|0;
 $279 = HEAP32[544648>>2]|0;
 $280 = $277 ? $278 : $279;
 (_fflush($280)|0);
 $281 = (250976);
 $282 = $281;
 HEAP32[$282>>2] = 0;
 $283 = (($281) + 4)|0;
 $284 = $283;
 HEAP32[$284>>2] = 0;
 STACKTOP = sp;return;
}
function _init_audio() {
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $max_bufsamples = 0, $or$cond = 0, $outsamples_max = 0;
 var $resampler = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer24 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 _audio_convert_init_simd();
 $0 = HEAP32[(20)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $max_bufsamples = 4096;
 $2 = $max_bufsamples;
 $3 = $2<<4;
 $4 = (+($3>>>0));
 $5 = +HEAPF32[(98520)>>2];
 $6 = $4 * $5;
 $7 = (~~(($6))>>>0);
 $outsamples_max = $7;
 $8 = $outsamples_max;
 $9 = $8<<1;
 $10 = (_malloc($9)|0);
 HEAP32[(201760)>>2] = $10;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $12 = HEAP32[(259664)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = HEAP32[544648>>2]|0;
  $16 = $13 ? $14 : $15;
  HEAP32[$vararg_buffer>>2] = 747947;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 497;
  (_fprintf($16,765794,$vararg_buffer)|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  (_fflush($21)|0);
  _exit(2);
  // unreachable;
 }
 HEAP32[(201736)>>2] = 512;
 HEAP32[(201732)>>2] = 2048;
 $22 = HEAP32[(201736)>>2]|0;
 HEAP32[(201728)>>2] = $22;
 $23 = $max_bufsamples;
 $24 = $23<<1;
 $25 = (_malloc($24)|0);
 HEAP32[(201764)>>2] = $25;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $27 = HEAP32[(259664)>>2]|0;
  $28 = ($27|0)!=(0|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = HEAP32[544648>>2]|0;
  $31 = $28 ? $29 : $30;
  HEAP32[$vararg_buffer3>>2] = 747947;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 504;
  (_fprintf($31,765794,$vararg_buffer3)|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  (_fflush($36)|0);
  _exit(2);
  // unreachable;
 }
 $37 = $max_bufsamples;
 HEAP32[(201772)>>2] = $37;
 $38 = HEAP8[(16808)>>0]|0;
 $39 = $38&1;
 if (!($39)) {
  HEAP8[(102649)>>0] = 0;
  STACKTOP = sp;return;
 }
 $40 = HEAP32[8>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP8[(16824)>>0]|0;
 $43 = $42 << 24 >> 24;
 $44 = ($43|0)!=(0);
 $45 = $44 ? (16824) : 0;
 $46 = HEAP32[(16812)>>2]|0;
 $47 = HEAP32[(20920)>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$41 & 1023]($45,$46,$47)|0);
 HEAP32[(20)>>2] = $48;
 $49 = HEAP32[(20)>>2]|0;
 $50 = ($49|0)!=(0|0);
 if (!($50)) {
  $51 = HEAP32[(259664)>>2]|0;
  $52 = ($51|0)!=(0|0);
  $53 = HEAP32[(259664)>>2]|0;
  $54 = HEAP32[544648>>2]|0;
  $55 = $52 ? $53 : $54;
  (_fprintf($55,747956,$vararg_buffer7)|0);
  $56 = HEAP32[(259664)>>2]|0;
  $57 = ($56|0)!=(0|0);
  $58 = HEAP32[(259664)>>2]|0;
  $59 = HEAP32[544648>>2]|0;
  $60 = $57 ? $58 : $59;
  (_fflush($60)|0);
  HEAP8[(102649)>>0] = 0;
 }
 $61 = HEAP8[(102649)>>0]|0;
 $62 = $61&1;
 if ($62) {
  $63 = HEAP32[8>>2]|0;
  $64 = ((($63)) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0|0);
  if ($66) {
   $67 = HEAP32[8>>2]|0;
   $68 = ((($67)) + 24|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = HEAP32[(20)>>2]|0;
   $71 = (FUNCTION_TABLE_ii[$69 & 511]($70)|0);
   if ($71) {
    HEAP8[(201752)>>0] = 1;
   }
  }
 }
 $72 = HEAP8[(20924)>>0]|0;
 $73 = $72&1;
 if (!($73)) {
  $74 = HEAP8[(102649)>>0]|0;
  $75 = $74&1;
  if ($75) {
   $76 = HEAP32[8>>2]|0;
   $77 = ((($76)) + 16|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = HEAP32[(20)>>2]|0;
   FUNCTION_TABLE_vii[$78 & 1023]($79,1);
   $80 = HEAP32[(201732)>>2]|0;
   HEAP32[(201728)>>2] = $80;
  }
 }
 $81 = HEAP32[(16812)>>2]|0;
 $82 = (+($81>>>0));
 $83 = +HEAPF32[(16820)>>2];
 $84 = $83;
 $85 = $82 / $84;
 HEAPF64[(201744)>>3] = $85;
 HEAPF64[(201792)>>3] = $85;
 $86 = HEAP8[(25032)>>0]|0;
 $87 = $86 << 24 >> 24;
 $88 = ($87|0)!=(0);
 $89 = $88 ? (25032) : 0;
 $resampler = $89;
 $90 = $resampler;
 $91 = +HEAPF64[(201792)>>3];
 $92 = (_rarch_resampler_realloc((201712),(201716),$90,$91)|0);
 if (!($92)) {
  $93 = HEAP32[(259664)>>2]|0;
  $94 = ($93|0)!=(0|0);
  $95 = HEAP32[(259664)>>2]|0;
  $96 = HEAP32[544648>>2]|0;
  $97 = $94 ? $95 : $96;
  $98 = $resampler;
  $99 = ($98|0)!=(0|0);
  $100 = $resampler;
  $101 = $99 ? $100 : 748042;
  HEAP32[$vararg_buffer9>>2] = $101;
  (_fprintf($97,748052,$vararg_buffer9)|0);
  $102 = HEAP32[(259664)>>2]|0;
  $103 = ($102|0)!=(0|0);
  $104 = HEAP32[(259664)>>2]|0;
  $105 = HEAP32[544648>>2]|0;
  $106 = $103 ? $104 : $105;
  (_fflush($106)|0);
  HEAP8[(102649)>>0] = 0;
 }
 $107 = $max_bufsamples;
 $108 = $107<<2;
 $109 = (_malloc($108)|0);
 HEAP32[(201720)>>2] = $109;
 $110 = ($109|0)!=(0|0);
 if (!($110)) {
  $111 = HEAP32[(259664)>>2]|0;
  $112 = ($111|0)!=(0|0);
  $113 = HEAP32[(259664)>>2]|0;
  $114 = HEAP32[544648>>2]|0;
  $115 = $112 ? $113 : $114;
  HEAP32[$vararg_buffer12>>2] = 747947;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = 561;
  (_fprintf($115,765794,$vararg_buffer12)|0);
  $116 = HEAP32[(259664)>>2]|0;
  $117 = ($116|0)!=(0|0);
  $118 = HEAP32[(259664)>>2]|0;
  $119 = HEAP32[544648>>2]|0;
  $120 = $117 ? $118 : $119;
  (_fflush($120)|0);
  _exit(2);
  // unreachable;
 }
 HEAP32[(201724)>>2] = 0;
 $121 = HEAP32[(16812)>>2]|0;
 $122 = (+($121>>>0));
 $123 = +HEAPF32[(16820)>>2];
 $124 = $123 * 16.0;
 $125 = $122 < $124;
 if (!($125)) {
  $126 = HEAP32[(259664)>>2]|0;
  $127 = ($126|0)!=(0|0);
  $128 = HEAP32[(259664)>>2]|0;
  $129 = HEAP32[544648>>2]|0;
  $130 = $127 ? $128 : $129;
  HEAP32[$vararg_buffer16>>2] = 747947;
  $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
  HEAP32[$vararg_ptr19>>2] = 565;
  (_fprintf($130,765794,$vararg_buffer16)|0);
  $131 = HEAP32[(259664)>>2]|0;
  $132 = ($131|0)!=(0|0);
  $133 = HEAP32[(259664)>>2]|0;
  $134 = HEAP32[544648>>2]|0;
  $135 = $132 ? $133 : $134;
  (_fflush($135)|0);
  _exit(2);
  // unreachable;
 }
 $136 = $outsamples_max;
 $137 = $136<<2;
 $138 = (_malloc($137)|0);
 HEAP32[(201756)>>2] = $138;
 $139 = ($138|0)!=(0|0);
 if (!($139)) {
  $140 = HEAP32[(259664)>>2]|0;
  $141 = ($140|0)!=(0|0);
  $142 = HEAP32[(259664)>>2]|0;
  $143 = HEAP32[544648>>2]|0;
  $144 = $141 ? $142 : $143;
  HEAP32[$vararg_buffer20>>2] = 747947;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = 566;
  (_fprintf($144,765794,$vararg_buffer20)|0);
  $145 = HEAP32[(259664)>>2]|0;
  $146 = ($145|0)!=(0|0);
  $147 = HEAP32[(259664)>>2]|0;
  $148 = HEAP32[544648>>2]|0;
  $149 = $146 ? $147 : $148;
  (_fflush($149)|0);
  _exit(2);
  // unreachable;
 }
 HEAP8[(201788)>>0] = 0;
 $150 = HEAP32[(201604)>>2]|0;
 $151 = ($150|0)!=(0|0);
 do {
  if (!($151)) {
   $152 = HEAP8[(102649)>>0]|0;
   $153 = $152&1;
   if ($153) {
    $154 = HEAP8[(25021)>>0]|0;
    $155 = $154&1;
    if ($155) {
     $156 = HEAP32[8>>2]|0;
     $157 = ((($156)) + 36|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)!=(0|0);
     if ($159) {
      $160 = HEAP32[8>>2]|0;
      $161 = ((($160)) + 32|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)!=(0|0);
      if ($163) {
       $164 = HEAP32[8>>2]|0;
       $165 = ((($164)) + 36|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = HEAP32[(20)>>2]|0;
       $168 = (FUNCTION_TABLE_ii[$166 & 511]($167)|0);
       HEAP32[(201800)>>2] = $168;
       HEAP8[(201788)>>0] = 1;
       break;
      }
     }
     $169 = HEAP32[(259664)>>2]|0;
     $170 = ($169|0)!=(0|0);
     $171 = HEAP32[(259664)>>2]|0;
     $172 = HEAP32[544648>>2]|0;
     $173 = $170 ? $171 : $172;
     (_fprintf($173,748111,$vararg_buffer24)|0);
     $174 = HEAP32[(259664)>>2]|0;
     $175 = ($174|0)!=(0|0);
     $176 = HEAP32[(259664)>>2]|0;
     $177 = HEAP32[544648>>2]|0;
     $178 = $175 ? $176 : $177;
     (_fflush($178)|0);
    }
   }
  }
 } while(0);
 $179 = +HEAPF32[(25028)>>2];
 HEAPF32[(201804)>>2] = $179;
 $180 = +HEAPF32[(25028)>>2];
 $181 = (+_db_to_gain380($180));
 HEAPF32[(201808)>>2] = $181;
 $182 = (234584);
 $183 = $182;
 HEAP32[$183>>2] = 0;
 $184 = (($182) + 4)|0;
 $185 = $184;
 HEAP32[$185>>2] = 0;
 $186 = HEAP8[(102649)>>0]|0;
 $187 = $186&1;
 if (!($187)) {
  STACKTOP = sp;return;
 }
 $188 = HEAP8[(201753)>>0]|0;
 $189 = $188&1;
 $$not = $189 ^ 1;
 $190 = HEAP32[(201604)>>2]|0;
 $191 = ($190|0)!=(0|0);
 $or$cond = $$not & $191;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $192 = HEAP32[8>>2]|0;
 $193 = ((($192)) + 12|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = HEAP32[(20)>>2]|0;
 (FUNCTION_TABLE_ii[$194 & 511]($195)|0);
 STACKTOP = sp;return;
}
function _uninit_drivers() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _uninit_audio();
 $0 = HEAP32[(201672)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP8[(33)>>0]|0;
  $3 = $2&1;
  if (!($3)) {
   $4 = HEAP32[(201672)>>2]|0;
   FUNCTION_TABLE_v[$4 & 511]();
  }
 }
 _uninit_video_input();
 $5 = HEAP8[(35)>>0]|0;
 $6 = $5&1;
 if ($6) {
  HEAP32[(24)>>2] = 0;
 }
 $7 = HEAP8[(36)>>0]|0;
 $8 = $7&1;
 if ($8) {
  HEAP32[(20)>>2] = 0;
 }
 $9 = HEAP8[(37)>>0]|0;
 $10 = $9&1;
 if (!($10)) {
  HEAP8[(35)>>0] = 0;
  HEAP8[(36)>>0] = 0;
  HEAP8[(37)>>0] = 0;
  return;
 }
 HEAP32[(28)>>2] = 0;
 HEAP8[(35)>>0] = 0;
 HEAP8[(36)>>0] = 0;
 HEAP8[(37)>>0] = 0;
 return;
}
function _uninit_audio() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(20)>>2]|0;
 $1 = ($0|0)!=(0|0);
 $2 = HEAP32[8>>2]|0;
 $3 = ($2|0)!=(0|0);
 $or$cond = $1 & $3;
 if ($or$cond) {
  $4 = HEAP32[8>>2]|0;
  $5 = ((($4)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[(20)>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($7);
 }
 $8 = HEAP32[(201760)>>2]|0;
 _free($8);
 HEAP32[(201760)>>2] = 0;
 HEAP32[(201724)>>2] = 0;
 $9 = HEAP32[(201764)>>2]|0;
 _free($9);
 HEAP32[(201764)>>2] = 0;
 $10 = HEAP8[(16808)>>0]|0;
 $11 = $10&1;
 if (!($11)) {
  HEAP8[(102649)>>0] = 0;
  return;
 }
 $12 = HEAP32[(201716)>>2]|0;
 $13 = ($12|0)!=(0|0);
 $14 = HEAP32[(201712)>>2]|0;
 $15 = ($14|0)!=(0|0);
 $or$cond3 = $13 & $15;
 if ($or$cond3) {
  $16 = HEAP32[(201716)>>2]|0;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[(201712)>>2]|0;
  FUNCTION_TABLE_vi[$18 & 1023]($19);
 }
 HEAP32[(201716)>>2] = 0;
 HEAP32[(201712)>>2] = 0;
 $20 = HEAP32[(201720)>>2]|0;
 _free($20);
 HEAP32[(201720)>>2] = 0;
 $21 = HEAP32[(201756)>>2]|0;
 _free($21);
 HEAP32[(201756)>>2] = 0;
 _compute_audio_buffer_statistics();
 return;
}
function _uninit_video_input() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(192)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(192)>>2]|0;
  _input_overlay_free($2);
  HEAP32[(192)>>2] = 0;
  ;HEAP32[(200)>>2]=0|0;HEAP32[(200)+4>>2]=0|0;HEAP32[(200)+8>>2]=0|0;HEAP32[(200)+12>>2]=0|0;
 }
 $3 = HEAP32[(28)>>2]|0;
 $4 = HEAP32[(24)>>2]|0;
 $5 = ($3|0)!=($4|0);
 $6 = HEAP32[(16)>>2]|0;
 $7 = ($6|0)!=(0|0);
 $or$cond = $5 & $7;
 if ($or$cond) {
  $8 = HEAP32[(16)>>2]|0;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[(28)>>2]|0;
  FUNCTION_TABLE_vi[$10 & 1023]($11);
 }
 $12 = HEAP32[(24)>>2]|0;
 $13 = ($12|0)!=(0|0);
 $14 = HEAP32[(12)>>2]|0;
 $15 = ($14|0)!=(0|0);
 $or$cond3 = $13 & $15;
 if (!($or$cond3)) {
  _deinit_pixel_converter();
  _deinit_shader_dir();
  _compute_monitor_fps_statistics();
  return;
 }
 $16 = HEAP32[(12)>>2]|0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[(24)>>2]|0;
 FUNCTION_TABLE_vi[$18 & 1023]($19);
 _deinit_pixel_converter();
 _deinit_shader_dir();
 _compute_monitor_fps_statistics();
 return;
}
function _driver_monitor_fps_statistics($refresh_rate,$deviation,$sample_points) {
 $refresh_rate = $refresh_rate|0;
 $deviation = $deviation|0;
 $sample_points = $sample_points|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $accum = 0, $accum_var = 0, $avg = 0, $diff = 0, $i = 0, $i1 = 0, $samples = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 56|0;
 $accum = sp + 24|0;
 $avg = sp + 16|0;
 $accum_var = sp + 8|0;
 $diff = sp;
 $1 = $refresh_rate;
 $2 = $deviation;
 $3 = $sample_points;
 $4 = HEAP8[(8544)>>0]|0;
 $5 = $4&1;
 if ($5) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $155 = $$pre_trunc&1;
  STACKTOP = sp;return ($155|0);
 }
 $6 = (250976);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (0)<($11>>>0);
 $13 = (2048)<($8>>>0);
 $14 = (0)==($11|0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 $17 = (250976);
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $16 ? 2048 : $19;
 $16 ? 0 : $22;
 $samples = $23;
 $24 = $samples;
 $25 = ($24>>>0)<(2);
 if ($25) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $155 = $$pre_trunc&1;
  STACKTOP = sp;return ($155|0);
 }
 $26 = $accum;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = 0;
 $i = 0;
 while(1) {
  $30 = $i;
  $31 = $samples;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $i;
  $34 = ((234592) + ($33<<3)|0);
  $35 = $34;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = $accum;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (_i64Add(($43|0),($46|0),($37|0),($40|0))|0);
  $48 = tempRet0;
  $49 = $accum;
  $50 = $49;
  HEAP32[$50>>2] = $47;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $55 = $accum;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = $samples;
 $62 = (___divdi3(($57|0),($60|0),($61|0),0)|0);
 $63 = tempRet0;
 $64 = $avg;
 $65 = $64;
 HEAP32[$65>>2] = $62;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $63;
 $68 = $accum_var;
 $69 = $68;
 HEAP32[$69>>2] = 0;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = 0;
 $i1 = 0;
 while(1) {
  $72 = $i1;
  $73 = $samples;
  $74 = ($72>>>0)<($73>>>0);
  if (!($74)) {
   break;
  }
  $75 = $i1;
  $76 = ((234592) + ($75<<3)|0);
  $77 = $76;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $avg;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (_i64Subtract(($79|0),($82|0),($85|0),($88|0))|0);
  $90 = tempRet0;
  $91 = $diff;
  $92 = $91;
  HEAP32[$92>>2] = $89;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP32[$94>>2] = $90;
  $95 = $diff;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($95) + 4)|0;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = $diff;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($101) + 4)|0;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = (___muldi3(($97|0),($100|0),($103|0),($106|0))|0);
  $108 = tempRet0;
  $109 = $accum_var;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (_i64Add(($111|0),($114|0),($107|0),($108|0))|0);
  $116 = tempRet0;
  $117 = $accum_var;
  $118 = $117;
  HEAP32[$118>>2] = $115;
  $119 = (($117) + 4)|0;
  $120 = $119;
  HEAP32[$120>>2] = $116;
  $121 = $i1;
  $122 = (($121) + 1)|0;
  $i1 = $122;
 }
 $123 = $accum_var;
 $124 = $123;
 $125 = HEAP32[$124>>2]|0;
 $126 = (($123) + 4)|0;
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = (+($125>>>0)) + (4294967296.0*(+($128|0)));
 $130 = $samples;
 $131 = (($130) - 1)|0;
 $132 = (+($131>>>0));
 $133 = $129 / $132;
 $134 = (+Math_sqrt((+$133)));
 $135 = $avg;
 $136 = $135;
 $137 = HEAP32[$136>>2]|0;
 $138 = (($135) + 4)|0;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (+($137>>>0)) + (4294967296.0*(+($140|0)));
 $142 = $134 / $141;
 $143 = $2;
 HEAPF64[$143>>3] = $142;
 $144 = $avg;
 $145 = $144;
 $146 = HEAP32[$145>>2]|0;
 $147 = (($144) + 4)|0;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = (+($146>>>0)) + (4294967296.0*(+($149|0)));
 $151 = 1.0E+6 / $150;
 $152 = $1;
 HEAPF64[$152>>3] = $151;
 $153 = $samples;
 $154 = $3;
 HEAP32[$154>>2] = $153;
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $155 = $$pre_trunc&1;
 STACKTOP = sp;return ($155|0);
}
function _find_audio_driver() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0>>>0)<(2);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (264732 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_strcasecmp((16776),$6)|0);
  $8 = ($7|0)==(0);
  $9 = $i;
  if ($8) {
   label = 4;
   break;
  }
  $12 = (($9) + 1)|0;
  $i = $12;
 }
 if ((label|0) == 4) {
  $10 = (264732 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[8>>2] = $11;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[(259664)>>2]|0;
 $14 = ($13|0)!=(0|0);
 $15 = HEAP32[(259664)>>2]|0;
 $16 = HEAP32[544648>>2]|0;
 $17 = $14 ? $15 : $16;
 HEAP32[$vararg_buffer>>2] = (16776);
 (_fprintf($17,749289,$vararg_buffer)|0);
 $18 = HEAP32[(259664)>>2]|0;
 $19 = ($18|0)!=(0|0);
 $20 = HEAP32[(259664)>>2]|0;
 $21 = HEAP32[544648>>2]|0;
 $22 = $19 ? $20 : $21;
 (_fflush($22)|0);
 $23 = HEAP8[102648>>0]|0;
 $24 = $23&1;
 if ($24) {
  $25 = HEAP32[(259664)>>2]|0;
  $26 = ($25|0)!=(0|0);
  $27 = HEAP32[(259664)>>2]|0;
  $28 = HEAP32[544648>>2]|0;
  $29 = $26 ? $27 : $28;
  (_fprintf($29,749353,$vararg_buffer1)|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = ($30|0)!=(0|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = HEAP32[544648>>2]|0;
  $34 = $31 ? $32 : $33;
  (_fflush($34)|0);
 }
 $i1 = 0;
 while(1) {
  $35 = $i1;
  $36 = ($35>>>0)<(2);
  if (!($36)) {
   break;
  }
  $37 = HEAP8[102648>>0]|0;
  $38 = $37&1;
  if ($38) {
   $39 = HEAP32[(259664)>>2]|0;
   $40 = ($39|0)!=(0|0);
   $41 = HEAP32[(259664)>>2]|0;
   $42 = HEAP32[544648>>2]|0;
   $43 = $40 ? $41 : $42;
   $44 = $i1;
   $45 = (264732 + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $48;
   (_fprintf($43,749150,$vararg_buffer3)|0);
   $49 = HEAP32[(259664)>>2]|0;
   $50 = ($49|0)!=(0|0);
   $51 = HEAP32[(259664)>>2]|0;
   $52 = HEAP32[544648>>2]|0;
   $53 = $50 ? $51 : $52;
   (_fflush($53)|0);
  }
  $54 = $i1;
  $55 = (($54) + 1)|0;
  $i1 = $55;
 }
 _rarch_fail369(1,749383);
 STACKTOP = sp;return;
}
function _find_video_driver() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0>>>0)<(1);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (264740 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_strcasecmp(224,$6)|0);
  $8 = ($7|0)==(0);
  $9 = $i;
  if ($8) {
   label = 4;
   break;
  }
  $12 = (($9) + 1)|0;
  $i = $12;
 }
 if ((label|0) == 4) {
  $10 = (264740 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[(12)>>2] = $11;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[(259664)>>2]|0;
 $14 = ($13|0)!=(0|0);
 $15 = HEAP32[(259664)>>2]|0;
 $16 = HEAP32[544648>>2]|0;
 $17 = $14 ? $15 : $16;
 HEAP32[$vararg_buffer>>2] = 224;
 (_fprintf($17,749175,$vararg_buffer)|0);
 $18 = HEAP32[(259664)>>2]|0;
 $19 = ($18|0)!=(0|0);
 $20 = HEAP32[(259664)>>2]|0;
 $21 = HEAP32[544648>>2]|0;
 $22 = $19 ? $20 : $21;
 (_fflush($22)|0);
 $23 = HEAP8[102648>>0]|0;
 $24 = $23&1;
 if ($24) {
  $25 = HEAP32[(259664)>>2]|0;
  $26 = ($25|0)!=(0|0);
  $27 = HEAP32[(259664)>>2]|0;
  $28 = HEAP32[544648>>2]|0;
  $29 = $26 ? $27 : $28;
  (_fprintf($29,749239,$vararg_buffer1)|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = ($30|0)!=(0|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = HEAP32[544648>>2]|0;
  $34 = $31 ? $32 : $33;
  (_fflush($34)|0);
 }
 $i1 = 0;
 while(1) {
  $35 = $i1;
  $36 = ($35>>>0)<(1);
  if (!($36)) {
   break;
  }
  $37 = HEAP8[102648>>0]|0;
  $38 = $37&1;
  if ($38) {
   $39 = HEAP32[(259664)>>2]|0;
   $40 = ($39|0)!=(0|0);
   $41 = HEAP32[(259664)>>2]|0;
   $42 = HEAP32[544648>>2]|0;
   $43 = $40 ? $41 : $42;
   $44 = $i1;
   $45 = (264740 + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $48;
   (_fprintf($43,749150,$vararg_buffer3)|0);
   $49 = HEAP32[(259664)>>2]|0;
   $50 = ($49|0)!=(0|0);
   $51 = HEAP32[(259664)>>2]|0;
   $52 = HEAP32[544648>>2]|0;
   $53 = $50 ? $51 : $52;
   (_fflush($53)|0);
  }
  $54 = $i1;
  $55 = (($54) + 1)|0;
  $i1 = $55;
 }
 _rarch_fail369(1,749269);
 STACKTOP = sp;return;
}
function _find_input_driver() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0>>>0)<(1);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (264744 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_strcasecmp((25064),$6)|0);
  $8 = ($7|0)==(0);
  $9 = $i;
  if ($8) {
   label = 4;
   break;
  }
  $12 = (($9) + 1)|0;
  $i = $12;
 }
 if ((label|0) == 4) {
  $10 = (264744 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[(16)>>2] = $11;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[(259664)>>2]|0;
 $14 = ($13|0)!=(0|0);
 $15 = HEAP32[(259664)>>2]|0;
 $16 = HEAP32[544648>>2]|0;
 $17 = $14 ? $15 : $16;
 HEAP32[$vararg_buffer>>2] = (25064);
 (_fprintf($17,749056,$vararg_buffer)|0);
 $18 = HEAP32[(259664)>>2]|0;
 $19 = ($18|0)!=(0|0);
 $20 = HEAP32[(259664)>>2]|0;
 $21 = HEAP32[544648>>2]|0;
 $22 = $19 ? $20 : $21;
 (_fflush($22)|0);
 $23 = HEAP8[102648>>0]|0;
 $24 = $23&1;
 if ($24) {
  $25 = HEAP32[(259664)>>2]|0;
  $26 = ($25|0)!=(0|0);
  $27 = HEAP32[(259664)>>2]|0;
  $28 = HEAP32[544648>>2]|0;
  $29 = $26 ? $27 : $28;
  (_fprintf($29,749120,$vararg_buffer1)|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = ($30|0)!=(0|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = HEAP32[544648>>2]|0;
  $34 = $31 ? $32 : $33;
  (_fflush($34)|0);
 }
 $i1 = 0;
 while(1) {
  $35 = $i1;
  $36 = ($35>>>0)<(1);
  if (!($36)) {
   break;
  }
  $37 = HEAP8[102648>>0]|0;
  $38 = $37&1;
  if ($38) {
   $39 = HEAP32[(259664)>>2]|0;
   $40 = ($39|0)!=(0|0);
   $41 = HEAP32[(259664)>>2]|0;
   $42 = HEAP32[544648>>2]|0;
   $43 = $40 ? $41 : $42;
   $44 = $i1;
   $45 = (264744 + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $48;
   (_fprintf($43,749150,$vararg_buffer3)|0);
   $49 = HEAP32[(259664)>>2]|0;
   $50 = ($49|0)!=(0|0);
   $51 = HEAP32[(259664)>>2]|0;
   $52 = HEAP32[544648>>2]|0;
   $53 = $50 ? $51 : $52;
   (_fflush($53)|0);
  }
  $54 = $i1;
  $55 = (($54) + 1)|0;
  $i1 = $55;
 }
 _rarch_fail369(1,749155);
 STACKTOP = sp;return;
}
function _adjust_system_rates() {
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $info = 0, $timing_skew = 0.0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 HEAP8[(196989)>>0] = 0;
 $info = (196952);
 $0 = $info;
 $1 = +HEAPF64[$0>>3];
 $2 = $1 <= 0.0;
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $info;
 $4 = ((($3)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $5 <= 0.0;
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $info;
 $8 = +HEAPF64[$7>>3];
 $9 = +HEAPF32[(8540)>>2];
 $10 = $9;
 $11 = $8 / $10;
 $12 = 1.0 - $11;
 $13 = (+Math_abs((+$12)));
 $14 = $13;
 $timing_skew = $14;
 $15 = $timing_skew;
 $16 = $15 > 0.05000000074505806;
 if ($16) {
  $17 = HEAP8[102648>>0]|0;
  $18 = $17&1;
  if ($18) {
   $19 = HEAP32[(259664)>>2]|0;
   $20 = ($19|0)!=(0|0);
   $21 = HEAP32[(259664)>>2]|0;
   $22 = HEAP32[544648>>2]|0;
   $23 = $20 ? $21 : $22;
   $24 = +HEAPF32[(8540)>>2];
   $25 = $24;
   $26 = $info;
   $27 = +HEAPF64[$26>>3];
   $28 = $27;
   $29 = $28;
   HEAPF64[$vararg_buffer>>3] = $25;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   HEAPF64[$vararg_ptr1>>3] = $29;
   (_fprintf($23,748861,$vararg_buffer)|0);
   $30 = HEAP32[(259664)>>2]|0;
   $31 = ($30|0)!=(0|0);
   $32 = HEAP32[(259664)>>2]|0;
   $33 = HEAP32[544648>>2]|0;
   $34 = $31 ? $32 : $33;
   (_fflush($34)|0);
  }
  $35 = $info;
  $36 = +HEAPF64[$35>>3];
  $37 = +HEAPF32[(8540)>>2];
  $38 = $37;
  $39 = $36 > $38;
  if ($39) {
   HEAP8[(196989)>>0] = 1;
   $40 = HEAP8[102648>>0]|0;
   $41 = $40&1;
   if ($41) {
    $42 = HEAP32[(259664)>>2]|0;
    $43 = ($42|0)!=(0|0);
    $44 = HEAP32[(259664)>>2]|0;
    $45 = HEAP32[544648>>2]|0;
    $46 = $43 ? $44 : $45;
    (_fprintf($46,748952,$vararg_buffer2)|0);
    $47 = HEAP32[(259664)>>2]|0;
    $48 = ($47|0)!=(0|0);
    $49 = HEAP32[(259664)>>2]|0;
    $50 = HEAP32[544648>>2]|0;
    $51 = $48 ? $49 : $50;
    (_fflush($51)|0);
   }
  }
  $52 = $info;
  $53 = ((($52)) + 8|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $54;
  HEAPF32[(16820)>>2] = $55;
 } else {
  $56 = $info;
  $57 = ((($56)) + 8|0);
  $58 = +HEAPF64[$57>>3];
  $59 = +HEAPF32[(8540)>>2];
  $60 = $59;
  $61 = $info;
  $62 = +HEAPF64[$61>>3];
  $63 = $60 / $62;
  $64 = $58 * $63;
  $65 = $64;
  HEAPF32[(16820)>>2] = $65;
 }
 $66 = HEAP8[102648>>0]|0;
 $67 = $66&1;
 if ($67) {
  $68 = HEAP32[(259664)>>2]|0;
  $69 = ($68|0)!=(0|0);
  $70 = HEAP32[(259664)>>2]|0;
  $71 = HEAP32[544648>>2]|0;
  $72 = $69 ? $70 : $71;
  $73 = +HEAPF32[(16820)>>2];
  $74 = $73;
  HEAPF64[$vararg_buffer4>>3] = $74;
  (_fprintf($72,749010,$vararg_buffer4)|0);
  $75 = HEAP32[(259664)>>2]|0;
  $76 = ($75|0)!=(0|0);
  $77 = HEAP32[(259664)>>2]|0;
  $78 = HEAP32[544648>>2]|0;
  $79 = $76 ? $77 : $78;
  (_fflush($79)|0);
 }
 $80 = HEAP32[(24)>>2]|0;
 $81 = ($80|0)!=(0|0);
 if (!($81)) {
  STACKTOP = sp;return;
 }
 $82 = HEAP8[(196989)>>0]|0;
 $83 = $82&1;
 if ($83) {
  $84 = HEAP32[(12)>>2]|0;
  $85 = ((($84)) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = HEAP32[(24)>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($87,1);
  STACKTOP = sp;return;
 } else {
  $88 = HEAP8[(40)>>0]|0;
  $89 = $88&1;
  _driver_set_nonblock_state($89);
  STACKTOP = sp;return;
 }
}
function _init_shader_dir() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP8[(8545)>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (_dir_list_new((8545),748806,0)|0);
 HEAP32[(259500)>>2] = $2;
 $3 = HEAP32[(259500)>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[(259500)>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   HEAP32[(259504)>>2] = 0;
   $9 = HEAP32[(259500)>>2]|0;
   _dir_list_sort($9,0);
   $i = 0;
   while(1) {
    $10 = $i;
    $11 = HEAP32[(259500)>>2]|0;
    $12 = ((($11)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($10>>>0)<($13>>>0);
    if (!($14)) {
     break;
    }
    $15 = HEAP8[102648>>0]|0;
    $16 = $15&1;
    if ($16) {
     $17 = HEAP32[(259664)>>2]|0;
     $18 = ($17|0)!=(0|0);
     $19 = HEAP32[(259664)>>2]|0;
     $20 = HEAP32[544648>>2]|0;
     $21 = $18 ? $19 : $20;
     $22 = $i;
     $23 = HEAP32[(259500)>>2]|0;
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + ($22<<3)|0);
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$vararg_buffer>>2] = $26;
     (_fprintf($21,748831,$vararg_buffer)|0);
     $27 = HEAP32[(259664)>>2]|0;
     $28 = ($27|0)!=(0|0);
     $29 = HEAP32[(259664)>>2]|0;
     $30 = HEAP32[544648>>2]|0;
     $31 = $28 ? $29 : $30;
     (_fflush($31)|0);
    }
    $32 = $i;
    $33 = (($32) + 1)|0;
    $i = $33;
   }
   STACKTOP = sp;return;
  }
 }
 _deinit_shader_dir();
 STACKTOP = sp;return;
}
function _next_pow2($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = (($1) + -1)|0;
 $0 = $2;
 $3 = $0;
 $4 = $3 >>> 1;
 $5 = $0;
 $6 = $5 | $4;
 $0 = $6;
 $7 = $0;
 $8 = $7 >>> 2;
 $9 = $0;
 $10 = $9 | $8;
 $0 = $10;
 $11 = $0;
 $12 = $11 >>> 4;
 $13 = $0;
 $14 = $13 | $12;
 $0 = $14;
 $15 = $0;
 $16 = $15 >>> 8;
 $17 = $0;
 $18 = $17 | $16;
 $0 = $18;
 $19 = $0;
 $20 = $19 >>> 16;
 $21 = $0;
 $22 = $21 | $20;
 $0 = $22;
 $23 = $0;
 $24 = (($23) + 1)|0;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _init_video_pixel_converter($size) {
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $1 = $size;
 _deinit_pixel_converter();
 $2 = HEAP32[(196984)>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = HEAP32[(259664)>>2]|0;
   $5 = ($4|0)!=(0|0);
   $6 = HEAP32[(259664)>>2]|0;
   $7 = HEAP32[544648>>2]|0;
   $8 = $5 ? $6 : $7;
   (_fprintf($8,748685,$vararg_buffer)|0);
   $9 = HEAP32[(259664)>>2]|0;
   $10 = ($9|0)!=(0|0);
   $11 = HEAP32[(259664)>>2]|0;
   $12 = HEAP32[544648>>2]|0;
   $13 = $10 ? $11 : $12;
   (_fflush($13)|0);
   HEAP32[(88)>>2] = 1;
   HEAP32[(80)>>2] = 2;
   HEAP32[(84)>>2] = 3;
   $14 = (_scaler_ctx_gen_filter((56))|0);
   if ($14) {
    $15 = $1;
    $16 = $1;
    $17 = Math_imul($15, $16)|0;
    $18 = (_calloc(2,$17)|0);
    HEAP32[(184)>>2] = $18;
    break;
   }
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $19 = $$pre_trunc&1;
   STACKTOP = sp;return ($19|0);
  }
 } while(0);
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $19 = $$pre_trunc&1;
 STACKTOP = sp;return ($19|0);
}
function _rarch_fail369($error_code,$error) {
 $error_code = $error_code|0;
 $error = $error|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $error_code;
 $1 = $error;
 $2 = HEAP8[(259669)>>0]|0;
 $3 = $2&1;
 if ($3) {
  $14 = $1;
  (_strlcpy_rarch__((259671),$14,1024)|0);
  $15 = $0;
  _longjmp(((260696)|0),($15|0));
  // unreachable;
 } else {
  $4 = HEAP32[(259664)>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = HEAP32[544648>>2]|0;
  $8 = $5 ? $6 : $7;
  HEAP32[$vararg_buffer>>2] = 752155;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 846;
  (_fprintf($8,765794,$vararg_buffer)|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  (_fflush($13)|0);
  _exit(2);
  // unreachable;
 }
}
function _db_to_gain380($db) {
 $db = +$db;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $db;
 $1 = $0;
 $2 = $1 / 20.0;
 $3 = (+Math_pow(10.0,(+$2)));
 STACKTOP = sp;return (+$3);
}
function _compute_audio_buffer_statistics() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $accum = 0, $accum_var = 0, $avg = 0;
 var $avg_filled = 0.0, $deviation = 0.0, $diff = 0, $high_water_count = 0, $high_water_size = 0, $i = 0, $i1 = 0, $i2 = 0, $low_water_count = 0, $low_water_size = 0, $samples = 0, $stddev = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $accum = sp + 8|0;
 $accum_var = sp;
 $0 = (234584);
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<(0);
 $7 = ($2>>>0)<(8192);
 $8 = ($5|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 $11 = (234584);
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $10 ? $13 : 8192;
 $10 ? $16 : 0;
 $samples = $17;
 $18 = $samples;
 $19 = ($18>>>0)<(3);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $accum;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $i = 1;
 while(1) {
  $24 = $i;
  $25 = $samples;
  $26 = ($24>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = ((201816) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $accum;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (_i64Add(($32|0),($35|0),($29|0),0)|0);
  $37 = tempRet0;
  $38 = $accum;
  $39 = $38;
  HEAP32[$39>>2] = $36;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $37;
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 $44 = $accum;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $samples;
 $51 = (($50) - 1)|0;
 $52 = (___udivdi3(($46|0),($49|0),($51|0),0)|0);
 $53 = tempRet0;
 $avg = $52;
 $54 = $accum_var;
 $55 = $54;
 HEAP32[$55>>2] = 0;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = 0;
 $i1 = 1;
 while(1) {
  $58 = $i1;
  $59 = $samples;
  $60 = ($58>>>0)<($59>>>0);
  if (!($60)) {
   break;
  }
  $61 = $avg;
  $62 = $i1;
  $63 = ((201816) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($61) - ($64))|0;
  $diff = $65;
  $66 = $diff;
  $67 = $diff;
  $68 = Math_imul($66, $67)|0;
  $69 = ($68|0)<(0);
  $70 = $69 << 31 >> 31;
  $71 = $accum_var;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (_i64Add(($73|0),($76|0),($68|0),($70|0))|0);
  $78 = tempRet0;
  $79 = $accum_var;
  $80 = $79;
  HEAP32[$80>>2] = $77;
  $81 = (($79) + 4)|0;
  $82 = $81;
  HEAP32[$82>>2] = $78;
  $83 = $i1;
  $84 = (($83) + 1)|0;
  $i1 = $84;
 }
 $85 = $accum_var;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (+($87>>>0)) + (4294967296.0*(+($90>>>0)));
 $92 = $samples;
 $93 = (($92) - 2)|0;
 $94 = (+($93>>>0));
 $95 = $91 / $94;
 $96 = (+Math_sqrt((+$95)));
 $97 = (~~(($96))>>>0);
 $stddev = $97;
 $98 = $avg;
 $99 = (+($98|0));
 $100 = HEAP32[(201800)>>2]|0;
 $101 = (+($100>>>0));
 $102 = $99 / $101;
 $103 = 1.0 - $102;
 $avg_filled = $103;
 $104 = $stddev;
 $105 = (+($104>>>0));
 $106 = HEAP32[(201800)>>2]|0;
 $107 = (+($106>>>0));
 $108 = $105 / $107;
 $deviation = $108;
 $109 = HEAP32[(201800)>>2]|0;
 $110 = ($109*3)|0;
 $111 = (($110>>>0) / 4)&-1;
 $low_water_size = $111;
 $112 = HEAP32[(201800)>>2]|0;
 $113 = (($112>>>0) / 4)&-1;
 $high_water_size = $113;
 $low_water_count = 0;
 $high_water_count = 0;
 $i2 = 1;
 while(1) {
  $114 = $i2;
  $115 = $samples;
  $116 = ($114>>>0)<($115>>>0);
  if (!($116)) {
   break;
  }
  $117 = $i2;
  $118 = ((201816) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $low_water_size;
  $121 = ($119>>>0)>=($120>>>0);
  if ($121) {
   $122 = $low_water_count;
   $123 = (($122) + 1)|0;
   $low_water_count = $123;
  } else {
   $124 = $i2;
   $125 = ((201816) + ($124<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $high_water_size;
   $128 = ($126>>>0)<=($127>>>0);
   if ($128) {
    $129 = $high_water_count;
    $130 = (($129) + 1)|0;
    $high_water_count = $130;
   }
  }
  $131 = $i2;
  $132 = (($131) + 1)|0;
  $i2 = $132;
 }
 $133 = HEAP8[102648>>0]|0;
 $134 = $133&1;
 if ($134) {
  $135 = HEAP32[(259664)>>2]|0;
  $136 = ($135|0)!=(0|0);
  $137 = HEAP32[(259664)>>2]|0;
  $138 = HEAP32[544648>>2]|0;
  $139 = $136 ? $137 : $138;
  $140 = $avg_filled;
  $141 = $140;
  $142 = $141 * 100.0;
  $143 = $deviation;
  $144 = $143;
  $145 = $144 * 100.0;
  HEAPF64[$vararg_buffer>>3] = $142;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $145;
  (_fprintf($139,748493,$vararg_buffer)|0);
  $146 = HEAP32[(259664)>>2]|0;
  $147 = ($146|0)!=(0|0);
  $148 = HEAP32[(259664)>>2]|0;
  $149 = HEAP32[544648>>2]|0;
  $150 = $147 ? $148 : $149;
  (_fflush($150)|0);
 }
 $151 = HEAP8[102648>>0]|0;
 $152 = $151&1;
 if (!($152)) {
  STACKTOP = sp;return;
 }
 $153 = HEAP32[(259664)>>2]|0;
 $154 = ($153|0)!=(0|0);
 $155 = HEAP32[(259664)>>2]|0;
 $156 = HEAP32[544648>>2]|0;
 $157 = $154 ? $155 : $156;
 $158 = $low_water_count;
 $159 = (+($158>>>0));
 $160 = 100.0 * $159;
 $161 = $samples;
 $162 = (($161) - 1)|0;
 $163 = (+($162>>>0));
 $164 = $160 / $163;
 $165 = $high_water_count;
 $166 = (+($165>>>0));
 $167 = 100.0 * $166;
 $168 = $samples;
 $169 = (($168) - 1)|0;
 $170 = (+($169>>>0));
 $171 = $167 / $170;
 HEAPF64[$vararg_buffer2>>3] = $164;
 $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
 HEAPF64[$vararg_ptr5>>3] = $171;
 (_fprintf($157,748596,$vararg_buffer2)|0);
 $172 = HEAP32[(259664)>>2]|0;
 $173 = ($172|0)!=(0|0);
 $174 = HEAP32[(259664)>>2]|0;
 $175 = HEAP32[544648>>2]|0;
 $176 = $173 ? $174 : $175;
 (_fflush($176)|0);
 STACKTOP = sp;return;
}
function _deinit_pixel_converter() {
 var $0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 _scaler_ctx_gen_reset((56));
 dest=(56); stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = HEAP32[(184)>>2]|0;
 _free($0);
 HEAP32[(184)>>2] = 0;
 return;
}
function _deinit_shader_dir() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(259500)>>2]|0;
 _dir_list_free($0);
 HEAP32[(259500)>>2] = 0;
 HEAP32[(259504)>>2] = 0;
 return;
}
function _compute_monitor_fps_statistics() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avg_fps = 0, $samples = 0, $stddev = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $avg_fps = sp + 8|0;
 $stddev = sp;
 $samples = sp + 56|0;
 $0 = HEAP8[(8544)>>0]|0;
 $1 = $0&1;
 if ($1) {
  $2 = HEAP8[102648>>0]|0;
  $3 = $2&1;
  if (!($3)) {
   STACKTOP = sp;return;
  }
  $4 = HEAP32[(259664)>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = HEAP32[544648>>2]|0;
  $8 = $5 ? $6 : $7;
  (_fprintf($8,748209,$vararg_buffer)|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  (_fflush($13)|0);
  STACKTOP = sp;return;
 }
 $14 = (250976);
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)<(0);
 $21 = ($16>>>0)<(4096);
 $22 = ($19|0)==(0);
 $23 = $22 & $21;
 $24 = $20 | $23;
 if ($24) {
  $25 = HEAP8[102648>>0]|0;
  $26 = $25&1;
  if (!($26)) {
   STACKTOP = sp;return;
  }
  $27 = HEAP32[(259664)>>2]|0;
  $28 = ($27|0)!=(0|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = HEAP32[544648>>2]|0;
  $31 = $28 ? $29 : $30;
  HEAP32[$vararg_buffer1>>2] = 4096;
  (_fprintf($31,748276,$vararg_buffer1)|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  (_fflush($36)|0);
  STACKTOP = sp;return;
 }
 HEAPF64[$avg_fps>>3] = 0.0;
 HEAPF64[$stddev>>3] = 0.0;
 HEAP32[$samples>>2] = 0;
 $37 = (_driver_monitor_fps_statistics($avg_fps,$stddev,$samples)|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP8[102648>>0]|0;
 $39 = $38&1;
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = HEAP32[(259664)>>2]|0;
 $41 = ($40|0)!=(0|0);
 $42 = HEAP32[(259664)>>2]|0;
 $43 = HEAP32[544648>>2]|0;
 $44 = $41 ? $42 : $43;
 $45 = +HEAPF64[$avg_fps>>3];
 $46 = +HEAPF64[$stddev>>3];
 $47 = 100.0 * $46;
 $48 = HEAP32[$samples>>2]|0;
 HEAPF64[$vararg_buffer3>>3] = $45;
 $vararg_ptr6 = ((($vararg_buffer3)) + 8|0);
 HEAPF64[$vararg_ptr6>>3] = $47;
 $vararg_ptr7 = ((($vararg_buffer3)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $48;
 (_fprintf($44,748394,$vararg_buffer3)|0);
 $49 = HEAP32[(259664)>>2]|0;
 $50 = ($49|0)!=(0|0);
 $51 = HEAP32[(259664)>>2]|0;
 $52 = HEAP32[544648>>2]|0;
 $53 = $50 ? $51 : $52;
 (_fflush($53)|0);
 STACKTOP = sp;return;
}
function _config_append_file($conf,$path) {
 $conf = $conf|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_conf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $conf;
 $2 = $path;
 $3 = $2;
 $4 = (_config_file_new($3)|0);
 $new_conf = $4;
 $5 = $new_conf;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $26 = $$pre_trunc&1;
  STACKTOP = sp;return ($26|0);
 }
 $7 = $new_conf;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $new_conf;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 12|0);
  HEAP32[$17>>2] = $13;
  $18 = $new_conf;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = $new_conf;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = 0;
 }
 $25 = $new_conf;
 _config_file_free($25);
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $26 = $$pre_trunc&1;
 STACKTOP = sp;return ($26|0);
}
function _config_file_new($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $0;
 $2 = (_config_file_new_internal($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _config_file_free($conf) {
 $conf = $conf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hold = 0, $hold1 = 0, $inc_tmp = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $tmp = $5;
 while(1) {
  $6 = $tmp;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $tmp;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = $tmp;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $tmp;
  $hold = $14;
  $15 = $tmp;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $tmp = $17;
  $18 = $hold;
  _free($18);
 }
 $19 = $0;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $inc_tmp = $21;
 while(1) {
  $22 = $inc_tmp;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   break;
  }
  $24 = $inc_tmp;
  $25 = HEAP32[$24>>2]|0;
  _free($25);
  $26 = $inc_tmp;
  $hold1 = $26;
  $27 = $inc_tmp;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $inc_tmp = $29;
  $30 = $hold1;
  _free($30);
 }
 $31 = $0;
 $32 = HEAP32[$31>>2]|0;
 _free($32);
 $33 = $0;
 _free($33);
 STACKTOP = sp;return;
}
function _config_get_float($conf,$key,$in) {
 $conf = $conf|0;
 $key = $key|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $conf;
 $2 = $key;
 $3 = $in;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $list = $6;
 while(1) {
  $7 = $list;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $2;
  $10 = $list;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strcmp($9,$12)|0);
  $14 = ($13|0)==(0);
  $15 = $list;
  if ($14) {
   label = 4;
   break;
  }
  $21 = ((($15)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $list = $22;
 }
 if ((label|0) == 4) {
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (+_strtod($17,0));
  $19 = $18;
  $20 = $3;
  HEAPF32[$20>>2] = $19;
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _config_get_int($conf,$key,$in) {
 $conf = $conf|0;
 $key = $key|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $conf;
 $2 = $key;
 $3 = $in;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $list = $6;
 while(1) {
  $7 = $list;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 8;
   break;
  }
  $9 = $2;
  $10 = $list;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strcmp($9,$12)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   break;
  }
  $25 = $list;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $list = $27;
 }
 if ((label|0) == 8) {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $15 = (___errno_location()|0);
 HEAP32[$15>>2] = 0;
 $16 = $list;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_strtol($18,0,0)|0);
 $val = $19;
 $20 = (___errno_location()|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = $val;
  $24 = $3;
  HEAP32[$24>>2] = $23;
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _config_get_uint($conf,$key,$in) {
 $conf = $conf|0;
 $key = $key|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $conf;
 $2 = $key;
 $3 = $in;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $list = $6;
 while(1) {
  $7 = $list;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 8;
   break;
  }
  $9 = $2;
  $10 = $list;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strcmp($9,$12)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   break;
  }
  $25 = $list;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $list = $27;
 }
 if ((label|0) == 8) {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $15 = (___errno_location()|0);
 HEAP32[$15>>2] = 0;
 $16 = $list;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_strtoul($18,0,0)|0);
 $val = $19;
 $20 = (___errno_location()|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = $val;
  $24 = $3;
  HEAP32[$24>>2] = $23;
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _config_get_hex($conf,$key,$in) {
 $conf = $conf|0;
 $key = $key|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $conf;
 $2 = $key;
 $3 = $in;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $list = $6;
 while(1) {
  $7 = $list;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 8;
   break;
  }
  $9 = $2;
  $10 = $list;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strcmp($9,$12)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   break;
  }
  $25 = $list;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $list = $27;
 }
 if ((label|0) == 8) {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $15 = (___errno_location()|0);
 HEAP32[$15>>2] = 0;
 $16 = $list;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_strtoul($18,0,16)|0);
 $val = $19;
 $20 = (___errno_location()|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = $val;
  $24 = $3;
  HEAP32[$24>>2] = $23;
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _config_get_string($conf,$key,$str) {
 $conf = $conf|0;
 $key = $key|0;
 $str = $str|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $conf;
 $2 = $key;
 $3 = $str;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $list = $6;
 while(1) {
  $7 = $list;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $2;
  $10 = $list;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strcmp($9,$12)|0);
  $14 = ($13|0)==(0);
  $15 = $list;
  if ($14) {
   label = 4;
   break;
  }
  $20 = ((($15)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $list = $21;
 }
 if ((label|0) == 4) {
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (___strdup($17)|0);
  $19 = $3;
  HEAP32[$19>>2] = $18;
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $22 = $$pre_trunc&1;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $22 = $$pre_trunc&1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _config_get_array($conf,$key,$buf,$size) {
 $conf = $conf|0;
 $key = $key|0;
 $buf = $buf|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $conf;
 $2 = $key;
 $3 = $buf;
 $4 = $size;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $list = $7;
 while(1) {
  $8 = $list;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 6;
   break;
  }
  $10 = $2;
  $11 = $list;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_strcmp($10,$13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   label = 4;
   break;
  }
  $24 = $list;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $list = $26;
 }
 if ((label|0) == 4) {
  $16 = $3;
  $17 = $list;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $4;
  $21 = (_strlcpy_rarch__($16,$19,$20)|0);
  $22 = $4;
  $23 = ($21>>>0)<($22>>>0);
  $$expand_i1_val = $23&1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _config_get_path($conf,$key,$buf,$size) {
 $conf = $conf|0;
 $key = $key|0;
 $buf = $buf|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $application_dir = 0, $home = 0, $list = 0, $src_size = 0, $src_size1 = 0, $value = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4136|0;
 $application_dir = sp + 40|0;
 $1 = $conf;
 $2 = $key;
 $3 = $buf;
 $4 = $size;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $list = $7;
 while(1) {
  $8 = $list;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 18;
   break;
  }
  $10 = $2;
  $11 = $list;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_strcmp($10,$13)|0);
  $15 = ($14|0)==(0);
  $16 = $list;
  if ($15) {
   break;
  }
  $82 = ((($16)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $list = $83;
 }
 if ((label|0) == 18) {
  $$expand_i1_val6 = 0;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $84 = $$pre_trunc&1;
  STACKTOP = sp;return ($84|0);
 }
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $value = $18;
 $19 = $value;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)==(126);
 do {
  if ($22) {
   $23 = (_getenv((752183|0))|0);
   $home = $23;
   $24 = $home;
   $25 = ($24|0)!=(0|0);
   if ($25) {
    $26 = $3;
    $27 = $home;
    $28 = $4;
    $29 = (_strlcpy_rarch__($26,$27,$28)|0);
    $src_size = $29;
    $30 = $src_size;
    $31 = $4;
    $32 = ($30>>>0)>=($31>>>0);
    if (!($32)) {
     $33 = $src_size;
     $34 = $3;
     $35 = (($34) + ($33)|0);
     $3 = $35;
     $36 = $src_size;
     $37 = $4;
     $38 = (($37) - ($36))|0;
     $4 = $38;
     $39 = $value;
     $40 = ((($39)) + 1|0);
     $value = $40;
     break;
    }
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $84 = $$pre_trunc&1;
    STACKTOP = sp;return ($84|0);
   }
  } else {
   $41 = $value;
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = ($43|0)==(58);
   if ($44) {
    $45 = $value;
    $46 = ((($45)) + 1|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($48|0)==(47);
    if ($49) {
     _fill_pathname_application_path($application_dir,4096);
     $50 = HEAP8[102648>>0]|0;
     $51 = $50&1;
     if ($51) {
      $52 = HEAP32[(259664)>>2]|0;
      $53 = ($52|0)!=(0|0);
      $54 = HEAP32[(259664)>>2]|0;
      $55 = HEAP32[544648>>2]|0;
      $56 = $53 ? $54 : $55;
      HEAP32[$vararg_buffer>>2] = $application_dir;
      (_fprintf($56,749403,$vararg_buffer)|0);
      $57 = HEAP32[(259664)>>2]|0;
      $58 = ($57|0)!=(0|0);
      $59 = HEAP32[(259664)>>2]|0;
      $60 = HEAP32[544648>>2]|0;
      $61 = $58 ? $59 : $60;
      (_fflush($61)|0);
     }
     _path_basedir($application_dir);
     $62 = $3;
     $63 = $4;
     $64 = (_strlcpy_rarch__($62,$application_dir,$63)|0);
     $src_size1 = $64;
     $65 = $src_size1;
     $66 = $4;
     $67 = ($65>>>0)>=($66>>>0);
     if (!($67)) {
      $68 = $src_size1;
      $69 = $3;
      $70 = (($69) + ($68)|0);
      $3 = $70;
      $71 = $src_size1;
      $72 = $4;
      $73 = (($72) - ($71))|0;
      $4 = $73;
      $74 = $value;
      $75 = ((($74)) + 2|0);
      $value = $75;
      break;
     }
     $$expand_i1_val2 = 0;
     HEAP8[$0>>0] = $$expand_i1_val2;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $84 = $$pre_trunc&1;
     STACKTOP = sp;return ($84|0);
    }
   }
  }
 } while(0);
 $76 = $3;
 $77 = $value;
 $78 = $4;
 $79 = (_strlcpy_rarch__($76,$77,$78)|0);
 $80 = $4;
 $81 = ($79>>>0)<($80>>>0);
 $$expand_i1_val4 = $81&1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $84 = $$pre_trunc&1;
 STACKTOP = sp;return ($84|0);
}
function _config_get_bool($conf,$key,$in) {
 $conf = $conf|0;
 $key = $key|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $conf;
 $2 = $key;
 $3 = $in;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $list = $6;
 while(1) {
  $7 = $list;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 15;
   break;
  }
  $9 = $2;
  $10 = $list;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strcmp($9,$12)|0);
  $14 = ($13|0)==(0);
  $15 = $list;
  if ($14) {
   break;
  }
  $39 = ((($15)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $list = $40;
 }
 if ((label|0) == 15) {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $41 = $$pre_trunc&1;
  STACKTOP = sp;return ($41|0);
 }
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_strcasecmp($17,762377)|0);
 $19 = ($18|0)==(0);
 do {
  if ($19) {
   $20 = $3;
   HEAP8[$20>>0] = 1;
  } else {
   $21 = $list;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_strcasecmp($23,749456)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = $3;
    HEAP8[$26>>0] = 1;
    break;
   }
   $27 = $list;
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (_strcasecmp($29,749458)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = $3;
    HEAP8[$32>>0] = 0;
    break;
   }
   $33 = $list;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_strcasecmp($35,749464)|0);
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = $3;
    HEAP8[$38>>0] = 0;
    break;
   }
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $41 = $$pre_trunc&1;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $41 = $$pre_trunc&1;
 STACKTOP = sp;return ($41|0);
}
function _config_set_string($conf,$key,$val) {
 $conf = $conf|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elem = 0, $last = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $1 = $key;
 $2 = $val;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $list = $5;
 $6 = $list;
 $last = $6;
 while(1) {
  $7 = $list;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $list;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&1;
  if (!($11)) {
   $12 = $1;
   $13 = $list;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_strcmp($12,$15)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    label = 5;
    break;
   }
  }
  $25 = $list;
  $last = $25;
  $26 = $list;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $list = $28;
 }
 if ((label|0) == 5) {
  $18 = $list;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
  $21 = $2;
  $22 = (___strdup($21)|0);
  $23 = $list;
  $24 = ((($23)) + 8|0);
  HEAP32[$24>>2] = $22;
  STACKTOP = sp;return;
 }
 $29 = (_calloc(1,16)|0);
 $elem = $29;
 $30 = $1;
 $31 = (___strdup($30)|0);
 $32 = $elem;
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = $31;
 $34 = $2;
 $35 = (___strdup($34)|0);
 $36 = $elem;
 $37 = ((($36)) + 8|0);
 HEAP32[$37>>2] = $35;
 $38 = $last;
 $39 = ($38|0)!=(0|0);
 $40 = $elem;
 if ($39) {
  $41 = $last;
  $42 = ((($41)) + 12|0);
  HEAP32[$42>>2] = $40;
  STACKTOP = sp;return;
 } else {
  $43 = $0;
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $40;
  STACKTOP = sp;return;
 }
}
function _config_set_float($conf,$key,$val) {
 $conf = $conf|0;
 $key = $key|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 24|0;
 $0 = $conf;
 $1 = $key;
 $2 = $val;
 $3 = $2;
 $4 = $3;
 HEAPF64[$vararg_buffer>>3] = $4;
 (_snprintf($buf,128,749466,$vararg_buffer)|0);
 $5 = $0;
 $6 = $1;
 _config_set_string($5,$6,$buf);
 STACKTOP = sp;return;
}
function _config_set_int($conf,$key,$val) {
 $conf = $conf|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 16|0;
 $0 = $conf;
 $1 = $key;
 $2 = $val;
 $3 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 (_snprintf($buf,128,768094,$vararg_buffer)|0);
 $4 = $0;
 $5 = $1;
 _config_set_string($4,$5,$buf);
 STACKTOP = sp;return;
}
function _config_set_hex($conf,$key,$val) {
 $conf = $conf|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 16|0;
 $0 = $conf;
 $1 = $key;
 $2 = $val;
 $3 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 (_snprintf($buf,128,749469,$vararg_buffer)|0);
 $4 = $0;
 $5 = $1;
 _config_set_string($4,$5,$buf);
 STACKTOP = sp;return;
}
function _config_set_bool($conf,$key,$val) {
 $conf = $conf|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $1 = $key;
 $3 = $val&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = $7 ? 762377 : 749458;
 _config_set_string($4,$5,$8);
 STACKTOP = sp;return;
}
function _config_file_write($conf,$path) {
 $conf = $conf|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $file = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $conf;
 $2 = $path;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = (_fopen($5,769702)|0);
  $file = $6;
  $7 = $file;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $15 = $$pre_trunc&1;
   STACKTOP = sp;return ($15|0);
  }
 } else {
  $9 = HEAP32[544652>>2]|0;
  $file = $9;
 }
 $10 = $1;
 $11 = $file;
 _config_file_dump($10,$11);
 $12 = $2;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $file;
  (_fclose($14)|0);
 }
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $15 = $$pre_trunc&1;
 STACKTOP = sp;return ($15|0);
}
function _config_file_dump($conf,$file) {
 $conf = $conf|0;
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $includes = 0, $list = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $conf;
 $1 = $file;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $includes = $4;
 while(1) {
  $5 = $includes;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = $includes;
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  (_fprintf($7,749472,$vararg_buffer)|0);
  $10 = $includes;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $includes = $12;
 }
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $list = $15;
 while(1) {
  $16 = $list;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $list;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  if (!($20)) {
   $21 = $1;
   $22 = $list;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $list;
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $24;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $27;
   (_fprintf($21,749487,$vararg_buffer1)|0);
  }
  $28 = $list;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $list = $30;
 }
 STACKTOP = sp;return;
}
function _config_file_dump_all($conf,$file) {
 $conf = $conf|0;
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $includes = 0, $list = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $conf;
 $1 = $file;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $includes = $4;
 while(1) {
  $5 = $includes;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = $includes;
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  (_fprintf($7,749472,$vararg_buffer)|0);
  $10 = $includes;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $includes = $12;
 }
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $list = $15;
 while(1) {
  $16 = $list;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $1;
  $19 = $list;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $list;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $list;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&1;
  $28 = $27 ? 749498 : 773086;
  HEAP32[$vararg_buffer1>>2] = $21;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $24;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $28;
  (_fprintf($18,749509,$vararg_buffer1)|0);
  $29 = $list;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $list = $31;
 }
 STACKTOP = sp;return;
}
function _config_file_new_internal($path,$depth) {
 $path = $path|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $conf = 0, $file = 0, $line = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $depth;
 $3 = (_calloc(1,20)|0);
 $conf = $3;
 $4 = $conf;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = $conf;
  $0 = $8;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $9 = $1;
 $10 = (___strdup($9)|0);
 $11 = $conf;
 HEAP32[$11>>2] = $10;
 $12 = $conf;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = $conf;
  _free($15);
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $16 = $2;
 $17 = $conf;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = $1;
 $20 = (_fopen($19,769700)|0);
 $file = $20;
 $21 = $file;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $23 = $conf;
  $24 = HEAP32[$23>>2]|0;
  _free($24);
  $25 = $conf;
  _free($25);
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 while(1) {
  $26 = $file;
  $27 = (_feof($26)|0);
  $28 = ($27|0)!=(0);
  $29 = $28 ^ 1;
  if (!($29)) {
   break;
  }
  $30 = (_calloc(1,16)|0);
  $list = $30;
  $31 = $file;
  $32 = (_getaline($31)|0);
  $line = $32;
  $33 = $line;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $conf;
   $36 = $list;
   $37 = $line;
   $38 = (_parse_line($35,$36,$37)|0);
   do {
    if ($38) {
     $39 = $conf;
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)!=(0|0);
     $43 = $list;
     $44 = $conf;
     if ($42) {
      $45 = ((($44)) + 8|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ((($46)) + 12|0);
      HEAP32[$47>>2] = $43;
      $48 = $list;
      $49 = $conf;
      $50 = ((($49)) + 8|0);
      HEAP32[$50>>2] = $48;
      break;
     } else {
      $51 = ((($44)) + 4|0);
      HEAP32[$51>>2] = $43;
      $52 = $list;
      $53 = $conf;
      $54 = ((($53)) + 8|0);
      HEAP32[$54>>2] = $52;
      break;
     }
    }
   } while(0);
   $55 = $line;
   _free($55);
  }
  $56 = $list;
  $57 = $conf;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)!=($59|0);
  if (!($60)) {
   continue;
  }
  $61 = $list;
  _free($61);
 }
 $62 = $file;
 (_fclose($62)|0);
 $63 = $conf;
 $0 = $63;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _parse_line($conf,$list,$line) {
 $conf = $conf|0;
 $list = $list|0;
 $line = $line|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $comment = 0, $cur_size = 0, $index = 0, $key = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = $conf;
 $2 = $list;
 $3 = $line;
 $4 = $3;
 $5 = (_strchr($4,35)|0);
 $comment = $5;
 $6 = $comment;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $comment;
  HEAP8[$8>>0] = 0;
 }
 $9 = $comment;
 $10 = $3;
 $11 = ($9|0)==($10|0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14>>>0)<(16);
  if ($15) {
   $16 = $comment;
   $17 = ((($16)) + 1|0);
   $comment = $17;
   $18 = $comment;
   $19 = (_strstr($18,749532)|0);
   $20 = $comment;
   $21 = ($19|0)==($20|0);
   if ($21) {
    $22 = $1;
    $23 = $comment;
    $24 = ((($23)) + 8|0);
    _add_sub_conf($22,$24);
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $75 = $$pre_trunc&1;
    STACKTOP = sp;return ($75|0);
   }
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $25 = $1;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27>>>0)>=(16);
  if ($28) {
   $29 = HEAP32[544648>>2]|0;
   (_fprintf($29,749541,$vararg_buffer)|0);
  }
 }
 while(1) {
  $30 = $3;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = (_isspace($32)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   break;
  }
  $35 = $3;
  $36 = ((($35)) + 1|0);
  $3 = $36;
 }
 $37 = (_malloc(9)|0);
 $key = $37;
 $cur_size = 8;
 $index = 0;
 while(1) {
  $38 = $3;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = (_isgraph($40)|0);
  $42 = ($41|0)!=(0);
  $43 = $index;
  if (!($42)) {
   break;
  }
  $44 = $cur_size;
  $45 = ($43|0)==($44|0);
  if ($45) {
   $46 = $cur_size;
   $47 = $46<<1;
   $cur_size = $47;
   $48 = $key;
   $49 = $cur_size;
   $50 = (($49) + 1)|0;
   $51 = (_realloc($48,$50)|0);
   $key = $51;
  }
  $52 = $3;
  $53 = ((($52)) + 1|0);
  $3 = $53;
  $54 = HEAP8[$52>>0]|0;
  $55 = $index;
  $56 = (($55) + 1)|0;
  $index = $56;
  $57 = $key;
  $58 = (($57) + ($55)|0);
  HEAP8[$58>>0] = $54;
 }
 $59 = $key;
 $60 = (($59) + ($43)|0);
 HEAP8[$60>>0] = 0;
 $61 = $key;
 $62 = $2;
 $63 = ((($62)) + 4|0);
 HEAP32[$63>>2] = $61;
 $64 = $3;
 $65 = (_extract_value($64,1)|0);
 $66 = $2;
 $67 = ((($66)) + 8|0);
 HEAP32[$67>>2] = $65;
 $68 = $2;
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $75 = $$pre_trunc&1;
  STACKTOP = sp;return ($75|0);
 } else {
  $72 = $2;
  $73 = ((($72)) + 4|0);
  HEAP32[$73>>2] = 0;
  $74 = $key;
  _free($74);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $75 = $$pre_trunc&1;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _add_sub_conf($conf,$line) {
 $conf = $conf|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $home = 0, $path = 0, $real_path = 0, $sub_conf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $real_path = sp + 24|0;
 $0 = $conf;
 $1 = $line;
 $2 = $1;
 $3 = (_extract_value($2,0)|0);
 $path = $3;
 $4 = $path;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $path;
 _add_include_list($6,$7);
 $8 = $path;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)==(126);
 if ($11) {
  $12 = (_getenv((752183|0))|0);
  $home = $12;
  $13 = $home;
  $14 = ($13|0)!=(0|0);
  $15 = $home;
  $16 = $14 ? $15 : 773086;
  (_strlcpy_rarch__($real_path,$16,4096)|0);
  $17 = $path;
  $18 = ((($17)) + 1|0);
  (_strlcat_rarch__($real_path,$18,4096)|0);
 } else {
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $path;
  _fill_pathname_resolve_relative($real_path,$20,$21,4096);
 }
 $22 = $0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 $26 = (_config_file_new_internal($real_path,$25)|0);
 $sub_conf = $26;
 $27 = $sub_conf;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $30 = $0;
  $31 = $sub_conf;
  _add_child_list($30,$31);
  $32 = $sub_conf;
  _config_file_free($32);
  $33 = $path;
  _free($33);
  STACKTOP = sp;return;
 } else {
  $29 = $path;
  _free($29);
  STACKTOP = sp;return;
 }
}
function _add_include_list($conf,$path) {
 $conf = $conf|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $head = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $1 = $path;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $head = $4;
 $5 = (_calloc(1,8)|0);
 $node = $5;
 $6 = $1;
 $7 = (___strdup($6)|0);
 $8 = $node;
 HEAP32[$8>>2] = $7;
 $9 = $head;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $21 = $node;
  $22 = $0;
  $23 = ((($22)) + 16|0);
  HEAP32[$23>>2] = $21;
  STACKTOP = sp;return;
 }
 while(1) {
  $11 = $head;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $head;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $head = $17;
 }
 $18 = $node;
 $19 = $head;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _add_child_list($parent,$child) {
 $parent = $parent|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $head = 0, $head1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $parent;
 $1 = $child;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $head = $8;
  while(1) {
   $9 = $head;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0|0);
   if (!($12)) {
    break;
   }
   $13 = $head;
   $14 = ((($13)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $head = $15;
  }
  $16 = $1;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  _set_list_readonly($18);
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $head;
  $23 = ((($22)) + 12|0);
  HEAP32[$23>>2] = $21;
 } else {
  $24 = $1;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  _set_list_readonly($26);
  $27 = $1;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $0;
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $1;
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = 0;
 $34 = $0;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 $38 = $0;
 if (!($37)) {
  $50 = ((($38)) + 8|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
 }
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $head1 = $40;
 while(1) {
  $41 = $head1;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(0|0);
  $45 = $head1;
  if (!($44)) {
   break;
  }
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $head1 = $47;
 }
 $48 = $0;
 $49 = ((($48)) + 8|0);
 HEAP32[$49>>2] = $45;
 STACKTOP = sp;return;
}
function _set_list_readonly($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 while(1) {
  $1 = $0;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  HEAP8[$3>>0] = 1;
  $4 = $0;
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
 }
 STACKTOP = sp;return;
}
function _extract_value($line,$is_value) {
 $line = $line|0;
 $is_value = $is_value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $save = 0, $tok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save = sp + 4|0;
 $1 = $line;
 $3 = $is_value&1;
 $2 = $3;
 $4 = $2;
 $5 = $4&1;
 do {
  if ($5) {
   while(1) {
    $6 = $1;
    $7 = HEAP8[$6>>0]|0;
    $8 = $7 << 24 >> 24;
    $9 = (_isspace($8)|0);
    $10 = ($9|0)!=(0);
    $11 = $1;
    if (!($10)) {
     break;
    }
    $12 = ((($11)) + 1|0);
    $1 = $12;
   }
   $13 = HEAP8[$11>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)!=(61);
   if (!($15)) {
    $16 = $1;
    $17 = ((($16)) + 1|0);
    $1 = $17;
    break;
   }
   $0 = 0;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 } while(0);
 while(1) {
  $18 = $1;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = (_isspace($20)|0);
  $22 = ($21|0)!=(0);
  $23 = $1;
  if (!($22)) {
   break;
  }
  $24 = ((($23)) + 1|0);
  $1 = $24;
 }
 $25 = HEAP8[$23>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = ($26|0)==(34);
 $28 = $1;
 if ($27) {
  $29 = ((($28)) + 1|0);
  $1 = $29;
  $30 = $1;
  $31 = (_strtok_r($30,749523,$save)|0);
  $tok = $31;
  $32 = $tok;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   $34 = $tok;
   $35 = (___strdup($34)|0);
   $0 = $35;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  } else {
   $0 = 0;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 }
 $36 = HEAP8[$28>>0]|0;
 $37 = $36 << 24 >> 24;
 $38 = ($37|0)==(0);
 if ($38) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $39 = $1;
 $40 = (_strtok_r($39,749525,$save)|0);
 $tok = $40;
 $41 = $tok;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $tok;
  $44 = (___strdup($43)|0);
  $0 = $44;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 } else {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _getaline($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur_size = 0, $in = 0, $index = 0, $newline = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = (_malloc(9)|0);
 $newline = $1;
 $cur_size = 8;
 $index = 0;
 $2 = $0;
 $3 = (_getc($2)|0);
 $in = $3;
 while(1) {
  $4 = $in;
  $5 = ($4|0)!=(-1);
  $6 = $in;
  $7 = ($6|0)!=(10);
  $8 = $5 ? $7 : 0;
  $9 = $index;
  if (!($8)) {
   break;
  }
  $10 = $cur_size;
  $11 = ($9|0)==($10|0);
  if ($11) {
   $12 = $cur_size;
   $13 = $12<<1;
   $cur_size = $13;
   $14 = $newline;
   $15 = $cur_size;
   $16 = (($15) + 1)|0;
   $17 = (_realloc($14,$16)|0);
   $newline = $17;
  }
  $18 = $in;
  $19 = $18&255;
  $20 = $index;
  $21 = (($20) + 1)|0;
  $index = $21;
  $22 = $newline;
  $23 = (($22) + ($20)|0);
  HEAP8[$23>>0] = $19;
  $24 = $0;
  $25 = (_getc($24)|0);
  $in = $25;
 }
 $26 = $newline;
 $27 = (($26) + ($9)|0);
 HEAP8[$27>>0] = 0;
 $28 = $newline;
 STACKTOP = sp;return ($28|0);
}
function _config_get_default_audio() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (757745|0);
}
function _config_get_default_video() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (769829|0);
}
function _config_get_default_input() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (756914|0);
}
function _config_set_defaults() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $def_audio = 0, $def_input = 0, $def_video = 0, $i = 0, $i1 = 0, $i2 = 0, $i4 = 0, $j = 0, $j3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_config_get_default_video()|0);
 $def_video = $0;
 $1 = (_config_get_default_audio()|0);
 $def_audio = $1;
 $2 = (_config_get_default_input()|0);
 $def_input = $2;
 $3 = $def_video;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $def_video;
  (_strlcpy_rarch__(224,$5,32)|0);
 }
 $6 = $def_audio;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $def_audio;
  (_strlcpy_rarch__((16776),$8,32)|0);
 }
 $9 = $def_input;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $def_input;
  (_strlcpy_rarch__((25064),$11,32)|0);
 }
 HEAPF32[(288)>>2] = 3.0;
 HEAPF32[(292)>>2] = 3.0;
 $12 = HEAP8[(102651)>>0]|0;
 $13 = $12&1;
 $14 = $13 ? 1 : 0;
 $15 = ($14|0)!=(0);
 $16 = $15&1;
 HEAP8[(296)>>0] = $16;
 HEAP8[(297)>>0] = 1;
 HEAP32[(300)>>2] = 0;
 HEAP32[(304)>>2] = 0;
 HEAP32[(308)>>2] = 0;
 HEAP8[(16768)>>0] = 0;
 HEAP8[(312)>>0] = 1;
 HEAP8[(313)>>0] = 0;
 HEAP32[(320)>>2] = 0;
 $17 = HEAP8[749600>>0]|0;
 $18 = $17&1;
 $19 = $18&1;
 HEAP8[(314)>>0] = $19;
 $20 = HEAP32[264748>>2]|0;
 HEAP32[(316)>>2] = $20;
 HEAP8[(8544)>>0] = 0;
 HEAP8[(324)>>0] = 1;
 HEAP8[(325)>>0] = 1;
 HEAP8[(333)>>0] = 0;
 HEAP8[(326)>>0] = 1;
 HEAPF32[(328)>>2] = -1.0;
 HEAP8[(332)>>0] = 0;
 $21 = HEAP32[264752>>2]|0;
 HEAP32[(336)>>2] = $21;
 HEAP8[(4440)>>0] = 0;
 HEAP8[(16772)>>0] = 1;
 HEAP8[(16744)>>0] = 1;
 HEAPF32[(16740)>>2] = 48.0;
 HEAP8[(16745)>>0] = 1;
 HEAPF32[(16748)>>2] = 0.05000000074505806;
 HEAPF32[(16752)>>2] = 0.05000000074505806;
 HEAPF32[(16756)>>2] = 1.0;
 HEAPF32[(16760)>>2] = 1.0;
 HEAPF32[(16764)>>2] = 0.0;
 HEAPF32[(8540)>>2] = 59.950000762939453;
 HEAP8[(16769)>>0] = 0;
 HEAP8[(16770)>>0] = 0;
 HEAP8[(16771)>>0] = 1;
 HEAP32[(340)>>2] = 0;
 HEAP8[(16808)>>0] = 1;
 HEAP32[(16812)>>2] = 48000;
 HEAP32[(16816)>>2] = 0;
 HEAPF32[(16820)>>2] = 48000.0;
 $22 = HEAP32[264756>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = HEAP32[264756>>2]|0;
  (_strlcpy_rarch__((16824),$24,4096)|0);
 }
 HEAP32[(20920)>>2] = 64;
 HEAP8[(20924)>>0] = 1;
 HEAP8[(25021)>>0] = 1;
 HEAPF32[(25024)>>2] = 0.004999999888241291;
 HEAPF32[(25028)>>2] = 0.0;
 HEAP8[(98508)>>0] = 0;
 HEAP32[(98512)>>2] = 20971520;
 HEAP32[(98516)>>2] = 1;
 HEAPF32[(98520)>>2] = 3.0;
 HEAPF32[(98524)>>2] = -1.0;
 HEAP8[(98528)>>0] = 0;
 HEAP32[(98532)>>2] = 0;
 HEAP8[(98536)>>0] = 0;
 HEAP8[(98537)>>0] = 0;
 HEAP8[(98538)>>0] = 0;
 HEAP8[(98539)>>0] = 1;
 HEAP8[(98540)>>0] = 0;
 HEAP16[(98542)>>1] = -10181;
 HEAP8[(98544)>>0] = 0;
 HEAP32[(78024)>>2] = 100;
 _memcpy(((25128)|0),(260864|0),2240)|0;
 $i = 1;
 while(1) {
  $25 = $i;
  $26 = ($25>>>0)<(8);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = ((25128) + (($27*2240)|0)|0);
  _memcpy(($28|0),(263104|0),1000)|0;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $i1 = 0;
 while(1) {
  $31 = $i1;
  $32 = ($31>>>0)<(8);
  if (!($32)) {
   break;
  }
  $j = 0;
  while(1) {
   $33 = $j;
   $34 = ($33>>>0)<(56);
   if (!($34)) {
    break;
   }
   $35 = $j;
   $36 = $i1;
   $37 = ((43048) + (($36*2240)|0)|0);
   $38 = (($37) + (($35*40)|0)|0);
   $39 = ((($38)) + 16|0);
   $40 = $39;
   $41 = $40;
   HEAP32[$41>>2] = 65535;
   $42 = (($40) + 4)|0;
   $43 = $42;
   HEAP32[$43>>2] = 0;
   $44 = $j;
   $45 = $i1;
   $46 = ((43048) + (($45*2240)|0)|0);
   $47 = (($46) + (($44*40)|0)|0);
   $48 = ((($47)) + 32|0);
   HEAP32[$48>>2] = -1;
   $49 = $j;
   $50 = (($49) + 1)|0;
   $j = $50;
  }
  $51 = $i1;
  $52 = (($51) + 1)|0;
  $i1 = $52;
 }
 $i2 = 0;
 L25: while(1) {
  $53 = $i2;
  $54 = ($53|0)<(8);
  if (!($54)) {
   break;
  }
  $j3 = 0;
  while(1) {
   $55 = $j3;
   $56 = ($55|0)<(56);
   if (!($56)) {
    break;
   }
   $57 = $j3;
   $58 = $i2;
   $59 = ((25128) + (($58*2240)|0)|0);
   $60 = (($59) + (($57*40)|0)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&1;
   if ($62) {
    $63 = $j3;
    $64 = $j3;
    $65 = $i2;
    $66 = ((25128) + (($65*2240)|0)|0);
    $67 = (($66) + (($64*40)|0)|0);
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($63|0)==($69|0);
    if (!($70)) {
     label = 24;
     break L25;
    }
   }
   $81 = $j3;
   $82 = (($81) + 1)|0;
   $j3 = $82;
  }
  $83 = $i2;
  $84 = (($83) + 1)|0;
  $i2 = $84;
 }
 if ((label|0) == 24) {
  $71 = HEAP32[(259664)>>2]|0;
  $72 = ($71|0)!=(0|0);
  $73 = HEAP32[(259664)>>2]|0;
  $74 = HEAP32[544648>>2]|0;
  $75 = $72 ? $73 : $74;
  HEAP32[$vararg_buffer>>2] = 749601;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 252;
  (_fprintf($75,765794,$vararg_buffer)|0);
  $76 = HEAP32[(259664)>>2]|0;
  $77 = ($76|0)!=(0|0);
  $78 = HEAP32[(259664)>>2]|0;
  $79 = HEAP32[544648>>2]|0;
  $80 = $77 ? $78 : $79;
  (_fflush($80)|0);
  _exit(2);
  // unreachable;
 }
 HEAPF32[(61008)>>2] = 0.5;
 HEAP8[(61622)>>0] = 1;
 HEAP32[(61624)>>2] = 6;
 HEAP32[(61628)>>2] = 3;
 HEAPF32[(65728)>>2] = 1.0;
 HEAPF32[(65732)>>2] = 1.0;
 HEAP8[(61620)>>0] = 0;
 HEAP8[(61621)>>0] = 1;
 $i4 = 0;
 while(1) {
  $85 = $i4;
  $86 = ($85|0)<(8);
  if (!($86)) {
   break;
  }
  $87 = $i4;
  $88 = $i4;
  $89 = ((61012) + ($88<<2)|0);
  HEAP32[$89>>2] = $87;
  $90 = $i4;
  $91 = ((123146) + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&1;
  if (!($93)) {
   $94 = $i4;
   $95 = ((60976) + ($94<<2)|0);
   HEAP32[$95>>2] = 1;
  }
  $96 = $i4;
  $97 = (($96) + 1)|0;
  $i4 = $97;
 }
 HEAP32[(259620)>>2] = 0;
 HEAP32[(259624)>>2] = 0;
 HEAP32[(259612)>>2] = 0;
 HEAP32[(259616)>>2] = 0;
 $98 = HEAP8[749612>>0]|0;
 $99 = $98&1;
 $100 = $99&1;
 HEAP8[(259670)>>0] = $100;
 HEAP8[(259580)>>0] = 1;
 _rarch_init_msg_queue();
 STACKTOP = sp;return;
}
function _config_load() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(259580)>>0]|0;
 $1 = $0&1;
 if ($1) {
  return;
 }
 _config_set_defaults();
 _parse_config_file();
 return;
}
function _config_load_file($path) {
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val24 = 0, $$expand_i1_val26 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0;
 var $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $buf = 0, $buffer_size = 0, $conf = 0, $extra_path = 0, $i = 0, $msg_color = 0, $ret = 0, $save = 0, $tmp = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp17 = 0;
 var $tmp18 = 0, $tmp19 = 0, $tmp2 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $tmp27 = 0, $tmp28 = 0, $tmp29 = 0, $tmp3 = 0, $tmp30 = 0, $tmp31 = 0, $tmp32 = 0, $tmp33 = 0, $tmp34 = 0, $tmp35 = 0;
 var $tmp36 = 0, $tmp37 = 0, $tmp38 = 0, $tmp39 = 0, $tmp4 = 0, $tmp40 = 0, $tmp41 = 0, $tmp42 = 0, $tmp43 = 0, $tmp44 = 0, $tmp45 = 0, $tmp46 = 0, $tmp47 = 0, $tmp48 = 0, $tmp49 = 0, $tmp5 = 0, $tmp50 = 0, $tmp51 = 0, $tmp52 = 0, $tmp53 = 0;
 var $tmp54 = 0, $tmp55 = 0, $tmp56 = 0, $tmp57 = 0, $tmp58 = 0, $tmp59 = 0, $tmp6 = 0, $tmp60 = 0, $tmp61 = 0, $tmp62 = 0, $tmp63 = 0, $tmp64 = 0, $tmp65 = 0, $tmp66 = 0, $tmp67 = 0, $tmp68 = 0, $tmp69 = 0, $tmp7 = 0, $tmp8 = 0, $tmp9 = 0;
 var $tmp_append_path = 0, $tmp_str = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 8552|0;
 $save = sp + 236|0;
 $tmp_append_path = sp + 4456|0;
 $tmp_str = sp + 352|0;
 $tmp = sp + 228|0;
 $tmp1 = sp + 224|0;
 $tmp2 = sp + 220|0;
 $tmp3 = sp + 216|0;
 $tmp4 = sp + 347|0;
 $tmp5 = sp + 346|0;
 $tmp6 = sp + 212|0;
 $tmp7 = sp + 345|0;
 $tmp8 = sp + 344|0;
 $tmp9 = sp + 343|0;
 $tmp10 = sp + 208|0;
 $tmp11 = sp + 342|0;
 $tmp12 = sp + 204|0;
 $tmp13 = sp + 341|0;
 $tmp14 = sp + 340|0;
 $tmp15 = sp + 339|0;
 $tmp16 = sp + 338|0;
 $tmp17 = sp + 337|0;
 $tmp18 = sp + 200|0;
 $tmp19 = sp + 196|0;
 $tmp20 = sp + 336|0;
 $tmp21 = sp + 192|0;
 $tmp22 = sp + 335|0;
 $tmp23 = sp + 334|0;
 $tmp24 = sp + 188|0;
 $tmp25 = sp + 333|0;
 $tmp26 = sp + 332|0;
 $tmp27 = sp + 184|0;
 $tmp28 = sp + 180|0;
 $tmp29 = sp + 176|0;
 $tmp30 = sp + 172|0;
 $tmp31 = sp + 168|0;
 $tmp32 = sp + 164|0;
 $tmp33 = sp + 160|0;
 $msg_color = sp + 156|0;
 $tmp34 = sp + 331|0;
 $tmp35 = sp + 330|0;
 $tmp36 = sp + 329|0;
 $tmp37 = sp + 152|0;
 $tmp38 = sp + 328|0;
 $buf = sp + 264|0;
 $tmp39 = sp + 144|0;
 $tmp40 = sp + 140|0;
 $tmp41 = sp + 261|0;
 $tmp42 = sp + 136|0;
 $tmp43 = sp + 132|0;
 $tmp44 = sp + 128|0;
 $tmp45 = sp + 260|0;
 $tmp46 = sp + 259|0;
 $tmp47 = sp + 124|0;
 $tmp48 = sp + 120|0;
 $tmp49 = sp + 116|0;
 $tmp50 = sp + 112|0;
 $tmp51 = sp + 258|0;
 $buffer_size = sp + 108|0;
 $tmp52 = sp + 104|0;
 $tmp53 = sp + 100|0;
 $tmp54 = sp + 96|0;
 $tmp55 = sp + 257|0;
 $tmp56 = sp + 92|0;
 $tmp57 = sp + 256|0;
 $tmp58 = sp + 255|0;
 $tmp59 = sp + 254|0;
 $tmp60 = sp + 253|0;
 $tmp61 = sp + 252|0;
 $tmp62 = sp + 88|0;
 $tmp63 = sp + 251|0;
 $tmp64 = sp + 84|0;
 $tmp65 = sp + 80|0;
 $tmp66 = sp + 76|0;
 $tmp67 = sp + 250|0;
 $tmp68 = sp + 249|0;
 $tmp69 = sp + 248|0;
 $1 = $path;
 $conf = 0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (_config_file_new($4)|0);
  $conf = $5;
  $6 = $conf;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $497 = $$pre_trunc&1;
   STACKTOP = sp;return ($497|0);
  }
 } else {
  $8 = (_open_default_config_file()|0);
  $conf = $8;
 }
 $9 = $conf;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$expand_i1_val24 = 1;
  HEAP8[$0>>0] = $$expand_i1_val24;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $497 = $$pre_trunc&1;
  STACKTOP = sp;return ($497|0);
 }
 (_strlcpy_rarch__($tmp_append_path,(127250),4096)|0);
 $11 = (_strtok_r($tmp_append_path,749613,$save)|0);
 $extra_path = $11;
 while(1) {
  $12 = $extra_path;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP8[102648>>0]|0;
  $15 = $14&1;
  if (!($13)) {
   break;
  }
  if ($15) {
   $16 = HEAP32[(259664)>>2]|0;
   $17 = ($16|0)!=(0|0);
   $18 = HEAP32[(259664)>>2]|0;
   $19 = HEAP32[544648>>2]|0;
   $20 = $17 ? $18 : $19;
   $21 = $extra_path;
   HEAP32[$vararg_buffer>>2] = $21;
   (_fprintf($20,749615,$vararg_buffer)|0);
   $22 = HEAP32[(259664)>>2]|0;
   $23 = ($22|0)!=(0|0);
   $24 = HEAP32[(259664)>>2]|0;
   $25 = HEAP32[544648>>2]|0;
   $26 = $23 ? $24 : $25;
   (_fflush($26)|0);
  }
  $27 = $conf;
  $28 = $extra_path;
  $29 = (_config_append_file($27,$28)|0);
  $30 = $29&1;
  $ret = $30;
  $31 = $ret;
  $32 = $31&1;
  if (!($32)) {
   $33 = HEAP32[(259664)>>2]|0;
   $34 = ($33|0)!=(0|0);
   $35 = HEAP32[(259664)>>2]|0;
   $36 = HEAP32[544648>>2]|0;
   $37 = $34 ? $35 : $36;
   $38 = $extra_path;
   HEAP32[$vararg_buffer1>>2] = $38;
   (_fprintf($37,749649,$vararg_buffer1)|0);
   $39 = HEAP32[(259664)>>2]|0;
   $40 = ($39|0)!=(0|0);
   $41 = HEAP32[(259664)>>2]|0;
   $42 = HEAP32[544648>>2]|0;
   $43 = $40 ? $41 : $42;
   (_fflush($43)|0);
  }
  $44 = (_strtok_r(0,760908,$save)|0);
  $extra_path = $44;
 }
 if ($15) {
  $45 = HEAP8[102648>>0]|0;
  $46 = $45&1;
  if ($46) {
   $47 = HEAP32[(259664)>>2]|0;
   $48 = ($47|0)!=(0|0);
   $49 = HEAP32[(259664)>>2]|0;
   $50 = HEAP32[544648>>2]|0;
   $51 = $48 ? $49 : $50;
   (_fprintf($51,749700,$vararg_buffer4)|0);
   $52 = HEAP32[(259664)>>2]|0;
   $53 = ($52|0)!=(0|0);
   $54 = HEAP32[(259664)>>2]|0;
   $55 = HEAP32[544648>>2]|0;
   $56 = $53 ? $54 : $55;
   (_fflush($56)|0);
  }
  $57 = $conf;
  $58 = HEAP32[544648>>2]|0;
  _config_file_dump_all($57,$58);
  $59 = HEAP8[102648>>0]|0;
  $60 = $59&1;
  if ($60) {
   $61 = HEAP32[(259664)>>2]|0;
   $62 = ($61|0)!=(0|0);
   $63 = HEAP32[(259664)>>2]|0;
   $64 = HEAP32[544648>>2]|0;
   $65 = $62 ? $63 : $64;
   (_fprintf($65,749716,$vararg_buffer6)|0);
   $66 = HEAP32[(259664)>>2]|0;
   $67 = ($66|0)!=(0|0);
   $68 = HEAP32[(259664)>>2]|0;
   $69 = HEAP32[544648>>2]|0;
   $70 = $67 ? $68 : $69;
   (_fflush($70)|0);
  }
 }
 HEAPF32[$tmp>>2] = 0.0;
 $71 = $conf;
 $72 = (_config_get_float($71,749736,$tmp)|0);
 if ($72) {
  $73 = +HEAPF32[$tmp>>2];
  HEAPF32[(288)>>2] = $73;
 }
 HEAPF32[$tmp1>>2] = 0.0;
 $74 = $conf;
 $75 = (_config_get_float($74,749749,$tmp1)|0);
 if ($75) {
  $76 = +HEAPF32[$tmp1>>2];
  HEAPF32[(292)>>2] = $76;
 }
 HEAP32[$tmp2>>2] = 0;
 $77 = $conf;
 $78 = (_config_get_int($77,749762,$tmp2)|0);
 if ($78) {
  $79 = HEAP32[$tmp2>>2]|0;
  HEAP32[(304)>>2] = $79;
 }
 HEAP32[$tmp3>>2] = 0;
 $80 = $conf;
 $81 = (_config_get_int($80,749781,$tmp3)|0);
 if ($81) {
  $82 = HEAP32[$tmp3>>2]|0;
  HEAP32[(308)>>2] = $82;
 }
 $83 = HEAP8[(102651)>>0]|0;
 $84 = $83&1;
 if (!($84)) {
  HEAP8[$tmp4>>0] = 0;
  $85 = $conf;
  $86 = (_config_get_bool($85,749800,$tmp4)|0);
  if ($86) {
   $87 = HEAP8[$tmp4>>0]|0;
   $88 = $87&1;
   $89 = $88&1;
   HEAP8[(296)>>0] = $89;
  }
 }
 HEAP8[$tmp5>>0] = 0;
 $90 = $conf;
 $91 = (_config_get_bool($90,749817,$tmp5)|0);
 if ($91) {
  $92 = HEAP8[$tmp5>>0]|0;
  $93 = $92&1;
  $94 = $93&1;
  HEAP8[(297)>>0] = $94;
 }
 HEAP32[$tmp6>>2] = 0;
 $95 = $conf;
 $96 = (_config_get_int($95,749843,$tmp6)|0);
 if ($96) {
  $97 = HEAP32[$tmp6>>2]|0;
  HEAP32[(300)>>2] = $97;
 }
 HEAP8[$tmp7>>0] = 0;
 $98 = $conf;
 $99 = (_config_get_bool($98,749863,$tmp7)|0);
 if ($99) {
  $100 = HEAP8[$tmp7>>0]|0;
  $101 = $100&1;
  $102 = $101&1;
  HEAP8[(16768)>>0] = $102;
 }
 HEAP8[$tmp8>>0] = 0;
 $103 = $conf;
 $104 = (_config_get_bool($103,749889,$tmp8)|0);
 if ($104) {
  $105 = HEAP8[$tmp8>>0]|0;
  $106 = $105&1;
  $107 = $106&1;
  HEAP8[(312)>>0] = $107;
 }
 HEAP8[$tmp9>>0] = 0;
 $108 = $conf;
 $109 = (_config_get_bool($108,749901,$tmp9)|0);
 if ($109) {
  $110 = HEAP8[$tmp9>>0]|0;
  $111 = $110&1;
  $112 = $111&1;
  HEAP8[(313)>>0] = $112;
 }
 HEAP32[$tmp10>>2] = 0;
 $113 = $conf;
 $114 = (_config_get_int($113,749917,$tmp10)|0);
 if ($114) {
  $115 = HEAP32[$tmp10>>2]|0;
  HEAP32[(320)>>2] = $115;
 }
 $116 = HEAP32[(320)>>2]|0;
 $117 = ($116>>>0)>(3);
 if ($117) {
  HEAP32[(320)>>2] = 3;
 }
 HEAP8[$tmp11>>0] = 0;
 $118 = $conf;
 $119 = (_config_get_bool($118,749940,$tmp11)|0);
 if ($119) {
  $120 = HEAP8[$tmp11>>0]|0;
  $121 = $120&1;
  $122 = $121&1;
  HEAP8[(314)>>0] = $122;
 }
 HEAP32[$tmp12>>2] = 0;
 $123 = $conf;
 $124 = (_config_get_int($123,749968,$tmp12)|0);
 if ($124) {
  $125 = HEAP32[$tmp12>>2]|0;
  HEAP32[(316)>>2] = $125;
 }
 $126 = HEAP32[(316)>>2]|0;
 $127 = ($126>>>0)>(1);
 $128 = HEAP32[(316)>>2]|0;
 $129 = $127 ? $128 : 1;
 HEAP32[(316)>>2] = $129;
 $130 = HEAP32[(316)>>2]|0;
 $131 = ($130>>>0)<(4);
 $132 = HEAP32[(316)>>2]|0;
 $133 = $131 ? $132 : 4;
 HEAP32[(316)>>2] = $133;
 HEAP8[$tmp13>>0] = 0;
 $134 = $conf;
 $135 = (_config_get_bool($134,749988,$tmp13)|0);
 if ($135) {
  $136 = HEAP8[$tmp13>>0]|0;
  $137 = $136&1;
  $138 = $137&1;
  HEAP8[(8544)>>0] = $138;
 }
 HEAP8[$tmp14>>0] = 0;
 $139 = $conf;
 $140 = (_config_get_bool($139,750003,$tmp14)|0);
 if ($140) {
  $141 = HEAP8[$tmp14>>0]|0;
  $142 = $141&1;
  $143 = $142&1;
  HEAP8[(324)>>0] = $143;
 }
 HEAP8[$tmp15>>0] = 0;
 $144 = $conf;
 $145 = (_config_get_bool($144,750016,$tmp15)|0);
 if ($145) {
  $146 = HEAP8[$tmp15>>0]|0;
  $147 = $146&1;
  $148 = $147&1;
  HEAP8[(325)>>0] = $148;
 }
 HEAP8[$tmp16>>0] = 0;
 $149 = $conf;
 $150 = (_config_get_bool($149,750035,$tmp16)|0);
 if ($150) {
  $151 = HEAP8[$tmp16>>0]|0;
  $152 = $151&1;
  $153 = $152&1;
  HEAP8[(333)>>0] = $153;
 }
 HEAP8[$tmp17>>0] = 0;
 $154 = $conf;
 $155 = (_config_get_bool($154,750055,$tmp17)|0);
 if ($155) {
  $156 = HEAP8[$tmp17>>0]|0;
  $157 = $156&1;
  $158 = $157&1;
  HEAP8[(326)>>0] = $158;
 }
 HEAPF32[$tmp18>>2] = 0.0;
 $159 = $conf;
 $160 = (_config_get_float($159,750075,$tmp18)|0);
 if ($160) {
  $161 = +HEAPF32[$tmp18>>2];
  HEAPF32[(328)>>2] = $161;
 }
 HEAP32[$tmp19>>2] = 0;
 $162 = $conf;
 $163 = (_config_get_int($162,750094,$tmp19)|0);
 if ($163) {
  $164 = HEAP32[$tmp19>>2]|0;
  HEAP32[(336)>>2] = $164;
 }
 HEAP8[$tmp20>>0] = 0;
 $165 = $conf;
 $166 = (_config_get_bool($165,750113,$tmp20)|0);
 if ($166) {
  $167 = HEAP8[$tmp20>>0]|0;
  $168 = $167&1;
  $169 = $168&1;
  HEAP8[(332)>>0] = $169;
 }
 HEAPF32[$tmp21>>2] = 0.0;
 $170 = $conf;
 $171 = (_config_get_float($170,750137,$tmp21)|0);
 if ($171) {
  $172 = +HEAPF32[$tmp21>>2];
  HEAPF32[(8540)>>2] = $172;
 }
 $173 = $conf;
 (_config_get_path($173,750156,(344),4096)|0);
 HEAP8[$tmp22>>0] = 0;
 $174 = $conf;
 $175 = (_config_get_bool($174,750169,$tmp22)|0);
 if ($175) {
  $176 = HEAP8[$tmp22>>0]|0;
  $177 = $176&1;
  $178 = $177&1;
  HEAP8[(4440)>>0] = $178;
 }
 HEAP8[$tmp23>>0] = 0;
 $179 = $conf;
 $180 = (_config_get_bool($179,750189,$tmp23)|0);
 if ($180) {
  $181 = HEAP8[$tmp23>>0]|0;
  $182 = $181&1;
  $183 = $182&1;
  HEAP8[(16772)>>0] = $183;
 }
 $184 = $conf;
 (_config_get_path($184,750208,(12641),4096)|0);
 HEAPF32[$tmp24>>2] = 0.0;
 $185 = $conf;
 $186 = (_config_get_float($185,750224,$tmp24)|0);
 if ($186) {
  $187 = +HEAPF32[$tmp24>>2];
  HEAPF32[(16740)>>2] = $187;
 }
 HEAP8[$tmp25>>0] = 0;
 $188 = $conf;
 $189 = (_config_get_bool($188,750240,$tmp25)|0);
 if ($189) {
  $190 = HEAP8[$tmp25>>0]|0;
  $191 = $190&1;
  $192 = $191&1;
  HEAP8[(16744)>>0] = $192;
 }
 HEAP8[$tmp26>>0] = 0;
 $193 = $conf;
 $194 = (_config_get_bool($193,750258,$tmp26)|0);
 if ($194) {
  $195 = HEAP8[$tmp26>>0]|0;
  $196 = $195&1;
  $197 = $196&1;
  HEAP8[(16745)>>0] = $197;
 }
 HEAPF32[$tmp27>>2] = 0.0;
 $198 = $conf;
 $199 = (_config_get_float($198,750275,$tmp27)|0);
 if ($199) {
  $200 = +HEAPF32[$tmp27>>2];
  HEAPF32[(16748)>>2] = $200;
 }
 HEAPF32[$tmp28>>2] = 0.0;
 $201 = $conf;
 $202 = (_config_get_float($201,750295,$tmp28)|0);
 if ($202) {
  $203 = +HEAPF32[$tmp28>>2];
  HEAPF32[(16752)>>2] = $203;
 }
 HEAP32[$tmp29>>2] = 0;
 $204 = $conf;
 $205 = (_config_get_int($204,750315,$tmp29)|0);
 if ($205) {
  $206 = HEAP32[$tmp29>>2]|0;
  HEAP32[(340)>>2] = $206;
 }
 HEAP32[$tmp30>>2] = 0;
 $207 = $conf;
 $208 = (_config_get_int($207,750330,$tmp30)|0);
 if ($208) {
  $209 = HEAP32[$tmp30>>2]|0;
  HEAP32[(259612)>>2] = $209;
 }
 HEAP32[$tmp31>>2] = 0;
 $210 = $conf;
 $211 = (_config_get_int($210,750348,$tmp31)|0);
 if ($211) {
  $212 = HEAP32[$tmp31>>2]|0;
  HEAP32[(259616)>>2] = $212;
 }
 HEAP32[$tmp32>>2] = 0;
 $213 = $conf;
 $214 = (_config_get_int($213,750366,$tmp32)|0);
 if ($214) {
  $215 = HEAP32[$tmp32>>2]|0;
  HEAP32[(259620)>>2] = $215;
 }
 HEAP32[$tmp33>>2] = 0;
 $216 = $conf;
 $217 = (_config_get_int($216,750388,$tmp33)|0);
 if ($217) {
  $218 = HEAP32[$tmp33>>2]|0;
  HEAP32[(259624)>>2] = $218;
 }
 HEAP32[$msg_color>>2] = 0;
 $219 = $conf;
 $220 = (_config_get_hex($219,750411,$msg_color)|0);
 if ($220) {
  $221 = HEAP32[$msg_color>>2]|0;
  $222 = $221 >>> 16;
  $223 = $222 & 255;
  $224 = (+($223>>>0));
  $225 = $224 / 255.0;
  HEAPF32[(16756)>>2] = $225;
  $226 = HEAP32[$msg_color>>2]|0;
  $227 = $226 >>> 8;
  $228 = $227 & 255;
  $229 = (+($228>>>0));
  $230 = $229 / 255.0;
  HEAPF32[(16760)>>2] = $230;
  $231 = HEAP32[$msg_color>>2]|0;
  $232 = $231 >>> 0;
  $233 = $232 & 255;
  $234 = (+($233>>>0));
  $235 = $234 / 255.0;
  HEAPF32[(16764)>>2] = $235;
 }
 HEAP8[$tmp34>>0] = 0;
 $236 = $conf;
 $237 = (_config_get_bool($236,750431,$tmp34)|0);
 if ($237) {
  $238 = HEAP8[$tmp34>>0]|0;
  $239 = $238&1;
  $240 = $239&1;
  HEAP8[(16769)>>0] = $240;
 }
 HEAP8[$tmp35>>0] = 0;
 $241 = $conf;
 $242 = (_config_get_bool($241,750456,$tmp35)|0);
 if ($242) {
  $243 = HEAP8[$tmp35>>0]|0;
  $244 = $243&1;
  $245 = $244&1;
  HEAP8[(16770)>>0] = $245;
 }
 HEAP8[$tmp36>>0] = 0;
 $246 = $conf;
 $247 = (_config_get_bool($246,750473,$tmp36)|0);
 if ($247) {
  $248 = HEAP8[$tmp36>>0]|0;
  $249 = $248&1;
  $250 = $249&1;
  HEAP8[(16771)>>0] = $250;
 }
 $251 = $conf;
 (_config_get_path($251,750494,(8545),4096)|0);
 $252 = (_strcmp((8545),750511)|0);
 $253 = ($252|0)!=(0);
 if (!($253)) {
  HEAP8[(8545)>>0] = 0;
 }
 HEAPF32[$tmp37>>2] = 0.0;
 $254 = $conf;
 $255 = (_config_get_float($254,750519,$tmp37)|0);
 if ($255) {
  $256 = +HEAPF32[$tmp37>>2];
  HEAPF32[(61008)>>2] = $256;
 }
 HEAP8[$tmp38>>0] = 0;
 $257 = $conf;
 $258 = (_config_get_bool($257,750540,$tmp38)|0);
 if ($258) {
  $259 = HEAP8[$tmp38>>0]|0;
  $260 = $259&1;
  $261 = $260&1;
  HEAP8[(61622)>>0] = $261;
 }
 $i = 0;
 while(1) {
  $262 = $i;
  $263 = ($262>>>0)<(8);
  if (!($263)) {
   break;
  }
  $264 = $i;
  $265 = (($264) + 1)|0;
  HEAP32[$vararg_buffer8>>2] = $265;
  (_snprintf($buf,64,750566,$vararg_buffer8)|0);
  HEAP32[$tmp39>>2] = 0;
  $266 = $conf;
  $267 = (_config_get_int($266,$buf,$tmp39)|0);
  if ($267) {
   $268 = HEAP32[$tmp39>>2]|0;
   $269 = $i;
   $270 = ((61012) + ($269<<2)|0);
   HEAP32[$270>>2] = $268;
  }
  $271 = $i;
  $272 = ((123146) + ($271)|0);
  $273 = HEAP8[$272>>0]|0;
  $274 = $273&1;
  do {
   if (!($274)) {
    $275 = $i;
    $276 = (($275) + 1)|0;
    HEAP32[$vararg_buffer11>>2] = $276;
    (_snprintf($buf,64,750594,$vararg_buffer11)|0);
    HEAP32[$tmp40>>2] = 0;
    $277 = $conf;
    $278 = (_config_get_int($277,$buf,$tmp40)|0);
    if (!($278)) {
     break;
    }
    $279 = HEAP32[$tmp40>>2]|0;
    $280 = $i;
    $281 = ((60976) + ($280<<2)|0);
    HEAP32[$281>>2] = $279;
   }
  } while(0);
  $282 = $i;
  $283 = (($282) + 1)|0;
  $i = $283;
 }
 HEAP8[$tmp41>>0] = 0;
 $284 = $conf;
 $285 = (_config_get_bool($284,750620,$tmp41)|0);
 if ($285) {
  $286 = HEAP8[$tmp41>>0]|0;
  $287 = $286&1;
  $288 = $287&1;
  HEAP8[(16808)>>0] = $288;
 }
 HEAP32[$tmp42>>2] = 0;
 $289 = $conf;
 $290 = (_config_get_int($289,750633,$tmp42)|0);
 if ($290) {
  $291 = HEAP32[$tmp42>>2]|0;
  HEAP32[(16812)>>2] = $291;
 }
 HEAP32[$tmp43>>2] = 0;
 $292 = $conf;
 $293 = (_config_get_int($292,750648,$tmp43)|0);
 if ($293) {
  $294 = HEAP32[$tmp43>>2]|0;
  HEAP32[(16816)>>2] = $294;
 }
 $295 = $conf;
 (_config_get_array($295,750667,(16824),4096)|0);
 HEAP32[$tmp44>>2] = 0;
 $296 = $conf;
 $297 = (_config_get_int($296,750680,$tmp44)|0);
 if ($297) {
  $298 = HEAP32[$tmp44>>2]|0;
  HEAP32[(20920)>>2] = $298;
 }
 HEAP8[$tmp45>>0] = 0;
 $299 = $conf;
 $300 = (_config_get_bool($299,750694,$tmp45)|0);
 if ($300) {
  $301 = HEAP8[$tmp45>>0]|0;
  $302 = $301&1;
  $303 = $302&1;
  HEAP8[(20924)>>0] = $303;
 }
 HEAP8[$tmp46>>0] = 0;
 $304 = $conf;
 $305 = (_config_get_bool($304,750705,$tmp46)|0);
 if ($305) {
  $306 = HEAP8[$tmp46>>0]|0;
  $307 = $306&1;
  $308 = $307&1;
  HEAP8[(25021)>>0] = $308;
 }
 HEAPF32[$tmp47>>2] = 0.0;
 $309 = $conf;
 $310 = (_config_get_float($309,750724,$tmp47)|0);
 if ($310) {
  $311 = +HEAPF32[$tmp47>>2];
  HEAPF32[(25024)>>2] = $311;
 }
 HEAPF32[$tmp48>>2] = 0.0;
 $312 = $conf;
 $313 = (_config_get_float($312,750749,$tmp48)|0);
 if ($313) {
  $314 = +HEAPF32[$tmp48>>2];
  HEAPF32[(25028)>>2] = $314;
 }
 $315 = $conf;
 (_config_get_array($315,750762,224,32)|0);
 $316 = $conf;
 (_config_get_array($316,750775,(256),32)|0);
 $317 = $conf;
 (_config_get_array($317,750792,(16776),32)|0);
 $318 = $conf;
 (_config_get_path($318,750805,(20925),4096)|0);
 $319 = $conf;
 (_config_get_array($319,750822,(25064),32)|0);
 $320 = $conf;
 (_config_get_array($320,750835,(25096),32)|0);
 $321 = HEAP8[(78028)>>0]|0;
 $322 = ($321<<24>>24)!=(0);
 if (!($322)) {
  $323 = $conf;
  (_config_get_path($323,750855,(78028),4096)|0);
 }
 $324 = $conf;
 (_config_get_path($324,750869,(69832),4096)|0);
 $325 = $conf;
 (_config_get_path($325,750887,(90316),4096)|0);
 $326 = HEAP8[(90316)>>0]|0;
 $327 = ($326<<24>>24)!=(0);
 do {
  if ($327) {
   $328 = (_strcmp((90316),750511)|0);
   $329 = ($328|0)!=(0);
   if (!($329)) {
    HEAP8[(90316)>>0] = 0;
    break;
   }
   $330 = (_path_is_directory((90316))|0);
   if ($330) {
    break;
   }
   $331 = HEAP32[(259664)>>2]|0;
   $332 = ($331|0)!=(0|0);
   $333 = HEAP32[(259664)>>2]|0;
   $334 = HEAP32[544648>>2]|0;
   $335 = $332 ? $333 : $334;
   (_fprintf($335,750908,$vararg_buffer14)|0);
   $336 = HEAP32[(259664)>>2]|0;
   $337 = ($336|0)!=(0|0);
   $338 = HEAP32[(259664)>>2]|0;
   $339 = HEAP32[544648>>2]|0;
   $340 = $337 ? $338 : $339;
   (_fflush($340)|0);
   HEAP8[(90316)>>0] = 0;
  }
 } while(0);
 $341 = $conf;
 (_config_get_path($341,750993,(98545),4096)|0);
 $342 = (_strcmp((98545),750511)|0);
 $343 = ($342|0)!=(0);
 if (!($343)) {
  HEAP8[(98545)>>0] = 0;
 }
 $344 = $conf;
 (_config_get_path($344,751016,(180498),4096)|0);
 $345 = (_strcmp((180498),750511)|0);
 $346 = ($345|0)!=(0);
 if (!($346)) {
  HEAP8[(180498)>>0] = 0;
 }
 $347 = $conf;
 (_config_get_path($347,751034,(61632),4096)|0);
 HEAPF32[$tmp49>>2] = 0.0;
 $348 = $conf;
 $349 = (_config_get_float($348,751048,$tmp49)|0);
 if ($349) {
  $350 = +HEAPF32[$tmp49>>2];
  HEAPF32[(65728)>>2] = $350;
 }
 HEAPF32[$tmp50>>2] = 0.0;
 $351 = $conf;
 $352 = (_config_get_float($351,751070,$tmp50)|0);
 if ($352) {
  $353 = +HEAPF32[$tmp50>>2];
  HEAPF32[(65732)>>2] = $353;
 }
 HEAP8[$tmp51>>0] = 0;
 $354 = $conf;
 $355 = (_config_get_bool($354,751090,$tmp51)|0);
 if ($355) {
  $356 = HEAP8[$tmp51>>0]|0;
  $357 = $356&1;
  $358 = $357&1;
  HEAP8[(98508)>>0] = $358;
 }
 HEAP32[$buffer_size>>2] = 0;
 $359 = $conf;
 $360 = (_config_get_int($359,751104,$buffer_size)|0);
 if ($360) {
  $361 = HEAP32[$buffer_size>>2]|0;
  $362 = ($361|0)<(0);
  $363 = $362 << 31 >> 31;
  $364 = (___muldi3(($361|0),($363|0),1000000,0)|0);
  $365 = tempRet0;
  HEAP32[(98512)>>2] = $364;
 }
 HEAP32[$tmp52>>2] = 0;
 $366 = $conf;
 $367 = (_config_get_int($366,751123,$tmp52)|0);
 if ($367) {
  $368 = HEAP32[$tmp52>>2]|0;
  HEAP32[(98516)>>2] = $368;
 }
 HEAPF32[$tmp53>>2] = 0.0;
 $369 = $conf;
 $370 = (_config_get_float($369,751142,$tmp53)|0);
 if ($370) {
  $371 = +HEAPF32[$tmp53>>2];
  HEAPF32[(98520)>>2] = $371;
 }
 $372 = +HEAPF32[(98520)>>2];
 $373 = $372 < 1.0;
 if ($373) {
  HEAPF32[(98520)>>2] = 1.0;
 }
 HEAPF32[$tmp54>>2] = 0.0;
 $374 = $conf;
 $375 = (_config_get_float($374,751159,$tmp54)|0);
 if ($375) {
  $376 = +HEAPF32[$tmp54>>2];
  HEAPF32[(98524)>>2] = $376;
 }
 HEAP8[$tmp55>>0] = 0;
 $377 = $conf;
 $378 = (_config_get_bool($377,751177,$tmp55)|0);
 if ($378) {
  $379 = HEAP8[$tmp55>>0]|0;
  $380 = $379&1;
  $381 = $380&1;
  HEAP8[(98528)>>0] = $381;
 }
 HEAP32[$tmp56>>2] = 0;
 $382 = $conf;
 $383 = (_config_get_int($382,751193,$tmp56)|0);
 if ($383) {
  $384 = HEAP32[$tmp56>>2]|0;
  HEAP32[(98532)>>2] = $384;
 }
 $385 = $conf;
 (_config_get_path($385,751211,(82124),4096)|0);
 $386 = $conf;
 (_config_get_path($386,751231,(86220),4096)|0);
 HEAP8[$tmp57>>0] = 0;
 $387 = $conf;
 $388 = (_config_get_bool($387,751251,$tmp57)|0);
 if ($388) {
  $389 = HEAP8[$tmp57>>0]|0;
  $390 = $389&1;
  $391 = $390&1;
  HEAP8[(98536)>>0] = $391;
 }
 HEAP8[$tmp58>>0] = 0;
 $392 = $conf;
 $393 = (_config_get_bool($392,751272,$tmp58)|0);
 if ($393) {
  $394 = HEAP8[$tmp58>>0]|0;
  $395 = $394&1;
  $396 = $395&1;
  HEAP8[(98537)>>0] = $396;
 }
 HEAP8[$tmp59>>0] = 0;
 $397 = $conf;
 $398 = (_config_get_bool($397,751293,$tmp59)|0);
 if ($398) {
  $399 = HEAP8[$tmp59>>0]|0;
  $400 = $399&1;
  $401 = $400&1;
  HEAP8[(98538)>>0] = $401;
 }
 HEAP8[$tmp60>>0] = 0;
 $402 = $conf;
 $403 = (_config_get_bool($402,751313,$tmp60)|0);
 if ($403) {
  $404 = HEAP8[$tmp60>>0]|0;
  $405 = $404&1;
  $406 = $405&1;
  HEAP8[(98539)>>0] = $406;
 }
 HEAP8[$tmp61>>0] = 0;
 $407 = $conf;
 $408 = (_config_get_bool($407,751333,$tmp61)|0);
 if ($408) {
  $409 = HEAP8[$tmp61>>0]|0;
  $410 = $409&1;
  $411 = $410&1;
  HEAP8[(98540)>>0] = $411;
 }
 HEAP32[$tmp62>>2] = 0;
 $412 = $conf;
 $413 = (_config_get_int($412,751352,$tmp62)|0);
 if ($413) {
  $414 = HEAP32[$tmp62>>2]|0;
  $415 = $414&65535;
  HEAP16[(98542)>>1] = $415;
 }
 HEAP8[$tmp63>>0] = 0;
 $416 = $conf;
 $417 = (_config_get_bool($416,751369,$tmp63)|0);
 if ($417) {
  $418 = HEAP8[$tmp63>>0]|0;
  $419 = $418&1;
  $420 = $419&1;
  HEAP8[(98544)>>0] = $420;
 }
 $421 = $conf;
 (_config_get_path($421,751386,(73928),4096)|0);
 HEAP32[$tmp64>>2] = 0;
 $422 = $conf;
 $423 = (_config_get_int($422,751404,$tmp64)|0);
 if ($423) {
  $424 = HEAP32[$tmp64>>2]|0;
  HEAP32[(78024)>>2] = $424;
 }
 HEAP32[$tmp65>>2] = 0;
 $425 = $conf;
 $426 = (_config_get_int($425,751422,$tmp65)|0);
 if ($426) {
  $427 = HEAP32[$tmp65>>2]|0;
  HEAP32[(61624)>>2] = $427;
 }
 HEAP32[$tmp66>>2] = 0;
 $428 = $conf;
 $429 = (_config_get_int($428,751441,$tmp66)|0);
 if ($429) {
  $430 = HEAP32[$tmp66>>2]|0;
  HEAP32[(61628)>>2] = $430;
 }
 HEAP8[$tmp67>>0] = 0;
 $431 = $conf;
 $432 = (_config_get_bool($431,751458,$tmp67)|0);
 if ($432) {
  $433 = HEAP8[$tmp67>>0]|0;
  $434 = $433&1;
  $435 = $434&1;
  HEAP8[(61620)>>0] = $435;
 }
 HEAP8[$tmp68>>0] = 0;
 $436 = $conf;
 $437 = (_config_get_bool($436,751477,$tmp68)|0);
 if ($437) {
  $438 = HEAP8[$tmp68>>0]|0;
  $439 = $438&1;
  $440 = $439&1;
  HEAP8[(61621)>>0] = $440;
 }
 $441 = $conf;
 (_config_get_path($441,751501,(65736),4096)|0);
 HEAP8[$tmp69>>0] = 0;
 $442 = $conf;
 $443 = (_config_get_bool($442,751523,$tmp69)|0);
 if ($443) {
  $444 = HEAP8[$tmp69>>0]|0;
  $445 = $444&1;
  $446 = $445&1;
  HEAP8[(259670)>>0] = $446;
 }
 $447 = HEAP8[(123144)>>0]|0;
 $448 = $447&1;
 do {
  if (!($448)) {
   $449 = $conf;
   $450 = (_config_get_path($449,751543,$tmp_str,4096)|0);
   if (!($450)) {
    break;
   }
   $451 = (_strcmp($tmp_str,750511)|0);
   $452 = ($451|0)!=(0);
   if (!($452)) {
    HEAP8[(172306)>>0] = 0;
    break;
   }
   $453 = (_path_is_directory($tmp_str)|0);
   if ($453) {
    (_strlcpy_rarch__((172306),$tmp_str,4096)|0);
    (_strlcpy_rarch__((143634),$tmp_str,4096)|0);
    _fill_pathname_dir((143634),(135442),751562,4096);
    break;
   } else {
    $454 = HEAP32[(259664)>>2]|0;
    $455 = ($454|0)!=(0|0);
    $456 = HEAP32[(259664)>>2]|0;
    $457 = HEAP32[544648>>2]|0;
    $458 = $455 ? $456 : $457;
    (_fprintf($458,751567,$vararg_buffer16)|0);
    $459 = HEAP32[(259664)>>2]|0;
    $460 = ($459|0)!=(0|0);
    $461 = HEAP32[(259664)>>2]|0;
    $462 = HEAP32[544648>>2]|0;
    $463 = $460 ? $461 : $462;
    (_fflush($463)|0);
    break;
   }
  }
 } while(0);
 $464 = HEAP8[(123145)>>0]|0;
 $465 = $464&1;
 do {
  if (!($465)) {
   $466 = $conf;
   $467 = (_config_get_path($466,751640,$tmp_str,4096)|0);
   if (!($467)) {
    break;
   }
   $468 = (_strcmp($tmp_str,750511)|0);
   $469 = ($468|0)!=(0);
   if (!($469)) {
    HEAP8[(176402)>>0] = 0;
    break;
   }
   $470 = (_path_is_directory($tmp_str)|0);
   if ($470) {
    (_strlcpy_rarch__((176402),$tmp_str,4096)|0);
    (_strlcpy_rarch__((164114),$tmp_str,4096)|0);
    _fill_pathname_dir((164114),(135442),751660,4096);
    break;
   } else {
    $471 = HEAP32[(259664)>>2]|0;
    $472 = ($471|0)!=(0|0);
    $473 = HEAP32[(259664)>>2]|0;
    $474 = HEAP32[544648>>2]|0;
    $475 = $472 ? $473 : $474;
    (_fprintf($475,751667,$vararg_buffer18)|0);
    $476 = HEAP32[(259664)>>2]|0;
    $477 = ($476|0)!=(0|0);
    $478 = HEAP32[(259664)>>2]|0;
    $479 = HEAP32[544648>>2]|0;
    $480 = $477 ? $478 : $479;
    (_fflush($480)|0);
    break;
   }
  }
 } while(0);
 $481 = $conf;
 $482 = (_config_get_path($481,751741,(94412),4096)|0);
 if (!($482)) {
  $483 = HEAP32[(259664)>>2]|0;
  $484 = ($483|0)!=(0|0);
  $485 = HEAP32[(259664)>>2]|0;
  $486 = HEAP32[544648>>2]|0;
  $487 = $484 ? $485 : $486;
  HEAP32[$vararg_buffer20>>2] = (94412);
  (_fprintf($487,751758,$vararg_buffer20)|0);
  $488 = HEAP32[(259664)>>2]|0;
  $489 = ($488|0)!=(0|0);
  $490 = HEAP32[(259664)>>2]|0;
  $491 = HEAP32[544648>>2]|0;
  $492 = $489 ? $490 : $491;
  (_fflush($492)|0);
 }
 $493 = (_strcmp((94412),750511)|0);
 $494 = ($493|0)!=(0);
 if (!($494)) {
  HEAP8[(94412)>>0] = 0;
 }
 $495 = $conf;
 _config_read_keybinds_conf($495);
 $496 = $conf;
 _config_file_free($496);
 $$expand_i1_val26 = 1;
 HEAP8[$0>>0] = $$expand_i1_val26;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $497 = $$pre_trunc&1;
 STACKTOP = sp;return ($497|0);
}
function _config_save_file($path) {
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val14 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $conf = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 112|0;
 $cfg = sp + 48|0;
 $1 = $path;
 $2 = $1;
 $3 = (_config_file_new($2)|0);
 $conf = $3;
 $4 = $conf;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $6 = (_config_file_new(0)|0);
  $conf = $6;
 }
 $7 = $conf;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $222 = $$pre_trunc&1;
  STACKTOP = sp;return ($222|0);
 }
 $9 = HEAP8[102648>>0]|0;
 $10 = $9&1;
 if ($10) {
  $11 = HEAP32[(259664)>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = HEAP32[544648>>2]|0;
  $15 = $12 ? $13 : $14;
  $16 = $1;
  HEAP32[$vararg_buffer>>2] = $16;
  (_fprintf($15,751874,$vararg_buffer)|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  (_fflush($21)|0);
 }
 $22 = $conf;
 _config_set_string($22,750855,(78028));
 $23 = $conf;
 _config_set_string($23,751211,(82124));
 $24 = $conf;
 $25 = HEAP8[(98508)>>0]|0;
 $26 = $25&1;
 _config_set_bool($24,751090,$26);
 $27 = $conf;
 $28 = HEAP32[(98516)>>2]|0;
 _config_set_int($27,751123,$28);
 $29 = $conf;
 _config_set_string($29,750156,(344));
 $30 = $conf;
 $31 = HEAP8[(4440)>>0]|0;
 $32 = $31&1;
 _config_set_bool($30,750169,$32);
 $33 = $conf;
 $34 = +HEAPF32[(328)>>2];
 _config_set_float($33,750075,$34);
 $35 = $conf;
 $36 = +HEAPF32[(288)>>2];
 _config_set_float($35,749736,$36);
 $37 = $conf;
 $38 = +HEAPF32[(292)>>2];
 _config_set_float($37,749749,$38);
 $39 = $conf;
 $40 = HEAP8[(326)>>0]|0;
 $41 = $40&1;
 _config_set_bool($39,750055,$41);
 $42 = $conf;
 $43 = HEAP8[(333)>>0]|0;
 $44 = $43&1;
 _config_set_bool($42,750035,$44);
 $45 = $conf;
 $46 = HEAP8[(324)>>0]|0;
 $47 = $46&1;
 _config_set_bool($45,750003,$47);
 $48 = $conf;
 $49 = +HEAPF32[(8540)>>2];
 _config_set_float($48,750137,$49);
 $50 = $conf;
 $51 = HEAP8[(312)>>0]|0;
 $52 = $51&1;
 _config_set_bool($50,749889,$52);
 $53 = $conf;
 $54 = HEAP8[(313)>>0]|0;
 $55 = $54&1;
 _config_set_bool($53,749901,$55);
 $56 = $conf;
 $57 = HEAP32[(320)>>2]|0;
 _config_set_int($56,749917,$57);
 $58 = $conf;
 $59 = HEAP8[(314)>>0]|0;
 $60 = $59&1;
 _config_set_bool($58,749940,$60);
 $61 = $conf;
 $62 = HEAP32[(316)>>2]|0;
 _config_set_int($61,749968,$62);
 $63 = $conf;
 $64 = HEAP8[(16771)>>0]|0;
 $65 = $64&1;
 _config_set_bool($63,750473,$65);
 $66 = $conf;
 $67 = HEAP32[(340)>>2]|0;
 _config_set_int($66,750315,$67);
 $68 = $conf;
 $69 = HEAP8[(90316)>>0]|0;
 $70 = $69 << 24 >> 24;
 $71 = ($70|0)!=(0);
 $72 = $71 ? (90316) : 750511;
 _config_set_string($68,750887,$72);
 $73 = $conf;
 $74 = HEAP32[(336)>>2]|0;
 _config_set_int($73,750094,$74);
 $75 = $conf;
 _config_set_string($75,750667,(16824));
 $76 = $conf;
 $77 = HEAP8[(25021)>>0]|0;
 $78 = $77&1;
 _config_set_bool($76,750705,$78);
 $79 = $conf;
 $80 = +HEAPF32[(25024)>>2];
 _config_set_float($79,750724,$80);
 $81 = HEAP8[(94412)>>0]|0;
 $82 = ($81<<24>>24)!=(0);
 $83 = $conf;
 if ($82) {
  _config_set_string($83,751741,(94412));
 } else {
  _config_set_string($83,751741,750511);
 }
 $84 = HEAP8[(172306)>>0]|0;
 $85 = ($84<<24>>24)!=(0);
 $86 = $conf;
 if ($85) {
  _config_set_string($86,751543,(172306));
 } else {
  _config_set_string($86,751543,750511);
 }
 $87 = HEAP8[(176402)>>0]|0;
 $88 = ($87<<24>>24)!=(0);
 $89 = $conf;
 if ($88) {
  _config_set_string($89,751640,(176402));
 } else {
  _config_set_string($89,751640,750511);
 }
 $90 = HEAP8[(8545)>>0]|0;
 $91 = ($90<<24>>24)!=(0);
 $92 = $conf;
 if ($91) {
  _config_set_string($92,750494,(8545));
 } else {
  _config_set_string($92,750494,750511);
 }
 $93 = HEAP8[(98545)>>0]|0;
 $94 = ($93<<24>>24)!=(0);
 $95 = $conf;
 if ($94) {
  _config_set_string($95,750993,(98545));
 } else {
  _config_set_string($95,750993,750511);
 }
 $96 = HEAP8[(180498)>>0]|0;
 $97 = ($96<<24>>24)!=(0);
 $98 = $conf;
 if ($97) {
  _config_set_string($98,751016,(180498));
 } else {
  _config_set_string($98,751016,750511);
 }
 $99 = $conf;
 _config_set_string($99,751034,(61632));
 $100 = $conf;
 $101 = +HEAPF32[(65728)>>2];
 _config_set_float($100,751048,$101);
 $102 = $conf;
 $103 = +HEAPF32[(65732)>>2];
 _config_set_float($102,751070,$103);
 $104 = $conf;
 $105 = HEAP32[(259636)>>2]|0;
 $106 = ($105|0)!=(0);
 _config_set_bool($104,751914,$106);
 $107 = (259656);
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = $109 & 16384;
 $114 = ($113|0)!=(0);
 $115 = (0)!=(0);
 $116 = $114 | $115;
 $117 = $conf;
 if ($116) {
  _config_set_bool($117,751931,1);
 } else {
  _config_set_bool($117,751931,0);
 }
 $118 = (259656);
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = (($118) + 4)|0;
 $122 = $121;
 $123 = HEAP32[$122>>2]|0;
 $124 = $120 & 128;
 $125 = ($124|0)!=(0);
 $126 = (0)!=(0);
 $127 = $125 | $126;
 $128 = $conf;
 if ($127) {
  _config_set_bool($128,751955,1);
 } else {
  _config_set_bool($128,751955,0);
 }
 $129 = (259656);
 $130 = $129;
 $131 = HEAP32[$130>>2]|0;
 $132 = (($129) + 4)|0;
 $133 = $132;
 $134 = HEAP32[$133>>2]|0;
 $135 = $131 & 65536;
 $136 = ($135|0)!=(0);
 $137 = (0)!=(0);
 $138 = $136 | $137;
 $139 = $conf;
 if ($138) {
  _config_set_bool($139,751971,1);
 } else {
  _config_set_bool($139,751971,0);
 }
 $140 = (259656);
 $141 = $140;
 $142 = HEAP32[$141>>2]|0;
 $143 = (($140) + 4)|0;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = $142 & 32768;
 $147 = ($146|0)!=(0);
 $148 = (0)!=(0);
 $149 = $147 | $148;
 $150 = $conf;
 if ($149) {
  _config_set_bool($150,751990,1);
 } else {
  _config_set_bool($150,751990,0);
 }
 $151 = $conf;
 $152 = HEAP8[(259640)>>0]|0;
 $153 = $152&255;
 _config_set_int($151,752012,$153);
 $154 = $conf;
 $155 = HEAP8[(259641)>>0]|0;
 $156 = $155&255;
 _config_set_int($154,752033,$156);
 $157 = $conf;
 $158 = HEAP32[(259588)>>2]|0;
 _config_set_int($157,752051,$158);
 $159 = $conf;
 $160 = HEAP32[(259620)>>2]|0;
 _config_set_int($159,750366,$160);
 $161 = $conf;
 $162 = HEAP32[(259624)>>2]|0;
 _config_set_int($161,750388,$162);
 $163 = $conf;
 $164 = HEAP32[(259612)>>2]|0;
 _config_set_int($163,750330,$164);
 $165 = $conf;
 $166 = HEAP32[(259616)>>2]|0;
 _config_set_int($165,750348,$166);
 $167 = $conf;
 $168 = +HEAPF32[(16740)>>2];
 _config_set_float($167,750224,$168);
 $169 = $conf;
 $170 = HEAP8[(259670)>>0]|0;
 $171 = $170&1;
 _config_set_bool($169,751523,$171);
 $172 = $conf;
 $173 = HEAP32[(259644)>>2]|0;
 _config_set_int($172,752073,$173);
 $174 = $conf;
 $175 = HEAP32[(196888)>>2]|0;
 _config_set_int($174,752084,$175);
 $176 = $conf;
 $177 = HEAP8[(201753)>>0]|0;
 $178 = $177&1;
 $179 = $178&1;
 _config_set_int($176,758245,$179);
 $180 = (259656);
 $181 = $180;
 $182 = HEAP32[$181>>2]|0;
 $183 = (($180) + 4)|0;
 $184 = $183;
 $185 = HEAP32[$184>>2]|0;
 $186 = $182 & 524288;
 $187 = ($186|0)!=(0);
 $188 = (0)!=(0);
 $189 = $187 | $188;
 $190 = $conf;
 if ($189) {
  _config_set_bool($190,752095,1);
 } else {
  _config_set_bool($190,752095,0);
 }
 $i = 0;
 while(1) {
  $191 = $i;
  $192 = ($191>>>0)<(8);
  if (!($192)) {
   break;
  }
  $193 = $i;
  $194 = (($193) + 1)|0;
  HEAP32[$vararg_buffer1>>2] = $194;
  (_snprintf($cfg,64,752113,$vararg_buffer1)|0);
  $195 = $conf;
  $196 = $i;
  $197 = ((61588) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  _config_set_int($195,$cfg,$198);
  $199 = $i;
  $200 = (($199) + 1)|0;
  HEAP32[$vararg_buffer4>>2] = $200;
  (_snprintf($cfg,64,752138,$vararg_buffer4)|0);
  $201 = $conf;
  $202 = $i;
  $203 = ((61044) + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  _config_set_int($201,$cfg,$204);
  $205 = $i;
  $206 = (($205) + 1)|0;
  HEAP32[$vararg_buffer7>>2] = $206;
  (_snprintf($cfg,64,750566,$vararg_buffer7)|0);
  $207 = $conf;
  $208 = $i;
  $209 = ((61012) + ($208<<2)|0);
  $210 = HEAP32[$209>>2]|0;
  _config_set_int($207,$cfg,$210);
  $211 = $i;
  $212 = (($211) + 1)|0;
  HEAP32[$vararg_buffer10>>2] = $212;
  (_snprintf($cfg,64,750594,$vararg_buffer10)|0);
  $213 = $conf;
  $214 = $i;
  $215 = ((60976) + ($214<<2)|0);
  $216 = HEAP32[$215>>2]|0;
  _config_set_int($213,$cfg,$216);
  $217 = $i;
  $218 = (($217) + 1)|0;
  $i = $218;
 }
 $219 = $conf;
 $220 = $1;
 (_config_file_write($219,$220)|0);
 $221 = $conf;
 _config_file_free($221);
 $$expand_i1_val14 = 1;
 HEAP8[$0>>0] = $$expand_i1_val14;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $222 = $$pre_trunc&1;
 STACKTOP = sp;return ($222|0);
}
function _settings_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0;
 var $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0.0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $9 & 1048576;
 $14 = ($13|0)!=(0);
 $15 = (0)!=(0);
 $16 = $14 | $15;
 if ($16) {
  $17 = +HEAPF32[(65728)>>2];
  $18 = $17 - 0.0099999997764825821;
  HEAPF32[(65728)>>2] = $18;
  $19 = +HEAPF32[(65728)>>2];
  $20 = $19 < 0.0;
  if ($20) {
   HEAPF32[(65728)>>2] = 0.0;
  }
 }
 $21 = $2;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = $23 & 2097152;
 $28 = ($27|0)!=(0);
 $29 = (0)!=(0);
 $30 = $28 | $29;
 if ($30) {
  $31 = +HEAPF32[(65728)>>2];
  $32 = $31 + 0.0099999997764825821;
  HEAPF32[(65728)>>2] = $32;
  $33 = +HEAPF32[(65728)>>2];
  $34 = $33 > 1.0;
  if ($34) {
   HEAPF32[(65728)>>2] = 1.0;
  }
 }
 $35 = $2;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $37 & -2147483648;
 $42 = ($41|0)!=(0);
 $43 = (0)!=(0);
 $44 = $42 | $43;
 if ($44) {
  HEAPF32[(65728)>>2] = 1.0;
 }
 $45 = $2;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = $47 & 4194304;
 $52 = ($51|0)!=(0);
 $53 = (0)!=(0);
 $54 = $52 | $53;
 if ($54) {
  $55 = +HEAPF32[(65732)>>2];
  $56 = $55 - 0.0099999997764825821;
  HEAPF32[(65732)>>2] = $56;
  $57 = +HEAPF32[(65732)>>2];
  $58 = $57 < 0.0099999997764825821;
  if ($58) {
   HEAPF32[(65732)>>2] = 0.0099999997764825821;
  }
 }
 $59 = $2;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $61 & 8388608;
 $66 = ($65|0)!=(0);
 $67 = (0)!=(0);
 $68 = $66 | $67;
 if ($68) {
  $69 = +HEAPF32[(65732)>>2];
  $70 = $69 + 0.0099999997764825821;
  HEAPF32[(65732)>>2] = $70;
  $71 = +HEAPF32[(65732)>>2];
  $72 = $71 > 2.0;
  if ($72) {
   HEAPF32[(65732)>>2] = 2.0;
  }
 }
 $73 = $2;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = $78 & 1;
 $80 = (0)!=(0);
 $81 = ($79|0)!=(0);
 $82 = $80 | $81;
 if ($82) {
  HEAPF32[(65728)>>2] = 1.0;
 }
 $83 = $2;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + 4)|0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = $85 & 134217728;
 $90 = ($89|0)!=(0);
 $91 = (0)!=(0);
 $92 = $90 | $91;
 if ($92) {
  $93 = HEAP32[(98516)>>2]|0;
  $94 = (($93) + 1)|0;
  HEAP32[(98516)>>2] = $94;
 }
 $95 = $2;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = $97 & 67108864;
 $102 = ($101|0)!=(0);
 $103 = (0)!=(0);
 $104 = $102 | $103;
 $105 = HEAP32[(98516)>>2]|0;
 $106 = ($105>>>0)>(1);
 $or$cond = $104 & $106;
 if ($or$cond) {
  $107 = HEAP32[(98516)>>2]|0;
  $108 = (($107) + -1)|0;
  HEAP32[(98516)>>2] = $108;
 }
 $109 = $2;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = (($109) + 4)|0;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 $115 = $111 & 268435456;
 $116 = ($115|0)!=(0);
 $117 = (0)!=(0);
 $118 = $116 | $117;
 if ($118) {
  HEAP32[(98516)>>2] = 1;
 }
 $119 = $2;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = (($119) + 4)|0;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = $121 & 16777216;
 $126 = ($125|0)!=(0);
 $127 = (0)!=(0);
 $128 = $126 | $127;
 if ($128) {
  $129 = HEAP8[(312)>>0]|0;
  $130 = $129&1;
  $131 = $130 ^ 1;
  $132 = $131&1;
  HEAP8[(312)>>0] = $132;
 }
 $133 = $2;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133) + 4)|0;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = $135 & 33554432;
 $140 = ($139|0)!=(0);
 $141 = (0)!=(0);
 $142 = $140 | $141;
 if ($142) {
  $143 = HEAP8[(296)>>0]|0;
  $144 = $143&1;
  $145 = $144 ^ 1;
  $146 = $145&1;
  HEAP8[(296)>>0] = $146;
 }
 $147 = $2;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = (($147) + 4)|0;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = $149 & 1073741824;
 $154 = ($153|0)!=(0);
 $155 = (0)!=(0);
 $156 = $154 | $155;
 if ($156) {
  HEAP8[(312)>>0] = 1;
 }
 $157 = $2;
 $158 = $157;
 $159 = HEAP32[$158>>2]|0;
 $160 = (($157) + 4)|0;
 $161 = $160;
 $162 = HEAP32[$161>>2]|0;
 $163 = $159 & 1;
 $164 = ($163|0)!=(0);
 $165 = (0)!=(0);
 $166 = $164 | $165;
 $167 = HEAP32[(336)>>2]|0;
 $168 = ($167>>>0)>(0);
 $or$cond3 = $166 & $168;
 if ($or$cond3) {
  $169 = HEAP32[(336)>>2]|0;
  $170 = (($169) + -1)|0;
  HEAP32[(336)>>2] = $170;
 }
 $171 = $2;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = (($171) + 4)|0;
 $175 = $174;
 $176 = HEAP32[$175>>2]|0;
 $177 = $173 & 2;
 $178 = ($177|0)!=(0);
 $179 = (0)!=(0);
 $180 = $178 | $179;
 $181 = HEAP32[(336)>>2]|0;
 $182 = ($181>>>0)<(7);
 $or$cond5 = $180 & $182;
 if ($or$cond5) {
  $183 = HEAP32[(336)>>2]|0;
  $184 = (($183) + 1)|0;
  HEAP32[(336)>>2] = $184;
 }
 $185 = $2;
 $186 = $185;
 $187 = HEAP32[$186>>2]|0;
 $188 = (($185) + 4)|0;
 $189 = $188;
 $190 = HEAP32[$189>>2]|0;
 $191 = $187 & 4;
 $192 = ($191|0)!=(0);
 $193 = (0)!=(0);
 $194 = $192 | $193;
 if ($194) {
  $195 = HEAP8[(333)>>0]|0;
  $196 = $195&1;
  $197 = $196 ^ 1;
  $198 = $197&1;
  HEAP8[(333)>>0] = $198;
 }
 $199 = $2;
 $200 = $199;
 $201 = HEAP32[$200>>2]|0;
 $202 = (($199) + 4)|0;
 $203 = $202;
 $204 = HEAP32[$203>>2]|0;
 $205 = $201 & 8;
 $206 = ($205|0)!=(0);
 $207 = (0)!=(0);
 $208 = $206 | $207;
 if ($208) {
  $209 = HEAP8[(201753)>>0]|0;
  $210 = $209&1;
  $211 = $210 ^ 1;
  $212 = $211&1;
  HEAP8[(201753)>>0] = $212;
 }
 $213 = $2;
 $214 = $213;
 $215 = HEAP32[$214>>2]|0;
 $216 = (($213) + 4)|0;
 $217 = $216;
 $218 = HEAP32[$217>>2]|0;
 $219 = $215 & 16;
 $220 = ($219|0)!=(0);
 $221 = (0)!=(0);
 $222 = $220 | $221;
 do {
  if ($222) {
   $223 = +HEAPF32[(25024)>>2];
   $224 = $223;
   $225 = $224 > 0.0;
   if ($225) {
    $226 = +HEAPF32[(25024)>>2];
    $227 = $226;
    $228 = $227 - 0.001;
    $229 = $228;
    HEAPF32[(25024)>>2] = $229;
   }
   $230 = +HEAPF32[(25024)>>2];
   $231 = $230;
   $232 = $231 < 5.0000000000000001E-4;
   if ($232) {
    HEAP8[(25021)>>0] = 0;
    HEAPF32[(25024)>>2] = 0.0;
    break;
   } else {
    HEAP8[(25021)>>0] = 1;
    break;
   }
  }
 } while(0);
 $233 = $2;
 $234 = $233;
 $235 = HEAP32[$234>>2]|0;
 $236 = (($233) + 4)|0;
 $237 = $236;
 $238 = HEAP32[$237>>2]|0;
 $239 = $235 & 32;
 $240 = ($239|0)!=(0);
 $241 = (0)!=(0);
 $242 = $240 | $241;
 if ($242) {
  $243 = +HEAPF32[(25024)>>2];
  $244 = $243;
  $245 = $244 < 0.20000000000000001;
  if ($245) {
   $246 = +HEAPF32[(25024)>>2];
   $247 = $246;
   $248 = $247 + 0.001;
   $249 = $248;
   HEAPF32[(25024)>>2] = $249;
  }
  HEAP8[(25021)>>0] = 1;
 }
 $250 = $2;
 $251 = $250;
 $252 = HEAP32[$251>>2]|0;
 $253 = (($250) + 4)|0;
 $254 = $253;
 $255 = HEAP32[$254>>2]|0;
 $256 = $252 & 64;
 $257 = ($256|0)!=(0);
 $258 = (0)!=(0);
 $259 = $257 | $258;
 if ($259) {
  $260 = (259648);
  $261 = $260;
  $262 = HEAP32[$261>>2]|0;
  $263 = (($260) + 4)|0;
  $264 = $263;
  $265 = HEAP32[$264>>2]|0;
  $266 = $265 | 16;
  $267 = (259648);
  $268 = $267;
  HEAP32[$268>>2] = $262;
  $269 = (($267) + 4)|0;
  $270 = $269;
  HEAP32[$270>>2] = $266;
  $271 = (259656);
  $272 = $271;
  $273 = HEAP32[$272>>2]|0;
  $274 = (($271) + 4)|0;
  $275 = $274;
  $276 = HEAP32[$275>>2]|0;
  $277 = $273 | 1;
  $278 = (259656);
  $279 = $278;
  HEAP32[$279>>2] = $277;
  $280 = (($278) + 4)|0;
  $281 = $280;
  HEAP32[$281>>2] = $276;
 }
 $282 = $2;
 $283 = $282;
 $284 = HEAP32[$283>>2]|0;
 $285 = (($282) + 4)|0;
 $286 = $285;
 $287 = HEAP32[$286>>2]|0;
 $288 = $284 & 128;
 $289 = ($288|0)!=(0);
 $290 = (0)!=(0);
 $291 = $289 | $290;
 if ($291) {
  $292 = HEAP8[(324)>>0]|0;
  $293 = $292&1;
  $294 = $293 ^ 1;
  $295 = $294&1;
  HEAP8[(324)>>0] = $295;
 }
 $296 = $2;
 $297 = $296;
 $298 = HEAP32[$297>>2]|0;
 $299 = (($296) + 4)|0;
 $300 = $299;
 $301 = HEAP32[$300>>2]|0;
 $302 = $298 & 256;
 $303 = ($302|0)!=(0);
 $304 = (0)!=(0);
 $305 = $303 | $304;
 $306 = HEAP32[(259584)>>2]|0;
 $307 = ($306|0)!=(0);
 $or$cond7 = $305 & $307;
 if ($or$cond7) {
  $308 = HEAP32[(259584)>>2]|0;
  $309 = (($308) + -1)|0;
  HEAP32[(259584)>>2] = $309;
  $310 = HEAP32[(259584)>>2]|0;
  $311 = HEAP32[(259600)>>2]|0;
  $312 = (($311) + ($310<<2)|0);
  $313 = HEAP32[$312>>2]|0;
  HEAP32[(259588)>>2] = $313;
 }
 $314 = $2;
 $315 = $314;
 $316 = HEAP32[$315>>2]|0;
 $317 = (($314) + 4)|0;
 $318 = $317;
 $319 = HEAP32[$318>>2]|0;
 $320 = $316 & 512;
 $321 = ($320|0)!=(0);
 $322 = (0)!=(0);
 $323 = $321 | $322;
 do {
  if ($323) {
   $324 = HEAP32[(259584)>>2]|0;
   $325 = (($324) + 1)|0;
   $326 = HEAP32[(259604)>>2]|0;
   $327 = ($325>>>0)<($326>>>0);
   if (!($327)) {
    break;
   }
   $328 = HEAP32[(259584)>>2]|0;
   $329 = (($328) + 1)|0;
   HEAP32[(259584)>>2] = $329;
   $330 = HEAP32[(259584)>>2]|0;
   $331 = HEAP32[(259600)>>2]|0;
   $332 = (($331) + ($330<<2)|0);
   $333 = HEAP32[$332>>2]|0;
   HEAP32[(259588)>>2] = $333;
  }
 } while(0);
 $334 = $2;
 $335 = $334;
 $336 = HEAP32[$335>>2]|0;
 $337 = (($334) + 4)|0;
 $338 = $337;
 $339 = HEAP32[$338>>2]|0;
 $340 = $336 & 1024;
 $341 = ($340|0)!=(0);
 $342 = (0)!=(0);
 $343 = $341 | $342;
 $344 = HEAP32[(340)>>2]|0;
 $345 = ($344>>>0)>(0);
 $or$cond9 = $343 & $345;
 if ($or$cond9) {
  $346 = HEAP32[(340)>>2]|0;
  $347 = (($346) + -1)|0;
  HEAP32[(340)>>2] = $347;
 }
 $348 = $2;
 $349 = $348;
 $350 = HEAP32[$349>>2]|0;
 $351 = (($348) + 4)|0;
 $352 = $351;
 $353 = HEAP32[$352>>2]|0;
 $354 = $350 & 2048;
 $355 = ($354|0)!=(0);
 $356 = (0)!=(0);
 $357 = $355 | $356;
 $358 = HEAP32[(340)>>2]|0;
 $359 = ($358>>>0)<(3);
 $or$cond11 = $357 & $359;
 if ($or$cond11) {
  $360 = HEAP32[(340)>>2]|0;
  $361 = (($360) + 1)|0;
  HEAP32[(340)>>2] = $361;
 }
 $362 = $2;
 $363 = $362;
 $364 = HEAP32[$363>>2]|0;
 $365 = (($362) + 4)|0;
 $366 = $365;
 $367 = HEAP32[$366>>2]|0;
 $368 = $364 & 4096;
 $369 = ($368|0)!=(0);
 $370 = (0)!=(0);
 $371 = $369 | $370;
 if ($371) {
  $372 = HEAP8[(98508)>>0]|0;
  $373 = $372&1;
  $374 = $373 ^ 1;
  $375 = $374&1;
  HEAP8[(98508)>>0] = $375;
 }
 $376 = $2;
 $377 = $376;
 $378 = HEAP32[$377>>2]|0;
 $379 = (($376) + 4)|0;
 $380 = $379;
 $381 = HEAP32[$380>>2]|0;
 $382 = $378 & 8192;
 $383 = ($382|0)!=(0);
 $384 = (0)!=(0);
 $385 = $383 | $384;
 $386 = HEAP32[(196888)>>2]|0;
 $387 = ($386|0)!=(0);
 $or$cond13 = $385 & $387;
 if ($or$cond13) {
  $388 = HEAP32[(196888)>>2]|0;
  $389 = (($388) + -1)|0;
  HEAP32[(196888)>>2] = $389;
 }
 $390 = $2;
 $391 = $390;
 $392 = HEAP32[$391>>2]|0;
 $393 = (($390) + 4)|0;
 $394 = $393;
 $395 = HEAP32[$394>>2]|0;
 $396 = $392 & 16384;
 $397 = ($396|0)!=(0);
 $398 = (0)!=(0);
 $399 = $397 | $398;
 if ($399) {
  $400 = HEAP32[(196888)>>2]|0;
  $401 = (($400) + 1)|0;
  HEAP32[(196888)>>2] = $401;
 }
 $402 = $2;
 $403 = $402;
 $404 = HEAP32[$403>>2]|0;
 $405 = (($402) + 4)|0;
 $406 = $405;
 $407 = HEAP32[$406>>2]|0;
 $408 = $404 & 32768;
 $409 = ($408|0)!=(0);
 $410 = (0)!=(0);
 $411 = $409 | $410;
 do {
  if ($411) {
   $412 = (259656);
   $413 = $412;
   $414 = HEAP32[$413>>2]|0;
   $415 = (($412) + 4)|0;
   $416 = $415;
   $417 = HEAP32[$416>>2]|0;
   $418 = $414 & 16384;
   $419 = ($418|0)!=(0);
   $420 = (0)!=(0);
   $421 = $419 | $420;
   $422 = (259656);
   $423 = $422;
   $424 = HEAP32[$423>>2]|0;
   $425 = (($422) + 4)|0;
   $426 = $425;
   $427 = HEAP32[$426>>2]|0;
   if ($421) {
    $428 = $424 & -16385;
    $429 = (259656);
    $430 = $429;
    HEAP32[$430>>2] = $428;
    $431 = (($429) + 4)|0;
    $432 = $431;
    HEAP32[$432>>2] = $427;
    break;
   } else {
    $433 = $424 | 16384;
    $434 = (259656);
    $435 = $434;
    HEAP32[$435>>2] = $433;
    $436 = (($434) + 4)|0;
    $437 = $436;
    HEAP32[$437>>2] = $427;
    break;
   }
  }
 } while(0);
 $438 = $2;
 $439 = $438;
 $440 = HEAP32[$439>>2]|0;
 $441 = (($438) + 4)|0;
 $442 = $441;
 $443 = HEAP32[$442>>2]|0;
 $444 = $440 & 65536;
 $445 = ($444|0)!=(0);
 $446 = (0)!=(0);
 $447 = $445 | $446;
 if ($447) {
  $448 = +HEAPF32[(8540)>>2];
  $449 = $448 - 0.0099999997764825821;
  HEAPF32[(8540)>>2] = $449;
 }
 $450 = $2;
 $451 = $450;
 $452 = HEAP32[$451>>2]|0;
 $453 = (($450) + 4)|0;
 $454 = $453;
 $455 = HEAP32[$454>>2]|0;
 $456 = $452 & 131072;
 $457 = ($456|0)!=(0);
 $458 = (0)!=(0);
 $459 = $457 | $458;
 if ($459) {
  $460 = +HEAPF32[(8540)>>2];
  $461 = $460 + 0.0099999997764825821;
  HEAPF32[(8540)>>2] = $461;
 }
 $462 = $2;
 $463 = $462;
 $464 = HEAP32[$463>>2]|0;
 $465 = (($462) + 4)|0;
 $466 = $465;
 $467 = HEAP32[$466>>2]|0;
 $468 = $464 & 262144;
 $469 = ($468|0)!=(0);
 $470 = (0)!=(0);
 $471 = $469 | $470;
 do {
  if ($471) {
   $472 = (259656);
   $473 = $472;
   $474 = HEAP32[$473>>2]|0;
   $475 = (($472) + 4)|0;
   $476 = $475;
   $477 = HEAP32[$476>>2]|0;
   $478 = $474 & 256;
   $479 = ($478|0)!=(0);
   $480 = (0)!=(0);
   $481 = $479 | $480;
   $482 = (259656);
   $483 = $482;
   $484 = HEAP32[$483>>2]|0;
   $485 = (($482) + 4)|0;
   $486 = $485;
   $487 = HEAP32[$486>>2]|0;
   if ($481) {
    $488 = $484 & -257;
    $489 = (259656);
    $490 = $489;
    HEAP32[$490>>2] = $488;
    $491 = (($489) + 4)|0;
    $492 = $491;
    HEAP32[$492>>2] = $487;
    break;
   } else {
    $493 = $484 | 256;
    $494 = (259656);
    $495 = $494;
    HEAP32[$495>>2] = $493;
    $496 = (($494) + 4)|0;
    $497 = $496;
    HEAP32[$497>>2] = $487;
    break;
   }
  }
 } while(0);
 $498 = $2;
 $499 = $498;
 $500 = HEAP32[$499>>2]|0;
 $501 = (($498) + 4)|0;
 $502 = $501;
 $503 = HEAP32[$502>>2]|0;
 $504 = $500 & 524288;
 $505 = ($504|0)!=(0);
 $506 = (0)!=(0);
 $507 = $505 | $506;
 do {
  if ($507) {
   $508 = (259656);
   $509 = $508;
   $510 = HEAP32[$509>>2]|0;
   $511 = (($508) + 4)|0;
   $512 = $511;
   $513 = HEAP32[$512>>2]|0;
   $514 = $510 & 128;
   $515 = ($514|0)!=(0);
   $516 = (0)!=(0);
   $517 = $515 | $516;
   $518 = (259656);
   $519 = $518;
   $520 = HEAP32[$519>>2]|0;
   $521 = (($518) + 4)|0;
   $522 = $521;
   $523 = HEAP32[$522>>2]|0;
   if ($517) {
    $524 = $520 & -129;
    $525 = (259656);
    $526 = $525;
    HEAP32[$526>>2] = $524;
    $527 = (($525) + 4)|0;
    $528 = $527;
    HEAP32[$528>>2] = $523;
    break;
   } else {
    $529 = $520 | 128;
    $530 = (259656);
    $531 = $530;
    HEAP32[$531>>2] = $529;
    $532 = (($530) + 4)|0;
    $533 = $532;
    HEAP32[$533>>2] = $523;
    break;
   }
  }
 } while(0);
 $534 = $2;
 $535 = $534;
 $536 = HEAP32[$535>>2]|0;
 $537 = (($534) + 4)|0;
 $538 = $537;
 $539 = HEAP32[$538>>2]|0;
 $540 = $536 & 536870912;
 $541 = ($540|0)!=(0);
 $542 = (0)!=(0);
 $543 = $541 | $542;
 if ($543) {
  $544 = HEAP32[264752>>2]|0;
  HEAP32[(336)>>2] = $544;
 }
 $545 = $2;
 $546 = $545;
 $547 = HEAP32[$546>>2]|0;
 $548 = (($545) + 4)|0;
 $549 = $548;
 $550 = HEAP32[$549>>2]|0;
 $551 = $550 & 2;
 $552 = (0)!=(0);
 $553 = ($551|0)!=(0);
 $554 = $552 | $553;
 if ($554) {
  HEAP8[(333)>>0] = 0;
 }
 $555 = $2;
 $556 = $555;
 $557 = HEAP32[$556>>2]|0;
 $558 = (($555) + 4)|0;
 $559 = $558;
 $560 = HEAP32[$559>>2]|0;
 $561 = $560 & 4;
 $562 = (0)!=(0);
 $563 = ($561|0)!=(0);
 $564 = $562 | $563;
 if ($564) {
  HEAP8[(201753)>>0] = 0;
 }
 $565 = $2;
 $566 = $565;
 $567 = HEAP32[$566>>2]|0;
 $568 = (($565) + 4)|0;
 $569 = $568;
 $570 = HEAP32[$569>>2]|0;
 $571 = $570 & 8;
 $572 = (0)!=(0);
 $573 = ($571|0)!=(0);
 $574 = $572 | $573;
 if ($574) {
  HEAPF32[(25024)>>2] = 0.004999999888241291;
  HEAP8[(25021)>>0] = 1;
 }
 $575 = $2;
 $576 = $575;
 $577 = HEAP32[$576>>2]|0;
 $578 = (($575) + 4)|0;
 $579 = $578;
 $580 = HEAP32[$579>>2]|0;
 $581 = $580 & 16;
 $582 = (0)!=(0);
 $583 = ($581|0)!=(0);
 $584 = $582 | $583;
 if ($584) {
  HEAP8[(324)>>0] = 1;
 }
 $585 = $2;
 $586 = $585;
 $587 = HEAP32[$586>>2]|0;
 $588 = (($585) + 4)|0;
 $589 = $588;
 $590 = HEAP32[$589>>2]|0;
 $591 = $590 & 32;
 $592 = (0)!=(0);
 $593 = ($591|0)!=(0);
 $594 = $592 | $593;
 if ($594) {
  HEAP32[(340)>>2] = 0;
 }
 $595 = $2;
 $596 = $595;
 $597 = HEAP32[$596>>2]|0;
 $598 = (($595) + 4)|0;
 $599 = $598;
 $600 = HEAP32[$599>>2]|0;
 $601 = $600 & 64;
 $602 = (0)!=(0);
 $603 = ($601|0)!=(0);
 $604 = $602 | $603;
 if ($604) {
  $605 = (259656);
  $606 = $605;
  $607 = HEAP32[$606>>2]|0;
  $608 = (($605) + 4)|0;
  $609 = $608;
  $610 = HEAP32[$609>>2]|0;
  $611 = $607 | 16384;
  $612 = (259656);
  $613 = $612;
  HEAP32[$613>>2] = $611;
  $614 = (($612) + 4)|0;
  $615 = $614;
  HEAP32[$615>>2] = $610;
 }
 $616 = $2;
 $617 = $616;
 $618 = HEAP32[$617>>2]|0;
 $619 = (($616) + 4)|0;
 $620 = $619;
 $621 = HEAP32[$620>>2]|0;
 $622 = $621 & 128;
 $623 = (0)!=(0);
 $624 = ($622|0)!=(0);
 $625 = $623 | $624;
 if ($625) {
  HEAP32[(196888)>>2] = 0;
 }
 $626 = $2;
 $627 = $626;
 $628 = HEAP32[$627>>2]|0;
 $629 = (($626) + 4)|0;
 $630 = $629;
 $631 = HEAP32[$630>>2]|0;
 $632 = $631 & 256;
 $633 = (0)!=(0);
 $634 = ($632|0)!=(0);
 $635 = $633 | $634;
 if ($635) {
  HEAPF32[(8540)>>2] = 59.950000762939453;
 }
 $636 = $2;
 $637 = $636;
 $638 = HEAP32[$637>>2]|0;
 $639 = (($636) + 4)|0;
 $640 = $639;
 $641 = HEAP32[$640>>2]|0;
 $642 = $641 & 512;
 $643 = (0)!=(0);
 $644 = ($642|0)!=(0);
 $645 = $643 | $644;
 if ($645) {
  $646 = (259656);
  $647 = $646;
  $648 = HEAP32[$647>>2]|0;
  $649 = (($646) + 4)|0;
  $650 = $649;
  $651 = HEAP32[$650>>2]|0;
  $652 = $648 & -257;
  $653 = (259656);
  $654 = $653;
  HEAP32[$654>>2] = $652;
  $655 = (($653) + 4)|0;
  $656 = $655;
  HEAP32[$656>>2] = $651;
 }
 $657 = $2;
 $658 = $657;
 $659 = HEAP32[$658>>2]|0;
 $660 = (($657) + 4)|0;
 $661 = $660;
 $662 = HEAP32[$661>>2]|0;
 $663 = $662 & 1024;
 $664 = (0)!=(0);
 $665 = ($663|0)!=(0);
 $666 = $664 | $665;
 if (!($666)) {
  STACKTOP = sp;return;
 }
 $667 = (259656);
 $668 = $667;
 $669 = HEAP32[$668>>2]|0;
 $670 = (($667) + 4)|0;
 $671 = $670;
 $672 = HEAP32[$671>>2]|0;
 $673 = $669 | 128;
 $674 = (259656);
 $675 = $674;
 HEAP32[$675>>2] = $673;
 $676 = (($674) + 4)|0;
 $677 = $676;
 HEAP32[$677>>2] = $672;
 STACKTOP = sp;return;
}
function _parse_config_file() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(123154)>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = HEAP8[102648>>0]|0;
 $3 = $2&1;
 if ($1) {
  if ($3) {
   $4 = HEAP32[(259664)>>2]|0;
   $5 = ($4|0)!=(0|0);
   $6 = HEAP32[(259664)>>2]|0;
   $7 = HEAP32[544648>>2]|0;
   $8 = $5 ? $6 : $7;
   HEAP32[$vararg_buffer>>2] = (123154);
   (_fprintf($8,752328,$vararg_buffer)|0);
   $9 = HEAP32[(259664)>>2]|0;
   $10 = ($9|0)!=(0|0);
   $11 = HEAP32[(259664)>>2]|0;
   $12 = HEAP32[544648>>2]|0;
   $13 = $10 ? $11 : $12;
   (_fflush($13)|0);
  }
  $14 = (_config_load_file((123154))|0);
  $15 = $14&1;
  $ret = $15;
 } else {
  if ($3) {
   $16 = HEAP32[(259664)>>2]|0;
   $17 = ($16|0)!=(0|0);
   $18 = HEAP32[(259664)>>2]|0;
   $19 = HEAP32[544648>>2]|0;
   $20 = $17 ? $18 : $19;
   (_fprintf($20,752365,$vararg_buffer1)|0);
   $21 = HEAP32[(259664)>>2]|0;
   $22 = ($21|0)!=(0|0);
   $23 = HEAP32[(259664)>>2]|0;
   $24 = HEAP32[544648>>2]|0;
   $25 = $22 ? $23 : $24;
   (_fflush($25)|0);
  }
  $26 = (_config_load_file(0)|0);
  $27 = $26&1;
  $ret = $27;
  $28 = HEAP8[(123154)>>0]|0;
  $29 = ($28<<24>>24)!=(0);
  if ($29) {
   $30 = HEAP8[102648>>0]|0;
   $31 = $30&1;
   if ($31) {
    $32 = HEAP32[(259664)>>2]|0;
    $33 = ($32|0)!=(0|0);
    $34 = HEAP32[(259664)>>2]|0;
    $35 = HEAP32[544648>>2]|0;
    $36 = $33 ? $34 : $35;
    HEAP32[$vararg_buffer3>>2] = (123154);
    (_fprintf($36,752401,$vararg_buffer3)|0);
    $37 = HEAP32[(259664)>>2]|0;
    $38 = ($37|0)!=(0|0);
    $39 = HEAP32[(259664)>>2]|0;
    $40 = HEAP32[544648>>2]|0;
    $41 = $38 ? $39 : $40;
    (_fflush($41)|0);
   }
  }
 }
 $42 = $ret;
 $43 = $42&1;
 if ($43) {
  STACKTOP = sp;return;
 }
 $44 = HEAP32[(259664)>>2]|0;
 $45 = ($44|0)!=(0|0);
 $46 = HEAP32[(259664)>>2]|0;
 $47 = HEAP32[544648>>2]|0;
 $48 = $45 ? $46 : $47;
 HEAP32[$vararg_buffer6>>2] = (123154);
 (_fprintf($48,752439,$vararg_buffer6)|0);
 $49 = HEAP32[(259664)>>2]|0;
 $50 = ($49|0)!=(0|0);
 $51 = HEAP32[(259664)>>2]|0;
 $52 = HEAP32[544648>>2]|0;
 $53 = $50 ? $51 : $52;
 (_fflush($53)|0);
 _rarch_fail565(1,752496);
 STACKTOP = sp;return;
}
function _open_default_config_file() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $conf = 0, $conf_path = 0, $home = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $xdg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $conf_path = sp + 56|0;
 $conf = 0;
 $0 = (_getenv((752167|0))|0);
 $xdg = $0;
 $1 = (_getenv((752183|0))|0);
 $home = $1;
 $2 = $xdg;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $xdg;
  HEAP32[$vararg_buffer>>2] = $4;
  (_snprintf($conf_path,4096,752188,$vararg_buffer)|0);
 } else {
  $5 = $home;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = $home;
   HEAP32[$vararg_buffer4>>2] = $7;
   (_snprintf($conf_path,4096,752215,$vararg_buffer4)|0);
  }
 }
 $8 = $xdg;
 $9 = ($8|0)!=(0|0);
 $10 = $home;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $12 = HEAP8[102648>>0]|0;
  $13 = $12&1;
  if ($13) {
   $14 = HEAP32[(259664)>>2]|0;
   $15 = ($14|0)!=(0|0);
   $16 = HEAP32[(259664)>>2]|0;
   $17 = HEAP32[544648>>2]|0;
   $18 = $15 ? $16 : $17;
   HEAP32[$vararg_buffer7>>2] = $conf_path;
   (_fprintf($18,752250,$vararg_buffer7)|0);
   $19 = HEAP32[(259664)>>2]|0;
   $20 = ($19|0)!=(0|0);
   $21 = HEAP32[(259664)>>2]|0;
   $22 = HEAP32[544648>>2]|0;
   $23 = $20 ? $21 : $22;
   (_fflush($23)|0);
  }
  $24 = (_config_file_new($conf_path)|0);
  $conf = $24;
 }
 $25 = $conf;
 $26 = ($25|0)==(0|0);
 $27 = $home;
 $28 = ($27|0)!=(0|0);
 $or$cond3 = $26 & $28;
 if ($or$cond3) {
  $29 = $home;
  HEAP32[$vararg_buffer10>>2] = $29;
  (_snprintf($conf_path,4096,752291,$vararg_buffer10)|0);
  $30 = HEAP8[102648>>0]|0;
  $31 = $30&1;
  if ($31) {
   $32 = HEAP32[(259664)>>2]|0;
   $33 = ($32|0)!=(0|0);
   $34 = HEAP32[(259664)>>2]|0;
   $35 = HEAP32[544648>>2]|0;
   $36 = $33 ? $34 : $35;
   HEAP32[$vararg_buffer13>>2] = $conf_path;
   (_fprintf($36,752250,$vararg_buffer13)|0);
   $37 = HEAP32[(259664)>>2]|0;
   $38 = ($37|0)!=(0|0);
   $39 = HEAP32[(259664)>>2]|0;
   $40 = HEAP32[544648>>2]|0;
   $41 = $38 ? $39 : $40;
   (_fflush($41)|0);
  }
  $42 = (_config_file_new($conf_path)|0);
  $conf = $42;
 }
 $43 = $conf;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  _fill_pathname_join($conf_path,752309,752314,4096);
  $45 = HEAP8[102648>>0]|0;
  $46 = $45&1;
  if ($46) {
   $47 = HEAP32[(259664)>>2]|0;
   $48 = ($47|0)!=(0|0);
   $49 = HEAP32[(259664)>>2]|0;
   $50 = HEAP32[544648>>2]|0;
   $51 = $48 ? $49 : $50;
   HEAP32[$vararg_buffer16>>2] = $conf_path;
   (_fprintf($51,752250,$vararg_buffer16)|0);
   $52 = HEAP32[(259664)>>2]|0;
   $53 = ($52|0)!=(0|0);
   $54 = HEAP32[(259664)>>2]|0;
   $55 = HEAP32[544648>>2]|0;
   $56 = $53 ? $54 : $55;
   (_fflush($56)|0);
  }
  $57 = (_config_file_new($conf_path)|0);
  $conf = $57;
 }
 $58 = $conf;
 $59 = ($58|0)!=(0|0);
 if (!($59)) {
  $60 = $conf;
  STACKTOP = sp;return ($60|0);
 }
 (_strlcpy_rarch__((123154),$conf_path,4096)|0);
 $60 = $conf;
 STACKTOP = sp;return ($60|0);
}
function _config_read_keybinds_conf($conf) {
 $conf = $conf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(8);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $i;
  _read_keybinds_player($3,$4);
  $5 = $i;
  $6 = (($5) + 1)|0;
  $i = $6;
 }
 STACKTOP = sp;return;
}
function _rarch_fail565($error_code,$error) {
 $error_code = $error_code|0;
 $error = $error|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $error_code;
 $1 = $error;
 $2 = HEAP8[(259669)>>0]|0;
 $3 = $2&1;
 if ($3) {
  $14 = $1;
  (_strlcpy_rarch__((259671),$14,1024)|0);
  $15 = $0;
  _longjmp(((260696)|0),($15|0));
  // unreachable;
 } else {
  $4 = HEAP32[(259664)>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = HEAP32[544648>>2]|0;
  $8 = $5 ? $6 : $7;
  HEAP32[$vararg_buffer>>2] = 752155;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 846;
  (_fprintf($8,765794,$vararg_buffer)|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  (_fflush($13)|0);
  _exit(2);
  // unreachable;
 }
}
function _read_keybinds_player($conf,$player) {
 $conf = $conf|0;
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bind = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $1 = $player;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = (266468 + (($2*20)|0)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&1;
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = ((25128) + (($7*2240)|0)|0);
  $9 = (($8) + (($6*40)|0)|0);
  $bind = $9;
  $10 = $bind;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&1;
  if ($12) {
   $13 = $0;
   $14 = $1;
   $15 = $i;
   $16 = $bind;
   _read_keybinds_keyboard($13,$14,$15,$16);
   $17 = $0;
   $18 = $1;
   $19 = $i;
   $20 = $bind;
   _read_keybinds_button($17,$18,$19,$20);
   $21 = $0;
   $22 = $1;
   $23 = $i;
   $24 = $bind;
   _read_keybinds_axis($21,$22,$23,$24);
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 STACKTOP = sp;return;
}
function _read_keybinds_keyboard($conf,$player,$index,$bind) {
 $conf = $conf|0;
 $player = $player|0;
 $index = $index|0;
 $bind = $bind|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $1 = $player;
 $2 = $index;
 $3 = $bind;
 $4 = $2;
 $5 = (266468 + (($4*20)|0)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = (266468 + (($8*20)|0)|0);
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = $2;
 $15 = (266468 + (($14*20)|0)|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 $19 = (_input_config_get_prefix($13,$18)|0);
 $prefix = $19;
 $20 = $prefix;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $0;
 $23 = $prefix;
 $24 = $2;
 $25 = (266468 + (($24*20)|0)|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 _input_config_parse_key($22,$23,$27,$28);
 STACKTOP = sp;return;
}
function _read_keybinds_button($conf,$player,$index,$bind) {
 $conf = $conf|0;
 $player = $player|0;
 $index = $index|0;
 $bind = $bind|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $1 = $player;
 $2 = $index;
 $3 = $bind;
 $4 = $2;
 $5 = (266468 + (($4*20)|0)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = (266468 + (($8*20)|0)|0);
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = $2;
 $15 = (266468 + (($14*20)|0)|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 $19 = (_input_config_get_prefix($13,$18)|0);
 $prefix = $19;
 $20 = $prefix;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $0;
 $23 = $prefix;
 $24 = $2;
 $25 = (266468 + (($24*20)|0)|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 _input_config_parse_joy_button($22,$23,$27,$28);
 STACKTOP = sp;return;
}
function _read_keybinds_axis($conf,$player,$index,$bind) {
 $conf = $conf|0;
 $player = $player|0;
 $index = $index|0;
 $bind = $bind|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conf;
 $1 = $player;
 $2 = $index;
 $3 = $bind;
 $4 = $2;
 $5 = (266468 + (($4*20)|0)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = (266468 + (($8*20)|0)|0);
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = $2;
 $15 = (266468 + (($14*20)|0)|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 $19 = (_input_config_get_prefix($13,$18)|0);
 $prefix = $19;
 $20 = $prefix;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $0;
 $23 = $prefix;
 $24 = $2;
 $25 = (266468 + (($24*20)|0)|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 _input_config_parse_joy_axis($22,$23,$27,$28);
 STACKTOP = sp;return;
}
function _sha256_hash($out,$in,$size) {
 $out = $out|0;
 $in = $in|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $sha = 0, $shahash = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 368|0;
 $sha = sp;
 $shahash = sp + 376|0;
 $0 = $out;
 $1 = $in;
 $2 = $size;
 _sha256_init($sha);
 $3 = $1;
 $4 = $2;
 _sha256_chunk($sha,$3,$4);
 _sha256_final($sha);
 _sha256_subhash($sha,$shahash);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5>>>0)<(32);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = $i;
  $9 = $8<<1;
  $10 = (($7) + ($9)|0);
  $11 = $i;
  $12 = (($shahash) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  HEAP32[$vararg_buffer>>2] = $14;
  (_snprintf($10,3,753337,$vararg_buffer)|0);
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function _sha256_init($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 _memset(($1|0),0,368)|0;
 $2 = $0;
 $3 = ((($2)) + 324|0);
 ;HEAP32[$3>>2]=HEAP32[264760>>2]|0;HEAP32[$3+4>>2]=HEAP32[264760+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[264760+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[264760+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[264760+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[264760+20>>2]|0;HEAP32[$3+24>>2]=HEAP32[264760+24>>2]|0;HEAP32[$3+28>>2]=HEAP32[264760+28>>2]|0;
 STACKTOP = sp;return;
}
function _sha256_chunk($p,$s,$len) {
 $p = $p|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $len;
 $3 = $2;
 $4 = $0;
 $5 = ((($4)) + 360|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_i64Add(($8|0),($11|0),($3|0),0)|0);
 $13 = tempRet0;
 $14 = $5;
 $15 = $14;
 HEAP32[$15>>2] = $12;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 while(1) {
  $18 = $2;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $0;
  $21 = ((($20)) + 64|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (64 - ($22))|0;
  $l = $23;
  $24 = $2;
  $25 = $l;
  $26 = ($24>>>0)<($25>>>0);
  $27 = $2;
  $28 = $l;
  $29 = $26 ? $27 : $28;
  $l = $29;
  $30 = $0;
  $31 = $0;
  $32 = ((($31)) + 64|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($30) + ($33)|0);
  $35 = $1;
  $36 = $l;
  _memcpy(($34|0),($35|0),($36|0))|0;
  $37 = $l;
  $38 = $1;
  $39 = (($38) + ($37)|0);
  $1 = $39;
  $40 = $l;
  $41 = $0;
  $42 = ((($41)) + 64|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40))|0;
  HEAP32[$42>>2] = $44;
  $45 = $l;
  $46 = $2;
  $47 = (($46) - ($45))|0;
  $2 = $47;
  $48 = $0;
  $49 = ((($48)) + 64|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(64);
  if (!($51)) {
   continue;
  }
  $52 = $0;
  _sha256_block($52);
 }
 STACKTOP = sp;return;
}
function _sha256_final($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp;
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + ($3)|0);
 HEAP8[$6>>0] = -128;
 $7 = $0;
 $8 = ((($7)) + 64|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(56);
 if ($10) {
  $11 = $0;
  $12 = $0;
  $13 = ((($12)) + 64|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($11) + ($14)|0);
  $16 = $0;
  $17 = ((($16)) + 64|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (64 - ($18))|0;
  _memset(($15|0),0,($19|0))|0;
  $20 = $0;
  _sha256_block($20);
 }
 $21 = $0;
 $22 = $0;
 $23 = ((($22)) + 64|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($21) + ($24)|0);
 $26 = $0;
 $27 = ((($26)) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (56 - ($28))|0;
 _memset(($25|0),0,($29|0))|0;
 $30 = $0;
 $31 = ((($30)) + 360|0);
 $32 = $31;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (_bitshift64Shl(($34|0),($37|0),3)|0);
 $39 = tempRet0;
 $40 = $len;
 $41 = $40;
 HEAP32[$41>>2] = $38;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 $44 = $0;
 $45 = ((($44)) + 56|0);
 $46 = $len;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 _store32be($45,$51);
 $52 = $0;
 $53 = ((($52)) + 60|0);
 $54 = $len;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 _store32be($53,$56);
 $60 = $0;
 _sha256_block($60);
 STACKTOP = sp;return;
}
function _sha256_subhash($p,$t) {
 $p = $p|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $t;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(8);
  if (!($3)) {
   break;
  }
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $1 = $5;
  $6 = $i;
  $7 = $0;
  $8 = ((($7)) + 324|0);
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _store32be($4,$10);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 STACKTOP = sp;return;
}
function _sha256_block($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $b = 0, $c = 0, $ch = 0, $d = 0, $e = 0, $f = 0, $g = 0, $h = 0, $i = 0, $maj = 0, $s0 = 0, $s1 = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(16);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $i;
  $5 = (($3) + ($4<<2)|0);
  $6 = (_load32be($5)|0);
  $7 = $i;
  $8 = $0;
  $9 = ((($8)) + 68|0);
  $10 = (($9) + ($7<<2)|0);
  HEAP32[$10>>2] = $6;
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $i = 16;
 while(1) {
  $13 = $i;
  $14 = ($13>>>0)<(64);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = (($15) - 15)|0;
  $17 = $0;
  $18 = ((($17)) + 68|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 >>> 7;
  $22 = $i;
  $23 = (($22) - 15)|0;
  $24 = $0;
  $25 = ((($24)) + 68|0);
  $26 = (($25) + ($23<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 << 25;
  $29 = $21 | $28;
  $30 = $i;
  $31 = (($30) - 15)|0;
  $32 = $0;
  $33 = ((($32)) + 68|0);
  $34 = (($33) + ($31<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 >>> 18;
  $37 = $i;
  $38 = (($37) - 15)|0;
  $39 = $0;
  $40 = ((($39)) + 68|0);
  $41 = (($40) + ($38<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 << 14;
  $44 = $36 | $43;
  $45 = $29 ^ $44;
  $46 = $i;
  $47 = (($46) - 15)|0;
  $48 = $0;
  $49 = ((($48)) + 68|0);
  $50 = (($49) + ($47<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 >>> 3;
  $53 = $45 ^ $52;
  $s0 = $53;
  $54 = $i;
  $55 = (($54) - 2)|0;
  $56 = $0;
  $57 = ((($56)) + 68|0);
  $58 = (($57) + ($55<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 >>> 17;
  $61 = $i;
  $62 = (($61) - 2)|0;
  $63 = $0;
  $64 = ((($63)) + 68|0);
  $65 = (($64) + ($62<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 << 15;
  $68 = $60 | $67;
  $69 = $i;
  $70 = (($69) - 2)|0;
  $71 = $0;
  $72 = ((($71)) + 68|0);
  $73 = (($72) + ($70<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $74 >>> 19;
  $76 = $i;
  $77 = (($76) - 2)|0;
  $78 = $0;
  $79 = ((($78)) + 68|0);
  $80 = (($79) + ($77<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 << 13;
  $83 = $75 | $82;
  $84 = $68 ^ $83;
  $85 = $i;
  $86 = (($85) - 2)|0;
  $87 = $0;
  $88 = ((($87)) + 68|0);
  $89 = (($88) + ($86<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 >>> 10;
  $92 = $84 ^ $91;
  $s1 = $92;
  $93 = $i;
  $94 = (($93) - 16)|0;
  $95 = $0;
  $96 = ((($95)) + 68|0);
  $97 = (($96) + ($94<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $s0;
  $100 = (($98) + ($99))|0;
  $101 = $i;
  $102 = (($101) - 7)|0;
  $103 = $0;
  $104 = ((($103)) + 68|0);
  $105 = (($104) + ($102<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($100) + ($106))|0;
  $108 = $s1;
  $109 = (($107) + ($108))|0;
  $110 = $i;
  $111 = $0;
  $112 = ((($111)) + 68|0);
  $113 = (($112) + ($110<<2)|0);
  HEAP32[$113>>2] = $109;
  $114 = $i;
  $115 = (($114) + 1)|0;
  $i = $115;
 }
 $116 = $0;
 $117 = ((($116)) + 324|0);
 $118 = HEAP32[$117>>2]|0;
 $a = $118;
 $119 = $0;
 $120 = ((($119)) + 324|0);
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $b = $122;
 $123 = $0;
 $124 = ((($123)) + 324|0);
 $125 = ((($124)) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $c = $126;
 $127 = $0;
 $128 = ((($127)) + 324|0);
 $129 = ((($128)) + 12|0);
 $130 = HEAP32[$129>>2]|0;
 $d = $130;
 $131 = $0;
 $132 = ((($131)) + 324|0);
 $133 = ((($132)) + 16|0);
 $134 = HEAP32[$133>>2]|0;
 $e = $134;
 $135 = $0;
 $136 = ((($135)) + 324|0);
 $137 = ((($136)) + 20|0);
 $138 = HEAP32[$137>>2]|0;
 $f = $138;
 $139 = $0;
 $140 = ((($139)) + 324|0);
 $141 = ((($140)) + 24|0);
 $142 = HEAP32[$141>>2]|0;
 $g = $142;
 $143 = $0;
 $144 = ((($143)) + 324|0);
 $145 = ((($144)) + 28|0);
 $146 = HEAP32[$145>>2]|0;
 $h = $146;
 $i = 0;
 while(1) {
  $147 = $i;
  $148 = ($147>>>0)<(64);
  $149 = $a;
  if (!($148)) {
   break;
  }
  $150 = $149 >>> 2;
  $151 = $a;
  $152 = $151 << 30;
  $153 = $150 | $152;
  $154 = $a;
  $155 = $154 >>> 13;
  $156 = $a;
  $157 = $156 << 19;
  $158 = $155 | $157;
  $159 = $153 ^ $158;
  $160 = $a;
  $161 = $160 >>> 22;
  $162 = $a;
  $163 = $162 << 10;
  $164 = $161 | $163;
  $165 = $159 ^ $164;
  $s0 = $165;
  $166 = $a;
  $167 = $b;
  $168 = $166 & $167;
  $169 = $a;
  $170 = $c;
  $171 = $169 & $170;
  $172 = $168 ^ $171;
  $173 = $b;
  $174 = $c;
  $175 = $173 & $174;
  $176 = $172 ^ $175;
  $maj = $176;
  $177 = $s0;
  $178 = $maj;
  $179 = (($177) + ($178))|0;
  $t2 = $179;
  $180 = $e;
  $181 = $180 >>> 6;
  $182 = $e;
  $183 = $182 << 26;
  $184 = $181 | $183;
  $185 = $e;
  $186 = $185 >>> 11;
  $187 = $e;
  $188 = $187 << 21;
  $189 = $186 | $188;
  $190 = $184 ^ $189;
  $191 = $e;
  $192 = $191 >>> 25;
  $193 = $e;
  $194 = $193 << 7;
  $195 = $192 | $194;
  $196 = $190 ^ $195;
  $s1 = $196;
  $197 = $e;
  $198 = $f;
  $199 = $197 & $198;
  $200 = $e;
  $201 = $200 ^ -1;
  $202 = $g;
  $203 = $201 & $202;
  $204 = $199 ^ $203;
  $ch = $204;
  $205 = $h;
  $206 = $s1;
  $207 = (($205) + ($206))|0;
  $208 = $ch;
  $209 = (($207) + ($208))|0;
  $210 = $i;
  $211 = (264792 + ($210<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = (($209) + ($212))|0;
  $214 = $i;
  $215 = $0;
  $216 = ((($215)) + 68|0);
  $217 = (($216) + ($214<<2)|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($213) + ($218))|0;
  $t1 = $219;
  $220 = $g;
  $h = $220;
  $221 = $f;
  $g = $221;
  $222 = $e;
  $f = $222;
  $223 = $d;
  $224 = $t1;
  $225 = (($223) + ($224))|0;
  $e = $225;
  $226 = $c;
  $d = $226;
  $227 = $b;
  $c = $227;
  $228 = $a;
  $b = $228;
  $229 = $t1;
  $230 = $t2;
  $231 = (($229) + ($230))|0;
  $a = $231;
  $232 = $i;
  $233 = (($232) + 1)|0;
  $i = $233;
 }
 $234 = $0;
 $235 = ((($234)) + 324|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = (($236) + ($149))|0;
 HEAP32[$235>>2] = $237;
 $238 = $b;
 $239 = $0;
 $240 = ((($239)) + 324|0);
 $241 = ((($240)) + 4|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = (($242) + ($238))|0;
 HEAP32[$241>>2] = $243;
 $244 = $c;
 $245 = $0;
 $246 = ((($245)) + 324|0);
 $247 = ((($246)) + 8|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = (($248) + ($244))|0;
 HEAP32[$247>>2] = $249;
 $250 = $d;
 $251 = $0;
 $252 = ((($251)) + 324|0);
 $253 = ((($252)) + 12|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = (($254) + ($250))|0;
 HEAP32[$253>>2] = $255;
 $256 = $e;
 $257 = $0;
 $258 = ((($257)) + 324|0);
 $259 = ((($258)) + 16|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = (($260) + ($256))|0;
 HEAP32[$259>>2] = $261;
 $262 = $f;
 $263 = $0;
 $264 = ((($263)) + 324|0);
 $265 = ((($264)) + 20|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = (($266) + ($262))|0;
 HEAP32[$265>>2] = $267;
 $268 = $g;
 $269 = $0;
 $270 = ((($269)) + 324|0);
 $271 = ((($270)) + 24|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = (($272) + ($268))|0;
 HEAP32[$271>>2] = $273;
 $274 = $h;
 $275 = $0;
 $276 = ((($275)) + 324|0);
 $277 = ((($276)) + 28|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = (($278) + ($274))|0;
 HEAP32[$277>>2] = $279;
 $280 = $0;
 $281 = ((($280)) + 64|0);
 HEAP32[$281>>2] = 0;
 STACKTOP = sp;return;
}
function _load32be($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = (_is_little_endian()|0);
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 if (!($3)) {
  $23 = $5;
  STACKTOP = sp;return ($23|0);
 }
 $6 = $5 & 255;
 $7 = $6 << 24;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 65280;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 16711680;
 $16 = $15 >>> 8;
 $17 = $12 | $16;
 $18 = $0;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & -16777216;
 $21 = $20 >>> 24;
 $22 = $17 | $21;
 $23 = $22;
 STACKTOP = sp;return ($23|0);
}
function _is_little_endian() {
 var $0 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp;
 HEAP16[$u>>1] = 1;
 $0 = HEAP8[$u>>0]|0;
 STACKTOP = sp;return ($0|0);
}
function _store32be($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = (_is_little_endian()|0);
 $3 = $2&255;
 $4 = ($3|0)!=(0);
 $5 = $1;
 if (!($4)) {
  $21 = $5;
  $20 = $0;
  HEAP32[$20>>2] = $21;
  STACKTOP = sp;return;
 }
 $6 = $5 & 255;
 $7 = $6 << 24;
 $8 = $1;
 $9 = $8 & 65280;
 $10 = $9 << 8;
 $11 = $7 | $10;
 $12 = $1;
 $13 = $12 & 16711680;
 $14 = $13 >>> 8;
 $15 = $11 | $14;
 $16 = $1;
 $17 = $16 & -16777216;
 $18 = $17 >>> 24;
 $19 = $15 | $18;
 $21 = $19;
 $20 = $0;
 HEAP32[$20>>2] = $21;
 STACKTOP = sp;return;
}
function _init_libretro_sym($dummy) {
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dummy&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 _load_symbols($3);
 $4 = HEAP32[265052>>2]|0;
 FUNCTION_TABLE_vi[$4 & 1023](257);
 STACKTOP = sp;return;
}
function _rarch_environment_cb($cmd,$data) {
 $cmd = $cmd|0;
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val67 = 0, $$expand_i1_val69 = 0, $$expand_i1_val71 = 0, $$expand_i1_val73 = 0, $$expand_i1_val75 = 0, $$expand_i1_val77 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $cb = 0, $desc = 0, $desc1 = 0, $id = 0, $info = 0, $info2 = 0, $msg = 0, $options_path = 0, $p = 0, $path = 0, $pix_fmt = 0, $rotation = 0, $state = 0, $switch$split102D = 0;
 var $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0;
 var $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer6 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer9 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vars = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer63 = sp + 224|0;
 $vararg_buffer61 = sp + 216|0;
 $vararg_buffer59 = sp + 208|0;
 $vararg_buffer57 = sp + 200|0;
 $vararg_buffer55 = sp + 192|0;
 $vararg_buffer52 = sp + 184|0;
 $vararg_buffer50 = sp + 176|0;
 $vararg_buffer48 = sp + 168|0;
 $vararg_buffer46 = sp + 160|0;
 $vararg_buffer44 = sp + 152|0;
 $vararg_buffer42 = sp + 144|0;
 $vararg_buffer40 = sp + 136|0;
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 4392|0;
 $buf = sp + 296|0;
 $1 = $cmd;
 $2 = $data;
 $3 = $1;
 $switch$split2D = ($3|0)<(14);
 L1: do {
  if ($switch$split2D) {
   do {
    switch ($3|0) {
    case 2:  {
     $4 = HEAP8[(326)>>0]|0;
     $5 = $4&1;
     $6 = $5 ^ 1;
     $7 = $2;
     $8 = $6&1;
     HEAP8[$7>>0] = $8;
     $9 = HEAP8[102648>>0]|0;
     $10 = $9&1;
     if (!($10)) {
      label = 117;
      break L1;
     }
     $11 = HEAP32[(259664)>>2]|0;
     $12 = ($11|0)!=(0|0);
     $13 = HEAP32[(259664)>>2]|0;
     $14 = HEAP32[544648>>2]|0;
     $15 = $12 ? $13 : $14;
     $16 = HEAP8[(326)>>0]|0;
     $17 = $16&1;
     $18 = $17 ^ 1;
     $19 = $18&1;
     HEAP32[$vararg_buffer>>2] = $19;
     (_fprintf($15,753342,$vararg_buffer)|0);
     $20 = HEAP32[(259664)>>2]|0;
     $21 = ($20|0)!=(0|0);
     $22 = HEAP32[(259664)>>2]|0;
     $23 = HEAP32[544648>>2]|0;
     $24 = $21 ? $22 : $23;
     (_fflush($24)|0);
     label = 117;
     break L1;
     break;
    }
    case 3:  {
     $25 = $2;
     HEAP8[$25>>0] = 1;
     $26 = HEAP8[102648>>0]|0;
     $27 = $26&1;
     if (!($27)) {
      label = 117;
      break L1;
     }
     $28 = HEAP32[(259664)>>2]|0;
     $29 = ($28|0)!=(0|0);
     $30 = HEAP32[(259664)>>2]|0;
     $31 = HEAP32[544648>>2]|0;
     $32 = $29 ? $30 : $31;
     (_fprintf($32,753379,$vararg_buffer1)|0);
     $33 = HEAP32[(259664)>>2]|0;
     $34 = ($33|0)!=(0|0);
     $35 = HEAP32[(259664)>>2]|0;
     $36 = HEAP32[544648>>2]|0;
     $37 = $34 ? $35 : $36;
     (_fflush($37)|0);
     label = 117;
     break L1;
     break;
    }
    case 6:  {
     $114 = $2;
     $msg = $114;
     $115 = HEAP8[102648>>0]|0;
     $116 = $115&1;
     if ($116) {
      $117 = HEAP32[(259664)>>2]|0;
      $118 = ($117|0)!=(0|0);
      $119 = HEAP32[(259664)>>2]|0;
      $120 = HEAP32[544648>>2]|0;
      $121 = $118 ? $119 : $120;
      $122 = $msg;
      $123 = HEAP32[$122>>2]|0;
      HEAP32[$vararg_buffer11>>2] = $123;
      (_fprintf($121,753534,$vararg_buffer11)|0);
      $124 = HEAP32[(259664)>>2]|0;
      $125 = ($124|0)!=(0|0);
      $126 = HEAP32[(259664)>>2]|0;
      $127 = HEAP32[544648>>2]|0;
      $128 = $125 ? $126 : $127;
      (_fflush($128)|0);
     }
     $129 = HEAP32[(251148)>>2]|0;
     $130 = ($129|0)!=(0|0);
     if (!($130)) {
      label = 117;
      break L1;
     }
     $131 = HEAP32[(251148)>>2]|0;
     _msg_queue_clear($131);
     $132 = HEAP32[(251148)>>2]|0;
     $133 = $msg;
     $134 = HEAP32[$133>>2]|0;
     $135 = $msg;
     $136 = ((($135)) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     _msg_queue_push($132,$134,1,$137);
     label = 117;
     break L1;
     break;
    }
    case 1:  {
     $138 = $2;
     $139 = HEAP32[$138>>2]|0;
     $rotation = $139;
     $140 = HEAP8[102648>>0]|0;
     $141 = $140&1;
     if ($141) {
      $142 = HEAP32[(259664)>>2]|0;
      $143 = ($142|0)!=(0|0);
      $144 = HEAP32[(259664)>>2]|0;
      $145 = HEAP32[544648>>2]|0;
      $146 = $143 ? $144 : $145;
      $147 = $rotation;
      HEAP32[$vararg_buffer14>>2] = $147;
      (_fprintf($146,753570,$vararg_buffer14)|0);
      $148 = HEAP32[(259664)>>2]|0;
      $149 = ($148|0)!=(0|0);
      $150 = HEAP32[(259664)>>2]|0;
      $151 = HEAP32[544648>>2]|0;
      $152 = $149 ? $150 : $151;
      (_fflush($152)|0);
     }
     $153 = HEAP8[(16772)>>0]|0;
     $154 = $153&1;
     if (!($154)) {
      label = 117;
      break L1;
     }
     $155 = $rotation;
     HEAP32[(196972)>>2] = $155;
     $156 = HEAP32[(12)>>2]|0;
     $157 = ($156|0)!=(0|0);
     if ($157) {
      $158 = HEAP32[(12)>>2]|0;
      $159 = ((($158)) + 40|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160|0)!=(0|0);
      if ($161) {
       $162 = HEAP32[(24)>>2]|0;
       $163 = ($162|0)!=(0|0);
       if (!($163)) {
        label = 117;
        break L1;
       }
       $164 = HEAP32[(12)>>2]|0;
       $165 = ((($164)) + 40|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = HEAP32[(24)>>2]|0;
       $168 = $rotation;
       FUNCTION_TABLE_vii[$166 & 1023]($167,$168);
       label = 117;
       break L1;
      }
     }
     $$expand_i1_val = 0;
     HEAP8[$0>>0] = $$expand_i1_val;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $516 = $$pre_trunc&1;
     STACKTOP = sp;return ($516|0);
     break;
    }
    case 7:  {
     $169 = HEAP8[102648>>0]|0;
     $170 = $169&1;
     if ($170) {
      $171 = HEAP32[(259664)>>2]|0;
      $172 = ($171|0)!=(0|0);
      $173 = HEAP32[(259664)>>2]|0;
      $174 = HEAP32[544648>>2]|0;
      $175 = $172 ? $173 : $174;
      (_fprintf($175,753607,$vararg_buffer17)|0);
      $176 = HEAP32[(259664)>>2]|0;
      $177 = ($176|0)!=(0|0);
      $178 = HEAP32[(259664)>>2]|0;
      $179 = HEAP32[544648>>2]|0;
      $180 = $177 ? $178 : $179;
      (_fflush($180)|0);
     }
     HEAP8[(196976)>>0] = 1;
     label = 117;
     break L1;
     break;
    }
    case 8:  {
     $181 = $2;
     $182 = HEAP32[$181>>2]|0;
     HEAP32[(196980)>>2] = $182;
     $183 = HEAP8[102648>>0]|0;
     $184 = $183&1;
     if (!($184)) {
      label = 117;
      break L1;
     }
     $185 = HEAP32[(259664)>>2]|0;
     $186 = ($185|0)!=(0|0);
     $187 = HEAP32[(259664)>>2]|0;
     $188 = HEAP32[544648>>2]|0;
     $189 = $186 ? $187 : $188;
     $190 = HEAP32[(196980)>>2]|0;
     HEAP32[$vararg_buffer19>>2] = $190;
     (_fprintf($189,753637,$vararg_buffer19)|0);
     $191 = HEAP32[(259664)>>2]|0;
     $192 = ($191|0)!=(0|0);
     $193 = HEAP32[(259664)>>2]|0;
     $194 = HEAP32[544648>>2]|0;
     $195 = $192 ? $193 : $194;
     (_fflush($195)|0);
     label = 117;
     break L1;
     break;
    }
    case 9:  {
     $196 = HEAP8[(94412)>>0]|0;
     $197 = $196 << 24 >> 24;
     $198 = ($197|0)!=(0);
     $199 = $198 ? (94412) : 0;
     $200 = $2;
     HEAP32[$200>>2] = $199;
     $201 = HEAP8[102648>>0]|0;
     $202 = $201&1;
     if (!($202)) {
      label = 117;
      break L1;
     }
     $203 = HEAP32[(259664)>>2]|0;
     $204 = ($203|0)!=(0|0);
     $205 = HEAP32[(259664)>>2]|0;
     $206 = HEAP32[544648>>2]|0;
     $207 = $204 ? $205 : $206;
     HEAP32[$vararg_buffer22>>2] = (94412);
     (_fprintf($207,753680,$vararg_buffer22)|0);
     $208 = HEAP32[(259664)>>2]|0;
     $209 = ($208|0)!=(0|0);
     $210 = HEAP32[(259664)>>2]|0;
     $211 = HEAP32[544648>>2]|0;
     $212 = $209 ? $210 : $211;
     (_fflush($212)|0);
     label = 117;
     break L1;
     break;
    }
    case 10:  {
     $213 = $2;
     $214 = HEAP32[$213>>2]|0;
     $pix_fmt = $214;
     $215 = $pix_fmt;
     switch ($215|0) {
     case 0:  {
      $216 = HEAP8[102648>>0]|0;
      $217 = $216&1;
      if ($217) {
       $218 = HEAP32[(259664)>>2]|0;
       $219 = ($218|0)!=(0|0);
       $220 = HEAP32[(259664)>>2]|0;
       $221 = HEAP32[544648>>2]|0;
       $222 = $219 ? $220 : $221;
       (_fprintf($222,753724,$vararg_buffer25)|0);
       $223 = HEAP32[(259664)>>2]|0;
       $224 = ($223|0)!=(0|0);
       $225 = HEAP32[(259664)>>2]|0;
       $226 = HEAP32[544648>>2]|0;
       $227 = $224 ? $225 : $226;
       (_fflush($227)|0);
      }
      break;
     }
     case 2:  {
      $228 = HEAP8[102648>>0]|0;
      $229 = $228&1;
      if ($229) {
       $230 = HEAP32[(259664)>>2]|0;
       $231 = ($230|0)!=(0|0);
       $232 = HEAP32[(259664)>>2]|0;
       $233 = HEAP32[544648>>2]|0;
       $234 = $231 ? $232 : $233;
       (_fprintf($234,753772,$vararg_buffer27)|0);
       $235 = HEAP32[(259664)>>2]|0;
       $236 = ($235|0)!=(0|0);
       $237 = HEAP32[(259664)>>2]|0;
       $238 = HEAP32[544648>>2]|0;
       $239 = $236 ? $237 : $238;
       (_fflush($239)|0);
      }
      break;
     }
     case 1:  {
      $240 = HEAP8[102648>>0]|0;
      $241 = $240&1;
      if ($241) {
       $242 = HEAP32[(259664)>>2]|0;
       $243 = ($242|0)!=(0|0);
       $244 = HEAP32[(259664)>>2]|0;
       $245 = HEAP32[544648>>2]|0;
       $246 = $243 ? $244 : $245;
       (_fprintf($246,753818,$vararg_buffer29)|0);
       $247 = HEAP32[(259664)>>2]|0;
       $248 = ($247|0)!=(0|0);
       $249 = HEAP32[(259664)>>2]|0;
       $250 = HEAP32[544648>>2]|0;
       $251 = $248 ? $249 : $250;
       (_fflush($251)|0);
      }
      break;
     }
     default: {
      $$expand_i1_val67 = 0;
      HEAP8[$0>>0] = $$expand_i1_val67;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $516 = $$pre_trunc&1;
      STACKTOP = sp;return ($516|0);
     }
     }
     $252 = $pix_fmt;
     HEAP32[(196984)>>2] = $252;
     label = 117;
     break L1;
     break;
    }
    case 11:  {
     _memset(((196992)|0),0,512)|0;
     $253 = $2;
     $desc = $253;
     while(1) {
      $254 = $desc;
      $255 = ((($254)) + 16|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = ($256|0)!=(0|0);
      if (!($257)) {
       break;
      }
      $258 = $desc;
      $259 = HEAP32[$258>>2]|0;
      $260 = ($259>>>0)>=(8);
      if (!($260)) {
       $261 = $desc;
       $262 = ((($261)) + 4|0);
       $263 = HEAP32[$262>>2]|0;
       $264 = ($263|0)!=(1);
       if (!($264)) {
        $265 = $desc;
        $266 = ((($265)) + 12|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = ($267>>>0)>=(16);
        if (!($268)) {
         $269 = $desc;
         $270 = ((($269)) + 16|0);
         $271 = HEAP32[$270>>2]|0;
         $272 = $desc;
         $273 = ((($272)) + 12|0);
         $274 = HEAP32[$273>>2]|0;
         $275 = $desc;
         $276 = HEAP32[$275>>2]|0;
         $277 = ((196992) + ($276<<6)|0);
         $278 = (($277) + ($274<<2)|0);
         HEAP32[$278>>2] = $271;
        }
       }
      }
      $279 = $desc;
      $280 = ((($279)) + 20|0);
      $desc = $280;
     }
     $281 = HEAP8[102648>>0]|0;
     $282 = $281&1;
     if ($282) {
      $283 = HEAP32[(259664)>>2]|0;
      $284 = ($283|0)!=(0|0);
      $285 = HEAP32[(259664)>>2]|0;
      $286 = HEAP32[544648>>2]|0;
      $287 = $284 ? $285 : $286;
      (_fprintf($287,753866,$vararg_buffer31)|0);
      $288 = HEAP32[(259664)>>2]|0;
      $289 = ($288|0)!=(0|0);
      $290 = HEAP32[(259664)>>2]|0;
      $291 = HEAP32[544648>>2]|0;
      $292 = $289 ? $290 : $291;
      (_fflush($292)|0);
     }
     $p = 0;
     while(1) {
      $293 = $p;
      $294 = ($293>>>0)<(8);
      if (!($294)) {
       label = 117;
       break L1;
      }
      $id = 0;
      while(1) {
       $295 = $id;
       $296 = ($295>>>0)<(16);
       if (!($296)) {
        break;
       }
       $297 = $id;
       $298 = $p;
       $299 = ((196992) + ($298<<6)|0);
       $300 = (($299) + ($297<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $desc1 = $301;
       $302 = $desc1;
       $303 = ($302|0)!=(0|0);
       if ($303) {
        $304 = HEAP8[102648>>0]|0;
        $305 = $304&1;
        if ($305) {
         $306 = HEAP32[(259664)>>2]|0;
         $307 = ($306|0)!=(0|0);
         $308 = HEAP32[(259664)>>2]|0;
         $309 = HEAP32[544648>>2]|0;
         $310 = $307 ? $308 : $309;
         $311 = $p;
         $312 = (($311) + 1)|0;
         $313 = $id;
         $314 = (265148 + ($313<<2)|0);
         $315 = HEAP32[$314>>2]|0;
         $316 = $desc1;
         HEAP32[$vararg_buffer33>>2] = $312;
         $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
         HEAP32[$vararg_ptr36>>2] = $315;
         $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
         HEAP32[$vararg_ptr37>>2] = $316;
         (_fprintf($310,753909,$vararg_buffer33)|0);
         $317 = HEAP32[(259664)>>2]|0;
         $318 = ($317|0)!=(0|0);
         $319 = HEAP32[(259664)>>2]|0;
         $320 = HEAP32[544648>>2]|0;
         $321 = $318 ? $319 : $320;
         (_fflush($321)|0);
        }
       }
       $322 = $id;
       $323 = (($322) + 1)|0;
       $id = $323;
      }
      $324 = $p;
      $325 = (($324) + 1)|0;
      $p = $325;
     }
     break;
    }
    case 12:  {
     $326 = HEAP8[102648>>0]|0;
     $327 = $326&1;
     if ($327) {
      $328 = HEAP32[(259664)>>2]|0;
      $329 = ($328|0)!=(0|0);
      $330 = HEAP32[(259664)>>2]|0;
      $331 = HEAP32[544648>>2]|0;
      $332 = $329 ? $330 : $331;
      (_fprintf($332,753963,$vararg_buffer38)|0);
      $333 = HEAP32[(259664)>>2]|0;
      $334 = ($333|0)!=(0|0);
      $335 = HEAP32[(259664)>>2]|0;
      $336 = HEAP32[544648>>2]|0;
      $337 = $334 ? $335 : $336;
      (_fflush($337)|0);
     }
     $338 = $2;
     $info = $338;
     $339 = $info;
     $340 = HEAP32[$339>>2]|0;
     HEAP32[(201600)>>2] = $340;
     label = 117;
     break L1;
     break;
    }
    case 13:  {
     $341 = HEAP8[102648>>0]|0;
     $342 = $341&1;
     if ($342) {
      $343 = HEAP32[(259664)>>2]|0;
      $344 = ($343|0)!=(0|0);
      $345 = HEAP32[(259664)>>2]|0;
      $346 = HEAP32[544648>>2]|0;
      $347 = $344 ? $345 : $346;
      (_fprintf($347,754006,$vararg_buffer40)|0);
      $348 = HEAP32[(259664)>>2]|0;
      $349 = ($348|0)!=(0|0);
      $350 = HEAP32[(259664)>>2]|0;
      $351 = HEAP32[544648>>2]|0;
      $352 = $349 ? $350 : $351;
      (_fflush($352)|0);
     }
     $353 = $2;
     ;HEAP32[(201612)>>2]=HEAP32[$353>>2]|0;HEAP32[(201612)+4>>2]=HEAP32[$353+4>>2]|0;HEAP32[(201612)+8>>2]=HEAP32[$353+8>>2]|0;HEAP32[(201612)+12>>2]=HEAP32[$353+12>>2]|0;HEAP32[(201612)+16>>2]=HEAP32[$353+16>>2]|0;HEAP32[(201612)+20>>2]=HEAP32[$353+20>>2]|0;HEAP32[(201612)+24>>2]=HEAP32[$353+24>>2]|0;
     label = 117;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  } else {
   $switch$split12D = ($3|0)<(19);
   L76: do {
    if ($switch$split12D) {
     switch ($3|0) {
     case 14:  {
      break L76;
      break;
     }
     case 15:  {
      $38 = $2;
      $var = $38;
      $39 = HEAP8[102648>>0]|0;
      $40 = $39&1;
      if ($40) {
       $41 = HEAP32[(259664)>>2]|0;
       $42 = ($41|0)!=(0|0);
       $43 = HEAP32[(259664)>>2]|0;
       $44 = HEAP32[544648>>2]|0;
       $45 = $42 ? $43 : $44;
       $46 = $var;
       $47 = HEAP32[$46>>2]|0;
       HEAP32[$vararg_buffer3>>2] = $47;
       (_fprintf($45,753418,$vararg_buffer3)|0);
       $48 = HEAP32[(259664)>>2]|0;
       $49 = ($48|0)!=(0|0);
       $50 = HEAP32[(259664)>>2]|0;
       $51 = HEAP32[544648>>2]|0;
       $52 = $49 ? $50 : $51;
       (_fflush($52)|0);
      }
      $53 = HEAP32[(201704)>>2]|0;
      $54 = ($53|0)!=(0|0);
      if ($54) {
       $55 = HEAP32[(201704)>>2]|0;
       $56 = $var;
       _core_option_get($55,$56);
      } else {
       $57 = $var;
       $58 = ((($57)) + 4|0);
       HEAP32[$58>>2] = 0;
      }
      $59 = HEAP8[102648>>0]|0;
      $60 = $59&1;
      if (!($60)) {
       label = 117;
       break L1;
      }
      $61 = HEAP32[(259664)>>2]|0;
      $62 = ($61|0)!=(0|0);
      $63 = HEAP32[(259664)>>2]|0;
      $64 = HEAP32[544648>>2]|0;
      $65 = $62 ? $63 : $64;
      $66 = $var;
      $67 = ((($66)) + 4|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)!=(0|0);
      if ($69) {
       $70 = $var;
       $71 = ((($70)) + 4|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = $72;
      } else {
       $73 = 768139;
      }
      HEAP32[$vararg_buffer6>>2] = $73;
      (_fprintf($65,753455,$vararg_buffer6)|0);
      $74 = HEAP32[(259664)>>2]|0;
      $75 = ($74|0)!=(0|0);
      $76 = HEAP32[(259664)>>2]|0;
      $77 = HEAP32[544648>>2]|0;
      $78 = $75 ? $76 : $77;
      (_fflush($78)|0);
      label = 117;
      break L1;
      break;
     }
     case 17:  {
      $79 = HEAP32[(201704)>>2]|0;
      $80 = ($79|0)!=(0|0);
      if ($80) {
       $81 = HEAP32[(201704)>>2]|0;
       $82 = (_core_option_updated($81)|0);
       $83 = $82&1;
       $85 = $83;
      } else {
       $85 = 0;
      }
      $84 = ($85|0)!=(0);
      $86 = $2;
      $87 = $84&1;
      HEAP8[$86>>0] = $87;
      label = 117;
      break L1;
      break;
     }
     case 16:  {
      $88 = HEAP8[102648>>0]|0;
      $89 = $88&1;
      if ($89) {
       $90 = HEAP32[(259664)>>2]|0;
       $91 = ($90|0)!=(0|0);
       $92 = HEAP32[(259664)>>2]|0;
       $93 = HEAP32[544648>>2]|0;
       $94 = $91 ? $92 : $93;
       (_fprintf($94,753471,$vararg_buffer9)|0);
       $95 = HEAP32[(259664)>>2]|0;
       $96 = ($95|0)!=(0|0);
       $97 = HEAP32[(259664)>>2]|0;
       $98 = HEAP32[544648>>2]|0;
       $99 = $96 ? $97 : $98;
       (_fflush($99)|0);
      }
      $100 = HEAP32[(201704)>>2]|0;
      $101 = ($100|0)!=(0|0);
      if ($101) {
       $102 = HEAP32[(201704)>>2]|0;
       _core_option_flush($102);
       $103 = HEAP32[(201704)>>2]|0;
       _core_option_free($103);
      }
      $104 = $2;
      $vars = $104;
      $options_path = (69832);
      $105 = $options_path;
      $106 = HEAP8[$105>>0]|0;
      $107 = ($106<<24>>24)!=(0);
      if (!($107)) {
       $108 = HEAP8[(123154)>>0]|0;
       $109 = $108 << 24 >> 24;
       $110 = ($109|0)!=(0);
       if ($110) {
        _fill_pathname_resolve_relative($buf,(123154),753506,4096);
        $options_path = $buf;
       }
      }
      $111 = $options_path;
      $112 = $vars;
      $113 = (_core_option_new($111,$112)|0);
      HEAP32[(201704)>>2] = $113;
      label = 117;
      break L1;
      break;
     }
     case 18:  {
      $423 = $2;
      $424 = HEAP8[$423>>0]|0;
      $425 = $424&1;
      $426 = $425&1;
      $state = $426;
      $427 = HEAP8[102648>>0]|0;
      $428 = $427&1;
      if ($428) {
       $429 = HEAP32[(259664)>>2]|0;
       $430 = ($429|0)!=(0|0);
       $431 = HEAP32[(259664)>>2]|0;
       $432 = HEAP32[544648>>2]|0;
       $433 = $430 ? $431 : $432;
       $434 = $state;
       $435 = $434&1;
       $436 = $435 ? 754326 : 754330;
       HEAP32[$vararg_buffer52>>2] = $436;
       (_fprintf($433,754333,$vararg_buffer52)|0);
       $437 = HEAP32[(259664)>>2]|0;
       $438 = ($437|0)!=(0|0);
       $439 = HEAP32[(259664)>>2]|0;
       $440 = HEAP32[544648>>2]|0;
       $441 = $438 ? $439 : $440;
       (_fflush($441)|0);
      }
      $442 = $state;
      $443 = $442&1;
      $444 = $443&1;
      HEAP8[(196990)>>0] = $444;
      label = 117;
      break L1;
      break;
     }
     default: {
      break L1;
     }
     }
    } else {
     $switch$split42D = ($3|0)<(131072);
     if ($switch$split42D) {
      $switch$split72D = ($3|0)<(21);
      if ($switch$split72D) {
       switch ($3|0) {
       case 19:  {
        break;
       }
       default: {
        break L1;
       }
       }
       $445 = $2;
       $path = $445;
       $446 = $path;
       HEAP32[$446>>2] = 0;
       label = 117;
       break L1;
      }
      $switch$split102D = ($3|0)<(65550);
      if (!($switch$split102D)) {
       switch ($3|0) {
       case 65550:  {
        break L76;
        break;
       }
       default: {
        break L1;
       }
       }
      }
      switch ($3|0) {
      case 21:  {
       break;
      }
      default: {
       break L1;
      }
      }
      $447 = HEAP8[102648>>0]|0;
      $448 = $447&1;
      if ($448) {
       $449 = HEAP32[(259664)>>2]|0;
       $450 = ($449|0)!=(0|0);
       $451 = HEAP32[(259664)>>2]|0;
       $452 = HEAP32[544648>>2]|0;
       $453 = $450 ? $451 : $452;
       (_fprintf($453,754378,$vararg_buffer55)|0);
       $454 = HEAP32[(259664)>>2]|0;
       $455 = ($454|0)!=(0|0);
       $456 = HEAP32[(259664)>>2]|0;
       $457 = HEAP32[544648>>2]|0;
       $458 = $455 ? $456 : $457;
       (_fflush($458)|0);
      }
      $459 = $2;
      $info2 = $459;
      $460 = $info2;
      ;HEAP32[(201680)>>2]=HEAP32[$460>>2]|0;HEAP32[(201680)+4>>2]=HEAP32[$460+4>>2]|0;HEAP32[(201680)+8>>2]=HEAP32[$460+8>>2]|0;HEAP32[(201680)+12>>2]=HEAP32[$460+12>>2]|0;
      label = 117;
      break L1;
     }
     switch ($3|0) {
     case 131072:  {
      $461 = HEAP8[102648>>0]|0;
      $462 = $461&1;
      if ($462) {
       $463 = HEAP32[(259664)>>2]|0;
       $464 = ($463|0)!=(0|0);
       $465 = HEAP32[(259664)>>2]|0;
       $466 = HEAP32[544648>>2]|0;
       $467 = $464 ? $465 : $466;
       (_fprintf($467,754423,$vararg_buffer57)|0);
       $468 = HEAP32[(259664)>>2]|0;
       $469 = ($468|0)!=(0|0);
       $470 = HEAP32[(259664)>>2]|0;
       $471 = HEAP32[544648>>2]|0;
       $472 = $469 ? $470 : $471;
       (_fflush($472)|0);
      }
      $473 = $2;
      $474 = (_path_file_exists($473)|0);
      if ($474) {
       $475 = $2;
       (_strlcpy_rarch__((78028),$475,4096)|0);
       label = 117;
       break L1;
      }
      $$expand_i1_val73 = 0;
      HEAP8[$0>>0] = $$expand_i1_val73;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $516 = $$pre_trunc&1;
      STACKTOP = sp;return ($516|0);
      break;
     }
     case 131074: case 131073:  {
      break;
     }
     default: {
      break L1;
     }
     }
     $476 = $2;
     $477 = ($476|0)!=(0|0);
     if ($477) {
      $478 = $2;
      (_strlcpy_rarch__((139538),$478,4096)|0);
     } else {
      HEAP8[(139538)>>0] = 0;
     }
     $479 = $1;
     $480 = ($479|0)==(131074);
     $481 = HEAP8[102648>>0]|0;
     $482 = $481&1;
     if (!($480)) {
      if (!($482)) {
       label = 117;
       break L1;
      }
      $493 = HEAP32[(259664)>>2]|0;
      $494 = ($493|0)!=(0|0);
      $495 = HEAP32[(259664)>>2]|0;
      $496 = HEAP32[544648>>2]|0;
      $497 = $494 ? $495 : $496;
      (_fprintf($497,754515,$vararg_buffer61)|0);
      $498 = HEAP32[(259664)>>2]|0;
      $499 = ($498|0)!=(0|0);
      $500 = HEAP32[(259664)>>2]|0;
      $501 = HEAP32[544648>>2]|0;
      $502 = $499 ? $500 : $501;
      (_fflush($502)|0);
      label = 117;
      break L1;
     }
     if ($482) {
      $483 = HEAP32[(259664)>>2]|0;
      $484 = ($483|0)!=(0|0);
      $485 = HEAP32[(259664)>>2]|0;
      $486 = HEAP32[544648>>2]|0;
      $487 = $484 ? $485 : $486;
      (_fprintf($487,754472,$vararg_buffer59)|0);
      $488 = HEAP32[(259664)>>2]|0;
      $489 = ($488|0)!=(0|0);
      $490 = HEAP32[(259664)>>2]|0;
      $491 = HEAP32[544648>>2]|0;
      $492 = $489 ? $490 : $491;
      (_fflush($492)|0);
     }
     HEAP8[(251152)>>0] = 1;
     label = 117;
     break L1;
    }
   } while(0);
   $354 = HEAP8[102648>>0]|0;
   $355 = $354&1;
   if ($355) {
    $356 = HEAP32[(259664)>>2]|0;
    $357 = ($356|0)!=(0|0);
    $358 = HEAP32[(259664)>>2]|0;
    $359 = HEAP32[544648>>2]|0;
    $360 = $357 ? $358 : $359;
    (_fprintf($360,754054,$vararg_buffer42)|0);
    $361 = HEAP32[(259664)>>2]|0;
    $362 = ($361|0)!=(0|0);
    $363 = HEAP32[(259664)>>2]|0;
    $364 = HEAP32[544648>>2]|0;
    $365 = $362 ? $363 : $364;
    (_fflush($365)|0);
   }
   $366 = $2;
   $cb = $366;
   $367 = $cb;
   $368 = HEAP32[$367>>2]|0;
   switch ($368|0) {
   case 0:  {
    $369 = HEAP8[102648>>0]|0;
    $370 = $369&1;
    if ($370) {
     $371 = HEAP32[(259664)>>2]|0;
     $372 = ($371|0)!=(0|0);
     $373 = HEAP32[(259664)>>2]|0;
     $374 = HEAP32[544648>>2]|0;
     $375 = $372 ? $373 : $374;
     (_fprintf($375,754089,$vararg_buffer44)|0);
     $376 = HEAP32[(259664)>>2]|0;
     $377 = ($376|0)!=(0|0);
     $378 = HEAP32[(259664)>>2]|0;
     $379 = HEAP32[544648>>2]|0;
     $380 = $377 ? $378 : $379;
     (_fflush($380)|0);
    }
    break;
   }
   case 2:  {
    $381 = HEAP8[102648>>0]|0;
    $382 = $381&1;
    if ($382) {
     $383 = HEAP32[(259664)>>2]|0;
     $384 = ($383|0)!=(0|0);
     $385 = HEAP32[(259664)>>2]|0;
     $386 = HEAP32[544648>>2]|0;
     $387 = $384 ? $385 : $386;
     (_fprintf($387,754127,$vararg_buffer46)|0);
     $388 = HEAP32[(259664)>>2]|0;
     $389 = ($388|0)!=(0|0);
     $390 = HEAP32[(259664)>>2]|0;
     $391 = HEAP32[544648>>2]|0;
     $392 = $389 ? $390 : $391;
     (_fflush($392)|0);
    }
    HEAP32[(12)>>2] = 270344;
    break;
   }
   case 3: case 1:  {
    $393 = HEAP32[(259664)>>2]|0;
    $394 = ($393|0)!=(0|0);
    $395 = HEAP32[(259664)>>2]|0;
    $396 = HEAP32[544648>>2]|0;
    $397 = $394 ? $395 : $396;
    (_fprintf($397,754169,$vararg_buffer48)|0);
    $398 = HEAP32[(259664)>>2]|0;
    $399 = ($398|0)!=(0|0);
    $400 = HEAP32[(259664)>>2]|0;
    $401 = HEAP32[544648>>2]|0;
    $402 = $399 ? $400 : $401;
    (_fflush($402)|0);
    $$expand_i1_val69 = 0;
    HEAP8[$0>>0] = $$expand_i1_val69;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $516 = $$pre_trunc&1;
    STACKTOP = sp;return ($516|0);
    break;
   }
   default: {
    $403 = HEAP8[102648>>0]|0;
    $404 = $403&1;
    if ($404) {
     $405 = HEAP32[(259664)>>2]|0;
     $406 = ($405|0)!=(0|0);
     $407 = HEAP32[(259664)>>2]|0;
     $408 = HEAP32[544648>>2]|0;
     $409 = $406 ? $407 : $408;
     (_fprintf($409,754286,$vararg_buffer50)|0);
     $410 = HEAP32[(259664)>>2]|0;
     $411 = ($410|0)!=(0|0);
     $412 = HEAP32[(259664)>>2]|0;
     $413 = HEAP32[544648>>2]|0;
     $414 = $411 ? $412 : $413;
     (_fflush($414)|0);
    }
    $$expand_i1_val71 = 0;
    HEAP8[$0>>0] = $$expand_i1_val71;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $516 = $$pre_trunc&1;
    STACKTOP = sp;return ($516|0);
   }
   }
   $415 = $cb;
   $416 = ((($415)) + 8|0);
   HEAP32[$416>>2] = 258;
   $417 = $cb;
   $418 = ((($417)) + 12|0);
   HEAP32[$418>>2] = 259;
   $419 = $1;
   $420 = $419 & 65536;
   $421 = ($420|0)!=(0);
   $422 = $cb;
   if ($421) {
    ;HEAP32[(201640)>>2]=HEAP32[$422>>2]|0;HEAP32[(201640)+4>>2]=HEAP32[$422+4>>2]|0;HEAP32[(201640)+8>>2]=HEAP32[$422+8>>2]|0;HEAP32[(201640)+12>>2]=HEAP32[$422+12>>2]|0;HEAP8[(201640)+16>>0]=HEAP8[$422+16>>0]|0;
    label = 117;
    break;
   } else {
    dest=(201640); src=$422; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    label = 117;
    break;
   }
  }
 } while(0);
 if ((label|0) == 117) {
  $$expand_i1_val77 = 1;
  HEAP8[$0>>0] = $$expand_i1_val77;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $516 = $$pre_trunc&1;
  STACKTOP = sp;return ($516|0);
 }
 $503 = HEAP8[102648>>0]|0;
 $504 = $503&1;
 if ($504) {
  $505 = HEAP32[(259664)>>2]|0;
  $506 = ($505|0)!=(0|0);
  $507 = HEAP32[(259664)>>2]|0;
  $508 = HEAP32[544648>>2]|0;
  $509 = $506 ? $507 : $508;
  $510 = $1;
  HEAP32[$vararg_buffer63>>2] = $510;
  (_fprintf($509,754551,$vararg_buffer63)|0);
  $511 = HEAP32[(259664)>>2]|0;
  $512 = ($511|0)!=(0|0);
  $513 = HEAP32[(259664)>>2]|0;
  $514 = HEAP32[544648>>2]|0;
  $515 = $512 ? $513 : $514;
  (_fflush($515)|0);
 }
 $$expand_i1_val75 = 0;
 HEAP8[$0>>0] = $$expand_i1_val75;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $516 = $$pre_trunc&1;
 STACKTOP = sp;return ($516|0);
}
function _uninit_libretro_sym() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(201704)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(201704)>>2]|0;
  _core_option_flush($2);
  $3 = HEAP32[(201704)>>2]|0;
  _core_option_free($3);
 }
 _memset(((196912)|0),0,4800)|0;
 return;
}
function _load_symbols($is_dummy) {
 $is_dummy = $is_dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $is_dummy&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 if ($3) {
  HEAP32[265056>>2] = 260;
  HEAP32[265060>>2] = 261;
  HEAP32[265064>>2] = 262;
  HEAP32[265048>>2] = 263;
  HEAP32[265068>>2] = 264;
  HEAP32[265052>>2] = 265;
  HEAP32[265072>>2] = 266;
  HEAP32[265076>>2] = 267;
  HEAP32[265080>>2] = 268;
  HEAP32[265084>>2] = 269;
  HEAP32[265088>>2] = 270;
  HEAP32[265092>>2] = 271;
  HEAP32[265096>>2] = 272;
  HEAP32[265100>>2] = 273;
  HEAP32[265104>>2] = 274;
  HEAP32[265108>>2] = 275;
  HEAP32[265112>>2] = 276;
  HEAP32[265116>>2] = 277;
  HEAP32[265120>>2] = 278;
  HEAP32[265124>>2] = 279;
  HEAP32[265128>>2] = 280;
  HEAP32[265132>>2] = 281;
  HEAP32[265136>>2] = 282;
  HEAP32[265140>>2] = 283;
  HEAP32[265144>>2] = 284;
  STACKTOP = sp;return;
 } else {
  HEAP32[265056>>2] = 285;
  HEAP32[265060>>2] = 286;
  HEAP32[265064>>2] = 287;
  HEAP32[265048>>2] = 288;
  HEAP32[265068>>2] = 289;
  HEAP32[265052>>2] = 290;
  HEAP32[265072>>2] = 291;
  HEAP32[265076>>2] = 292;
  HEAP32[265080>>2] = 293;
  HEAP32[265084>>2] = 294;
  HEAP32[265088>>2] = 295;
  HEAP32[265092>>2] = 296;
  HEAP32[265096>>2] = 297;
  HEAP32[265100>>2] = 298;
  HEAP32[265104>>2] = 299;
  HEAP32[265108>>2] = 300;
  HEAP32[265112>>2] = 301;
  HEAP32[265116>>2] = 302;
  HEAP32[265120>>2] = 303;
  HEAP32[265124>>2] = 304;
  HEAP32[265128>>2] = 305;
  HEAP32[265132>>2] = 306;
  HEAP32[265136>>2] = 307;
  HEAP32[265140>>2] = 308;
  HEAP32[265144>>2] = 309;
  STACKTOP = sp;return;
 }
}
function _libretro_dummy_retro_init() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(76800,2)|0);
 HEAP32[265212>>2] = $0;
 return;
}
function _libretro_dummy_retro_deinit() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[265212>>2]|0;
 _free($0);
 HEAP32[265212>>2] = 0;
 return;
}
function _libretro_dummy_retro_api_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _libretro_dummy_retro_set_controller_port_device($port,$device) {
 $port = $port|0;
 $device = $device|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $port;
 $1 = $device;
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_get_system_info($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $2 = $0;
 HEAP32[$2>>2] = 767977;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 773086;
 $5 = $0;
 $6 = ((($5)) + 12|0);
 HEAP8[$6>>0] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 773086;
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_get_system_av_info($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 HEAPF64[$2>>3] = 60.0;
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = ((($4)) + 8|0);
 HEAPF64[$5>>3] = 3.0E+4;
 $6 = $0;
 HEAP32[$6>>2] = 320;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 240;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 320;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = 240;
 $13 = $0;
 $14 = ((($13)) + 16|0);
 HEAPF32[$14>>2] = 1.3333333730697632;
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_set_environment($cb) {
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $2 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 $0 = $cb;
 $1 = $0;
 HEAP32[265216>>2] = $1;
 HEAP32[$fmt>>2] = 2;
 $2 = HEAP32[265216>>2]|0;
 (FUNCTION_TABLE_iii[$2 & 511](10,$fmt)|0);
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_set_audio_sample($cb) {
 $cb = $cb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cb;
 $1 = $0;
 HEAP32[265220>>2] = $1;
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_set_audio_sample_batch($cb) {
 $cb = $cb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cb;
 $1 = $0;
 HEAP32[265224>>2] = $1;
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_set_input_poll($cb) {
 $cb = $cb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cb;
 $1 = $0;
 HEAP32[265228>>2] = $1;
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_set_input_state($cb) {
 $cb = $cb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cb;
 $1 = $0;
 HEAP32[265232>>2] = $1;
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_set_video_refresh($cb) {
 $cb = $cb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cb;
 $1 = $0;
 HEAP32[265236>>2] = $1;
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_reset() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _libretro_dummy_retro_run() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[265228>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(76800);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = HEAP32[265212>>2]|0;
  $5 = (($4) + ($3<<1)|0);
  HEAP16[$5>>1] = 128;
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = HEAP32[265236>>2]|0;
 $9 = HEAP32[265212>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 1023]($9,320,240,640);
 STACKTOP = sp;return;
}
function _libretro_dummy_retro_load_game($info) {
 $info = $info|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 STACKTOP = sp;return 0;
}
function _libretro_dummy_retro_unload_game() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _libretro_dummy_retro_get_region() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _libretro_dummy_retro_load_game_special($type,$info,$num) {
 $type = $type|0;
 $info = $info|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $info;
 $2 = $num;
 STACKTOP = sp;return 0;
}
function _libretro_dummy_retro_serialize_size() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _libretro_dummy_retro_serialize($data,$size) {
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $size;
 STACKTOP = sp;return 0;
}
function _libretro_dummy_retro_unserialize($data,$size) {
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $size;
 STACKTOP = sp;return 0;
}
function _libretro_dummy_retro_get_memory_data($id) {
 $id = $id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $id;
 STACKTOP = sp;return (0|0);
}
function _libretro_dummy_retro_get_memory_size($id) {
 $id = $id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $id;
 STACKTOP = sp;return 0;
}
function _libretro_dummy_retro_cheat_reset() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _libretro_dummy_retro_cheat_set($index,$enabled,$code) {
 $index = $index|0;
 $enabled = $enabled|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $3 = $enabled&1;
 $1 = $3;
 $2 = $code;
 STACKTOP = sp;return;
}
function _msg_queue_new($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $queue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $size;
 $2 = (_calloc(1,16)|0);
 $queue = $2;
 $3 = $queue;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $1;
 $6 = (($5) + 1)|0;
 $7 = $queue;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = $6;
 $9 = $queue;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_calloc($11,4)|0);
 $13 = $queue;
 HEAP32[$13>>2] = $12;
 $14 = $queue;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 $17 = $queue;
 if ($16) {
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 1;
  $19 = $queue;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  _free($17);
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _msg_queue_free($queue) {
 $queue = $queue|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $queue;
 $1 = $0;
 _msg_queue_clear($1);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $0;
 _free($4);
 STACKTOP = sp;return;
}
function _msg_queue_clear($queue) {
 $queue = $queue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $queue;
 $i = 1;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $i;
   $13 = $0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($12<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   _free($18);
   $19 = $i;
   $20 = $0;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($19<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   _free($23);
   $24 = $i;
   $25 = $0;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($24<<2)|0);
   HEAP32[$27>>2] = 0;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $0;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 1;
 $32 = $0;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 _free($34);
 $35 = $0;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return;
}
function _msg_queue_push($queue,$msg,$prio,$duration) {
 $queue = $queue|0;
 $msg = $msg|0;
 $prio = $prio|0;
 $duration = $duration|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $child = 0, $new_elem = 0, $parent = 0, $tmp_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $queue;
 $1 = $msg;
 $2 = $prio;
 $3 = $duration;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)>=($9>>>0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (_calloc(1,12)|0);
 $new_elem = $11;
 $12 = $2;
 $13 = $new_elem;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = $3;
 $16 = $new_elem;
 HEAP32[$16>>2] = $15;
 $17 = $1;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $1;
  $20 = (___strdup($19)|0);
  $23 = $20;
 } else {
  $23 = 0;
 }
 $21 = $new_elem;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $23;
 $24 = $new_elem;
 $25 = $0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($27<<2)|0);
 HEAP32[$30>>2] = $24;
 $31 = $0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[$32>>2] = $34;
 $tmp_ptr = $33;
 while(1) {
  $35 = $tmp_ptr;
  $36 = ($35>>>0)>(1);
  if (!($36)) {
   label = 8;
   break;
  }
  $37 = $tmp_ptr;
  $38 = $37 >>> 1;
  $39 = $0;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($38<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $parent = $42;
  $43 = $tmp_ptr;
  $44 = $0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($43<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $child = $47;
  $48 = $child;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $parent;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50>>>0)<=($53>>>0);
  if ($54) {
   label = 8;
   break;
  }
  $55 = $child;
  $56 = $tmp_ptr;
  $57 = $56 >>> 1;
  $58 = $0;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($57<<2)|0);
  HEAP32[$60>>2] = $55;
  $61 = $parent;
  $62 = $tmp_ptr;
  $63 = $0;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($62<<2)|0);
  HEAP32[$65>>2] = $61;
  $66 = $tmp_ptr;
  $67 = $66 >>> 1;
  $tmp_ptr = $67;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _msg_queue_pull($queue) {
 $queue = $queue|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $child = 0, $front = 0, $front1 = 0, $last = 0, $left = 0, $parent = 0, $right = 0, $switch_index = 0, $tmp_ptr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $queue;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $0 = 0;
  $150 = $0;
  STACKTOP = sp;return ($150|0);
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $front = $9;
 $10 = $front;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 HEAP32[$10>>2] = $12;
 $13 = $front;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)>(0);
 if ($15) {
  $16 = $front;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $0 = $18;
  $150 = $0;
  STACKTOP = sp;return ($150|0);
 }
 $19 = $1;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 _free($21);
 $22 = $front;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $1;
 $26 = ((($25)) + 12|0);
 HEAP32[$26>>2] = $24;
 $27 = $front;
 $28 = ((($27)) + 8|0);
 HEAP32[$28>>2] = 0;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $front1 = $32;
 $33 = $1;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + -1)|0;
 HEAP32[$34>>2] = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($36<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $last = $40;
 $41 = $last;
 $42 = $1;
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $41;
 $45 = $front1;
 _free($45);
 $tmp_ptr = 1;
 while(1) {
  $46 = $tmp_ptr;
  $47 = $46<<1;
  $48 = $1;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47>>>0)<=($50>>>0);
  if ($51) {
   $52 = $tmp_ptr;
   $53 = $1;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($52<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $tmp_ptr;
   $58 = $57<<1;
   $59 = $1;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($58<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($56>>>0)<($62>>>0);
   $65 = $63;
  } else {
   $65 = 0;
  }
  $64 = $65&1;
  $left = $64;
  $66 = $tmp_ptr;
  $67 = $66<<1;
  $68 = (($67) + 1)|0;
  $69 = $1;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($68>>>0)<=($71>>>0);
  if ($72) {
   $73 = $tmp_ptr;
   $74 = $1;
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($73<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $tmp_ptr;
   $79 = $78<<1;
   $80 = (($79) + 1)|0;
   $81 = $1;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + ($80<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($77>>>0)<($84>>>0);
   $87 = $85;
  } else {
   $87 = 0;
  }
  $86 = $87&1;
  $right = $86;
  $88 = $left;
  $89 = $88&1;
  if (!($89)) {
   $90 = $right;
   $91 = $90&1;
   if (!($91)) {
    break;
   }
  }
  $92 = $tmp_ptr;
  $switch_index = $92;
  $93 = $left;
  $94 = $93&1;
  if ($94) {
   $95 = $right;
   $96 = $95&1;
   if ($96) {
    label = 15;
   } else {
    $97 = $switch_index;
    $98 = $97 << 1;
    $switch_index = $98;
   }
  } else {
   label = 15;
  }
  do {
   if ((label|0) == 15) {
    label = 0;
    $99 = $right;
    $100 = $99&1;
    if ($100) {
     $101 = $left;
     $102 = $101&1;
     if (!($102)) {
      $103 = $switch_index;
      $104 = (($103) + 1)|0;
      $105 = $switch_index;
      $106 = (($105) + ($104))|0;
      $switch_index = $106;
      break;
     }
    }
    $107 = $tmp_ptr;
    $108 = $107<<1;
    $109 = $1;
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($108<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $tmp_ptr;
    $114 = $113<<1;
    $115 = (($114) + 1)|0;
    $116 = $1;
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + ($115<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($112>>>0)>=($119>>>0);
    $121 = $switch_index;
    if ($120) {
     $122 = $121 << 1;
     $switch_index = $122;
     break;
    } else {
     $123 = (($121) + 1)|0;
     $124 = $switch_index;
     $125 = (($124) + ($123))|0;
     $switch_index = $125;
     break;
    }
   }
  } while(0);
  $126 = $tmp_ptr;
  $127 = $1;
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + ($126<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $parent = $130;
  $131 = $switch_index;
  $132 = $1;
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + ($131<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $child = $135;
  $136 = $child;
  $137 = $tmp_ptr;
  $138 = $1;
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) + ($137<<2)|0);
  HEAP32[$140>>2] = $136;
  $141 = $parent;
  $142 = $switch_index;
  $143 = $1;
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + ($142<<2)|0);
  HEAP32[$145>>2] = $141;
  $146 = $switch_index;
  $tmp_ptr = $146;
 }
 $147 = $1;
 $148 = ((($147)) + 12|0);
 $149 = HEAP32[$148>>2]|0;
 $0 = $149;
 $150 = $0;
 STACKTOP = sp;return ($150|0);
}
function _state_manager_new($state_size,$buffer_size,$init_buffer) {
 $state_size = $state_size|0;
 $buffer_size = $buffer_size|0;
 $init_buffer = $init_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $state = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $state_size;
 $2 = $buffer_size;
 $3 = $init_buffer;
 $4 = $2;
 $5 = $1;
 $6 = $5<<2;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $8 = (_calloc(1,32)|0);
 $state = $8;
 $9 = $state;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $11 = $1;
 $12 = (($11>>>0) % 4)&-1;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = HEAP32[(259664)>>2]|0;
  $15 = ($14|0)!=(0|0);
  $16 = HEAP32[(259664)>>2]|0;
  $17 = HEAP32[544648>>2]|0;
  $18 = $15 ? $16 : $17;
  HEAP32[$vararg_buffer>>2] = 754627;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 73;
  (_fprintf($18,765794,$vararg_buffer)|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = ($19|0)!=(0|0);
  $21 = HEAP32[(259664)>>2]|0;
  $22 = HEAP32[544648>>2]|0;
  $23 = $20 ? $21 : $22;
  (_fflush($23)|0);
  _exit(2);
  // unreachable;
 }
 $24 = $state;
 $25 = ((($24)) + 16|0);
 HEAP32[$25>>2] = 1;
 $26 = $1;
 $27 = (($26>>>0) / 4)&-1;
 $28 = $state;
 $29 = ((($28)) + 24|0);
 HEAP32[$29>>2] = $27;
 $30 = $2;
 $31 = (_nearest_pow2_size($30)|0);
 $32 = (($31>>>0) / 8)&-1;
 $33 = $state;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = $32;
 $35 = $state;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) - 1)|0;
 $39 = $state;
 $40 = ((($39)) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = HEAP8[102648>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = HEAP32[(259664)>>2]|0;
  $44 = ($43|0)!=(0|0);
  $45 = HEAP32[(259664)>>2]|0;
  $46 = HEAP32[544648>>2]|0;
  $47 = $44 ? $45 : $46;
  $48 = $state;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 >>> 20;
  $52 = $51<<3;
  HEAP32[$vararg_buffer2>>2] = $52;
  (_fprintf($47,754636,$vararg_buffer2)|0);
  $53 = HEAP32[(259664)>>2]|0;
  $54 = ($53|0)!=(0|0);
  $55 = HEAP32[(259664)>>2]|0;
  $56 = HEAP32[544648>>2]|0;
  $57 = $54 ? $55 : $56;
  (_fflush($57)|0);
 }
 $58 = $state;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60<<3;
 $62 = (_calloc(1,$61)|0);
 $63 = $state;
 HEAP32[$63>>2] = $62;
 $64 = ($62|0)!=(0|0);
 if ($64) {
  $65 = $state;
  $66 = ((($65)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $67<<2;
  $69 = (_calloc(1,$68)|0);
  $70 = $state;
  $71 = ((($70)) + 12|0);
  HEAP32[$71>>2] = $69;
  $72 = ($69|0)!=(0|0);
  if ($72) {
   $73 = $state;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $3;
   $77 = $1;
   _memcpy(($75|0),($76|0),($77|0))|0;
   $78 = $state;
   $0 = $78;
   $87 = $0;
   STACKTOP = sp;return ($87|0);
  }
 }
 $79 = $state;
 $80 = ($79|0)!=(0|0);
 if ($80) {
  $81 = $state;
  $82 = HEAP32[$81>>2]|0;
  _free($82);
  $83 = $state;
  $84 = ((($83)) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
  $86 = $state;
  _free($86);
 }
 $0 = 0;
 $87 = $0;
 STACKTOP = sp;return ($87|0);
}
function _state_manager_free($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $state;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $0;
 _free($6);
 STACKTOP = sp;return;
}
function _state_manager_pop($state,$data) {
 $state = $state|0;
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr = 0, $xor_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $state;
 $2 = $data;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 HEAP32[$6>>2] = $5;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 $11 = $1;
 if ($10) {
  $12 = ((($11)) + 28|0);
  HEAP8[$12>>0] = 0;
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $109 = $$pre_trunc&1;
  STACKTOP = sp;return ($109|0);
 }
 $13 = ((($11)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $15 & $18;
 $20 = $1;
 $21 = ((($20)) + 16|0);
 HEAP32[$21>>2] = $19;
 $22 = $1;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $1;
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($24|0)==($27|0);
 if ($28) {
  $29 = $1;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  $33 = $1;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $32 & $35;
  $37 = $1;
  $38 = ((($37)) + 16|0);
  HEAP32[$38>>2] = $36;
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $109 = $$pre_trunc&1;
  STACKTOP = sp;return ($109|0);
 }
 while(1) {
  $39 = $1;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $1;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<3)|0);
  $45 = $44;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)!=(0);
  $52 = ($50|0)!=(0);
  $53 = $51 | $52;
  $54 = $1;
  $55 = ((($54)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $1;
  if (!($53)) {
   break;
  }
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($56<<3)|0);
  $60 = $59;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($60) + 4)|0;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $addr = $65;
  $66 = $1;
  $67 = ((($66)) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $1;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + ($68<<3)|0);
  $72 = $71;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $xor_ = $74;
  $78 = $xor_;
  $79 = $addr;
  $80 = $1;
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($79<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 ^ $78;
  HEAP32[$83>>2] = $85;
  $86 = $1;
  $87 = ((($86)) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) - 1)|0;
  $90 = $1;
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $89 & $92;
  $94 = $1;
  $95 = ((($94)) + 16|0);
  HEAP32[$95>>2] = $93;
 }
 $96 = ((($57)) + 20|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($56|0)==($97|0);
 if ($98) {
  $99 = $1;
  $100 = ((($99)) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + 1)|0;
  $103 = $1;
  $104 = ((($103)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $102 & $105;
  $107 = $1;
  $108 = ((($107)) + 16|0);
  HEAP32[$108>>2] = $106;
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $109 = $$pre_trunc&1;
  STACKTOP = sp;return ($109|0);
 } else {
  $$expand_i1_val6 = 1;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $109 = $$pre_trunc&1;
  STACKTOP = sp;return ($109|0);
 }
 return (0)|0;
}
function _state_manager_push($state,$data) {
 $state = $state|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $state;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 _generate_delta($2,$3);
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10<<2;
 _memcpy(($6|0),($7|0),($11|0))|0;
 $12 = $0;
 $13 = ((($12)) + 28|0);
 HEAP8[$13>>0] = 1;
 STACKTOP = sp;return 1;
}
function _nearest_pow2_size($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $next = 0, $orig = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = $1;
 $orig = $2;
 $3 = $1;
 $4 = (($3) + -1)|0;
 $1 = $4;
 $5 = $1;
 $6 = $5 >>> 1;
 $7 = $1;
 $8 = $7 | $6;
 $1 = $8;
 $9 = $1;
 $10 = $9 >>> 2;
 $11 = $1;
 $12 = $11 | $10;
 $1 = $12;
 $13 = $1;
 $14 = $13 >>> 4;
 $15 = $1;
 $16 = $15 | $14;
 $1 = $16;
 $17 = $1;
 $18 = $17 >>> 8;
 $19 = $1;
 $20 = $19 | $18;
 $1 = $20;
 $21 = $1;
 $22 = $21 >>> 16;
 $23 = $1;
 $24 = $23 | $22;
 $1 = $24;
 $25 = $1;
 $26 = (($25) + 1)|0;
 $1 = $26;
 $27 = $1;
 $next = $27;
 $28 = $1;
 $29 = $28 >>> 1;
 $prev = $29;
 $30 = $next;
 $31 = $orig;
 $32 = (($30) - ($31))|0;
 $33 = $orig;
 $34 = $prev;
 $35 = (($33) - ($34))|0;
 $36 = ($32>>>0)<($35>>>0);
 if ($36) {
  $37 = $next;
  $0 = $37;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 } else {
  $38 = $prev;
  $0 = $38;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _generate_delta($state,$data) {
 $state = $state|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $crossed = 0, $i = 0, $new_state = 0, $old_state = 0;
 var $xor_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 8|0;
 $xor_ = sp;
 $0 = $state;
 $1 = $data;
 $crossed = 0;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $old_state = $4;
 $5 = $1;
 $new_state = $5;
 $6 = $0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = $0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8<<3)|0);
 $13 = $12;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = $0;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & $19;
 HEAP32[$21>>2] = $23;
 $24 = $0;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($26|0)==($29|0);
 if ($30) {
  $crossed = 1;
 }
 $31 = $i;
 $32 = $31;
 HEAP32[$32>>2] = 0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 while(1) {
  $35 = $i;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = $0;
  $42 = ((($41)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($40>>>0)<(0);
  $45 = ($37>>>0)<($43>>>0);
  $46 = ($40|0)==(0);
  $47 = $46 & $45;
  $48 = $44 | $47;
  if (!($48)) {
   break;
  }
  $49 = $i;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = $old_state;
  $56 = (($55) + ($51<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $i;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = $new_state;
  $65 = (($64) + ($60<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $57 ^ $66;
  $68 = $xor_;
  $69 = $68;
  HEAP32[$69>>2] = $67;
  $70 = (($68) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = 0;
  $72 = $xor_;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($74|0)!=(0);
  $79 = ($77|0)!=(0);
  $80 = $78 | $79;
  if ($80) {
   $81 = $i;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = $xor_;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($87) + 4)|0;
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = $83 | $92;
   $94 = $0;
   $95 = ((($94)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $0;
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($96<<3)|0);
   $100 = $99;
   $101 = $100;
   HEAP32[$101>>2] = $89;
   $102 = (($100) + 4)|0;
   $103 = $102;
   HEAP32[$103>>2] = $93;
   $104 = $0;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 1)|0;
   $108 = $0;
   $109 = ((($108)) + 8|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $107 & $110;
   $112 = $0;
   $113 = ((($112)) + 16|0);
   HEAP32[$113>>2] = $111;
   $114 = $0;
   $115 = ((($114)) + 16|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $0;
   $118 = ((($117)) + 20|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($116|0)==($119|0);
   if ($120) {
    $crossed = 1;
   }
  }
  $121 = $i;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 4)|0;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (_i64Add(($123|0),($126|0),1,0)|0);
  $128 = tempRet0;
  $129 = $i;
  $130 = $129;
  HEAP32[$130>>2] = $127;
  $131 = (($129) + 4)|0;
  $132 = $131;
  HEAP32[$132>>2] = $128;
 }
 $133 = $crossed;
 $134 = $133&1;
 if (!($134)) {
  STACKTOP = sp;return;
 }
 $135 = $0;
 _reassign_bottom($135);
 STACKTOP = sp;return;
}
function _reassign_bottom($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $state;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4 & $7;
 $9 = $0;
 $10 = ((($9)) + 20|0);
 HEAP32[$10>>2] = $8;
 while(1) {
  $11 = $0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13<<3)|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)!=(0);
  $24 = ($22|0)!=(0);
  $25 = $23 | $24;
  if (!($25)) {
   break;
  }
  $26 = $0;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  $30 = $0;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $29 & $32;
  $34 = $0;
  $35 = ((($34)) + 20|0);
  HEAP32[$35>>2] = $33;
 }
 STACKTOP = sp;return;
}
function _bsv_movie_free($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  (_fclose($7)|0);
 }
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = $0;
 _free($14);
 STACKTOP = sp;return;
}
function _bsv_movie_get_input($handle,$input) {
 $handle = $handle|0;
 $input = $input|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $handle;
 $2 = $input;
 $3 = $2;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_fread($3,2,1,$5)|0);
 $7 = ($6|0)!=(1);
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $12 = $$pre_trunc&1;
  STACKTOP = sp;return ($12|0);
 } else {
  $8 = $2;
  $9 = HEAP16[$8>>1]|0;
  $10 = (_swap_if_big16($9)|0);
  $11 = $2;
  HEAP16[$11>>1] = $10;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $12 = $$pre_trunc&1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _bsv_movie_set_input($handle,$input) {
 $handle = $handle|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $0 = $handle;
 HEAP16[$1>>1] = $input;
 $2 = HEAP16[$1>>1]|0;
 $3 = (_swap_if_big16($2)|0);
 HEAP16[$1>>1] = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 (_fwrite($1,2,1,$5)|0);
 STACKTOP = sp;return;
}
function _bsv_movie_init($path,$type) {
 $path = $path|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $type;
 $3 = (_calloc(1,36)|0);
 $handle = $3;
 $4 = $handle;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $2;
 $7 = ($6|0)==(0);
 $8 = $handle;
 $9 = $1;
 if ($7) {
  $10 = (_init_playback($8,$9)|0);
  if ($10) {
   label = 6;
  }
 } else {
  $11 = (_init_record($8,$9)|0);
  if ($11) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $12 = (_calloc(1048576,4)|0);
  $13 = $handle;
  $14 = ((($13)) + 12|0);
  HEAP32[$14>>2] = $12;
  $15 = ($12|0)!=(0|0);
  if ($15) {
   $16 = $handle;
   $17 = ((($16)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $handle;
   $20 = ((($19)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$21>>2] = $18;
   $22 = $handle;
   $23 = ((($22)) + 16|0);
   HEAP32[$23>>2] = 1048575;
   $24 = $handle;
   $0 = $24;
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $25 = $handle;
 _bsv_movie_free($25);
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _bsv_movie_set_frame_start($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_ftell($2)|0);
 $4 = $0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($6<<2)|0);
 HEAP32[$10>>2] = $3;
 STACKTOP = sp;return;
}
function _bsv_movie_set_frame_end($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = $0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4 & $7;
 $9 = $0;
 $10 = ((($9)) + 20|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = ((($11)) + 33|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 $15 = $14 ^ 1;
 $16 = $0;
 $17 = ((($16)) + 32|0);
 $18 = $15&1;
 HEAP8[$17>>0] = $18;
 $19 = $0;
 $20 = ((($19)) + 33|0);
 HEAP8[$20>>0] = 0;
 STACKTOP = sp;return;
}
function _bsv_movie_frame_rewind($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = ((($1)) + 33|0);
 HEAP8[$2>>0] = 1;
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<=(1);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)==($13|0);
  if ($14) {
   $15 = $0;
   $16 = ((($15)) + 20|0);
   HEAP32[$16>>2] = 0;
   $17 = $0;
   $18 = HEAP32[$17>>2]|0;
   $19 = $0;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   (_fseek($18,$21,0)|0);
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $22 = $0;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  $26 = ((($25)) + 32|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&1;
  $29 = $28 ? 1 : 2;
  $30 = (($24) - ($29))|0;
  $31 = $0;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $30 & $33;
  $35 = $0;
  $36 = ((($35)) + 20|0);
  HEAP32[$36>>2] = $34;
  $37 = $0;
  $38 = HEAP32[$37>>2]|0;
  $39 = $0;
  $40 = ((($39)) + 20|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $0;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($41<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  (_fseek($38,$46,0)|0);
 }
 $47 = $0;
 $48 = HEAP32[$47>>2]|0;
 $49 = (_ftell($48)|0);
 $50 = $0;
 $51 = ((($50)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($49|0)<=($52|0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = $0;
 $55 = ((($54)) + 24|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&1;
 $58 = $0;
 $59 = HEAP32[$58>>2]|0;
 if ($57) {
  $75 = $0;
  $76 = ((($75)) + 28|0);
  $77 = HEAP32[$76>>2]|0;
  (_fseek($59,$77,0)|0);
  STACKTOP = sp;return;
 } else {
  (_fseek($59,16,0)|0);
  $60 = HEAP32[265108>>2]|0;
  $61 = $0;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $0;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  (FUNCTION_TABLE_iii[$60 & 511]($63,$66)|0);
  $67 = $0;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $0;
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $0;
  $74 = HEAP32[$73>>2]|0;
  (_fwrite($69,1,$72,$74)|0);
  STACKTOP = sp;return;
 }
}
function _swap_if_big16($val) {
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $val;
 $2 = (_is_little_endian831()|0);
 $3 = ($2<<24>>24)!=(0);
 $4 = $1;
 if ($3) {
  $0 = $4;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $5 = $4&65535;
  $6 = $5 >> 8;
  $7 = $1;
  $8 = $7&65535;
  $9 = $8 << 8;
  $10 = $6 | $9;
  $11 = $10&65535;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _init_playback($handle,$path) {
 $handle = $handle|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val18 = 0, $$expand_i1_val20 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $header = 0, $state_size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 72|0;
 $header = sp + 48|0;
 $1 = $handle;
 $2 = $path;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 HEAP8[$4>>0] = 1;
 $5 = $2;
 $6 = (_fopen($5,840413)|0);
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $11 = HEAP32[(259664)>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = HEAP32[544648>>2]|0;
  $15 = $12 ? $13 : $14;
  $16 = $2;
  HEAP32[$vararg_buffer>>2] = $16;
  (_fprintf($15,754748,$vararg_buffer)|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  (_fflush($21)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $125 = $$pre_trunc&1;
  STACKTOP = sp;return ($125|0);
 }
 ;HEAP32[$header>>2]=0|0;HEAP32[$header+4>>2]=0|0;HEAP32[$header+8>>2]=0|0;HEAP32[$header+12>>2]=0|0;
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = (_fread($header,4,4,$23)|0);
 $25 = ($24|0)!=(4);
 if ($25) {
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  (_fprintf($30,754812,$vararg_buffer1)|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = HEAP32[(259664)>>2]|0;
  $34 = HEAP32[544648>>2]|0;
  $35 = $32 ? $33 : $34;
  (_fflush($35)|0);
  $$expand_i1_val12 = 0;
  HEAP8[$0>>0] = $$expand_i1_val12;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $125 = $$pre_trunc&1;
  STACKTOP = sp;return ($125|0);
 }
 $36 = HEAP32[$header>>2]|0;
 $37 = (_swap_if_little32($36)|0);
 $38 = ($37|0)!=(1112757809);
 if ($38) {
  $39 = HEAP32[$header>>2]|0;
  $40 = (_swap_if_big32($39)|0);
  $41 = ($40|0)!=(1112757809);
  if ($41) {
   $42 = HEAP32[(259664)>>2]|0;
   $43 = ($42|0)!=(0|0);
   $44 = HEAP32[(259664)>>2]|0;
   $45 = HEAP32[544648>>2]|0;
   $46 = $43 ? $44 : $45;
   (_fprintf($46,754862,$vararg_buffer3)|0);
   $47 = HEAP32[(259664)>>2]|0;
   $48 = ($47|0)!=(0|0);
   $49 = HEAP32[(259664)>>2]|0;
   $50 = HEAP32[544648>>2]|0;
   $51 = $48 ? $49 : $50;
   (_fflush($51)|0);
   $$expand_i1_val14 = 0;
   HEAP8[$0>>0] = $$expand_i1_val14;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $125 = $$pre_trunc&1;
   STACKTOP = sp;return ($125|0);
  }
 }
 $52 = ((($header)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (_swap_if_big32($53)|0);
 $55 = HEAP32[(106756)>>2]|0;
 $56 = ($54|0)!=($55|0);
 if ($56) {
  $57 = HEAP32[(259664)>>2]|0;
  $58 = ($57|0)!=(0|0);
  $59 = HEAP32[(259664)>>2]|0;
  $60 = HEAP32[544648>>2]|0;
  $61 = $58 ? $59 : $60;
  (_fprintf($61,754921,$vararg_buffer5)|0);
  $62 = HEAP32[(259664)>>2]|0;
  $63 = ($62|0)!=(0|0);
  $64 = HEAP32[(259664)>>2]|0;
  $65 = HEAP32[544648>>2]|0;
  $66 = $63 ? $64 : $65;
  (_fflush($66)|0);
 }
 $67 = ((($header)) + 12|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (_swap_if_big32($68)|0);
 $state_size = $69;
 $70 = $state_size;
 $71 = ($70|0)!=(0);
 do {
  if ($71) {
   $72 = $state_size;
   $73 = (_malloc($72)|0);
   $74 = $1;
   $75 = ((($74)) + 4|0);
   HEAP32[$75>>2] = $73;
   $76 = $state_size;
   $77 = $1;
   $78 = ((($77)) + 8|0);
   HEAP32[$78>>2] = $76;
   $79 = $1;
   $80 = ((($79)) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)!=(0|0);
   if (!($82)) {
    $$expand_i1_val16 = 0;
    HEAP8[$0>>0] = $$expand_i1_val16;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $125 = $$pre_trunc&1;
    STACKTOP = sp;return ($125|0);
   }
   $83 = $1;
   $84 = ((($83)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $state_size;
   $87 = $1;
   $88 = HEAP32[$87>>2]|0;
   $89 = (_fread($85,1,$86,$88)|0);
   $90 = $state_size;
   $91 = ($89|0)!=($90|0);
   if ($91) {
    $92 = HEAP32[(259664)>>2]|0;
    $93 = ($92|0)!=(0|0);
    $94 = HEAP32[(259664)>>2]|0;
    $95 = HEAP32[544648>>2]|0;
    $96 = $93 ? $94 : $95;
    (_fprintf($96,755073,$vararg_buffer7)|0);
    $97 = HEAP32[(259664)>>2]|0;
    $98 = ($97|0)!=(0|0);
    $99 = HEAP32[(259664)>>2]|0;
    $100 = HEAP32[544648>>2]|0;
    $101 = $98 ? $99 : $100;
    (_fflush($101)|0);
    $$expand_i1_val18 = 0;
    HEAP8[$0>>0] = $$expand_i1_val18;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $125 = $$pre_trunc&1;
    STACKTOP = sp;return ($125|0);
   }
   $102 = HEAP32[265104>>2]|0;
   $103 = (FUNCTION_TABLE_i[$102 & 511]()|0);
   $104 = $state_size;
   $105 = ($103|0)==($104|0);
   if ($105) {
    $106 = HEAP32[265112>>2]|0;
    $107 = $1;
    $108 = ((($107)) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $state_size;
    (FUNCTION_TABLE_iii[$106 & 511]($109,$110)|0);
    break;
   } else {
    $111 = HEAP32[(259664)>>2]|0;
    $112 = ($111|0)!=(0|0);
    $113 = HEAP32[(259664)>>2]|0;
    $114 = HEAP32[544648>>2]|0;
    $115 = $112 ? $113 : $114;
    (_fprintf($115,755127,$vararg_buffer9)|0);
    $116 = HEAP32[(259664)>>2]|0;
    $117 = ($116|0)!=(0|0);
    $118 = HEAP32[(259664)>>2]|0;
    $119 = HEAP32[544648>>2]|0;
    $120 = $117 ? $118 : $119;
    (_fflush($120)|0);
    break;
   }
  }
 } while(0);
 $121 = $state_size;
 $122 = (16 + ($121))|0;
 $123 = $1;
 $124 = ((($123)) + 28|0);
 HEAP32[$124>>2] = $122;
 $$expand_i1_val20 = 1;
 HEAP8[$0>>0] = $$expand_i1_val20;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $125 = $$pre_trunc&1;
 STACKTOP = sp;return ($125|0);
}
function _init_record($handle,$path) {
 $handle = $handle|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $state_size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $header = sp + 8|0;
 $1 = $handle;
 $2 = $path;
 $3 = $2;
 $4 = (_fopen($3,839734)|0);
 $5 = $1;
 HEAP32[$5>>2] = $4;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  $14 = $2;
  HEAP32[$vararg_buffer>>2] = $14;
  (_fprintf($13,754688,$vararg_buffer)|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = HEAP32[544648>>2]|0;
  $19 = $16 ? $17 : $18;
  (_fflush($19)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $59 = $$pre_trunc&1;
  STACKTOP = sp;return ($59|0);
 }
 ;HEAP32[$header>>2]=0|0;HEAP32[$header+4>>2]=0|0;HEAP32[$header+8>>2]=0|0;HEAP32[$header+12>>2]=0|0;
 $20 = (_swap_if_little32(1112757809)|0);
 HEAP32[$header>>2] = $20;
 $21 = HEAP32[(106756)>>2]|0;
 $22 = (_swap_if_big32($21)|0);
 $23 = ((($header)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[265104>>2]|0;
 $25 = (FUNCTION_TABLE_i[$24 & 511]()|0);
 $state_size = $25;
 $26 = $state_size;
 $27 = (_swap_if_big32($26)|0);
 $28 = ((($header)) + 12|0);
 HEAP32[$28>>2] = $27;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 (_fwrite($header,4,4,$30)|0);
 $31 = $state_size;
 $32 = (16 + ($31))|0;
 $33 = $1;
 $34 = ((($33)) + 28|0);
 HEAP32[$34>>2] = $32;
 $35 = $state_size;
 $36 = $1;
 $37 = ((($36)) + 8|0);
 HEAP32[$37>>2] = $35;
 $38 = $state_size;
 $39 = ($38|0)!=(0);
 do {
  if ($39) {
   $40 = $state_size;
   $41 = (_malloc($40)|0);
   $42 = $1;
   $43 = ((($42)) + 4|0);
   HEAP32[$43>>2] = $41;
   $44 = $1;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(0|0);
   if ($47) {
    $48 = HEAP32[265108>>2]|0;
    $49 = $1;
    $50 = ((($49)) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $state_size;
    (FUNCTION_TABLE_iii[$48 & 511]($51,$52)|0);
    $53 = $1;
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $state_size;
    $57 = $1;
    $58 = HEAP32[$57>>2]|0;
    (_fwrite($55,1,$56,$58)|0);
    break;
   }
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $59 = $$pre_trunc&1;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $59 = $$pre_trunc&1;
 STACKTOP = sp;return ($59|0);
}
function _is_little_endian831() {
 var $0 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp;
 HEAP16[$u>>1] = 1;
 $0 = HEAP8[$u>>0]|0;
 STACKTOP = sp;return ($0|0);
}
function _swap_if_little32($val) {
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $val;
 $2 = (_is_little_endian831()|0);
 $3 = ($2<<24>>24)!=(0);
 $4 = $1;
 if ($3) {
  $5 = $4 >>> 24;
  $6 = $1;
  $7 = $6 >>> 8;
  $8 = $7 & 65280;
  $9 = $5 | $8;
  $10 = $1;
  $11 = $10 << 8;
  $12 = $11 & 16711680;
  $13 = $9 | $12;
  $14 = $1;
  $15 = $14 << 24;
  $16 = $13 | $15;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $0 = $4;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _swap_if_big32($val) {
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $val;
 $2 = (_is_little_endian831()|0);
 $3 = ($2<<24>>24)!=(0);
 $4 = $1;
 if ($3) {
  $0 = $4;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $5 = $4 >>> 24;
  $6 = $1;
  $7 = $6 >>> 8;
  $8 = $7 & 65280;
  $9 = $5 | $8;
  $10 = $1;
  $11 = $10 << 8;
  $12 = $11 & 16711680;
  $13 = $9 | $12;
  $14 = $1;
  $15 = $14 << 24;
  $16 = $13 | $15;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _gfx_get_fps($buf,$size,$always_write) {
 $buf = $buf|0;
 $size = $size|0;
 $always_write = $always_write|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $new_time = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, $write_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 56|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $new_time = sp;
 $0 = $buf;
 $1 = $size;
 $3 = $always_write&1;
 $2 = $3;
 $ret = 0;
 $4 = $0;
 HEAP8[$4>>0] = 0;
 $5 = (_rarch_get_time_usec()|0);
 $6 = tempRet0;
 $7 = $new_time;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = HEAP32[(259432)>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $94 = $new_time;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($94) + 4)|0;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = 264104;
  $101 = $100;
  HEAP32[$101>>2] = $96;
  $102 = (($100) + 4)|0;
  $103 = $102;
  HEAP32[$103>>2] = $99;
  $104 = 264112;
  $105 = $104;
  HEAP32[$105>>2] = $96;
  $106 = (($104) + 4)|0;
  $107 = $106;
  HEAP32[$107>>2] = $99;
  $108 = $0;
  $109 = $1;
  HEAP32[$vararg_buffer8>>2] = (259436);
  (_snprintf($108,$109,768042,$vararg_buffer8)|0);
  $ret = 1;
  $110 = $ret;
  $111 = $110&1;
  STACKTOP = sp;return ($111|0);
 }
 $13 = (250976);
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_i64Add(($15|0),($18|0),1,0)|0);
 $20 = tempRet0;
 $21 = (250976);
 $22 = $21;
 HEAP32[$22>>2] = $19;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $20;
 $25 = $15 & 2047;
 $write_index = $25;
 $26 = $new_time;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = 264104;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (_i64Subtract(($28|0),($31|0),($34|0),($37|0))|0);
 $39 = tempRet0;
 $40 = $write_index;
 $41 = ((234592) + ($40<<3)|0);
 $42 = $41;
 $43 = $42;
 HEAP32[$43>>2] = $38;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $39;
 $46 = $new_time;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = 264104;
 $53 = $52;
 HEAP32[$53>>2] = $48;
 $54 = (($52) + 4)|0;
 $55 = $54;
 HEAP32[$55>>2] = $51;
 $56 = HEAP32[(259432)>>2]|0;
 $57 = (($56>>>0) % 256)&-1;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = 264112;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($59) + 4)|0;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = $new_time;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (+_time_to_fps($61,$64,$67,$70,256));
  HEAPF32[265784>>2] = $71;
  $72 = $new_time;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = 264112;
  $79 = $78;
  HEAP32[$79>>2] = $74;
  $80 = (($78) + 4)|0;
  $81 = $80;
  HEAP32[$81>>2] = $77;
  $82 = $0;
  $83 = $1;
  $84 = +HEAPF32[265784>>2];
  $85 = $84;
  $86 = HEAP32[(259432)>>2]|0;
  HEAP32[$vararg_buffer>>2] = (259436);
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $85;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr2>>2] = $86;
  (_snprintf($82,$83,755358,$vararg_buffer)|0);
  $ret = 1;
  $110 = $ret;
  $111 = $110&1;
  STACKTOP = sp;return ($111|0);
 }
 $87 = $2;
 $88 = $87&1;
 if (!($88)) {
  $110 = $ret;
  $111 = $110&1;
  STACKTOP = sp;return ($111|0);
 }
 $89 = $0;
 $90 = $1;
 $91 = +HEAPF32[265784>>2];
 $92 = $91;
 $93 = HEAP32[(259432)>>2]|0;
 HEAP32[$vararg_buffer3>>2] = (259436);
 $vararg_ptr6 = ((($vararg_buffer3)) + 8|0);
 HEAPF64[$vararg_ptr6>>3] = $92;
 $vararg_ptr7 = ((($vararg_buffer3)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $93;
 (_snprintf($89,$90,755358,$vararg_buffer3)|0);
 $110 = $ret;
 $111 = $110&1;
 STACKTOP = sp;return ($111|0);
}
function _gfx_scale_integer($vp,$width,$height,$aspect_ratio,$keep_aspect) {
 $vp = $vp|0;
 $width = $width|0;
 $height = $height|0;
 $aspect_ratio = +$aspect_ratio;
 $keep_aspect = $keep_aspect|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $base_height = 0, $base_width = 0, $custom = 0, $max_scale = 0, $padding_x = 0, $padding_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vp;
 $1 = $width;
 $2 = $height;
 $3 = $aspect_ratio;
 $5 = $keep_aspect&1;
 $4 = $5;
 $padding_x = 0;
 $padding_y = 0;
 $6 = HEAP32[(336)>>2]|0;
 $7 = ($6|0)==(7);
 if ($7) {
  $custom = (259612);
  $8 = $1;
  $9 = $custom;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($8) - ($11))|0;
  $padding_x = $12;
  $13 = $2;
  $14 = $custom;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13) - ($16))|0;
  $padding_y = $17;
  $18 = $custom;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $1 = $20;
  $21 = $custom;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $2 = $23;
  $73 = $1;
  $74 = $0;
  $75 = ((($74)) + 8|0);
  HEAP32[$75>>2] = $73;
  $76 = $2;
  $77 = $0;
  $78 = ((($77)) + 12|0);
  HEAP32[$78>>2] = $76;
  $79 = $padding_x;
  $80 = (($79|0) / 2)&-1;
  $81 = $0;
  HEAP32[$81>>2] = $80;
  $82 = $padding_y;
  $83 = (($82|0) / 2)&-1;
  $84 = $0;
  $85 = ((($84)) + 4|0);
  HEAP32[$85>>2] = $83;
  STACKTOP = sp;return;
 }
 $24 = HEAP32[(196932)>>2]|0;
 $base_height = $24;
 $25 = $base_height;
 $26 = (+($25>>>0));
 $27 = $3;
 $28 = $26 * $27;
 $29 = (+_roundf($28));
 $30 = (~~(($29))>>>0);
 $base_width = $30;
 $31 = $1;
 $32 = $base_width;
 $33 = ($31>>>0)>=($32>>>0);
 do {
  if ($33) {
   $34 = $2;
   $35 = $base_height;
   $36 = ($34>>>0)>=($35>>>0);
   if ($36) {
    $37 = $4;
    $38 = $37&1;
    $39 = $1;
    $40 = $base_width;
    if (!($38)) {
     $63 = (($39>>>0) % ($40>>>0))&-1;
     $padding_x = $63;
     $64 = $2;
     $65 = $base_height;
     $66 = (($64>>>0) % ($65>>>0))&-1;
     $padding_y = $66;
     break;
    }
    $41 = (($39>>>0) / ($40>>>0))&-1;
    $42 = $2;
    $43 = $base_height;
    $44 = (($42>>>0) / ($43>>>0))&-1;
    $45 = ($41>>>0)<($44>>>0);
    if ($45) {
     $46 = $1;
     $47 = $base_width;
     $48 = (($46>>>0) / ($47>>>0))&-1;
     $52 = $48;
    } else {
     $49 = $2;
     $50 = $base_height;
     $51 = (($49>>>0) / ($50>>>0))&-1;
     $52 = $51;
    }
    $max_scale = $52;
    $53 = $1;
    $54 = $base_width;
    $55 = $max_scale;
    $56 = Math_imul($54, $55)|0;
    $57 = (($53) - ($56))|0;
    $padding_x = $57;
    $58 = $2;
    $59 = $base_height;
    $60 = $max_scale;
    $61 = Math_imul($59, $60)|0;
    $62 = (($58) - ($61))|0;
    $padding_y = $62;
   }
  }
 } while(0);
 $67 = $padding_x;
 $68 = $1;
 $69 = (($68) - ($67))|0;
 $1 = $69;
 $70 = $padding_y;
 $71 = $2;
 $72 = (($71) - ($70))|0;
 $2 = $72;
 $73 = $1;
 $74 = $0;
 $75 = ((($74)) + 8|0);
 HEAP32[$75>>2] = $73;
 $76 = $2;
 $77 = $0;
 $78 = ((($77)) + 12|0);
 HEAP32[$78>>2] = $76;
 $79 = $padding_x;
 $80 = (($79|0) / 2)&-1;
 $81 = $0;
 HEAP32[$81>>2] = $80;
 $82 = $padding_y;
 $83 = (($82|0) / 2)&-1;
 $84 = $0;
 $85 = ((($84)) + 4|0);
 HEAP32[$85>>2] = $83;
 STACKTOP = sp;return;
}
function _gfx_set_square_pixel_viewport($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aspect_x = 0, $aspect_y = 0;
 var $highest = 0, $i = 0, $len = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $width;
 $1 = $height;
 $2 = $0;
 $3 = ($2|0)==(0);
 $4 = $1;
 $5 = ($4|0)==(0);
 $or$cond = $3 | $5;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 $8 = ($6>>>0)<($7>>>0);
 $9 = $0;
 $10 = $1;
 $11 = $8 ? $9 : $10;
 $len = $11;
 $highest = 1;
 $i = 1;
 while(1) {
  $12 = $i;
  $13 = $len;
  $14 = ($12>>>0)<($13>>>0);
  $15 = $0;
  if (!($14)) {
   break;
  }
  $16 = $i;
  $17 = (($15>>>0) % ($16>>>0))&-1;
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = $1;
   $20 = $i;
   $21 = (($19>>>0) % ($20>>>0))&-1;
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = $i;
    $highest = $23;
   }
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = $highest;
 $27 = (($15>>>0) / ($26>>>0))&-1;
 $aspect_x = $27;
 $28 = $1;
 $29 = $highest;
 $30 = (($28>>>0) / ($29>>>0))&-1;
 $aspect_y = $30;
 $31 = $aspect_x;
 $32 = $aspect_y;
 HEAP32[$vararg_buffer>>2] = $31;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $32;
 (_snprintf((265580),64,755389,$vararg_buffer)|0);
 $33 = $aspect_x;
 $34 = (+($33>>>0));
 $35 = $aspect_y;
 $36 = (+($35>>>0));
 $37 = $34 / $36;
 HEAPF32[(265644)>>2] = $37;
 STACKTOP = sp;return;
}
function _gfx_set_core_viewport() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $geom = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP8[(259668)>>0]|0;
 $1 = $0&1;
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $geom = (196928);
 $2 = $geom;
 $3 = ((($2)) + 16|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4 > 0.0;
 $6 = $geom;
 if ($5) {
  $7 = ((($6)) + 16|0);
  $8 = +HEAPF32[$7>>2];
  HEAPF32[(265712)>>2] = $8;
  STACKTOP = sp;return;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (+($9>>>0));
  $11 = $geom;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (+($13>>>0));
  $15 = $10 / $14;
  HEAPF32[(265712)>>2] = $15;
  STACKTOP = sp;return;
 }
}
function _gfx_set_config_viewport() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $geom = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = +HEAPF32[(328)>>2];
 $1 = $0 < 0.0;
 if (!($1)) {
  $19 = +HEAPF32[(328)>>2];
  HEAPF32[(265576)>>2] = $19;
  STACKTOP = sp;return;
 }
 $geom = (196928);
 $2 = $geom;
 $3 = ((($2)) + 16|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4 > 0.0;
 if ($5) {
  $6 = HEAP8[(332)>>0]|0;
  $7 = $6&1;
  if ($7) {
   $8 = $geom;
   $9 = ((($8)) + 16|0);
   $10 = +HEAPF32[$9>>2];
   HEAPF32[(265576)>>2] = $10;
   STACKTOP = sp;return;
  }
 }
 $11 = $geom;
 $12 = HEAP32[$11>>2]|0;
 $13 = (+($12>>>0));
 $14 = $geom;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (+($16>>>0));
 $18 = $13 / $17;
 HEAPF32[(265576)>>2] = $18;
 STACKTOP = sp;return;
}
function _time_to_fps($0,$1,$2,$3,$frames) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $frames = $frames|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $5 = sp;
 $7 = $4;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = $5;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $3;
 $6 = $frames;
 $15 = $6;
 $16 = (+($15|0));
 $17 = 1.0E+6 * $16;
 $18 = $5;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (_i64Subtract(($20|0),($23|0),($26|0),($29|0))|0);
 $31 = tempRet0;
 $32 = (+($30>>>0)) + (4294967296.0*(+($31|0)));
 $33 = $17 / $32;
 STACKTOP = sp;return (+$33);
}
function _input_init_keyboard_lut($map) {
 $map = $map|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $map;
 _memset((268152|0),0,1292)|0;
 while(1) {
  $1 = $0;
  $2 = ((($1)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = $0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (268152 + ($9<<2)|0);
  HEAP32[$10>>2] = $6;
  $11 = $0;
  $12 = ((($11)) + 8|0);
  $0 = $12;
 }
 STACKTOP = sp;return;
}
function _input_translate_rk_to_keysym($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $1 = $0;
 $2 = (268152 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _input_config_parse_key($conf,$prefix,$btn,$bind) {
 $conf = $conf|0;
 $prefix = $prefix|0;
 $btn = $btn|0;
 $bind = $bind|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 88|0;
 $key = sp + 24|0;
 $0 = $conf;
 $1 = $prefix;
 $2 = $btn;
 $3 = $bind;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_snprintf($key,64,755405,$vararg_buffer)|0);
 $6 = $0;
 $7 = (_config_get_array($6,$key,$tmp,64)|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (_find_sk_key($tmp)|0);
 $9 = $3;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _input_config_get_prefix($player,$meta) {
 $player = $player|0;
 $meta = $meta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $player;
 $3 = $meta&1;
 $2 = $3;
 $4 = $1;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = $2;
   $7 = $6&1;
   if ($7) {
    $11 = 755411;
   } else {
    $8 = $1;
    $9 = (269444 + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10;
   }
   $0 = $11;
  } else {
   $12 = $1;
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = $2;
    $15 = $14&1;
    if (!($15)) {
     $16 = $1;
     $17 = (269444 + ($16<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $0 = $18;
     break;
    }
   }
   $0 = 0;
  }
 } while(0);
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _input_config_parse_joy_button($conf,$prefix,$btn,$bind) {
 $conf = $conf|0;
 $prefix = $prefix|0;
 $btn = $btn|0;
 $bind = $bind|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $btn1 = 0, $key = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 96|0;
 $key = sp + 32|0;
 $0 = $conf;
 $1 = $prefix;
 $2 = $btn;
 $3 = $bind;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_snprintf($key,64,755417,$vararg_buffer)|0);
 $6 = $0;
 $7 = (_config_get_array($6,$key,$tmp,64)|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $btn1 = $tmp;
 $8 = $btn1;
 $9 = (_strcmp($8,755427)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 16|0);
  $13 = $12;
  $14 = $13;
  HEAP32[$14>>2] = 65535;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 }
 $17 = $btn1;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = ($19|0)==(104);
 if ($20) {
  $21 = $3;
  $22 = $btn1;
  $23 = ((($22)) + 1|0);
  _parse_hat($21,$23);
  STACKTOP = sp;return;
 } else {
  $24 = (_strtoull($tmp,0,0)|0);
  $25 = tempRet0;
  $26 = $3;
  $27 = ((($26)) + 16|0);
  $28 = $27;
  $29 = $28;
  HEAP32[$29>>2] = $24;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _input_config_parse_joy_axis($conf,$prefix,$axis,$bind) {
 $conf = $conf|0;
 $prefix = $prefix|0;
 $axis = $axis|0;
 $bind = $bind|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $axis1 = 0, $key = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 96|0;
 $key = sp + 32|0;
 $0 = $conf;
 $1 = $prefix;
 $2 = $axis;
 $3 = $bind;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_snprintf($key,64,755431,$vararg_buffer)|0);
 $6 = $0;
 $7 = (_config_get_array($6,$key,$tmp,64)|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (_strcmp($tmp,755427)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $3;
  $11 = ((($10)) + 32|0);
  HEAP32[$11>>2] = -1;
  STACKTOP = sp;return;
 }
 $12 = (_strlen($tmp)|0);
 $13 = ($12>>>0)>=(2);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP8[$tmp>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(43);
 if (!($16)) {
  $17 = HEAP8[$tmp>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)==(45);
  if (!($19)) {
   STACKTOP = sp;return;
  }
 }
 $20 = ((($tmp)) + 1|0);
 $21 = (_strtol($20,0,0)|0);
 $axis1 = $21;
 $22 = HEAP8[$tmp>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)==(43);
 $25 = $axis1;
 if ($24) {
  $26 = $25 | -65536;
  $27 = $3;
  $28 = ((($27)) + 32|0);
  HEAP32[$28>>2] = $26;
  STACKTOP = sp;return;
 } else {
  $29 = $25 << 16;
  $30 = $29 | 65535;
  $31 = $3;
  $32 = ((($31)) + 32|0);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return;
 }
}
function _find_sk_key($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $str;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = (_isalpha($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $1;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = (_tolower($12)|0);
   $14 = (($13) - 97)|0;
   $15 = (97 + ($14))|0;
   $0 = $15;
   $18 = $0;
   STACKTOP = sp;return ($18|0);
  }
 }
 $16 = $1;
 $17 = (_find_sk_bind($16)|0);
 $0 = $17;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _parse_hat($bind,$str) {
 $bind = $bind|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dir = 0, $hat = 0, $hat_dir = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dir = sp + 4|0;
 $0 = $bind;
 $1 = $str;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_isdigit($4)|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 HEAP32[$dir>>2] = 0;
 $7 = $1;
 $8 = (_strtoul($7,$dir,0)|0);
 $9 = $8&65535;
 $hat = $9;
 $hat_dir = 0;
 $10 = HEAP32[$dir>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $12 = HEAP32[(259664)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = HEAP32[544648>>2]|0;
  $16 = $13 ? $14 : $15;
  (_fprintf($16,756751,$vararg_buffer)|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  (_fflush($21)|0);
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$dir>>2]|0;
 $23 = (_strcasecmp($22,757842)|0);
 $24 = ($23|0)==(0);
 do {
  if ($24) {
   $hat_dir = -32768;
  } else {
   $25 = HEAP32[$dir>>2]|0;
   $26 = (_strcasecmp($25,757845)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $hat_dir = 16384;
    break;
   }
   $28 = HEAP32[$dir>>2]|0;
   $29 = (_strcasecmp($28,757850)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $hat_dir = 8192;
    break;
   }
   $31 = HEAP32[$dir>>2]|0;
   $32 = (_strcasecmp($31,757855)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $hat_dir = 4096;
   }
  }
 } while(0);
 $34 = $hat_dir;
 $35 = ($34<<16>>16)!=(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $hat;
 $37 = $36&65535;
 $38 = $37 & 4095;
 $39 = $hat_dir;
 $40 = $39&65535;
 $41 = $38 | $40;
 $42 = ($41|0)<(0);
 $43 = $42 << 31 >> 31;
 $44 = $0;
 $45 = ((($44)) + 16|0);
 $46 = $45;
 $47 = $46;
 HEAP32[$47>>2] = $41;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $43;
 STACKTOP = sp;return;
}
function _find_sk_bind($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $str;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = (267608 + ($2<<3)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $i;
  $7 = (267608 + ($6<<3)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = (_strcasecmp($8,$9)|0);
  $11 = ($10|0)==(0);
  $12 = $i;
  if ($11) {
   label = 4;
   break;
  }
  $16 = (($12) + 1)|0;
  $i = $16;
 }
 if ((label|0) == 4) {
  $13 = (267608 + ($12<<3)|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _rwebinput_input_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rwebinput = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_calloc(1,48)|0);
 $rwebinput = $1;
 $2 = $rwebinput;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = (_RWebInputInit()|0);
   $5 = $rwebinput;
   $6 = ((($5)) + 44|0);
   HEAP32[$6>>2] = $4;
   $7 = $rwebinput;
   $8 = ((($7)) + 44|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(0);
   if ($10) {
    _input_init_keyboard_lut(265788);
    $12 = $rwebinput;
    $0 = $12;
    break;
   } else {
    $11 = $rwebinput;
    _free($11);
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _rwebinput_input_poll($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $rwebinput = 0, $state = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $rwebinput = $1;
 $2 = $rwebinput;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_RWebInputPoll(($4|0))|0);
 $state = $5;
 $6 = $rwebinput;
 $7 = $state;
 dest=$6; src=$7; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rwebinput_input_state($data,$binds,$port,$device,$index,$id) {
 $data = $data|0;
 $binds = $binds|0;
 $port = $port|0;
 $device = $device|0;
 $index = $index|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rwebinput = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $binds;
 $3 = $port;
 $4 = $device;
 $5 = $index;
 $6 = $id;
 $7 = $1;
 $rwebinput = $7;
 $8 = $4;
 switch ($8|0) {
 case 1:  {
  $9 = $rwebinput;
  $10 = $3;
  $11 = $2;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $6;
  $15 = (_rwebinput_is_pressed($9,$13,$14)|0);
  $16 = $15&1;
  $0 = $16;
  break;
 }
 case 3:  {
  $17 = $rwebinput;
  $18 = $6;
  $19 = (_rwebinput_key_pressed($17,$18)|0);
  $20 = $19&1;
  $0 = $20;
  break;
 }
 case 2:  {
  $21 = $rwebinput;
  $22 = $6;
  $23 = (_rwebinput_mouse_state($21,$22)|0);
  $0 = $23;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _rwebinput_is_pressed($rwebinput,$binds,$id) {
 $rwebinput = $rwebinput|0;
 $binds = $binds|0;
 $id = $id|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bind = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $rwebinput;
 $2 = $binds;
 $3 = $id;
 $4 = $3;
 $5 = ($4>>>0)<(56);
 if (!($5)) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $20 = $$pre_trunc&1;
  STACKTOP = sp;return ($20|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = (($7) + (($6*40)|0)|0);
 $bind = $8;
 $9 = $bind;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if ($11) {
  $12 = $1;
  $13 = $3;
  $14 = $2;
  $15 = (($14) + (($13*40)|0)|0);
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_rwebinput_key_pressed($12,$17)|0);
  $19 = $18;
 } else {
  $19 = 0;
 }
 $$expand_i1_val = $19&1;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function _rwebinput_key_pressed($rwebinput,$key) {
 $rwebinput = $rwebinput|0;
 $key = $key|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 13|0;
 $1 = $rwebinput;
 $2 = $key;
 $3 = $2;
 $4 = ($3|0)>=(323);
 if ($4) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $21 = $$pre_trunc&1;
  STACKTOP = sp;return ($21|0);
 } else {
  $5 = $2;
  $6 = (_input_translate_rk_to_keysym($5)|0);
  $sym = $6;
  $7 = $sym;
  $8 = $7 >>> 3;
  $9 = $1;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = $sym;
  $14 = $13 & 7;
  $15 = 1 << $14;
  $16 = $12 & $15;
  $17 = ($16|0)!=(0);
  $18 = $17&1;
  $ret = $18;
  $19 = $ret;
  $20 = $19&1;
  $$expand_i1_val2 = $20&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $21 = $$pre_trunc&1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _rwebinput_mouse_state($rwebinput,$id) {
 $rwebinput = $rwebinput|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $rwebinput;
 $2 = $id;
 $3 = $2;
 switch ($3|0) {
 case 0:  {
  $4 = $1;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&65535;
  $0 = $7;
  break;
 }
 case 1:  {
  $8 = $1;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10&65535;
  $0 = $11;
  break;
 }
 case 2:  {
  $12 = $1;
  $13 = ((($12)) + 40|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $0 = $15;
  break;
 }
 case 3:  {
  $16 = $1;
  $17 = ((($16)) + 41|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $0 = $19;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _rwebinput_bind_button_pressed($data,$key) {
 $data = $data|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $rwebinput = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $key;
 $2 = $0;
 $rwebinput = $2;
 $3 = $rwebinput;
 $4 = $1;
 $5 = (_rwebinput_is_pressed($3,(25128),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _rwebinput_input_free($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $rwebinput = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $rwebinput = $1;
 HEAP8[756913>>0] = 1;
 $2 = $rwebinput;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 _RWebInputDestroy(($4|0));
 $5 = $0;
 _free($5);
 STACKTOP = sp;return;
}
function _rwebinput_grab_mouse($data,$state) {
 $data = $data|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $2 = $state&1;
 $1 = $2;
 STACKTOP = sp;return;
}
function _core_option_free($opt) {
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $0;
  $5 = ((($4)) + 4104|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = ((($9)) + 4100|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<4)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $i;
  $15 = $0;
  $16 = ((($15)) + 4100|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<4)|0);
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
  $21 = $i;
  $22 = $0;
  $23 = ((($22)) + 4100|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<4)|0);
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  _string_list_free($27);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $0;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $0;
  $34 = HEAP32[$33>>2]|0;
  _config_file_free($34);
 }
 $35 = $0;
 $36 = ((($35)) + 4100|0);
 $37 = HEAP32[$36>>2]|0;
 _free($37);
 $38 = $0;
 _free($38);
 STACKTOP = sp;return;
}
function _core_option_get($opt,$var) {
 $opt = $opt|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $var;
 $2 = $0;
 $3 = ((($2)) + 4108|0);
 HEAP8[$3>>0] = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $0;
  $6 = ((($5)) + 4104|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $i;
  $10 = $0;
  $11 = ((($10)) + 4100|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9<<4)|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_strcmp($15,$17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   label = 4;
   break;
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 if ((label|0) == 4) {
  $20 = $0;
  $21 = $i;
  $22 = (_core_option_get_val($20,$21)|0);
  $23 = $1;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  $27 = $1;
  $28 = ((($27)) + 4|0);
  HEAP32[$28>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _core_option_get_val($opt,$index) {
 $opt = $opt|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $option = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $index;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<4)|0);
 $option = $6;
 $7 = $option;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $option;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($9<<3)|0);
 $15 = HEAP32[$14>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _core_option_new($conf_path,$vars) {
 $conf_path = $conf_path|0;
 $vars = $vars|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $opt = 0, $size = 0, $var = 0, $var1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $conf_path;
 $2 = $vars;
 $3 = (_calloc(1,4112)|0);
 $opt = $3;
 $4 = $opt;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $size = 0;
 $6 = $1;
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  $9 = $1;
  $10 = (_config_file_new($9)|0);
  $11 = $opt;
  HEAP32[$11>>2] = $10;
 }
 $12 = $opt;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = (_config_file_new(0)|0);
  $16 = $opt;
  HEAP32[$16>>2] = $15;
 }
 $17 = $opt;
 $18 = ((($17)) + 4|0);
 $19 = $1;
 (_strlcpy_rarch__($18,$19,4096)|0);
 $20 = $opt;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 L11: do {
  if ($22) {
   $23 = $2;
   $var = $23;
   while(1) {
    $24 = $var;
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0|0);
    if ($26) {
     $27 = $var;
     $28 = ((($27)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)!=(0|0);
     $63 = $30;
    } else {
     $63 = 0;
    }
    $31 = $size;
    if (!($63)) {
     break;
    }
    $32 = (($31) + 1)|0;
    $size = $32;
    $33 = $var;
    $34 = ((($33)) + 8|0);
    $var = $34;
   }
   $35 = (_calloc($31,16)|0);
   $36 = $opt;
   $37 = ((($36)) + 4100|0);
   HEAP32[$37>>2] = $35;
   $38 = $opt;
   $39 = ((($38)) + 4100|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $42 = $size;
    $43 = $opt;
    $44 = ((($43)) + 4104|0);
    HEAP32[$44>>2] = $42;
    $size = 0;
    $45 = $2;
    $var1 = $45;
    while(1) {
     $46 = $var1;
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)!=(0|0);
     if ($48) {
      $49 = $var1;
      $50 = ((($49)) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)!=(0|0);
      $64 = $52;
     } else {
      $64 = 0;
     }
     $53 = $opt;
     if (!($64)) {
      break;
     }
     $54 = $size;
     $55 = $var1;
     $56 = (_parse_variable($53,$54,$55)|0);
     if (!($56)) {
      break L11;
     }
     $57 = $size;
     $58 = (($57) + 1)|0;
     $size = $58;
     $59 = $var1;
     $60 = ((($59)) + 8|0);
     $var1 = $60;
    }
    $0 = $53;
    $62 = $0;
    STACKTOP = sp;return ($62|0);
   }
  }
 } while(0);
 $61 = $opt;
 _core_option_free($61);
 $0 = 0;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _core_option_updated($opt) {
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $0;
 $2 = ((($1)) + 4108|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _core_option_flush($opt) {
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $option = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = ((($2)) + 4104|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = ((($7)) + 4100|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($6<<4)|0);
  $option = $10;
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $option;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = $i;
  $18 = (_core_option_get_val($16,$17)|0);
  _config_set_string($12,$15,$18);
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = ((($23)) + 4|0);
 (_config_file_write($22,$24)|0);
 STACKTOP = sp;return;
}
function _core_option_size($opt) {
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $0;
 $2 = ((($1)) + 4104|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _core_option_get_desc($opt,$index) {
 $opt = $opt|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $index;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<4)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _core_option_next($opt,$index) {
 $opt = $opt|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $option = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $index;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<4)|0);
 $option = $6;
 $7 = $option;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = $option;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($10>>>0) % ($15>>>0))&-1;
 $17 = $option;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = $0;
 $20 = ((($19)) + 4108|0);
 HEAP8[$20>>0] = 1;
 STACKTOP = sp;return;
}
function _core_option_prev($opt,$index) {
 $opt = $opt|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $option = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $index;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<4)|0);
 $option = $6;
 $7 = $option;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $option;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($9) + ($14))|0;
 $16 = (($15) - 1)|0;
 $17 = $option;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($16>>>0) % ($21>>>0))&-1;
 $23 = $option;
 $24 = ((($23)) + 12|0);
 HEAP32[$24>>2] = $22;
 $25 = $0;
 $26 = ((($25)) + 4108|0);
 HEAP8[$26>>0] = 1;
 STACKTOP = sp;return;
}
function _core_option_set_default($opt,$index) {
 $opt = $opt|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opt;
 $1 = $index;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<4)|0);
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = ((($8)) + 4108|0);
 HEAP8[$9>>0] = 1;
 STACKTOP = sp;return;
}
function _parse_variable($opt,$index,$var) {
 $opt = $opt|0;
 $index = $index|0;
 $var = $var|0;
 var $$expand_i1_val = 0, $$expand_i1_val15 = 0, $$expand_i1_val17 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $config_val = 0, $desc_end = 0, $i = 0, $i1 = 0, $option = 0, $val_start = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 84|0;
 $config_val = sp + 52|0;
 $1 = $opt;
 $2 = $index;
 $3 = $var;
 $4 = $2;
 $5 = $1;
 $6 = ((($5)) + 4100|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<4)|0);
 $option = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = (___strdup($10)|0);
 $12 = $option;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (___strdup($16)|0);
 $value = $17;
 $18 = $value;
 $19 = (_strstr($18,756924)|0);
 $desc_end = $19;
 $20 = $desc_end;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $22 = $value;
  _free($22);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $163 = $$pre_trunc&1;
  STACKTOP = sp;return ($163|0);
 }
 $23 = $desc_end;
 HEAP8[$23>>0] = 0;
 $24 = $value;
 $25 = (___strdup($24)|0);
 $26 = $option;
 HEAP32[$26>>2] = $25;
 $27 = $desc_end;
 $28 = ((($27)) + 2|0);
 $val_start = $28;
 $29 = $val_start;
 $30 = (_string_split($29,776046)|0);
 $31 = $option;
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = $30;
 $33 = $option;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  $37 = $value;
  _free($37);
  $$expand_i1_val15 = 0;
  HEAP8[$0>>0] = $$expand_i1_val15;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $163 = $$pre_trunc&1;
  STACKTOP = sp;return ($163|0);
 }
 HEAP32[$config_val>>2] = 0;
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 $40 = $option;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (_config_get_string($39,$42,$config_val)|0);
 if ($43) {
  $i = 0;
  while(1) {
   $44 = $i;
   $45 = $option;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($44>>>0)<($49>>>0);
   if (!($50)) {
    break;
   }
   $51 = $i;
   $52 = $option;
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($51<<3)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$config_val>>2]|0;
   $59 = (_strcmp($57,$58)|0);
   $60 = ($59|0)==(0);
   $61 = $i;
   if ($60) {
    label = 9;
    break;
   }
   $64 = (($61) + 1)|0;
   $i = $64;
  }
  if ((label|0) == 9) {
   $62 = $option;
   $63 = ((($62)) + 12|0);
   HEAP32[$63>>2] = $61;
  }
  $65 = HEAP32[$config_val>>2]|0;
  _free($65);
 }
 $66 = $value;
 _free($66);
 $67 = HEAP8[102648>>0]|0;
 $68 = $67&1;
 if ($68) {
  $69 = HEAP32[(259664)>>2]|0;
  $70 = ($69|0)!=(0|0);
  $71 = HEAP32[(259664)>>2]|0;
  $72 = HEAP32[544648>>2]|0;
  $73 = $70 ? $71 : $72;
  (_fprintf($73,756927,$vararg_buffer)|0);
  $74 = HEAP32[(259664)>>2]|0;
  $75 = ($74|0)!=(0|0);
  $76 = HEAP32[(259664)>>2]|0;
  $77 = HEAP32[544648>>2]|0;
  $78 = $75 ? $76 : $77;
  (_fflush($78)|0);
 }
 $79 = HEAP8[102648>>0]|0;
 $80 = $79&1;
 if ($80) {
  $81 = HEAP32[(259664)>>2]|0;
  $82 = ($81|0)!=(0|0);
  $83 = HEAP32[(259664)>>2]|0;
  $84 = HEAP32[544648>>2]|0;
  $85 = $82 ? $83 : $84;
  $86 = $option;
  $87 = HEAP32[$86>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $87;
  (_fprintf($85,756952,$vararg_buffer1)|0);
  $88 = HEAP32[(259664)>>2]|0;
  $89 = ($88|0)!=(0|0);
  $90 = HEAP32[(259664)>>2]|0;
  $91 = HEAP32[544648>>2]|0;
  $92 = $89 ? $90 : $91;
  (_fflush($92)|0);
 }
 $93 = HEAP8[102648>>0]|0;
 $94 = $93&1;
 if ($94) {
  $95 = HEAP32[(259664)>>2]|0;
  $96 = ($95|0)!=(0|0);
  $97 = HEAP32[(259664)>>2]|0;
  $98 = HEAP32[544648>>2]|0;
  $99 = $96 ? $97 : $98;
  $100 = $option;
  $101 = ((($100)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $102;
  (_fprintf($99,756981,$vararg_buffer3)|0);
  $103 = HEAP32[(259664)>>2]|0;
  $104 = ($103|0)!=(0|0);
  $105 = HEAP32[(259664)>>2]|0;
  $106 = HEAP32[544648>>2]|0;
  $107 = $104 ? $105 : $106;
  (_fflush($107)|0);
 }
 $108 = HEAP8[102648>>0]|0;
 $109 = $108&1;
 if ($109) {
  $110 = HEAP32[(259664)>>2]|0;
  $111 = ($110|0)!=(0|0);
  $112 = HEAP32[(259664)>>2]|0;
  $113 = HEAP32[544648>>2]|0;
  $114 = $111 ? $112 : $113;
  $115 = $1;
  $116 = $2;
  $117 = (_core_option_get_val($115,$116)|0);
  HEAP32[$vararg_buffer6>>2] = $117;
  (_fprintf($114,757002,$vararg_buffer6)|0);
  $118 = HEAP32[(259664)>>2]|0;
  $119 = ($118|0)!=(0|0);
  $120 = HEAP32[(259664)>>2]|0;
  $121 = HEAP32[544648>>2]|0;
  $122 = $119 ? $120 : $121;
  (_fflush($122)|0);
 }
 $123 = HEAP8[102648>>0]|0;
 $124 = $123&1;
 if ($124) {
  $125 = HEAP32[(259664)>>2]|0;
  $126 = ($125|0)!=(0|0);
  $127 = HEAP32[(259664)>>2]|0;
  $128 = HEAP32[544648>>2]|0;
  $129 = $126 ? $127 : $128;
  (_fprintf($129,757033,$vararg_buffer9)|0);
  $130 = HEAP32[(259664)>>2]|0;
  $131 = ($130|0)!=(0|0);
  $132 = HEAP32[(259664)>>2]|0;
  $133 = HEAP32[544648>>2]|0;
  $134 = $131 ? $132 : $133;
  (_fflush($134)|0);
 }
 $i1 = 0;
 while(1) {
  $135 = $i1;
  $136 = $option;
  $137 = ((($136)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ((($138)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($135>>>0)<($140>>>0);
  if (!($141)) {
   break;
  }
  $142 = HEAP8[102648>>0]|0;
  $143 = $142&1;
  if ($143) {
   $144 = HEAP32[(259664)>>2]|0;
   $145 = ($144|0)!=(0|0);
   $146 = HEAP32[(259664)>>2]|0;
   $147 = HEAP32[544648>>2]|0;
   $148 = $145 ? $146 : $147;
   $149 = $i1;
   $150 = $option;
   $151 = ((($150)) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP32[$152>>2]|0;
   $154 = (($153) + ($149<<3)|0);
   $155 = HEAP32[$154>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $155;
   (_fprintf($148,757063,$vararg_buffer11)|0);
   $156 = HEAP32[(259664)>>2]|0;
   $157 = ($156|0)!=(0|0);
   $158 = HEAP32[(259664)>>2]|0;
   $159 = HEAP32[544648>>2]|0;
   $160 = $157 ? $158 : $159;
   (_fflush($160)|0);
  }
  $161 = $i1;
  $162 = (($161) + 1)|0;
  $i1 = $162;
 }
 $$expand_i1_val17 = 1;
 HEAP8[$0>>0] = $$expand_i1_val17;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $163 = $$pre_trunc&1;
 STACKTOP = sp;return ($163|0);
}
function _bps_apply_patch($modify_data,$modify_length,$source_data,$source_length,$target_data,$target_length) {
 $modify_data = $modify_data|0;
 $modify_length = $modify_length|0;
 $source_data = $source_data|0;
 $source_length = $source_length|0;
 $target_data = $target_data|0;
 $target_length = $target_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bps = 0;
 var $checksum = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $length = 0, $mode = 0, $modify_markup_size = 0, $modify_modify_checksum = 0, $modify_source_checksum = 0, $modify_source_size = 0, $modify_target_checksum = 0, $modify_target_size = 0, $negative = 0, $offset = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bps = sp + 56|0;
 $1 = $modify_data;
 $2 = $modify_length;
 $3 = $source_data;
 $4 = $source_length;
 $5 = $target_data;
 $6 = $target_length;
 $7 = $2;
 $8 = ($7>>>0)<(19);
 if ($8) {
  $0 = 2;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 dest=$bps; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $9 = $1;
 HEAP32[$bps>>2] = $9;
 $10 = $2;
 $11 = ((($bps)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = $5;
 $13 = ((($bps)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($bps)) + 20|0);
 HEAP32[$16>>2] = $15;
 $17 = $3;
 $18 = ((($bps)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = $4;
 $20 = ((($bps)) + 16|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($bps)) + 36|0);
 HEAP32[$21>>2] = -1;
 $22 = ((($bps)) + 44|0);
 HEAP32[$22>>2] = -1;
 $23 = (_bps_read($bps)|0);
 $24 = $23&255;
 $25 = ($24|0)!=(66);
 if (!($25)) {
  $26 = (_bps_read($bps)|0);
  $27 = $26&255;
  $28 = ($27|0)!=(80);
  if (!($28)) {
   $29 = (_bps_read($bps)|0);
   $30 = $29&255;
   $31 = ($30|0)!=(83);
   if (!($31)) {
    $32 = (_bps_read($bps)|0);
    $33 = $32&255;
    $34 = ($33|0)!=(49);
    if (!($34)) {
     $35 = (_bps_decode($bps)|0);
     $36 = tempRet0;
     $modify_source_size = $35;
     $37 = (_bps_decode($bps)|0);
     $38 = tempRet0;
     $modify_target_size = $37;
     $39 = (_bps_decode($bps)|0);
     $40 = tempRet0;
     $modify_markup_size = $39;
     $i = 0;
     while(1) {
      $41 = $i;
      $42 = $modify_markup_size;
      $43 = ($41>>>0)<($42>>>0);
      if (!($43)) {
       break;
      }
      (_bps_read($bps)|0);
      $44 = $i;
      $45 = (($44) + 1)|0;
      $i = $45;
     }
     $46 = $modify_source_size;
     $47 = ((($bps)) + 16|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($46>>>0)>($48>>>0);
     if ($49) {
      $0 = 5;
      $178 = $0;
      STACKTOP = sp;return ($178|0);
     }
     $50 = $modify_target_size;
     $51 = ((($bps)) + 20|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($50>>>0)>($52>>>0);
     if ($53) {
      $0 = 6;
      $178 = $0;
      STACKTOP = sp;return ($178|0);
     }
     L21: while(1) {
      $54 = ((($bps)) + 24|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ((($bps)) + 12|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (($57) - 12)|0;
      $59 = ($55>>>0)<($58>>>0);
      if (!($59)) {
       break;
      }
      $60 = (_bps_decode($bps)|0);
      $61 = tempRet0;
      $length = $60;
      $62 = $length;
      $63 = $62 & 3;
      $mode = $63;
      $64 = $length;
      $65 = $64 >>> 2;
      $66 = (($65) + 1)|0;
      $length = $66;
      $67 = $mode;
      switch ($67|0) {
      case 0:  {
       while(1) {
        $68 = $length;
        $69 = (($68) + -1)|0;
        $length = $69;
        $70 = ($68|0)!=(0);
        if (!($70)) {
         continue L21;
        }
        $71 = ((($bps)) + 56|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = ((($bps)) + 4|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = (($74) + ($72)|0);
        $76 = HEAP8[$75>>0]|0;
        _bps_write($bps,$76);
       }
       break;
      }
      case 1:  {
       while(1) {
        $77 = $length;
        $78 = (($77) + -1)|0;
        $length = $78;
        $79 = ($77|0)!=(0);
        if (!($79)) {
         continue L21;
        }
        $80 = (_bps_read($bps)|0);
        _bps_write($bps,$80);
       }
       break;
      }
      case 3: case 2:  {
       $81 = (_bps_decode($bps)|0);
       $82 = tempRet0;
       $offset = $81;
       $83 = $offset;
       $84 = $83 & 1;
       $85 = ($84|0)!=(0);
       $86 = $85&1;
       $negative = $86;
       $87 = $offset;
       $88 = $87 >> 1;
       $offset = $88;
       $89 = $negative;
       $90 = $89&1;
       if ($90) {
        $91 = $offset;
        $92 = (0 - ($91))|0;
        $offset = $92;
       }
       $93 = $mode;
       $94 = ($93|0)==(2);
       $95 = $offset;
       if ($94) {
        $96 = ((($bps)) + 28|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = (($97) + ($95))|0;
        HEAP32[$96>>2] = $98;
        while(1) {
         $99 = $length;
         $100 = (($99) + -1)|0;
         $length = $100;
         $101 = ($99|0)!=(0);
         if (!($101)) {
          continue L21;
         }
         $102 = ((($bps)) + 28|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = (($103) + 1)|0;
         HEAP32[$102>>2] = $104;
         $105 = ((($bps)) + 4|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = (($106) + ($103)|0);
         $108 = HEAP8[$107>>0]|0;
         _bps_write($bps,$108);
        }
       } else {
        $109 = ((($bps)) + 32|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = (($110) + ($95))|0;
        HEAP32[$109>>2] = $111;
        while(1) {
         $112 = $length;
         $113 = (($112) + -1)|0;
         $length = $113;
         $114 = ($112|0)!=(0);
         if (!($114)) {
          continue L21;
         }
         $115 = ((($bps)) + 32|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($116) + 1)|0;
         HEAP32[$115>>2] = $117;
         $118 = ((($bps)) + 8|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = (($119) + ($116)|0);
         $121 = HEAP8[$120>>0]|0;
         _bps_write($bps,$121);
        }
       }
       break;
      }
      default: {
       continue L21;
      }
      }
     }
     $modify_source_checksum = 0;
     $modify_target_checksum = 0;
     $modify_modify_checksum = 0;
     $i1 = 0;
     while(1) {
      $122 = $i1;
      $123 = ($122>>>0)<(32);
      if (!($123)) {
       break;
      }
      $124 = (_bps_read($bps)|0);
      $125 = $124&255;
      $126 = $i1;
      $127 = $125 << $126;
      $128 = $modify_source_checksum;
      $129 = $128 | $127;
      $modify_source_checksum = $129;
      $130 = $i1;
      $131 = (($130) + 8)|0;
      $i1 = $131;
     }
     $i2 = 0;
     while(1) {
      $132 = $i2;
      $133 = ($132>>>0)<(32);
      if (!($133)) {
       break;
      }
      $134 = (_bps_read($bps)|0);
      $135 = $134&255;
      $136 = $i2;
      $137 = $135 << $136;
      $138 = $modify_target_checksum;
      $139 = $138 | $137;
      $modify_target_checksum = $139;
      $140 = $i2;
      $141 = (($140) + 8)|0;
      $i2 = $141;
     }
     $142 = ((($bps)) + 36|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $143 ^ -1;
     $checksum = $144;
     $i3 = 0;
     while(1) {
      $145 = $i3;
      $146 = ($145>>>0)<(32);
      if (!($146)) {
       break;
      }
      $147 = (_bps_read($bps)|0);
      $148 = $147&255;
      $149 = $i3;
      $150 = $148 << $149;
      $151 = $modify_modify_checksum;
      $152 = $151 | $150;
      $modify_modify_checksum = $152;
      $153 = $i3;
      $154 = (($153) + 8)|0;
      $i3 = $154;
     }
     $155 = ((($bps)) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($bps)) + 16|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (_crc32_calculate1077($156,$158)|0);
     $160 = ((($bps)) + 40|0);
     HEAP32[$160>>2] = $159;
     $161 = ((($bps)) + 44|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $162 ^ -1;
     $164 = ((($bps)) + 44|0);
     HEAP32[$164>>2] = $163;
     $165 = ((($bps)) + 40|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $modify_source_checksum;
     $168 = ($166|0)!=($167|0);
     if ($168) {
      $0 = 9;
      $178 = $0;
      STACKTOP = sp;return ($178|0);
     }
     $169 = ((($bps)) + 44|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $modify_target_checksum;
     $172 = ($170|0)!=($171|0);
     if ($172) {
      $0 = 10;
      $178 = $0;
      STACKTOP = sp;return ($178|0);
     }
     $173 = $checksum;
     $174 = $modify_modify_checksum;
     $175 = ($173|0)!=($174|0);
     if ($175) {
      $0 = 11;
      $178 = $0;
      STACKTOP = sp;return ($178|0);
     } else {
      $176 = $modify_target_size;
      $177 = $6;
      HEAP32[$177>>2] = $176;
      $0 = 1;
      $178 = $0;
      STACKTOP = sp;return ($178|0);
     }
    }
   }
  }
 }
 $0 = 3;
 $178 = $0;
 STACKTOP = sp;return ($178|0);
}
function _ups_apply_patch($patchdata,$patchlength,$sourcedata,$sourcelength,$targetdata,$targetlength) {
 $patchdata = $patchdata|0;
 $patchlength = $patchlength|0;
 $sourcedata = $sourcedata|0;
 $sourcelength = $sourcelength|0;
 $targetdata = $targetdata|0;
 $targetlength = $targetlength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0;
 var $i = 0, $i1 = 0, $i2 = 0, $length = 0, $patch_read_checksum = 0, $patch_result_checksum = 0, $patch_xor = 0, $source_read_checksum = 0, $source_read_length = 0, $target_read_checksum = 0, $target_read_length = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 40|0;
 $1 = $patchdata;
 $2 = $patchlength;
 $3 = $sourcedata;
 $4 = $sourcelength;
 $5 = $targetdata;
 $6 = $targetlength;
 dest=$data; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = $1;
 HEAP32[$data>>2] = $7;
 $8 = $3;
 $9 = ((($data)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $5;
 $11 = ((($data)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = ((($data)) + 12|0);
 HEAP32[$13>>2] = $12;
 $14 = $4;
 $15 = ((($data)) + 16|0);
 HEAP32[$15>>2] = $14;
 $16 = $6;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($data)) + 20|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($data)) + 36|0);
 HEAP32[$19>>2] = -1;
 $20 = ((($data)) + 40|0);
 HEAP32[$20>>2] = -1;
 $21 = ((($data)) + 44|0);
 HEAP32[$21>>2] = -1;
 $22 = ((($data)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23>>>0)<(18);
 if ($24) {
  $0 = 4;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 $25 = (_ups_patch_read($data)|0);
 $26 = $25&255;
 $27 = ($26|0)!=(85);
 if ($27) {
  $0 = 4;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 $28 = (_ups_patch_read($data)|0);
 $29 = $28&255;
 $30 = ($29|0)!=(80);
 if ($30) {
  $0 = 4;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 $31 = (_ups_patch_read($data)|0);
 $32 = $31&255;
 $33 = ($32|0)!=(83);
 if ($33) {
  $0 = 4;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 $34 = (_ups_patch_read($data)|0);
 $35 = $34&255;
 $36 = ($35|0)!=(49);
 if ($36) {
  $0 = 4;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 $37 = (_ups_decode($data)|0);
 $38 = tempRet0;
 $source_read_length = $37;
 $39 = (_ups_decode($data)|0);
 $40 = tempRet0;
 $target_read_length = $39;
 $41 = ((($data)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $source_read_length;
 $44 = ($42|0)!=($43|0);
 if ($44) {
  $45 = ((($data)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $target_read_length;
  $48 = ($46|0)!=($47|0);
  if ($48) {
   $0 = 7;
   $178 = $0;
   STACKTOP = sp;return ($178|0);
  }
 }
 $49 = ((($data)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $source_read_length;
 $52 = ($50|0)==($51|0);
 $53 = $target_read_length;
 $54 = $source_read_length;
 $55 = $52 ? $53 : $54;
 $56 = $6;
 HEAP32[$56>>2] = $55;
 $57 = ((($data)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $6;
 $60 = HEAP32[$59>>2]|0;
 $61 = ($58>>>0)<($60>>>0);
 if ($61) {
  $0 = 6;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 $62 = $6;
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($data)) + 20|0);
 HEAP32[$64>>2] = $63;
 L30: while(1) {
  $65 = ((($data)) + 24|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($data)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) - 12)|0;
  $70 = ($66>>>0)<($69>>>0);
  if (!($70)) {
   break;
  }
  $71 = (_ups_decode($data)|0);
  $72 = tempRet0;
  $length = $71;
  while(1) {
   $73 = $length;
   $74 = (($73) + -1)|0;
   $length = $74;
   $75 = ($73|0)!=(0);
   if (!($75)) {
    break;
   }
   $76 = (_ups_source_read($data)|0);
   _ups_target_write($data,$76);
  }
  while(1) {
   $77 = (_ups_patch_read($data)|0);
   $patch_xor = $77;
   $78 = $patch_xor;
   $79 = $78&255;
   $80 = (_ups_source_read($data)|0);
   $81 = $80&255;
   $82 = $79 ^ $81;
   $83 = $82&255;
   _ups_target_write($data,$83);
   $84 = $patch_xor;
   $85 = $84&255;
   $86 = ($85|0)==(0);
   if ($86) {
    continue L30;
   }
  }
 }
 while(1) {
  $87 = ((($data)) + 28|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($data)) + 16|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  if (!($91)) {
   break;
  }
  $92 = (_ups_source_read($data)|0);
  _ups_target_write($data,$92);
 }
 while(1) {
  $93 = ((($data)) + 32|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($data)) + 20|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($94>>>0)<($96>>>0);
  if (!($97)) {
   break;
  }
  $98 = (_ups_source_read($data)|0);
  _ups_target_write($data,$98);
 }
 $patch_read_checksum = 0;
 $source_read_checksum = 0;
 $target_read_checksum = 0;
 $i = 0;
 while(1) {
  $99 = $i;
  $100 = ($99>>>0)<(4);
  if (!($100)) {
   break;
  }
  $101 = (_ups_patch_read($data)|0);
  $102 = $101&255;
  $103 = $i;
  $104 = $103<<3;
  $105 = $102 << $104;
  $106 = $source_read_checksum;
  $107 = $106 | $105;
  $source_read_checksum = $107;
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 $i1 = 0;
 while(1) {
  $110 = $i1;
  $111 = ($110>>>0)<(4);
  if (!($111)) {
   break;
  }
  $112 = (_ups_patch_read($data)|0);
  $113 = $112&255;
  $114 = $i1;
  $115 = $114<<3;
  $116 = $113 << $115;
  $117 = $target_read_checksum;
  $118 = $117 | $116;
  $target_read_checksum = $118;
  $119 = $i1;
  $120 = (($119) + 1)|0;
  $i1 = $120;
 }
 $121 = ((($data)) + 36|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 ^ -1;
 $patch_result_checksum = $123;
 $124 = ((($data)) + 40|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $125 ^ -1;
 $127 = ((($data)) + 40|0);
 HEAP32[$127>>2] = $126;
 $128 = ((($data)) + 44|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 ^ -1;
 $131 = ((($data)) + 44|0);
 HEAP32[$131>>2] = $130;
 $i2 = 0;
 while(1) {
  $132 = $i2;
  $133 = ($132>>>0)<(4);
  if (!($133)) {
   break;
  }
  $134 = (_ups_patch_read($data)|0);
  $135 = $134&255;
  $136 = $i2;
  $137 = $136<<3;
  $138 = $135 << $137;
  $139 = $patch_read_checksum;
  $140 = $139 | $138;
  $patch_read_checksum = $140;
  $141 = $i2;
  $142 = (($141) + 1)|0;
  $i2 = $142;
 }
 $143 = $patch_result_checksum;
 $144 = $patch_read_checksum;
 $145 = ($143|0)!=($144|0);
 if ($145) {
  $0 = 4;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 $146 = ((($data)) + 40|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $source_read_checksum;
 $149 = ($147|0)==($148|0);
 if ($149) {
  $150 = ((($data)) + 16|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $source_read_length;
  $153 = ($151|0)==($152|0);
  if ($153) {
   $154 = ((($data)) + 44|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $target_read_checksum;
   $157 = ($155|0)==($156|0);
   if ($157) {
    $158 = ((($data)) + 20|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = $target_read_length;
    $161 = ($159|0)==($160|0);
    if ($161) {
     $0 = 1;
     $178 = $0;
     STACKTOP = sp;return ($178|0);
    }
   }
   $0 = 8;
   $178 = $0;
   STACKTOP = sp;return ($178|0);
  }
 }
 $162 = ((($data)) + 40|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $target_read_checksum;
 $165 = ($163|0)==($164|0);
 if ($165) {
  $166 = ((($data)) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $target_read_length;
  $169 = ($167|0)==($168|0);
  if ($169) {
   $170 = ((($data)) + 44|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $source_read_checksum;
   $173 = ($171|0)==($172|0);
   if ($173) {
    $174 = ((($data)) + 20|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $source_read_length;
    $177 = ($175|0)==($176|0);
    if ($177) {
     $0 = 1;
     $178 = $0;
     STACKTOP = sp;return ($178|0);
    }
   }
   $0 = 8;
   $178 = $0;
   STACKTOP = sp;return ($178|0);
  }
 }
 $0 = 7;
 $178 = $0;
 STACKTOP = sp;return ($178|0);
}
function _ips_apply_patch($patchdata,$patchlen,$sourcedata,$sourcelength,$targetdata,$targetlength) {
 $patchdata = $patchdata|0;
 $patchlen = $patchlen|0;
 $sourcedata = $sourcedata|0;
 $sourcelength = $sourcelength|0;
 $targetdata = $targetdata|0;
 $targetlength = $targetlength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $address = 0, $length = 0, $offset = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $patchdata;
 $2 = $patchlen;
 $3 = $sourcedata;
 $4 = $sourcelength;
 $5 = $targetdata;
 $6 = $targetlength;
 $7 = $2;
 $8 = ($7>>>0)<(8);
 if (!($8)) {
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)!=(80);
  if (!($12)) {
   $13 = $1;
   $14 = ((($13)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)!=(65);
   if (!($17)) {
    $18 = $1;
    $19 = ((($18)) + 2|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = ($21|0)!=(84);
    if (!($22)) {
     $23 = $1;
     $24 = ((($23)) + 3|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = ($26|0)!=(67);
     if (!($27)) {
      $28 = $1;
      $29 = ((($28)) + 4|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30&255;
      $32 = ($31|0)!=(72);
      if (!($32)) {
       $33 = $5;
       $34 = $3;
       $35 = $4;
       _memcpy(($33|0),($34|0),($35|0))|0;
       $offset = 5;
       $36 = $4;
       $37 = $6;
       HEAP32[$37>>2] = $36;
       L8: while(1) {
        $38 = $offset;
        $39 = $2;
        $40 = (($39) - 3)|0;
        $41 = ($38>>>0)>($40>>>0);
        if ($41) {
         label = 27;
         break;
        }
        $42 = $offset;
        $43 = (($42) + 1)|0;
        $offset = $43;
        $44 = $1;
        $45 = (($44) + ($42)|0);
        $46 = HEAP8[$45>>0]|0;
        $47 = $46&255;
        $48 = $47 << 16;
        $address = $48;
        $49 = $offset;
        $50 = (($49) + 1)|0;
        $offset = $50;
        $51 = $1;
        $52 = (($51) + ($49)|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = $54 << 8;
        $56 = $address;
        $57 = $56 | $55;
        $address = $57;
        $58 = $offset;
        $59 = (($58) + 1)|0;
        $offset = $59;
        $60 = $1;
        $61 = (($60) + ($58)|0);
        $62 = HEAP8[$61>>0]|0;
        $63 = $62&255;
        $64 = $63 << 0;
        $65 = $address;
        $66 = $65 | $64;
        $address = $66;
        $67 = $address;
        $68 = ($67|0)==(4542278);
        if ($68) {
         $69 = $offset;
         $70 = $2;
         $71 = ($69|0)==($70|0);
         if ($71) {
          label = 12;
          break;
         }
         $72 = $offset;
         $73 = $2;
         $74 = (($73) - 3)|0;
         $75 = ($72|0)==($74|0);
         if ($75) {
          label = 14;
          break;
         }
        }
        $103 = $offset;
        $104 = $2;
        $105 = (($104) - 2)|0;
        $106 = ($103>>>0)>($105>>>0);
        if ($106) {
         label = 27;
         break;
        }
        $107 = $offset;
        $108 = (($107) + 1)|0;
        $offset = $108;
        $109 = $1;
        $110 = (($109) + ($107)|0);
        $111 = HEAP8[$110>>0]|0;
        $112 = $111&255;
        $113 = $112 << 8;
        $length = $113;
        $114 = $offset;
        $115 = (($114) + 1)|0;
        $offset = $115;
        $116 = $1;
        $117 = (($116) + ($114)|0);
        $118 = HEAP8[$117>>0]|0;
        $119 = $118&255;
        $120 = $119 << 0;
        $121 = $length;
        $122 = $121 | $120;
        $length = $122;
        $123 = $length;
        $124 = ($123|0)!=(0);
        $125 = $offset;
        $126 = $2;
        L16: do {
         if ($124) {
          $127 = $length;
          $128 = (($126) - ($127))|0;
          $129 = ($125>>>0)>($128>>>0);
          if ($129) {
           label = 27;
           break L8;
          }
          while(1) {
           $130 = $length;
           $131 = (($130) + -1)|0;
           $length = $131;
           $132 = ($130|0)!=(0);
           if (!($132)) {
            break L16;
           }
           $133 = $offset;
           $134 = (($133) + 1)|0;
           $offset = $134;
           $135 = $1;
           $136 = (($135) + ($133)|0);
           $137 = HEAP8[$136>>0]|0;
           $138 = $address;
           $139 = (($138) + 1)|0;
           $address = $139;
           $140 = $5;
           $141 = (($140) + ($138)|0);
           HEAP8[$141>>0] = $137;
          }
         } else {
          $142 = (($126) - 3)|0;
          $143 = ($125>>>0)>($142>>>0);
          if ($143) {
           label = 27;
           break L8;
          }
          $144 = $offset;
          $145 = (($144) + 1)|0;
          $offset = $145;
          $146 = $1;
          $147 = (($146) + ($144)|0);
          $148 = HEAP8[$147>>0]|0;
          $149 = $148&255;
          $150 = $149 << 8;
          $length = $150;
          $151 = $offset;
          $152 = (($151) + 1)|0;
          $offset = $152;
          $153 = $1;
          $154 = (($153) + ($151)|0);
          $155 = HEAP8[$154>>0]|0;
          $156 = $155&255;
          $157 = $156 << 0;
          $158 = $length;
          $159 = $158 | $157;
          $length = $159;
          $160 = $length;
          $161 = ($160|0)==(0);
          if ($161) {
           label = 27;
           break L8;
          }
          while(1) {
           $162 = $length;
           $163 = (($162) + -1)|0;
           $length = $163;
           $164 = ($162|0)!=(0);
           $165 = $offset;
           if (!($164)) {
            break;
           }
           $166 = $1;
           $167 = (($166) + ($165)|0);
           $168 = HEAP8[$167>>0]|0;
           $169 = $address;
           $170 = (($169) + 1)|0;
           $address = $170;
           $171 = $5;
           $172 = (($171) + ($169)|0);
           HEAP8[$172>>0] = $168;
          }
          $173 = (($165) + 1)|0;
          $offset = $173;
         }
        } while(0);
        $174 = $address;
        $175 = $6;
        $176 = HEAP32[$175>>2]|0;
        $177 = ($174>>>0)>($176>>>0);
        if (!($177)) {
         continue;
        }
        $178 = $address;
        $179 = $6;
        HEAP32[$179>>2] = $178;
       }
       if ((label|0) == 12) {
        $0 = 1;
        $180 = $0;
        STACKTOP = sp;return ($180|0);
       }
       else if ((label|0) == 14) {
        $76 = $offset;
        $77 = (($76) + 1)|0;
        $offset = $77;
        $78 = $1;
        $79 = (($78) + ($76)|0);
        $80 = HEAP8[$79>>0]|0;
        $81 = $80&255;
        $82 = $81 << 16;
        $size = $82;
        $83 = $offset;
        $84 = (($83) + 1)|0;
        $offset = $84;
        $85 = $1;
        $86 = (($85) + ($83)|0);
        $87 = HEAP8[$86>>0]|0;
        $88 = $87&255;
        $89 = $88 << 8;
        $90 = $size;
        $91 = $90 | $89;
        $size = $91;
        $92 = $offset;
        $93 = (($92) + 1)|0;
        $offset = $93;
        $94 = $1;
        $95 = (($94) + ($92)|0);
        $96 = HEAP8[$95>>0]|0;
        $97 = $96&255;
        $98 = $97 << 0;
        $99 = $size;
        $100 = $99 | $98;
        $size = $100;
        $101 = $size;
        $102 = $6;
        HEAP32[$102>>2] = $101;
        $0 = 1;
        $180 = $0;
        STACKTOP = sp;return ($180|0);
       }
       else if ((label|0) == 27) {
        $0 = 4;
        $180 = $0;
        STACKTOP = sp;return ($180|0);
       }
      }
     }
    }
   }
  }
 }
 $0 = 4;
 $180 = $0;
 STACKTOP = sp;return ($180|0);
}
function _bps_read($bps) {
 $bps = $bps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bps;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3)|0);
 $8 = HEAP8[$7>>0]|0;
 $data = $8;
 $9 = $0;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $data;
 $13 = (_crc32_adjust($11,$12)|0);
 $14 = $0;
 $15 = ((($14)) + 36|0);
 HEAP32[$15>>2] = $13;
 $16 = $data;
 STACKTOP = sp;return ($16|0);
}
function _bps_decode($bps) {
 $bps = $bps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $data = 0, $shift = 0, $x = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 8|0;
 $shift = sp;
 $0 = $bps;
 $1 = $data;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $shift;
 $6 = $5;
 HEAP32[$6>>2] = 1;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 while(1) {
  $9 = $0;
  $10 = (_bps_read($9)|0);
  $x = $10;
  $11 = $x;
  $12 = $11&255;
  $13 = $12 & 127;
  $14 = ($13|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = $shift;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (___muldi3(($13|0),($15|0),($18|0),($21|0))|0);
  $23 = tempRet0;
  $24 = $data;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (_i64Add(($26|0),($29|0),($22|0),($23|0))|0);
  $31 = tempRet0;
  $32 = $data;
  $33 = $32;
  HEAP32[$33>>2] = $30;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = $x;
  $37 = $36&255;
  $38 = $37 & 128;
  $39 = ($38|0)!=(0);
  if ($39) {
   break;
  }
  $40 = $shift;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (_bitshift64Shl(($42|0),($45|0),7)|0);
  $47 = tempRet0;
  $48 = $shift;
  $49 = $48;
  HEAP32[$49>>2] = $46;
  $50 = (($48) + 4)|0;
  $51 = $50;
  HEAP32[$51>>2] = $47;
  $52 = $shift;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($52) + 4)|0;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = $data;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (_i64Add(($60|0),($63|0),($54|0),($57|0))|0);
  $65 = tempRet0;
  $66 = $data;
  $67 = $66;
  HEAP32[$67>>2] = $64;
  $68 = (($66) + 4)|0;
  $69 = $68;
  HEAP32[$69>>2] = $65;
 }
 $70 = $data;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($70) + 4)|0;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 tempRet0 = ($75);
 STACKTOP = sp;return ($72|0);
}
function _bps_write($bps,$data) {
 $bps = $bps|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bps;
 $1 = $data;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($5)|0);
 HEAP8[$10>>0] = $2;
 $11 = $0;
 $12 = ((($11)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = (_crc32_adjust($13,$14)|0);
 $16 = $0;
 $17 = ((($16)) + 44|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _crc32_calculate1077($data,$length) {
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $length;
 $2 = $0;
 $3 = $1;
 $4 = (_crc32(0,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _ups_patch_read($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$10>>2] = $12;
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11)|0);
  $16 = HEAP8[$15>>0]|0;
  $n = $16;
  $17 = $1;
  $18 = ((($17)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $n;
  $21 = (_crc32_adjust($19,$20)|0);
  $22 = $1;
  $23 = ((($22)) + 36|0);
  HEAP32[$23>>2] = $21;
  $24 = $n;
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 } else {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _ups_decode($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $offset = 0, $shift = 0, $x = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp + 8|0;
 $shift = sp;
 $0 = $data;
 $1 = $offset;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $shift;
 $6 = $5;
 HEAP32[$6>>2] = 1;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 while(1) {
  $9 = $0;
  $10 = (_ups_patch_read($9)|0);
  $x = $10;
  $11 = $x;
  $12 = $11&255;
  $13 = $12 & 127;
  $14 = ($13|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = $shift;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (___muldi3(($13|0),($15|0),($18|0),($21|0))|0);
  $23 = tempRet0;
  $24 = $offset;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (_i64Add(($26|0),($29|0),($22|0),($23|0))|0);
  $31 = tempRet0;
  $32 = $offset;
  $33 = $32;
  HEAP32[$33>>2] = $30;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = $x;
  $37 = $36&255;
  $38 = $37 & 128;
  $39 = ($38|0)!=(0);
  if ($39) {
   break;
  }
  $40 = $shift;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (_bitshift64Shl(($42|0),($45|0),7)|0);
  $47 = tempRet0;
  $48 = $shift;
  $49 = $48;
  HEAP32[$49>>2] = $46;
  $50 = (($48) + 4)|0;
  $51 = $50;
  HEAP32[$51>>2] = $47;
  $52 = $shift;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($52) + 4)|0;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = $offset;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (_i64Add(($60|0),($63|0),($54|0),($57|0))|0);
  $65 = tempRet0;
  $66 = $offset;
  $67 = $66;
  HEAP32[$67>>2] = $64;
  $68 = (($66) + 4)|0;
  $69 = $68;
  HEAP32[$69>>2] = $65;
 }
 $70 = $offset;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($70) + 4)|0;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 tempRet0 = ($75);
 STACKTOP = sp;return ($72|0);
}
function _ups_source_read($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$10>>2] = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($11)|0);
  $17 = HEAP8[$16>>0]|0;
  $n = $17;
  $18 = $1;
  $19 = ((($18)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $n;
  $22 = (_crc32_adjust($20,$21)|0);
  $23 = $1;
  $24 = ((($23)) + 40|0);
  HEAP32[$24>>2] = $22;
  $25 = $n;
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _ups_target_write($data,$n) {
 $data = $data|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if ($8) {
  $9 = $1;
  $10 = $0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12)|0);
  HEAP8[$16>>0] = $9;
  $17 = $0;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = (_crc32_adjust($19,$20)|0);
  $22 = $0;
  $23 = ((($22)) + 44|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $0;
 $25 = ((($24)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function _crc32_adjust($crc,$data) {
 $crc = $crc|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $0 = $crc;
 HEAP8[$1>>0] = $data;
 $2 = $0;
 $3 = $2 ^ -1;
 $4 = (_crc32($3,$1,1)|0);
 $5 = $4 ^ -1;
 STACKTOP = sp;return ($5|0);
}
function ___getopt_long_rarch($argc,$argv,$optstring,$longopts,$longindex) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $longindex = $longindex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $long_index = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $short_index = 0, $vararg_buffer = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $argc;
 $2 = $argv;
 $3 = $optstring;
 $4 = $longopts;
 $5 = $longindex;
 $6 = HEAP32[544644>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[544644>>2] = 1;
 }
 $8 = $1;
 $9 = ($8|0)==(1);
 if ($9) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $10 = HEAP32[544644>>2]|0;
 $11 = $2;
 $12 = (($11) + ($10<<2)|0);
 $13 = (_find_short_index($12)|0);
 $short_index = $13;
 $14 = HEAP32[544644>>2]|0;
 $15 = $2;
 $16 = (($15) + ($14<<2)|0);
 $17 = (_find_long_index($16)|0);
 $long_index = $17;
 $18 = $short_index;
 $19 = ($18|0)==(-1);
 $20 = $long_index;
 $21 = ($20|0)==(-1);
 $or$cond = $19 & $21;
 if ($or$cond) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $22 = $short_index;
 $23 = ($22|0)>(0);
 if ($23) {
  $24 = $short_index;
  $25 = $long_index;
  $26 = ($24|0)<($25|0);
  $27 = $long_index;
  $28 = ($27|0)==(-1);
  $or$cond3 = $26 | $28;
  if ($or$cond3) {
   $29 = HEAP32[544644>>2]|0;
   $30 = $2;
   $31 = (($30) + ($29<<2)|0);
   $32 = HEAP32[544644>>2]|0;
   $33 = $short_index;
   $34 = (($32) + ($33))|0;
   $35 = $2;
   $36 = (($35) + ($34<<2)|0);
   $37 = $1;
   $38 = $2;
   $39 = (($38) + ($37<<2)|0);
   _shuffle_block($31,$36,$39);
   $short_index = 0;
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $40 = $long_index;
  $41 = ($40|0)>(0);
  if ($41) {
   $42 = $long_index;
   $43 = $short_index;
   $44 = ($42|0)<($43|0);
   $45 = $short_index;
   $46 = ($45|0)==(-1);
   $or$cond5 = $44 | $46;
   if ($or$cond5) {
    $47 = HEAP32[544644>>2]|0;
    $48 = $2;
    $49 = (($48) + ($47<<2)|0);
    $50 = HEAP32[544644>>2]|0;
    $51 = $long_index;
    $52 = (($50) + ($51))|0;
    $53 = $2;
    $54 = (($53) + ($52<<2)|0);
    $55 = $1;
    $56 = $2;
    $57 = (($56) + ($55<<2)|0);
    _shuffle_block($49,$54,$57);
    $long_index = 0;
   }
  }
 }
 $58 = $short_index;
 $59 = ($58|0)==(0);
 $60 = $long_index;
 $61 = ($60|0)==(0);
 $or$cond7 = $59 | $61;
 if (!($or$cond7)) {
  $62 = HEAP32[(259664)>>2]|0;
  $63 = ($62|0)!=(0|0);
  $64 = HEAP32[(259664)>>2]|0;
  $65 = HEAP32[544648>>2]|0;
  $66 = $63 ? $64 : $65;
  HEAP32[$vararg_buffer>>2] = 757080;
  $vararg_ptr8 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 190;
  (_fprintf($66,765794,$vararg_buffer)|0);
  $67 = HEAP32[(259664)>>2]|0;
  $68 = ($67|0)!=(0|0);
  $69 = HEAP32[(259664)>>2]|0;
  $70 = HEAP32[544648>>2]|0;
  $71 = $68 ? $69 : $70;
  (_fflush($71)|0);
  _exit(2);
  // unreachable;
 }
 $72 = $short_index;
 $73 = ($72|0)==(0);
 if ($73) {
  $74 = $3;
  $75 = HEAP32[544644>>2]|0;
  $76 = $2;
  $77 = (($76) + ($75<<2)|0);
  $78 = (_parse_short($74,$77)|0);
  $0 = $78;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $79 = $long_index;
 $80 = ($79|0)==(0);
 if ($80) {
  $81 = $4;
  $82 = HEAP32[544644>>2]|0;
  $83 = $2;
  $84 = (($83) + ($82<<2)|0);
  $85 = (_parse_long($81,$84)|0);
  $0 = $85;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 } else {
  $0 = 63;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 return (0)|0;
}
function _strlcpy_rarch__($dest,$source,$size) {
 $dest = $dest|0;
 $source = $source|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $src_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $source;
 $2 = $size;
 $src_size = 0;
 $3 = $2;
 $n = $3;
 $4 = $n;
 $5 = ($4|0)!=(0);
 L1: do {
  if ($5) {
   while(1) {
    $6 = $n;
    $7 = (($6) + -1)|0;
    $n = $7;
    $8 = ($7|0)!=(0);
    if (!($8)) {
     break L1;
    }
    $9 = $1;
    $10 = ((($9)) + 1|0);
    $1 = $10;
    $11 = HEAP8[$9>>0]|0;
    $12 = $0;
    $13 = ((($12)) + 1|0);
    $0 = $13;
    HEAP8[$12>>0] = $11;
    $14 = $11 << 24 >> 24;
    $15 = ($14|0)!=(0);
    if (!($15)) {
     break L1;
    }
    $16 = $src_size;
    $17 = (($16) + 1)|0;
    $src_size = $17;
   }
  }
 } while(0);
 $18 = $n;
 $19 = ($18|0)!=(0);
 if ($19) {
  $29 = $src_size;
  STACKTOP = sp;return ($29|0);
 }
 $20 = $2;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $0;
  HEAP8[$22>>0] = 0;
 }
 while(1) {
  $23 = $1;
  $24 = ((($23)) + 1|0);
  $1 = $24;
  $25 = HEAP8[$23>>0]|0;
  $26 = ($25<<24>>24)!=(0);
  if (!($26)) {
   break;
  }
  $27 = $src_size;
  $28 = (($27) + 1)|0;
  $src_size = $28;
 }
 $29 = $src_size;
 STACKTOP = sp;return ($29|0);
}
function _strlcat_rarch__($dest,$source,$size) {
 $dest = $dest|0;
 $source = $source|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $source;
 $2 = $size;
 $3 = $0;
 $4 = (_strlen($3)|0);
 $len = $4;
 $5 = $len;
 $6 = $0;
 $7 = (($6) + ($5)|0);
 $0 = $7;
 $8 = $len;
 $9 = $2;
 $10 = ($8>>>0)>($9>>>0);
 if ($10) {
  $2 = 0;
 } else {
  $11 = $len;
  $12 = $2;
  $13 = (($12) - ($11))|0;
  $2 = $13;
 }
 $14 = $len;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = (_strlcpy_rarch__($15,$16,$17)|0);
 $19 = (($14) + ($18))|0;
 STACKTOP = sp;return ($19|0);
}
function _find_short_index($argv) {
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $argv;
 $index = 0;
 while(1) {
  $2 = $index;
  $3 = $1;
  $4 = (($3) + ($2<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $index;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_is_short_option($10)|0);
  $12 = $index;
  if ($11) {
   label = 4;
   break;
  }
  $13 = (($12) + 1)|0;
  $index = $13;
 }
 if ((label|0) == 4) {
  $0 = $12;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _find_long_index($argv) {
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $argv;
 $index = 0;
 while(1) {
  $2 = $index;
  $3 = $1;
  $4 = (($3) + ($2<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $index;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_is_long_option($10)|0);
  $12 = $index;
  if ($11) {
   label = 4;
   break;
  }
  $13 = (($12) + 1)|0;
  $index = $13;
 }
 if ((label|0) == 4) {
  $0 = $12;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _shuffle_block($begin,$last,$end) {
 $begin = $begin|0;
 $last = $last|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $begin;
 $1 = $last;
 $2 = $end;
 $3 = $1;
 $4 = $0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 4)&-1;
 $len = $8;
 $9 = $len;
 $10 = (_calloc($9,4)|0);
 $tmp = $10;
 $11 = $tmp;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $23 = $tmp;
  $24 = $0;
  $25 = $len;
  $26 = $25<<2;
  _memcpy(($23|0),($24|0),($26|0))|0;
  $27 = $0;
  $28 = $1;
  $29 = $2;
  $30 = $1;
  $31 = $29;
  $32 = $30;
  $33 = (($31) - ($32))|0;
  $34 = (($33|0) / 4)&-1;
  $35 = $34<<2;
  _memmove(($27|0),($28|0),($35|0))|0;
  $36 = $2;
  $37 = $len;
  $38 = (0 - ($37))|0;
  $39 = (($36) + ($38<<2)|0);
  $40 = $tmp;
  $41 = $len;
  $42 = $41<<2;
  _memcpy(($39|0),($40|0),($42|0))|0;
  $43 = $tmp;
  _free($43);
  STACKTOP = sp;return;
 } else {
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  HEAP32[$vararg_buffer>>2] = 757080;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 150;
  (_fprintf($17,765794,$vararg_buffer)|0);
  $18 = HEAP32[(259664)>>2]|0;
  $19 = ($18|0)!=(0|0);
  $20 = HEAP32[(259664)>>2]|0;
  $21 = HEAP32[544648>>2]|0;
  $22 = $19 ? $20 : $21;
  (_fflush($22)|0);
  _exit(2);
  // unreachable;
 }
}
function _parse_short($optstring,$argv) {
 $optstring = $optstring|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $arg = 0, $embedded_arg = 0, $extra_opt = 0, $opt = 0, $takes_arg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $optstring;
 $2 = $argv;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $arg = $6;
 $7 = $arg;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)==(58);
 if ($9) {
  $0 = 63;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $10 = $1;
 $11 = $arg;
 $12 = $11 << 24 >> 24;
 $13 = (_strchr($10,$12)|0);
 $opt = $13;
 $14 = $opt;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $0 = 63;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)!=(0);
 $21 = $20&1;
 $extra_opt = $21;
 $22 = $opt;
 $23 = ((($22)) + 1|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 << 24 >> 24;
 $26 = ($25|0)==(58);
 $27 = $26&1;
 $takes_arg = $27;
 $28 = $extra_opt;
 $29 = $28&1;
 $30 = $takes_arg;
 $31 = $30&1;
 $32 = $29 ? $31 : 0;
 $33 = $32&1;
 $embedded_arg = $33;
 $34 = $takes_arg;
 $35 = $34&1;
 $36 = $embedded_arg;
 $37 = $36&1;
 if (!($35)) {
  if ($37) {
   $53 = $2;
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 1|0);
   $56 = $2;
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($57)) + 2|0);
   $59 = $2;
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 2|0);
   $62 = (_strlen($61)|0);
   $63 = (($62) + 1)|0;
   _memmove(($55|0),($58|0),($63|0))|0;
   $64 = $opt;
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 << 24 >> 24;
   $0 = $66;
   $72 = $0;
   STACKTOP = sp;return ($72|0);
  } else {
   $67 = HEAP32[544644>>2]|0;
   $68 = (($67) + 1)|0;
   HEAP32[544644>>2] = $68;
   $69 = $opt;
   $70 = HEAP8[$69>>0]|0;
   $71 = $70 << 24 >> 24;
   $0 = $71;
   $72 = $0;
   STACKTOP = sp;return ($72|0);
  }
 }
 $38 = $2;
 if ($37) {
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 2|0);
  HEAP32[269508>>2] = $40;
  $41 = HEAP32[544644>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[544644>>2] = $42;
 } else {
  $43 = ((($38)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[269508>>2] = $44;
  $45 = HEAP32[544644>>2]|0;
  $46 = (($45) + 2)|0;
  HEAP32[544644>>2] = $46;
 }
 $47 = HEAP32[269508>>2]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $opt;
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = $51;
 } else {
  $52 = 63;
 }
 $0 = $52;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _parse_long($longopts,$argv) {
 $longopts = $longopts|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $indice = 0, $opt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $longopts;
 $2 = $argv;
 $opt = 0;
 $indice = 0;
 while(1) {
  $3 = $indice;
  $4 = $1;
  $5 = (($4) + ($3<<4)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $indice;
  $9 = $1;
  $10 = (($9) + ($8<<4)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 2|0);
  $15 = (_strcmp($11,$14)|0);
  $16 = ($15|0)==(0);
  $17 = $indice;
  if ($16) {
   label = 4;
   break;
  }
  $20 = (($17) + 1)|0;
  $indice = $20;
 }
 if ((label|0) == 4) {
  $18 = $1;
  $19 = (($18) + ($17<<4)|0);
  $opt = $19;
 }
 $21 = $opt;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $0 = 63;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $23 = $opt;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $2;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   $0 = 63;
   $52 = $0;
   STACKTOP = sp;return ($52|0);
  }
 }
 $31 = $opt;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $2;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[269508>>2] = $37;
  $38 = HEAP32[544644>>2]|0;
  $39 = (($38) + 2)|0;
  HEAP32[544644>>2] = $39;
 } else {
  $40 = HEAP32[544644>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[544644>>2] = $41;
 }
 $42 = $opt;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 $46 = $opt;
 $47 = ((($46)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 if ($45) {
  $49 = $opt;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$51>>2] = $48;
  $0 = 0;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 } else {
  $0 = $48;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function _is_short_option($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(45);
 if (!($4)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)!=(45);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _is_long_option($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(45);
 if (!($4)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)==(45);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _rxml_root_node($doc) {
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $doc;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _rxml_load_document($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $doc = 0;
 var $file = 0, $len = 0, $mem_ptr = 0, $memory_buffer = 0, $new_memory_buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mem_ptr = sp + 16|0;
 $1 = $path;
 $2 = HEAP32[(259664)>>2]|0;
 $3 = ($2|0)!=(0|0);
 $4 = HEAP32[(259664)>>2]|0;
 $5 = HEAP32[544648>>2]|0;
 $6 = $3 ? $4 : $5;
 (_fprintf($6,757096,$vararg_buffer)|0);
 $7 = HEAP32[(259664)>>2]|0;
 $8 = ($7|0)!=(0|0);
 $9 = HEAP32[(259664)>>2]|0;
 $10 = HEAP32[544648>>2]|0;
 $11 = $8 ? $9 : $10;
 (_fflush($11)|0);
 $memory_buffer = 0;
 $new_memory_buffer = 0;
 HEAP32[$mem_ptr>>2] = 0;
 $len = 0;
 $12 = $1;
 $13 = (_fopen($12,769700)|0);
 $file = $13;
 $14 = $file;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $16 = (_calloc(1,4)|0);
 $doc = $16;
 $17 = $doc;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $file;
  (_fseek($19,0,2)|0);
  $20 = $file;
  $21 = (_ftell($20)|0);
  $len = $21;
  $22 = $file;
  _rewind($22);
  $23 = $len;
  $24 = (($23) + 1)|0;
  $25 = (_malloc($24)|0);
  $memory_buffer = $25;
  $26 = $memory_buffer;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $len;
   $29 = $memory_buffer;
   $30 = (($29) + ($28)|0);
   HEAP8[$30>>0] = 0;
   $31 = $memory_buffer;
   $32 = $len;
   $33 = $file;
   $34 = (_fread($31,1,$32,$33)|0);
   $35 = $len;
   $36 = ($34|0)!=($35|0);
   if (!($36)) {
    $37 = $file;
    (_fclose($37)|0);
    $file = 0;
    $38 = $memory_buffer;
    HEAP32[$mem_ptr>>2] = $38;
    $39 = (_validate_header($mem_ptr)|0);
    if ($39) {
     $40 = HEAP32[$mem_ptr>>2]|0;
     $41 = (_purge_xml_comments($40)|0);
     $new_memory_buffer = $41;
     $42 = $new_memory_buffer;
     $43 = ($42|0)!=(0|0);
     if ($43) {
      $44 = $memory_buffer;
      _free($44);
      $45 = $new_memory_buffer;
      $memory_buffer = $45;
      HEAP32[$mem_ptr>>2] = $45;
      $46 = (_rxml_parse_node($mem_ptr)|0);
      $47 = $doc;
      HEAP32[$47>>2] = $46;
      $48 = $doc;
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)!=(0|0);
      if ($50) {
       $51 = $memory_buffer;
       _free($51);
       $52 = $doc;
       $0 = $52;
       $58 = $0;
       STACKTOP = sp;return ($58|0);
      }
     }
    }
   }
  }
 }
 $53 = $memory_buffer;
 _free($53);
 $54 = $file;
 $55 = ($54|0)!=(0|0);
 if ($55) {
  $56 = $file;
  (_fclose($56)|0);
 }
 $57 = $doc;
 _rxml_free_document($57);
 $0 = 0;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _rxml_free_document($doc) {
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $doc;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  _rxml_free_node($7);
 }
 $8 = $0;
 _free($8);
 STACKTOP = sp;return;
}
function _rxml_node_attrib($node,$attrib) {
 $node = $node|0;
 $attrib = $attrib|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attribs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $attrib;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $attribs = $5;
 while(1) {
  $6 = $attribs;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $2;
  $9 = $attribs;
  $10 = HEAP32[$9>>2]|0;
  $11 = (_strcmp($8,$10)|0);
  $12 = ($11|0)!=(0);
  $13 = $attribs;
  if (!($12)) {
   label = 4;
   break;
  }
  $16 = ((($13)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $attribs = $17;
 }
 if ((label|0) == 4) {
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _validate_header($ptr) {
 $ptr = $ptr|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eol = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $ptr;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_memcmp($3,757227,5)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = HEAP32[$6>>2]|0;
   $8 = (_strstr($7,757233)|0);
   $eol = $8;
   $9 = $eol;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $eol;
    $12 = ((($11)) + 3|0);
    $13 = $1;
    HEAP32[$13>>2] = $12;
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   } else {
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    break;
   }
  } else {
   $$expand_i1_val4 = 1;
   HEAP8[$0>>0] = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $14 = $$pre_trunc&1;
 STACKTOP = sp;return ($14|0);
}
function _purge_xml_comments($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comment_end = 0, $comment_start = 0, $copy_dest = 0, $copy_len = 0, $copy_src = 0, $len = 0, $new_str = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $str;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $len = $3;
 $4 = $len;
 $5 = (($4) + 1)|0;
 $6 = (_malloc($5)|0);
 $new_str = $6;
 $7 = $new_str;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $9 = $len;
 $10 = $new_str;
 $11 = (($10) + ($9)|0);
 HEAP8[$11>>0] = 0;
 $12 = $new_str;
 $copy_dest = $12;
 $13 = $1;
 $copy_src = $13;
 while(1) {
  $14 = $copy_src;
  $15 = (_strstr($14,757218)|0);
  $comment_start = $15;
  $16 = $copy_src;
  $17 = (_strstr($16,757223)|0);
  $comment_end = $17;
  $18 = $comment_start;
  $19 = ($18|0)!=(0|0);
  $20 = $comment_end;
  $21 = ($20|0)!=(0|0);
  $or$cond = $19 & $21;
  if (!($or$cond)) {
   break;
  }
  $22 = $comment_start;
  $23 = $copy_src;
  $24 = $22;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $copy_len = $26;
  $27 = $copy_dest;
  $28 = $copy_src;
  $29 = $copy_len;
  _memcpy(($27|0),($28|0),($29|0))|0;
  $30 = $copy_len;
  $31 = $copy_dest;
  $32 = (($31) + ($30)|0);
  $copy_dest = $32;
  $33 = $comment_end;
  $34 = ((($33)) + 3|0);
  $copy_src = $34;
 }
 $35 = $copy_src;
 $36 = (_strlen($35)|0);
 $len = $36;
 $37 = $copy_dest;
 $38 = $copy_src;
 $39 = $len;
 _memcpy(($37|0),($38|0),($39|0))|0;
 $40 = $len;
 $41 = $copy_dest;
 $42 = (($41) + ($40)|0);
 HEAP8[$42>>0] = 0;
 $43 = $new_str;
 $0 = $43;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _rxml_parse_node($ptr_) {
 $ptr_ = $ptr_|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cdata_end = 0, $cdata_start = 0, $child_start = 0, $closing = 0, $closing_start = 0;
 var $closing_tag = 0, $closing_tag_size = 0, $first_closing = 0, $first_start = 0, $is_closing = 0, $list = 0, $new_node = 0, $node = 0, $or$cond = 0, $ptr = 0, $ptr1 = 0, $str = 0, $tail = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ptr1 = sp + 16|0;
 $1 = $ptr_;
 $ptr = 0;
 $closing = 0;
 $str = 0;
 $is_closing = 0;
 $2 = (_calloc(1,24)|0);
 $node = $2;
 $3 = $node;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $5 = $1;
 _skip_spaces($5);
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $ptr = $7;
 $8 = $ptr;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)!=(60);
 L5: do {
  if (!($11)) {
   $12 = $ptr;
   $13 = (_strchr($12,62)|0);
   $closing = $13;
   $14 = $closing;
   $15 = ($14|0)!=(0|0);
   if ($15) {
    $16 = $ptr;
    $17 = ((($16)) + 1|0);
    $18 = $closing;
    $19 = (_strdup_range($17,$18)|0);
    $str = $19;
    $20 = $str;
    $21 = ($20|0)!=(0|0);
    if ($21) {
     $22 = $node;
     $23 = $str;
     $24 = (_rxml_parse_tag($22,$23)|0);
     if ($24) {
      $25 = $ptr;
      $26 = (_strstr($25,757192)|0);
      $27 = ((($26)) + 1|0);
      $28 = $closing;
      $29 = ($27|0)==($28|0);
      $30 = $29&1;
      $is_closing = $30;
      $31 = $is_closing;
      $32 = $31&1;
      if ($32) {
       $127 = $closing;
       $128 = ((($127)) + 1|0);
       $129 = $1;
       HEAP32[$129>>2] = $128;
      } else {
       $33 = $node;
       $34 = HEAP32[$33>>2]|0;
       $35 = (_strlen($34)|0);
       $36 = (($35) + 4)|0;
       $closing_tag_size = $36;
       $37 = $closing_tag_size;
       $38 = (_malloc($37)|0);
       $closing_tag = $38;
       $cdata_start = 0;
       $child_start = 0;
       $closing_start = 0;
       $39 = $closing_tag;
       $40 = ($39|0)!=(0|0);
       $41 = $closing_tag;
       if (!($40)) {
        _free($41);
        break;
       }
       $42 = $closing_tag_size;
       $43 = $node;
       $44 = HEAP32[$43>>2]|0;
       HEAP32[$vararg_buffer>>2] = $44;
       (_snprintf($41,$42,757195,$vararg_buffer)|0);
       $45 = $closing;
       $46 = ((($45)) + 1|0);
       $47 = (_strstr($46,757201)|0);
       $cdata_start = $47;
       $48 = $closing;
       $49 = ((($48)) + 1|0);
       $50 = (_strchr($49,60)|0);
       $child_start = $50;
       $51 = $closing;
       $52 = ((($51)) + 1|0);
       $53 = $closing_tag;
       $54 = (_strstr($52,$53)|0);
       $closing_start = $54;
       $55 = $closing_start;
       $56 = ($55|0)!=(0|0);
       if (!($56)) {
        $57 = $closing_tag;
        _free($57);
        break;
       }
       $58 = $cdata_start;
       $59 = ($58|0)!=(0|0);
       do {
        if ($59) {
         $60 = $closing;
         $61 = ((($60)) + 1|0);
         $62 = $cdata_start;
         $63 = (_range_is_space($61,$62)|0);
         if ($63) {
          $64 = $cdata_start;
          $65 = (_strstr($64,757211)|0);
          $cdata_end = $65;
          $66 = $cdata_end;
          $67 = ($66|0)!=(0|0);
          if ($67) {
           $69 = $cdata_start;
           $70 = ((($69)) + 9|0);
           $71 = $cdata_end;
           $72 = (_strdup_range($70,$71)|0);
           $73 = $node;
           $74 = ((($73)) + 4|0);
           HEAP32[$74>>2] = $72;
           break;
          } else {
           $68 = $closing_tag;
           _free($68);
           break L5;
          }
         } else {
          label = 17;
         }
        } else {
         label = 17;
        }
       } while(0);
       do {
        if ((label|0) == 17) {
         $75 = $closing_start;
         $76 = ($75|0)!=(0|0);
         if ($76) {
          $77 = $closing_start;
          $78 = $child_start;
          $79 = ($77|0)==($78|0);
          if ($79) {
           $80 = $closing;
           $81 = ((($80)) + 1|0);
           $82 = $closing_start;
           $83 = (_strdup_range($81,$82)|0);
           $84 = $node;
           $85 = ((($84)) + 4|0);
           HEAP32[$85>>2] = $83;
           break;
          }
         }
         $list = 0;
         $tail = 0;
         $86 = $child_start;
         HEAP32[$ptr1>>2] = $86;
         $87 = HEAP32[$ptr1>>2]|0;
         $88 = (_strchr($87,60)|0);
         $first_start = $88;
         $89 = HEAP32[$ptr1>>2]|0;
         $90 = (_strstr($89,757215)|0);
         $first_closing = $90;
         while(1) {
          $91 = $first_start;
          $92 = ($91|0)!=(0|0);
          $93 = $first_closing;
          $94 = ($93|0)!=(0|0);
          $or$cond = $92 & $94;
          if (!($or$cond)) {
           break;
          }
          $95 = $first_start;
          $96 = $first_closing;
          $97 = ($95>>>0)<($96>>>0);
          if (!($97)) {
           break;
          }
          $98 = (_rxml_parse_node($ptr1)|0);
          $new_node = $98;
          $99 = $new_node;
          $100 = ($99|0)!=(0|0);
          if (!($100)) {
           label = 24;
           break;
          }
          $102 = $tail;
          $103 = ($102|0)!=(0|0);
          $104 = $new_node;
          if ($103) {
           $105 = $tail;
           $106 = ((($105)) + 16|0);
           HEAP32[$106>>2] = $104;
           $107 = $new_node;
           $tail = $107;
          } else {
           $tail = $104;
           $list = $104;
          }
          $108 = HEAP32[$ptr1>>2]|0;
          $109 = (_strchr($108,60)|0);
          $first_start = $109;
          $110 = HEAP32[$ptr1>>2]|0;
          $111 = (_strstr($110,757215)|0);
          $first_closing = $111;
         }
         if ((label|0) == 24) {
          $101 = $closing_tag;
          _free($101);
          break L5;
         }
         $112 = $list;
         $113 = $node;
         $114 = ((($113)) + 12|0);
         HEAP32[$114>>2] = $112;
         $115 = HEAP32[$ptr1>>2]|0;
         $116 = $closing_tag;
         $117 = (_strstr($115,$116)|0);
         $closing_start = $117;
         $118 = $closing_start;
         $119 = ($118|0)!=(0|0);
         if (!($119)) {
          $120 = $closing_tag;
          _free($120);
          break L5;
         }
        }
       } while(0);
       $121 = $closing_start;
       $122 = $closing_tag;
       $123 = (_strlen($122)|0);
       $124 = (($121) + ($123)|0);
       $125 = $1;
       HEAP32[$125>>2] = $124;
       $126 = $closing_tag;
       _free($126);
      }
      $130 = $str;
      _free($130);
      $131 = $node;
      $0 = $131;
      $134 = $0;
      STACKTOP = sp;return ($134|0);
     }
    }
   }
  }
 } while(0);
 $132 = $str;
 _free($132);
 $133 = $node;
 _rxml_free_node($133);
 $0 = 0;
 $134 = $0;
 STACKTOP = sp;return ($134|0);
}
function _rxml_free_node($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $head = 0, $head1 = 0, $next_attrib = 0, $next_node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $head = $3;
 while(1) {
  $4 = $head;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $head;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $next_node = $8;
  $9 = $head;
  _rxml_free_node($9);
  $10 = $next_node;
  $head = $10;
 }
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $head1 = $13;
 while(1) {
  $14 = $head1;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $head1;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $next_attrib = $18;
  $19 = $head1;
  $20 = HEAP32[$19>>2]|0;
  _free($20);
  $21 = $head1;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  _free($23);
  $24 = $head1;
  _free($24);
  $25 = $next_attrib;
  $head1 = $25;
 }
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 $28 = $0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 _free($30);
 $31 = $0;
 _free($31);
 STACKTOP = sp;return;
}
function _skip_spaces($ptr_) {
 $ptr_ = $ptr_|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $ptr = $2;
 while(1) {
  $3 = $ptr;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = (_isspace($5)|0);
  $7 = ($6|0)!=(0);
  $8 = $ptr;
  if (!($7)) {
   break;
  }
  $9 = ((($8)) + 1|0);
  $ptr = $9;
 }
 $10 = $0;
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _strdup_range($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $len = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $begin;
 $2 = $end;
 $3 = $2;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $len = $7;
 $8 = $len;
 $9 = (($8) + 1)|0;
 $10 = (_malloc($9)|0);
 $ret = $10;
 $11 = $ret;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $ret;
  $14 = $1;
  $15 = $len;
  _memcpy(($13|0),($14|0),($15|0))|0;
  $16 = $len;
  $17 = $ret;
  $18 = (($17) + ($16)|0);
  HEAP8[$18>>0] = 0;
  $19 = $ret;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _rxml_parse_tag($node,$str) {
 $node = $node|0;
 $str = $str|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name_end = 0;
 var $str_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $str_ptr = sp + 4|0;
 $1 = $node;
 $2 = $str;
 $3 = $2;
 HEAP32[$str_ptr>>2] = $3;
 _skip_spaces($str_ptr);
 $4 = HEAP32[$str_ptr>>2]|0;
 $5 = (_find_first_space($4)|0);
 $name_end = $5;
 $6 = $name_end;
 $7 = ($6|0)!=(0|0);
 $8 = HEAP32[$str_ptr>>2]|0;
 if (!($7)) {
  $23 = (___strdup($8)|0);
  $24 = $1;
  HEAP32[$24>>2] = $23;
  $25 = $1;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $1;
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($31|0)!=(0);
   $33 = $32;
  } else {
   $33 = 0;
  }
  $$expand_i1_val4 = $33&1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $34 = $$pre_trunc&1;
  STACKTOP = sp;return ($34|0);
 }
 $9 = $name_end;
 $10 = (_strdup_range($8,$9)|0);
 $11 = $1;
 HEAP32[$11>>2] = $10;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)!=(0);
  if ($18) {
   $19 = $name_end;
   $20 = (_rxml_parse_attrs($19)|0);
   $21 = $1;
   $22 = ((($21)) + 8|0);
   HEAP32[$22>>2] = $20;
   $$expand_i1_val2 = 1;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $34 = $$pre_trunc&1;
   STACKTOP = sp;return ($34|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $34 = $$pre_trunc&1;
 STACKTOP = sp;return ($34|0);
}
function _find_first_space($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = ($3|0)!=(0);
  if ($4) {
   $5 = $0;
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = (_isspace($7)|0);
   $9 = ($8|0)!=(0);
   $10 = $9 ^ 1;
   $19 = $10;
  } else {
   $19 = 0;
  }
  $11 = $0;
  if (!($19)) {
   break;
  }
  $12 = ((($11)) + 1|0);
  $0 = $12;
 }
 $13 = HEAP8[$11>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = (_isspace($14)|0);
 $16 = ($15|0)!=(0);
 $17 = $0;
 $18 = $16 ? $17 : 0;
 STACKTOP = sp;return ($18|0);
}
function _rxml_parse_attrs($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $attrib = 0, $copy = 0, $elem = 0, $end = 0, $eq = 0, $last_char = 0, $list = 0, $new_node = 0, $or$cond = 0, $save = 0, $tail = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save = sp + 24|0;
 $1 = $str;
 $2 = $1;
 $3 = (___strdup($2)|0);
 $copy = $3;
 $4 = $copy;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $6 = $copy;
 $7 = $copy;
 $8 = (_strlen($7)|0);
 $9 = (($6) + ($8)|0);
 $10 = ((($9)) + -1|0);
 $last_char = $10;
 $11 = $last_char;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(47);
 if ($14) {
  $15 = $last_char;
  HEAP8[$15>>0] = 0;
 }
 $list = 0;
 $tail = 0;
 $16 = $copy;
 $17 = (_strtok_r($16,757182,$save)|0);
 $elem = $17;
 while(1) {
  $18 = $elem;
  $19 = ($18|0)!=(0|0);
  if (!($19)) {
   break;
  }
  $20 = $elem;
  $21 = (_strstr($20,757189)|0);
  $eq = $21;
  $22 = $eq;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   break;
  }
  $24 = $eq;
  $25 = ((($24)) + 2|0);
  $26 = (_strrchr($25,34)|0);
  $end = $26;
  $27 = $end;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $end;
  $30 = $elem;
  $31 = $elem;
  $32 = (_strlen($31)|0);
  $33 = (($30) + ($32)|0);
  $34 = ((($33)) + -1|0);
  $35 = ($29|0)!=($34|0);
  if ($35) {
   break;
  }
  $36 = $elem;
  $37 = $eq;
  $38 = (_strdup_range_escape($36,$37)|0);
  $attrib = $38;
  $39 = $eq;
  $40 = ((($39)) + 2|0);
  $41 = $end;
  $42 = (_strdup_range_escape($40,$41)|0);
  $value = $42;
  $43 = $attrib;
  $44 = ($43|0)!=(0|0);
  $45 = $value;
  $46 = ($45|0)!=(0|0);
  $or$cond = $44 & $46;
  if (!($or$cond)) {
   break;
  }
  $47 = (_calloc(1,12)|0);
  $new_node = $47;
  $48 = $new_node;
  $49 = ($48|0)!=(0|0);
  if (!($49)) {
   break;
  }
  $50 = $attrib;
  $51 = $new_node;
  HEAP32[$51>>2] = $50;
  $52 = $value;
  $53 = $new_node;
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = $52;
  $55 = $tail;
  $56 = ($55|0)!=(0|0);
  $57 = $new_node;
  if ($56) {
   $58 = $tail;
   $59 = ((($58)) + 8|0);
   HEAP32[$59>>2] = $57;
   $60 = $new_node;
   $tail = $60;
  } else {
   $tail = $57;
   $list = $57;
  }
  $61 = (_strtok_r(0,757182,$save)|0);
  $elem = $61;
 }
 $62 = $copy;
 _free($62);
 $63 = $list;
 $0 = $63;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _strdup_range_escape($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $begin;
 $1 = $end;
 $2 = $0;
 $3 = $1;
 $4 = (_strdup_range($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _range_is_space($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $begin;
 $2 = $end;
 while(1) {
  $3 = $1;
  $4 = $2;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (_isspace($8)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 4;
   break;
  }
  $11 = $1;
  $12 = ((($11)) + 1|0);
  $1 = $12;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $13 = $$pre_trunc&1;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $13 = $$pre_trunc&1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _screenshot_dump($folder,$frame,$width,$height,$pitch,$bgr24) {
 $folder = $folder|0;
 $frame = $frame|0;
 $width = $width|0;
 $height = $height|0;
 $pitch = $pitch|0;
 $bgr24 = $bgr24|0;
 var $$expand_i1_val = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $file = 0, $filename = 0, $ret = 0, $shotname = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 8233|0;
 $filename = sp + 4136|0;
 $shotname = sp + 40|0;
 $1 = $folder;
 $2 = $frame;
 $3 = $width;
 $4 = $height;
 $5 = $pitch;
 $7 = $bgr24&1;
 $6 = $7;
 _fill_dated_filename($shotname,757237,4096);
 $8 = $1;
 _fill_pathname_join($filename,$8,$shotname,4096);
 $9 = (_fopen($filename,839734)|0);
 $file = $9;
 $10 = $file;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $12 = HEAP32[(259664)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = HEAP32[544648>>2]|0;
  $16 = $13 ? $14 : $15;
  HEAP32[$vararg_buffer>>2] = $filename;
  (_fprintf($16,757241,$vararg_buffer)|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  (_fflush($21)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 $22 = $file;
 $23 = $3;
 $24 = $4;
 $25 = (_write_header_bmp($22,$23,$24)|0);
 $26 = $25&1;
 $ret = $26;
 $27 = $ret;
 $28 = $27&1;
 if ($28) {
  $29 = $file;
  $30 = $2;
  $31 = $3;
  $32 = $4;
  $33 = $5;
  $34 = $6;
  $35 = $34&1;
  _dump_content($29,$30,$31,$32,$33,$35);
 } else {
  $36 = HEAP32[(259664)>>2]|0;
  $37 = ($36|0)!=(0|0);
  $38 = HEAP32[(259664)>>2]|0;
  $39 = HEAP32[544648>>2]|0;
  $40 = $37 ? $38 : $39;
  (_fprintf($40,757304,$vararg_buffer1)|0);
  $41 = HEAP32[(259664)>>2]|0;
  $42 = ($41|0)!=(0|0);
  $43 = HEAP32[(259664)>>2]|0;
  $44 = HEAP32[544648>>2]|0;
  $45 = $42 ? $43 : $44;
  (_fflush($45)|0);
 }
 $46 = $file;
 (_fclose($46)|0);
 $47 = $ret;
 $48 = $47&1;
 $$expand_i1_val4 = $48&1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $49 = $$pre_trunc&1;
 STACKTOP = sp;return ($49|0);
}
function _write_header_bmp($file,$width,$height) {
 $file = $file|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $header = 0, $line_size = 0;
 var $size = 0, $size_array = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 24|0;
 $0 = $file;
 $1 = $width;
 $2 = $height;
 $3 = $1;
 $4 = ($3*3)|0;
 $5 = (($4) + 3)|0;
 $6 = $5 & -4;
 $line_size = $6;
 $7 = $line_size;
 $8 = $2;
 $9 = Math_imul($7, $8)|0;
 $10 = (($9) + 54)|0;
 $size = $10;
 $11 = $line_size;
 $12 = $2;
 $13 = Math_imul($11, $12)|0;
 $size_array = $13;
 HEAP8[$header>>0] = 66;
 $14 = ((($header)) + 1|0);
 HEAP8[$14>>0] = 77;
 $15 = ((($14)) + 1|0);
 $16 = $size;
 $17 = $16 >>> 0;
 $18 = $17&255;
 HEAP8[$15>>0] = $18;
 $19 = ((($15)) + 1|0);
 $20 = $size;
 $21 = $20 >>> 8;
 $22 = $21&255;
 HEAP8[$19>>0] = $22;
 $23 = ((($19)) + 1|0);
 $24 = $size;
 $25 = $24 >>> 16;
 $26 = $25&255;
 HEAP8[$23>>0] = $26;
 $27 = ((($23)) + 1|0);
 $28 = $size;
 $29 = $28 >>> 24;
 $30 = $29&255;
 HEAP8[$27>>0] = $30;
 $31 = ((($27)) + 1|0);
 HEAP8[$31>>0] = 0;
 $32 = ((($31)) + 1|0);
 HEAP8[$32>>0] = 0;
 $33 = ((($32)) + 1|0);
 HEAP8[$33>>0] = 0;
 $34 = ((($33)) + 1|0);
 HEAP8[$34>>0] = 0;
 $35 = ((($34)) + 1|0);
 HEAP8[$35>>0] = 54;
 $36 = ((($35)) + 1|0);
 HEAP8[$36>>0] = 0;
 $37 = ((($36)) + 1|0);
 HEAP8[$37>>0] = 0;
 $38 = ((($37)) + 1|0);
 HEAP8[$38>>0] = 0;
 $39 = ((($38)) + 1|0);
 HEAP8[$39>>0] = 40;
 $40 = ((($39)) + 1|0);
 HEAP8[$40>>0] = 0;
 $41 = ((($40)) + 1|0);
 HEAP8[$41>>0] = 0;
 $42 = ((($41)) + 1|0);
 HEAP8[$42>>0] = 0;
 $43 = ((($42)) + 1|0);
 $44 = $1;
 $45 = $44 >>> 0;
 $46 = $45&255;
 HEAP8[$43>>0] = $46;
 $47 = ((($43)) + 1|0);
 $48 = $1;
 $49 = $48 >>> 8;
 $50 = $49&255;
 HEAP8[$47>>0] = $50;
 $51 = ((($47)) + 1|0);
 $52 = $1;
 $53 = $52 >>> 16;
 $54 = $53&255;
 HEAP8[$51>>0] = $54;
 $55 = ((($51)) + 1|0);
 $56 = $1;
 $57 = $56 >>> 24;
 $58 = $57&255;
 HEAP8[$55>>0] = $58;
 $59 = ((($55)) + 1|0);
 $60 = $2;
 $61 = $60 >>> 0;
 $62 = $61&255;
 HEAP8[$59>>0] = $62;
 $63 = ((($59)) + 1|0);
 $64 = $2;
 $65 = $64 >>> 8;
 $66 = $65&255;
 HEAP8[$63>>0] = $66;
 $67 = ((($63)) + 1|0);
 $68 = $2;
 $69 = $68 >>> 16;
 $70 = $69&255;
 HEAP8[$67>>0] = $70;
 $71 = ((($67)) + 1|0);
 $72 = $2;
 $73 = $72 >>> 24;
 $74 = $73&255;
 HEAP8[$71>>0] = $74;
 $75 = ((($71)) + 1|0);
 HEAP8[$75>>0] = 1;
 $76 = ((($75)) + 1|0);
 HEAP8[$76>>0] = 0;
 $77 = ((($76)) + 1|0);
 HEAP8[$77>>0] = 24;
 $78 = ((($77)) + 1|0);
 HEAP8[$78>>0] = 0;
 $79 = ((($78)) + 1|0);
 HEAP8[$79>>0] = 0;
 $80 = ((($79)) + 1|0);
 HEAP8[$80>>0] = 0;
 $81 = ((($80)) + 1|0);
 HEAP8[$81>>0] = 0;
 $82 = ((($81)) + 1|0);
 HEAP8[$82>>0] = 0;
 $83 = ((($82)) + 1|0);
 $84 = $size_array;
 $85 = $84 >>> 0;
 $86 = $85&255;
 HEAP8[$83>>0] = $86;
 $87 = ((($83)) + 1|0);
 $88 = $size_array;
 $89 = $88 >>> 8;
 $90 = $89&255;
 HEAP8[$87>>0] = $90;
 $91 = ((($87)) + 1|0);
 $92 = $size_array;
 $93 = $92 >>> 16;
 $94 = $93&255;
 HEAP8[$91>>0] = $94;
 $95 = ((($91)) + 1|0);
 $96 = $size_array;
 $97 = $96 >>> 24;
 $98 = $97&255;
 HEAP8[$95>>0] = $98;
 $99 = ((($95)) + 1|0);
 HEAP8[$99>>0] = 19;
 $100 = ((($99)) + 1|0);
 HEAP8[$100>>0] = 11;
 $101 = ((($100)) + 1|0);
 HEAP8[$101>>0] = 0;
 $102 = ((($101)) + 1|0);
 HEAP8[$102>>0] = 0;
 $103 = ((($102)) + 1|0);
 HEAP8[$103>>0] = 19;
 $104 = ((($103)) + 1|0);
 HEAP8[$104>>0] = 11;
 $105 = ((($104)) + 1|0);
 HEAP8[$105>>0] = 0;
 $106 = ((($105)) + 1|0);
 HEAP8[$106>>0] = 0;
 $107 = ((($106)) + 1|0);
 HEAP8[$107>>0] = 0;
 $108 = ((($107)) + 1|0);
 HEAP8[$108>>0] = 0;
 $109 = ((($108)) + 1|0);
 HEAP8[$109>>0] = 0;
 $110 = ((($109)) + 1|0);
 HEAP8[$110>>0] = 0;
 $111 = ((($110)) + 1|0);
 HEAP8[$111>>0] = 0;
 $112 = ((($111)) + 1|0);
 HEAP8[$112>>0] = 0;
 $113 = ((($112)) + 1|0);
 HEAP8[$113>>0] = 0;
 $114 = ((($113)) + 1|0);
 HEAP8[$114>>0] = 0;
 $115 = $0;
 $116 = (_fwrite($header,1,54,$115)|0);
 $117 = ($116|0)==(54);
 STACKTOP = sp;return ($117|0);
}
function _dump_content($file,$frame,$width,$height,$pitch,$bgr24) {
 $file = $file|0;
 $frame = $frame|0;
 $width = $width|0;
 $height = $height|0;
 $pitch = $pitch|0;
 $bgr24 = $bgr24|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i = 0, $i3 = 0, $j = 0, $j1 = 0, $j2 = 0, $line_size = 0, $lines = 0, $u = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp + 28|0;
 $0 = $file;
 $1 = $frame;
 $2 = $width;
 $3 = $height;
 $4 = $pitch;
 $6 = $bgr24&1;
 $5 = $6;
 $7 = $1;
 HEAP32[$u>>2] = $7;
 $8 = $3;
 $9 = (_calloc($8,4)|0);
 $lines = $9;
 $10 = $lines;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = ($12*3)|0;
 $14 = (($13) + 3)|0;
 $15 = $14 & -4;
 $line_size = $15;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $3;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   label = 6;
   break;
  }
  $19 = $line_size;
  $20 = (_calloc(1,$19)|0);
  $21 = $i;
  $22 = $lines;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = $i;
  $25 = $lines;
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 if ((label|0) == 6) {
  $31 = $5;
  $32 = $31&1;
  L10: do {
   if ($32) {
    $j = 0;
    while(1) {
     $33 = $j;
     $34 = $3;
     $35 = ($33|0)<($34|0);
     if (!($35)) {
      break L10;
     }
     $36 = $j;
     $37 = $lines;
     $38 = (($37) + ($36<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[$u>>2]|0;
     $41 = $2;
     _dump_line_bgr($39,$40,$41);
     $42 = $j;
     $43 = (($42) + 1)|0;
     $j = $43;
     $44 = $4;
     $45 = HEAP32[$u>>2]|0;
     $46 = (($45) + ($44)|0);
     HEAP32[$u>>2] = $46;
    }
   } else {
    $47 = HEAP32[(196984)>>2]|0;
    $48 = ($47|0)==(1);
    if ($48) {
     $j1 = 0;
     while(1) {
      $49 = $j1;
      $50 = $3;
      $51 = ($49|0)<($50|0);
      if (!($51)) {
       break L10;
      }
      $52 = $j1;
      $53 = $lines;
      $54 = (($53) + ($52<<2)|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = HEAP32[$u>>2]|0;
      $57 = $2;
      _dump_line_32($55,$56,$57);
      $58 = $j1;
      $59 = (($58) + 1)|0;
      $j1 = $59;
      $60 = $4;
      $61 = HEAP32[$u>>2]|0;
      $62 = (($61) + ($60)|0);
      HEAP32[$u>>2] = $62;
     }
    } else {
     $j2 = 0;
     while(1) {
      $63 = $j2;
      $64 = $3;
      $65 = ($63|0)<($64|0);
      if (!($65)) {
       break L10;
      }
      $66 = $j2;
      $67 = $lines;
      $68 = (($67) + ($66<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = HEAP32[$u>>2]|0;
      $71 = $2;
      _dump_line_16($69,$70,$71);
      $72 = $j2;
      $73 = (($72) + 1)|0;
      $j2 = $73;
      $74 = $4;
      $75 = HEAP32[$u>>2]|0;
      $76 = (($75) + ($74)|0);
      HEAP32[$u>>2] = $76;
     }
    }
   }
  } while(0);
  $77 = $0;
  $78 = $lines;
  $79 = $line_size;
  $80 = $3;
  _dump_lines_file($77,$78,$79,$80);
 }
 $i3 = 0;
 while(1) {
  $81 = $i3;
  $82 = $3;
  $83 = ($81|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $i3;
  $85 = $lines;
  $86 = (($85) + ($84<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  _free($87);
  $88 = $i3;
  $89 = (($88) + 1)|0;
  $i3 = $89;
 }
 $90 = $lines;
 _free($90);
 STACKTOP = sp;return;
}
function _dump_line_bgr($line,$src,$width) {
 $line = $line|0;
 $src = $src|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $line;
 $1 = $src;
 $2 = $width;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = ($5*3)|0;
 _memcpy(($3|0),($4|0),($6|0))|0;
 STACKTOP = sp;return;
}
function _dump_line_32($line,$src,$width) {
 $line = $line|0;
 $src = $src|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $line;
 $1 = $src;
 $2 = $width;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $1 = $7;
  $8 = HEAP32[$6>>2]|0;
  $pixel = $8;
  $9 = $pixel;
  $10 = $9 >>> 0;
  $11 = $10 & 255;
  $12 = $11&255;
  $13 = $0;
  $14 = ((($13)) + 1|0);
  $0 = $14;
  HEAP8[$13>>0] = $12;
  $15 = $pixel;
  $16 = $15 >>> 8;
  $17 = $16 & 255;
  $18 = $17&255;
  $19 = $0;
  $20 = ((($19)) + 1|0);
  $0 = $20;
  HEAP8[$19>>0] = $18;
  $21 = $pixel;
  $22 = $21 >>> 16;
  $23 = $22 & 255;
  $24 = $23&255;
  $25 = $0;
  $26 = ((($25)) + 1|0);
  $0 = $26;
  HEAP8[$25>>0] = $24;
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 STACKTOP = sp;return;
}
function _dump_line_16($line,$src,$width) {
 $line = $line|0;
 $src = $src|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $i = 0, $pixel = 0;
 var $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $line;
 $1 = $src;
 $2 = $width;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = ((($6)) + 2|0);
  $1 = $7;
  $8 = HEAP16[$6>>1]|0;
  $pixel = $8;
  $9 = $pixel;
  $10 = $9&65535;
  $11 = $10 >> 0;
  $12 = $11 & 31;
  $13 = $12&255;
  $b = $13;
  $14 = $pixel;
  $15 = $14&65535;
  $16 = $15 >> 5;
  $17 = $16 & 63;
  $18 = $17&255;
  $g = $18;
  $19 = $pixel;
  $20 = $19&65535;
  $21 = $20 >> 11;
  $22 = $21 & 31;
  $23 = $22&255;
  $r = $23;
  $24 = $b;
  $25 = $24&255;
  $26 = $25 << 3;
  $27 = $b;
  $28 = $27&255;
  $29 = $28 >> 2;
  $30 = $26 | $29;
  $31 = $30&255;
  $32 = $0;
  $33 = ((($32)) + 1|0);
  $0 = $33;
  HEAP8[$32>>0] = $31;
  $34 = $g;
  $35 = $34&255;
  $36 = $35 << 2;
  $37 = $g;
  $38 = $37&255;
  $39 = $38 >> 4;
  $40 = $36 | $39;
  $41 = $40&255;
  $42 = $0;
  $43 = ((($42)) + 1|0);
  $0 = $43;
  HEAP8[$42>>0] = $41;
  $44 = $r;
  $45 = $44&255;
  $46 = $45 << 3;
  $47 = $r;
  $48 = $47&255;
  $49 = $48 >> 2;
  $50 = $46 | $49;
  $51 = $50&255;
  $52 = $0;
  $53 = ((($52)) + 1|0);
  $0 = $53;
  HEAP8[$52>>0] = $51;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 STACKTOP = sp;return;
}
function _dump_lines_file($file,$lines,$line_size,$height) {
 $file = $file|0;
 $lines = $lines|0;
 $line_size = $line_size|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $lines;
 $2 = $line_size;
 $3 = $height;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $3;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = $0;
  (_fwrite($10,1,$11,$12)|0);
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 STACKTOP = sp;return;
}
function _cheat_manager_new($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctx = 0;
 var $cur = 0, $doc = 0, $handle = 0, $head = 0, $sha256 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $path;
 $2 = HEAP32[265116>>2]|0;
 FUNCTION_TABLE_v[$2 & 511]();
 $ctx = 0;
 $doc = 0;
 $3 = (_calloc(1,16)|0);
 $handle = $3;
 $4 = $handle;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $118 = $0;
  STACKTOP = sp;return ($118|0);
 }
 $head = 0;
 $cur = 0;
 $6 = $handle;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 1;
 $8 = $handle;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_calloc($10,12)|0);
 $12 = $handle;
 HEAP32[$12>>2] = $11;
 $13 = $handle;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 do {
  if ($15) {
   $ctx = (-1);
   $18 = $ctx;
   $19 = ($18|0)!=(0|0);
   if ($19) {
    $20 = $1;
    $21 = (_rxml_load_document($20)|0);
    $doc = $21;
    $22 = $doc;
    $23 = ($22|0)!=(0|0);
    if (!($23)) {
     $24 = HEAP32[(259664)>>2]|0;
     $25 = ($24|0)!=(0|0);
     $26 = HEAP32[(259664)>>2]|0;
     $27 = HEAP32[544648>>2]|0;
     $28 = $25 ? $26 : $27;
     $29 = $1;
     HEAP32[$vararg_buffer>>2] = $29;
     (_fprintf($28,759949,$vararg_buffer)|0);
     $30 = HEAP32[(259664)>>2]|0;
     $31 = ($30|0)!=(0|0);
     $32 = HEAP32[(259664)>>2]|0;
     $33 = HEAP32[544648>>2]|0;
     $34 = $31 ? $32 : $33;
     (_fflush($34)|0);
     break;
    }
    $35 = $doc;
    $36 = (_rxml_root_node($35)|0);
    $head = $36;
    $37 = $head;
    $cur = $37;
    while(1) {
     $38 = $cur;
     $39 = ($38|0)!=(0|0);
     if (!($39)) {
      break;
     }
     $40 = $cur;
     $41 = ((($40)) + 20|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0);
     if ($43) {
      $44 = $cur;
      $45 = HEAP32[$44>>2]|0;
      $46 = (_strcmp($45,757356)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       break;
      }
     }
     $48 = $cur;
     $49 = ((($48)) + 16|0);
     $50 = HEAP32[$49>>2]|0;
     $cur = $50;
    }
    $51 = $cur;
    $52 = ($51|0)!=(0|0);
    if ($52) {
     $53 = $cur;
     $54 = ((($53)) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $cur = $55;
     while(1) {
      $56 = $cur;
      $57 = ($56|0)!=(0|0);
      if (!($57)) {
       break;
      }
      $58 = $cur;
      $59 = ((($58)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)!=(0);
      if (!($61)) {
       $62 = $cur;
       $63 = HEAP32[$62>>2]|0;
       $64 = (_strcmp($63,757365)|0);
       $65 = ($64|0)==(0);
       if ($65) {
        $66 = $cur;
        $67 = (_rxml_node_attrib($66,757375)|0);
        $sha256 = $67;
        $68 = $sha256;
        $69 = ($68|0)!=(0|0);
        if ($69) {
         $70 = HEAP8[(259508)>>0]|0;
         $71 = $70 << 24 >> 24;
         $72 = ($71|0)!=(0);
         if ($72) {
          $73 = $sha256;
          $74 = (_strcmp($73,(259508))|0);
          $75 = ($74|0)==(0);
          if ($75) {
           break;
          }
         }
        }
       }
      }
      $76 = $cur;
      $77 = ((($76)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $cur = $78;
     }
     $79 = $cur;
     $80 = ($79|0)!=(0|0);
     if ($80) {
      $81 = $handle;
      $82 = $cur;
      $83 = ((($82)) + 12|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (_xml_grab_cheats($81,$84)|0);
      if (!($85)) {
       $86 = HEAP32[(259664)>>2]|0;
       $87 = ($86|0)!=(0|0);
       $88 = HEAP32[(259664)>>2]|0;
       $89 = HEAP32[544648>>2]|0;
       $90 = $87 ? $88 : $89;
       (_fprintf($90,757382,$vararg_buffer1)|0);
       $91 = HEAP32[(259664)>>2]|0;
       $92 = ($91|0)!=(0|0);
       $93 = HEAP32[(259664)>>2]|0;
       $94 = HEAP32[544648>>2]|0;
       $95 = $92 ? $93 : $94;
       (_fflush($95)|0);
       break;
      }
      $96 = $handle;
      $97 = ((($96)) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)==(0);
      if ($99) {
       $100 = HEAP32[(259664)>>2]|0;
       $101 = ($100|0)!=(0|0);
       $102 = HEAP32[(259664)>>2]|0;
       $103 = HEAP32[544648>>2]|0;
       $104 = $101 ? $102 : $103;
       $105 = $1;
       HEAP32[$vararg_buffer3>>2] = $105;
       (_fprintf($104,757451,$vararg_buffer3)|0);
       $106 = HEAP32[(259664)>>2]|0;
       $107 = ($106|0)!=(0|0);
       $108 = HEAP32[(259664)>>2]|0;
       $109 = HEAP32[544648>>2]|0;
       $110 = $107 ? $108 : $109;
       (_fflush($110)|0);
       break;
      }
      $111 = $handle;
      _cheat_manager_load_config($111,(86220),(259508));
      $112 = $doc;
      _rxml_free_document($112);
      $113 = $handle;
      $0 = $113;
      $118 = $0;
      STACKTOP = sp;return ($118|0);
     }
    }
   }
  } else {
   $16 = $handle;
   $17 = ((($16)) + 12|0);
   HEAP32[$17>>2] = 0;
  }
 } while(0);
 $114 = $handle;
 _cheat_manager_free($114);
 $115 = $doc;
 $116 = ($115|0)!=(0|0);
 if ($116) {
  $117 = $doc;
  _rxml_free_document($117);
 }
 $0 = 0;
 $118 = $0;
 STACKTOP = sp;return ($118|0);
}
function _cheat_manager_free($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  _cheat_manager_save_config($6,(86220),(259508));
  $i = 0;
  while(1) {
   $7 = $i;
   $8 = $0;
   $9 = ((($8)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($7>>>0)<($10>>>0);
   if (!($11)) {
    break;
   }
   $12 = $i;
   $13 = $0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + (($12*12)|0)|0);
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   _free($17);
   $18 = $i;
   $19 = (($18) + 1)|0;
   $i = $19;
  }
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  _free($21);
 }
 $22 = $0;
 _free($22);
 STACKTOP = sp;return;
}
function _cheat_manager_toggle($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*12)|0)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 $10 = $9&1;
 $11 = $10 ^ 1;
 $12 = ($11|0)!=(0);
 $13 = $12&1;
 HEAP8[$7>>0] = $13;
 $14 = $0;
 _cheat_manager_apply_cheats($14);
 $15 = $0;
 _cheat_manager_update($15);
 STACKTOP = sp;return;
}
function _cheat_manager_index_next($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4>>>0) % ($7>>>0))&-1;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 _cheat_manager_update($11);
 STACKTOP = sp;return;
}
function _cheat_manager_index_prev($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $0;
 if ($4) {
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) - 1)|0;
  $9 = $0;
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = $8;
  $14 = $0;
  _cheat_manager_update($14);
  STACKTOP = sp;return;
 } else {
  $11 = ((($5)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + -1)|0;
  HEAP32[$11>>2] = $13;
  $14 = $0;
  _cheat_manager_update($14);
  STACKTOP = sp;return;
 }
}
function _xml_grab_cheats($handle,$ptr) {
 $handle = $handle|0;
 $ptr = $ptr|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = $handle;
 $2 = $ptr;
 while(1) {
  $3 = $2;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 14;
   break;
  }
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = (_strcmp($6,757695)|0);
  $8 = ($7|0)==(0);
  $9 = $2;
  if ($8) {
   $10 = ((($9)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $name = $11;
   $12 = $name;
   $13 = ($12|0)!=(0|0);
   if ($13) {
    $14 = HEAP8[102648>>0]|0;
    $15 = $14&1;
    if ($15) {
     $16 = HEAP32[(259664)>>2]|0;
     $17 = ($16|0)!=(0|0);
     $18 = HEAP32[(259664)>>2]|0;
     $19 = HEAP32[544648>>2]|0;
     $20 = $17 ? $18 : $19;
     $21 = $name;
     HEAP32[$vararg_buffer>>2] = $21;
     (_fprintf($20,757700,$vararg_buffer)|0);
     $22 = HEAP32[(259664)>>2]|0;
     $23 = ($22|0)!=(0|0);
     $24 = HEAP32[(259664)>>2]|0;
     $25 = HEAP32[544648>>2]|0;
     $26 = $23 ? $24 : $25;
     (_fflush($26)|0);
    }
   }
  } else {
   $27 = HEAP32[$9>>2]|0;
   $28 = (_strcmp($27,757739)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $30 = $1;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $1;
    $34 = ((($33)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($32|0)==($35|0);
    if ($36) {
     $37 = $1;
     $38 = ((($37)) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $39<<1;
     HEAP32[$38>>2] = $40;
     $41 = $1;
     $42 = HEAP32[$41>>2]|0;
     $43 = $1;
     $44 = ((($43)) + 12|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45*12)|0;
     $47 = (_realloc($42,$46)|0);
     $48 = $1;
     HEAP32[$48>>2] = $47;
     $49 = $1;
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)!=(0|0);
     if (!($51)) {
      label = 10;
      break;
     }
    }
    $52 = $1;
    $53 = ((($52)) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $1;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + (($54*12)|0)|0);
    $58 = $2;
    $59 = ((($58)) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (_xml_grab_cheat($57,$60)|0);
    if ($61) {
     $62 = $1;
     $63 = ((($62)) + 8|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (($64) + 1)|0;
     HEAP32[$63>>2] = $65;
    }
   }
  }
  $66 = $2;
  $67 = ((($66)) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
 }
 if ((label|0) == 10) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $69 = $$pre_trunc&1;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 14) {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $69 = $$pre_trunc&1;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _cheat_manager_load_config($handle,$path,$sha256) {
 $handle = $handle|0;
 $path = $path|0;
 $sha256 = $sha256|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conf = 0, $index = 0, $num = 0, $save = 0, $str = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp + 12|0;
 $save = sp + 8|0;
 $0 = $handle;
 $1 = $path;
 $2 = $sha256;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = (_config_file_new($6)|0);
 $conf = $7;
 $8 = $conf;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 HEAP32[$str>>2] = 0;
 $10 = $conf;
 $11 = $2;
 $12 = (_config_get_string($10,$11,$str)|0);
 if (!($12)) {
  $13 = $conf;
  _config_file_free($13);
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$str>>2]|0;
 $15 = (_strtok_r($14,760908,$save)|0);
 $num = $15;
 while(1) {
  $16 = $num;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $num;
  $19 = (_strtoul($18,0,0)|0);
  $index = $19;
  $20 = $index;
  $21 = $0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20>>>0)<($23>>>0);
  if ($24) {
   $25 = $index;
   $26 = $0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + (($25*12)|0)|0);
   $29 = ((($28)) + 4|0);
   HEAP8[$29>>0] = 1;
  }
  $30 = (_strtok_r(0,760908,$save)|0);
  $num = $30;
 }
 $31 = HEAP32[$str>>2]|0;
 _free($31);
 $32 = $conf;
 _config_file_free($32);
 $33 = $0;
 _cheat_manager_apply_cheats($33);
 STACKTOP = sp;return;
}
function _cheat_manager_save_config($handle,$path,$sha256) {
 $handle = $handle|0;
 $path = $path|0;
 $sha256 = $sha256|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $conf = 0, $conf_str = 0, $i = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $conf_str = sp + 72|0;
 $tmp = sp + 40|0;
 $0 = $handle;
 $1 = $path;
 $2 = $sha256;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = (_config_file_new($6)|0);
 $conf = $7;
 $8 = $conf;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $10 = (_config_file_new(0)|0);
  $conf = $10;
 }
 $11 = $conf;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fprintf($17,757552,$vararg_buffer)|0);
  $18 = HEAP32[(259664)>>2]|0;
  $19 = ($18|0)!=(0|0);
  $20 = HEAP32[(259664)>>2]|0;
  $21 = HEAP32[544648>>2]|0;
  $22 = $19 ? $20 : $21;
  (_fflush($22)|0);
  STACKTOP = sp;return;
 }
 _memset(($conf_str|0),0,512)|0;
 dest=$tmp; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $0;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + (($28*12)|0)|0);
  $32 = ((($31)) + 4|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&1;
  if ($34) {
   $35 = $i;
   HEAP32[$vararg_buffer1>>2] = $35;
   (_snprintf($tmp,32,757606,$vararg_buffer1)|0);
   (_strlcat_rarch__($conf_str,$tmp,512)|0);
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $38 = HEAP8[$conf_str>>0]|0;
 $39 = ($38<<24>>24)!=(0);
 if ($39) {
  $40 = (_strlen($conf_str)|0);
  $41 = (($40) - 1)|0;
  $42 = (($conf_str) + ($41)|0);
  HEAP8[$42>>0] = 0;
 }
 $43 = $conf;
 $44 = $2;
 _config_set_string($43,$44,$conf_str);
 $45 = $conf;
 $46 = $1;
 $47 = (_config_file_write($45,$46)|0);
 if (!($47)) {
  $48 = HEAP32[(259664)>>2]|0;
  $49 = ($48|0)!=(0|0);
  $50 = HEAP32[(259664)>>2]|0;
  $51 = HEAP32[544648>>2]|0;
  $52 = $49 ? $50 : $51;
  $53 = $1;
  HEAP32[$vararg_buffer3>>2] = $53;
  (_fprintf($52,757610,$vararg_buffer3)|0);
  $54 = HEAP32[(259664)>>2]|0;
  $55 = ($54|0)!=(0|0);
  $56 = HEAP32[(259664)>>2]|0;
  $57 = HEAP32[544648>>2]|0;
  $58 = $55 ? $56 : $57;
  (_fflush($58)|0);
 }
 $59 = $conf;
 _config_file_free($59);
 STACKTOP = sp;return;
}
function _cheat_manager_apply_cheats($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $index = 0;
 $1 = HEAP32[265116>>2]|0;
 FUNCTION_TABLE_v[$1 & 511]();
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + (($7*12)|0)|0);
  $11 = ((($10)) + 4|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&1;
  if ($13) {
   $14 = HEAP32[265120>>2]|0;
   $15 = $index;
   $16 = (($15) + 1)|0;
   $index = $16;
   $17 = $i;
   $18 = $0;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + (($17*12)|0)|0);
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_viii[$14 & 1023]($15,1,$22);
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 STACKTOP = sp;return;
}
function _cheat_manager_update($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $msg = sp + 24|0;
 $0 = $handle;
 $1 = HEAP32[(251148)>>2]|0;
 _msg_queue_clear($1);
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($7*12)|0)|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 $14 = $13 ? 768052 : 768055;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + (($17*12)|0)|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $21;
 (_snprintf($msg,256,757532,$vararg_buffer)|0);
 $22 = HEAP32[(251148)>>2]|0;
 _msg_queue_push($22,$msg,1,180);
 $23 = HEAP8[102648>>0]|0;
 $24 = $23&1;
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[(259664)>>2]|0;
 $26 = ($25|0)!=(0|0);
 $27 = HEAP32[(259664)>>2]|0;
 $28 = HEAP32[544648>>2]|0;
 $29 = $26 ? $27 : $28;
 HEAP32[$vararg_buffer3>>2] = $msg;
 (_fprintf($29,772081,$vararg_buffer3)|0);
 $30 = HEAP32[(259664)>>2]|0;
 $31 = ($30|0)!=(0|0);
 $32 = HEAP32[(259664)>>2]|0;
 $33 = HEAP32[544648>>2]|0;
 $34 = $31 ? $32 : $33;
 (_fflush($34)|0);
 STACKTOP = sp;return;
}
function _xml_grab_cheat($cht,$ptr) {
 $cht = $cht|0;
 $ptr = $ptr|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code = 0, $first = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 13|0;
 $1 = $cht;
 $2 = $ptr;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $1;
   ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
   $first = 1;
   while(1) {
    $6 = $2;
    $7 = ($6|0)!=(0|0);
    if (!($7)) {
     label = 17;
     break;
    }
    $8 = $2;
    $9 = HEAP32[$8>>2]|0;
    $10 = (_strcmp($9,757513)|0);
    $11 = ($10|0)==(0);
    $12 = $2;
    if ($11) {
     $13 = ((($12)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = $1;
     HEAP32[$15>>2] = $14;
    } else {
     $16 = HEAP32[$12>>2]|0;
     $17 = (_strcmp($16,757525)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = $first;
      $20 = $19&1;
      if (!($20)) {
       $21 = $1;
       $22 = ((($21)) + 8|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (_strcat_alloc($23,757530)|0);
       $25 = $1;
       $26 = ((($25)) + 8|0);
       HEAP32[$26>>2] = $24;
       $27 = $1;
       $28 = ((($27)) + 8|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29|0)!=(0|0);
       if (!($30)) {
        label = 10;
        break;
       }
      }
      $31 = $2;
      $32 = ((($31)) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $code = $33;
      $34 = $code;
      $35 = ($34|0)!=(0|0);
      if (!($35)) {
       label = 12;
       break;
      }
      $36 = $1;
      $37 = ((($36)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = $code;
      $40 = (_strcat_alloc($38,$39)|0);
      $41 = $1;
      $42 = ((($41)) + 8|0);
      HEAP32[$42>>2] = $40;
      $43 = $1;
      $44 = ((($43)) + 8|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)!=(0|0);
      if (!($46)) {
       label = 14;
       break;
      }
      $first = 0;
     }
    }
    $47 = $2;
    $48 = ((($47)) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    $2 = $49;
   }
   if ((label|0) == 10) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
   else if ((label|0) == 12) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 14) {
    $$expand_i1_val6 = 0;
    HEAP8[$0>>0] = $$expand_i1_val6;
    break;
   }
   else if ((label|0) == 17) {
    $$expand_i1_val8 = 1;
    HEAP8[$0>>0] = $$expand_i1_val8;
    break;
   }
  } else {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $50 = $$pre_trunc&1;
 STACKTOP = sp;return ($50|0);
}
function _strcat_alloc($dest,$input) {
 $dest = $dest|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest_len = 0, $input_len = 0, $output = 0, $required_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dest;
 $2 = $input;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = (_strlen($5)|0);
  $7 = $6;
 } else {
  $7 = 0;
 }
 $dest_len = $7;
 $8 = $2;
 $9 = (_strlen($8)|0);
 $input_len = $9;
 $10 = $dest_len;
 $11 = $input_len;
 $12 = (($10) + ($11))|0;
 $13 = (($12) + 1)|0;
 $required_len = $13;
 $14 = $1;
 $15 = $required_len;
 $16 = (_realloc($14,$15)|0);
 $output = $16;
 $17 = $output;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $19 = $1;
 $20 = ($19|0)!=(0|0);
 $21 = $output;
 $22 = $2;
 $23 = $required_len;
 if ($20) {
  (_strlcat_rarch__($21,$22,$23)|0);
 } else {
  (_strlcpy_rarch__($21,$22,$23)|0);
 }
 $24 = $output;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _audio_convert_s16_to_float_C($out,$in,$samples,$gain) {
 $out = $out|0;
 $in = $in|0;
 $samples = $samples|0;
 $gain = +$gain;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in;
 $2 = $samples;
 $3 = $gain;
 $4 = $3;
 $5 = $4 / 32768.0;
 $3 = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $1;
  $11 = (($10) + ($9<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = (+($12<<16>>16));
  $14 = $3;
  $15 = $13 * $14;
  $16 = $i;
  $17 = $0;
  $18 = (($17) + ($16<<2)|0);
  HEAPF32[$18>>2] = $15;
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 STACKTOP = sp;return;
}
function _audio_convert_float_to_s16_C($out,$in,$samples) {
 $out = $out|0;
 $in = $in|0;
 $samples = $samples|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $i = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in;
 $2 = $samples;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $9 * 32768.0;
  $11 = (~~(($10)));
  $val = $11;
  $12 = $val;
  $13 = ($12|0)>(32767);
  if ($13) {
   $20 = 32767;
  } else {
   $14 = $val;
   $15 = ($14|0)<(-32768);
   if ($15) {
    $20 = -32768;
   } else {
    $16 = $val;
    $17 = $16&65535;
    $18 = $17 << 16 >> 16;
    $20 = $18;
   }
  }
  $19 = $20&65535;
  $21 = $i;
  $22 = $0;
  $23 = (($22) + ($21<<1)|0);
  HEAP16[$23>>1] = $19;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 STACKTOP = sp;return;
}
function _audio_convert_init_simd() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _ra_init($device,$rate,$latency) {
 $device = $device|0;
 $rate = $rate|0;
 $latency = $latency|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $device;
 $1 = $rate;
 $2 = $latency;
 $3 = $2;
 $4 = (_RWebAudioInit(($3|0))|0);
 $data = $4;
 $5 = $data;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $8 = $data;
  STACKTOP = sp;return ($8|0);
 }
 $7 = (_RWebAudioSampleRate()|0);
 HEAP32[(16812)>>2] = $7;
 $8 = $data;
 STACKTOP = sp;return ($8|0);
}
function _ra_write($data,$buf,$size) {
 $data = $data|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $buf;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = (_RWebAudioWrite(($3|0),($4|0))|0);
 STACKTOP = sp;return ($5|0);
}
function _ra_stop($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = (_RWebAudioStop()|0);
 STACKTOP = sp;return ($1|0);
}
function _ra_start($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = (_RWebAudioStart()|0);
 STACKTOP = sp;return ($1|0);
}
function _ra_set_nonblock_state($data,$state) {
 $data = $data|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $2 = $state&1;
 $1 = $2;
 $3 = $1;
 $4 = $3&1;
 _RWebAudioSetNonblockState(($4|0));
 STACKTOP = sp;return;
}
function _ra_free($data) {
 $data = $data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 _RWebAudioFree();
 STACKTOP = sp;return;
}
function _ra_use_float($data) {
 $data = $data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 STACKTOP = sp;return 1;
}
function _ra_write_avail($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = (_RWebAudioWriteAvail()|0);
 STACKTOP = sp;return ($1|0);
}
function _ra_buffer_size($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = (_RWebAudioBufferSize()|0);
 STACKTOP = sp;return ($1|0);
}
function _input_overlay_set_scale_factor($ol,$scale) {
 $ol = $ol|0;
 $scale = +$scale;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ol;
 $1 = $scale;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $0;
  $4 = ((($3)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + (($7*136)|0)|0);
  $12 = $1;
  _input_overlay_scale($11,$12);
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 $15 = $0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 24|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $0;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 28|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $0;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 32|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $0;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 36|0);
 $41 = +HEAPF32[$40>>2];
 FUNCTION_TABLE_vidddd[$19 & 1023]($21,$26,$31,$36,$41);
 STACKTOP = sp;return;
}
function _input_overlay_new($overlay) {
 $overlay = $overlay|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ol = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $overlay;
 $2 = (_calloc(1,32)|0);
 $ol = $2;
 $3 = $ol;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = HEAP32[(12)>>2]|0;
   $6 = ((($5)) + 52|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0|0);
   if (!($8)) {
    $9 = HEAP32[(259664)>>2]|0;
    $10 = ($9|0)!=(0|0);
    $11 = HEAP32[(259664)>>2]|0;
    $12 = HEAP32[544648>>2]|0;
    $13 = $10 ? $11 : $12;
    (_fprintf($13,757755,$vararg_buffer)|0);
    $14 = HEAP32[(259664)>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = HEAP32[(259664)>>2]|0;
    $17 = HEAP32[544648>>2]|0;
    $18 = $15 ? $16 : $17;
    (_fflush($18)|0);
    break;
   }
   $19 = HEAP32[(12)>>2]|0;
   $20 = ((($19)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[(24)>>2]|0;
   $23 = $ol;
   $24 = ((($23)) + 4|0);
   FUNCTION_TABLE_vii[$21 & 1023]($22,$24);
   $25 = HEAP32[(24)>>2]|0;
   $26 = $ol;
   HEAP32[$26>>2] = $25;
   $27 = $ol;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = $ol;
    $32 = $1;
    $33 = (_input_overlay_load_overlays($31,$32)|0);
    if ($33) {
     $34 = $ol;
     $35 = ((($34)) + 12|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $ol;
     $38 = ((($37)) + 16|0);
     HEAP32[$38>>2] = $36;
     $39 = $ol;
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $ol;
     $45 = HEAP32[$44>>2]|0;
     $46 = $ol;
     $47 = ((($46)) + 16|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($48)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $ol;
     $52 = ((($51)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $ol;
     $57 = ((($56)) + 16|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ((($58)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     (FUNCTION_TABLE_iiiii[$43 & 255]($45,$50,$55,$60)|0);
     $61 = $ol;
     $62 = ((($61)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ((($63)) + 12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $ol;
     $67 = HEAP32[$66>>2]|0;
     $68 = $ol;
     $69 = ((($68)) + 16|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($70)) + 24|0);
     $72 = +HEAPF32[$71>>2];
     $73 = $ol;
     $74 = ((($73)) + 16|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($75)) + 28|0);
     $77 = +HEAPF32[$76>>2];
     $78 = $ol;
     $79 = ((($78)) + 16|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ((($80)) + 32|0);
     $82 = +HEAPF32[$81>>2];
     $83 = $ol;
     $84 = ((($83)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = +HEAPF32[$86>>2];
     FUNCTION_TABLE_vidddd[$65 & 1023]($67,$72,$77,$82,$87);
     $88 = $ol;
     $89 = ((($88)) + 4|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 16|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $ol;
     $94 = HEAP32[$93>>2]|0;
     $95 = $ol;
     $96 = ((($95)) + 16|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($97)) + 68|0);
     $99 = HEAP8[$98>>0]|0;
     $100 = $99&1;
     FUNCTION_TABLE_vii[$92 & 1023]($94,$100);
     $101 = $ol;
     $102 = ((($101)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = HEAP32[$103>>2]|0;
     $105 = $ol;
     $106 = HEAP32[$105>>2]|0;
     FUNCTION_TABLE_vii[$104 & 1023]($106,1);
     $107 = $ol;
     $108 = ((($107)) + 8|0);
     HEAP8[$108>>0] = 1;
     $109 = $ol;
     $110 = +HEAPF32[(65728)>>2];
     _input_overlay_set_alpha_mod($109,$110);
     $111 = $ol;
     _input_overlay_set_scale_factor($111,1.0);
     $112 = $ol;
     $113 = ((($112)) + 20|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) + 1)|0;
     $116 = $ol;
     $117 = ((($116)) + 24|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = (($115>>>0) % ($118>>>0))&-1;
     $120 = $ol;
     $121 = ((($120)) + 28|0);
     HEAP32[$121>>2] = $119;
     $122 = $ol;
     $0 = $122;
     $124 = $0;
     STACKTOP = sp;return ($124|0);
    }
   }
  }
 } while(0);
 $123 = $ol;
 _input_overlay_free($123);
 $0 = 0;
 $124 = $0;
 STACKTOP = sp;return ($124|0);
}
function _input_overlay_set_alpha_mod($ol,$mod) {
 $ol = $ol|0;
 $mod = +$mod;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ol;
 $1 = $mod;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 FUNCTION_TABLE_vid[$6 & 511]($8,$9);
 STACKTOP = sp;return;
}
function _input_overlay_free($ol) {
 $ol = $ol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ol;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 _input_overlay_free_overlays($3);
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$11 & 1023]($13,0);
 }
 $14 = $0;
 _free($14);
 STACKTOP = sp;return;
}
function _input_overlay_poll($ol,$out,$norm_x,$norm_y) {
 $ol = $ol|0;
 $out = $out|0;
 $norm_x = $norm_x|0;
 $norm_y = $norm_y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $base = 0, $i = 0, $mask = 0, $x = 0.0, $x_val = 0.0, $y = 0.0, $y_val = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mask = sp;
 $0 = $ol;
 $1 = $out;
 $2 = $norm_x;
 $3 = $norm_y;
 $4 = $1;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 if (!($8)) {
  $9 = $0;
  $10 = ((($9)) + 9|0);
  HEAP8[$10>>0] = 0;
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = $11 << 16 >> 16;
 $13 = (($12) + 32767)|0;
 $14 = (+($13|0));
 $15 = $14 / 65535.0;
 $x = $15;
 $16 = $3;
 $17 = $16 << 16 >> 16;
 $18 = (($17) + 32767)|0;
 $19 = (+($18|0));
 $20 = $19 / 65535.0;
 $y = $20;
 $21 = $0;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 24|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $x;
 $27 = $26 - $25;
 $x = $27;
 $28 = $0;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 28|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $y;
 $34 = $33 - $32;
 $y = $34;
 $35 = $0;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 32|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $x;
 $41 = $40 / $39;
 $x = $41;
 $42 = $0;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 36|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $y;
 $48 = $47 / $46;
 $y = $48;
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = $0;
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($49>>>0)<($54>>>0);
  if (!($55)) {
   break;
  }
  $56 = $i;
  $57 = $0;
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + (($56*104)|0)|0);
  $62 = $x;
  $63 = $y;
  $64 = (_inside_hitbox($61,$62,$63)|0);
  do {
   if ($64) {
    $65 = $i;
    $66 = $0;
    $67 = ((($66)) + 16|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + (($65*104)|0)|0);
    $71 = ((($70)) + 20|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(0);
    if ($73) {
     $74 = $i;
     $75 = $0;
     $76 = ((($75)) + 16|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = HEAP32[$77>>2]|0;
     $79 = (($78) + (($74*104)|0)|0);
     $80 = ((($79)) + 24|0);
     $81 = $80;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($81) + 4)|0;
     $85 = $84;
     $86 = HEAP32[$85>>2]|0;
     $87 = $mask;
     $88 = $87;
     HEAP32[$88>>2] = $83;
     $89 = (($87) + 4)|0;
     $90 = $89;
     HEAP32[$90>>2] = $86;
     $91 = $mask;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($91) + 4)|0;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = $1;
     $98 = $97;
     $99 = $98;
     $100 = HEAP32[$99>>2]|0;
     $101 = (($98) + 4)|0;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $104 = $100 | $93;
     $105 = $103 | $96;
     $106 = $97;
     $107 = $106;
     HEAP32[$107>>2] = $104;
     $108 = (($106) + 4)|0;
     $109 = $108;
     HEAP32[$109>>2] = $105;
     $110 = $mask;
     $111 = $110;
     $112 = HEAP32[$111>>2]|0;
     $113 = (($110) + 4)|0;
     $114 = $113;
     $115 = HEAP32[$114>>2]|0;
     $116 = $115 & 524288;
     $117 = (0)!=(0);
     $118 = ($116|0)!=(0);
     $119 = $117 | $118;
     if (!($119)) {
      break;
     }
     $120 = $i;
     $121 = $0;
     $122 = ((($121)) + 16|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = HEAP32[$123>>2]|0;
     $125 = (($124) + (($120*104)|0)|0);
     $126 = ((($125)) + 36|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $0;
     $129 = ((($128)) + 28|0);
     HEAP32[$129>>2] = $127;
     break;
    }
    $130 = $x;
    $131 = $i;
    $132 = $0;
    $133 = ((($132)) + 16|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + (($131*104)|0)|0);
    $137 = +HEAPF32[$136>>2];
    $138 = $130 - $137;
    $139 = $i;
    $140 = $0;
    $141 = ((($140)) + 16|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) + (($139*104)|0)|0);
    $145 = ((($144)) + 12|0);
    $146 = +HEAPF32[$145>>2];
    $147 = $138 / $146;
    $148 = $i;
    $149 = $0;
    $150 = ((($149)) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + (($148*104)|0)|0);
    $154 = ((($153)) + 32|0);
    $155 = +HEAPF32[$154>>2];
    $156 = $147 / $155;
    $x_val = $156;
    $157 = $y;
    $158 = $i;
    $159 = $0;
    $160 = ((($159)) + 16|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = HEAP32[$161>>2]|0;
    $163 = (($162) + (($158*104)|0)|0);
    $164 = ((($163)) + 4|0);
    $165 = +HEAPF32[$164>>2];
    $166 = $157 - $165;
    $167 = $i;
    $168 = $0;
    $169 = ((($168)) + 16|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) + (($167*104)|0)|0);
    $173 = ((($172)) + 16|0);
    $174 = +HEAPF32[$173>>2];
    $175 = $166 / $174;
    $176 = $i;
    $177 = $0;
    $178 = ((($177)) + 16|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) + (($176*104)|0)|0);
    $182 = ((($181)) + 32|0);
    $183 = +HEAPF32[$182>>2];
    $184 = $175 / $183;
    $y_val = $184;
    $185 = $x_val;
    $186 = $185;
    $187 = (+Math_abs((+$186)));
    $188 = $187 > 1.0;
    if ($188) {
     $189 = $x_val;
     $190 = $189 > 0.0;
     $191 = $190 ? 1.0 : -1.0;
     $x_val = $191;
    }
    $192 = $y_val;
    $193 = $192;
    $194 = (+Math_abs((+$193)));
    $195 = $194 > 1.0;
    if ($195) {
     $196 = $y_val;
     $197 = $196 > 0.0;
     $198 = $197 ? 1.0 : -1.0;
     $y_val = $198;
    }
    $199 = $i;
    $200 = $0;
    $201 = ((($200)) + 16|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = HEAP32[$202>>2]|0;
    $204 = (($203) + (($199*104)|0)|0);
    $205 = ((($204)) + 20|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ($206|0)==(2);
    $208 = $207 ? 2 : 0;
    $base = $208;
    $209 = $x_val;
    $210 = $209 * 32767.0;
    $211 = (~~(($210)));
    $212 = $base;
    $213 = (($212) + 0)|0;
    $214 = $1;
    $215 = ((($214)) + 8|0);
    $216 = (($215) + ($213<<1)|0);
    HEAP16[$216>>1] = $211;
    $217 = $y_val;
    $218 = $217 * 32767.0;
    $219 = (~~(($218)));
    $220 = $base;
    $221 = (($220) + 1)|0;
    $222 = $1;
    $223 = ((($222)) + 8|0);
    $224 = (($223) + ($221<<1)|0);
    HEAP16[$224>>1] = $219;
   }
  } while(0);
  $225 = $i;
  $226 = (($225) + 1)|0;
  $i = $226;
 }
 $227 = $1;
 $228 = $227;
 $229 = $228;
 $230 = HEAP32[$229>>2]|0;
 $231 = (($228) + 4)|0;
 $232 = $231;
 $233 = HEAP32[$232>>2]|0;
 $234 = ($230|0)!=(0);
 $235 = ($233|0)!=(0);
 $236 = $234 | $235;
 $237 = $0;
 $238 = ((($237)) + 9|0);
 if (!($236)) {
  HEAP8[$238>>0] = 0;
  STACKTOP = sp;return;
 }
 $239 = HEAP8[$238>>0]|0;
 $240 = $239&1;
 if (!($240)) {
  STACKTOP = sp;return;
 }
 $241 = $1;
 ;HEAP32[$241>>2]=0|0;HEAP32[$241+4>>2]=0|0;HEAP32[$241+8>>2]=0|0;HEAP32[$241+12>>2]=0|0;
 STACKTOP = sp;return;
}
function _input_overlay_poll_clear($ol) {
 $ol = $ol|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ol;
 $1 = $0;
 $2 = ((($1)) + 9|0);
 HEAP8[$2>>0] = 0;
 STACKTOP = sp;return;
}
function _input_overlay_next($ol) {
 $ol = $ol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ol;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 20|0);
 HEAP32[$5>>2] = $3;
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*136)|0)|0);
 $13 = $0;
 $14 = ((($13)) + 16|0);
 HEAP32[$14>>2] = $12;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 (FUNCTION_TABLE_iiiii[$19 & 255]($21,$26,$31,$36)|0);
 $37 = $0;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $0;
 $43 = HEAP32[$42>>2]|0;
 $44 = $0;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 24|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $0;
 $50 = ((($49)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 28|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $0;
 $55 = ((($54)) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 32|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $0;
 $60 = ((($59)) + 16|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 36|0);
 $63 = +HEAPF32[$62>>2];
 FUNCTION_TABLE_vidddd[$41 & 1023]($43,$48,$53,$58,$63);
 $64 = $0;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($66)) + 16|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $0;
 $70 = HEAP32[$69>>2]|0;
 $71 = $0;
 $72 = ((($71)) + 16|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 68|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&1;
 FUNCTION_TABLE_vii[$68 & 1023]($70,$76);
 $77 = $0;
 $78 = ((($77)) + 9|0);
 HEAP8[$78>>0] = 1;
 $79 = $0;
 $80 = ((($79)) + 20|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($81) + 1)|0;
 $83 = $0;
 $84 = ((($83)) + 24|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($82>>>0) % ($85>>>0))&-1;
 $87 = $0;
 $88 = ((($87)) + 28|0);
 HEAP32[$88>>2] = $86;
 STACKTOP = sp;return;
}
function _input_overlay_full_screen($ol) {
 $ol = $ol|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ol;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 68|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _input_overlay_scale($overlay,$scale) {
 $overlay = $overlay|0;
 $scale = +$scale;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $overlay;
 $1 = $scale;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 40|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $0;
  $10 = ((($9)) + 24|0);
  HEAPF32[$10>>2] = $8;
  $11 = $0;
  $12 = ((($11)) + 44|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $0;
  $15 = ((($14)) + 28|0);
  HEAPF32[$15>>2] = $13;
  $16 = $0;
  $17 = ((($16)) + 48|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $0;
  $20 = ((($19)) + 32|0);
  HEAPF32[$20>>2] = $18;
  $21 = $0;
  $22 = ((($21)) + 52|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $0;
  $25 = ((($24)) + 36|0);
  HEAPF32[$25>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $26 = $1;
  $27 = $0;
  $28 = ((($27)) + 56|0);
  HEAPF32[$28>>2] = $26;
  $29 = $0;
  $30 = ((($29)) + 48|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $1;
  $33 = $31 * $32;
  $34 = $0;
  $35 = ((($34)) + 32|0);
  HEAPF32[$35>>2] = $33;
  $36 = $0;
  $37 = ((($36)) + 52|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $1;
  $40 = $38 * $39;
  $41 = $0;
  $42 = ((($41)) + 36|0);
  HEAPF32[$42>>2] = $40;
  $43 = $0;
  $44 = ((($43)) + 60|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $0;
  $47 = ((($46)) + 40|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $0;
  $50 = ((($49)) + 60|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $48 - $51;
  $53 = $1;
  $54 = $52 * $53;
  $55 = $45 + $54;
  $56 = $0;
  $57 = ((($56)) + 24|0);
  HEAPF32[$57>>2] = $55;
  $58 = $0;
  $59 = ((($58)) + 64|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $0;
  $62 = ((($61)) + 44|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $0;
  $65 = ((($64)) + 64|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $63 - $66;
  $68 = $1;
  $69 = $67 * $68;
  $70 = $60 + $69;
  $71 = $0;
  $72 = ((($71)) + 28|0);
  HEAPF32[$72>>2] = $70;
  STACKTOP = sp;return;
 }
}
function _input_overlay_load_overlays($ol,$path) {
 $ol = $ol|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $conf = 0, $i = 0, $i1 = 0, $overlays = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 53|0;
 $overlays = sp + 36|0;
 $1 = $ol;
 $2 = $path;
 $ret = 1;
 $3 = $2;
 $4 = (_config_file_new($3)|0);
 $conf = $4;
 $5 = $conf;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $7 = HEAP32[(259664)>>2]|0;
  $8 = ($7|0)!=(0|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = HEAP32[544648>>2]|0;
  $11 = $8 ? $9 : $10;
  $12 = $2;
  HEAP32[$vararg_buffer>>2] = $12;
  (_fprintf($11,759442,$vararg_buffer)|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fflush($17)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $98 = $$pre_trunc&1;
  STACKTOP = sp;return ($98|0);
 }
 HEAP32[$overlays>>2] = 0;
 $18 = $conf;
 $19 = (_config_get_uint($18,759496,$overlays)|0);
 L5: do {
  if ($19) {
   $30 = HEAP32[$overlays>>2]|0;
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $ret = 0;
    break;
   }
   $32 = HEAP32[$overlays>>2]|0;
   $33 = (_calloc($32,136)|0);
   $34 = $1;
   $35 = ((($34)) + 12|0);
   HEAP32[$35>>2] = $33;
   $36 = $1;
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0|0);
   if (!($39)) {
    $ret = 0;
    break;
   }
   $40 = HEAP32[$overlays>>2]|0;
   $41 = $1;
   $42 = ((($41)) + 24|0);
   HEAP32[$42>>2] = $40;
   $i = 0;
   while(1) {
    $43 = $i;
    $44 = $1;
    $45 = ((($44)) + 24|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($43>>>0)<($46>>>0);
    if (!($47)) {
     break;
    }
    $48 = $conf;
    $49 = $2;
    $50 = $i;
    $51 = $1;
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + (($50*136)|0)|0);
    $55 = $i;
    $56 = (_input_overlay_load_overlay($48,$49,$54,$55)|0);
    if (!($56)) {
     label = 12;
     break;
    }
    $68 = $i;
    $69 = (($68) + 1)|0;
    $i = $69;
   }
   if ((label|0) == 12) {
    $57 = HEAP32[(259664)>>2]|0;
    $58 = ($57|0)!=(0|0);
    $59 = HEAP32[(259664)>>2]|0;
    $60 = HEAP32[544648>>2]|0;
    $61 = $58 ? $59 : $60;
    $62 = $i;
    HEAP32[$vararg_buffer3>>2] = $62;
    (_fprintf($61,759568,$vararg_buffer3)|0);
    $63 = HEAP32[(259664)>>2]|0;
    $64 = ($63|0)!=(0|0);
    $65 = HEAP32[(259664)>>2]|0;
    $66 = HEAP32[544648>>2]|0;
    $67 = $64 ? $65 : $66;
    (_fflush($67)|0);
    $ret = 0;
    break;
   }
   $i1 = 0;
   while(1) {
    $70 = $i1;
    $71 = $1;
    $72 = ((($71)) + 24|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($70>>>0)<($73>>>0);
    if (!($74)) {
     break L5;
    }
    $75 = $1;
    $76 = ((($75)) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $i1;
    $79 = $1;
    $80 = ((($79)) + 24|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (_input_overlay_resolve_targets($77,$78,$81)|0);
    if (!($82)) {
     break;
    }
    $93 = $i1;
    $94 = (($93) + 1)|0;
    $i1 = $94;
   }
   $83 = HEAP32[(259664)>>2]|0;
   $84 = ($83|0)!=(0|0);
   $85 = HEAP32[(259664)>>2]|0;
   $86 = HEAP32[544648>>2]|0;
   $87 = $84 ? $85 : $86;
   (_fprintf($87,759629,$vararg_buffer6)|0);
   $88 = HEAP32[(259664)>>2]|0;
   $89 = ($88|0)!=(0|0);
   $90 = HEAP32[(259664)>>2]|0;
   $91 = HEAP32[544648>>2]|0;
   $92 = $89 ? $90 : $91;
   (_fflush($92)|0);
   $ret = 0;
  } else {
   $20 = HEAP32[(259664)>>2]|0;
   $21 = ($20|0)!=(0|0);
   $22 = HEAP32[(259664)>>2]|0;
   $23 = HEAP32[544648>>2]|0;
   $24 = $21 ? $22 : $23;
   (_fprintf($24,759505,$vararg_buffer1)|0);
   $25 = HEAP32[(259664)>>2]|0;
   $26 = ($25|0)!=(0|0);
   $27 = HEAP32[(259664)>>2]|0;
   $28 = HEAP32[544648>>2]|0;
   $29 = $26 ? $27 : $28;
   (_fflush($29)|0);
   $ret = 0;
  }
 } while(0);
 $95 = $conf;
 _config_file_free($95);
 $96 = $ret;
 $97 = $96&1;
 $$expand_i1_val9 = $97&1;
 HEAP8[$0>>0] = $$expand_i1_val9;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $98 = $$pre_trunc&1;
 STACKTOP = sp;return ($98|0);
}
function _input_overlay_free_overlays($ol) {
 $ol = $ol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ol;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = ((($2)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + (($6*136)|0)|0);
  _input_overlay_free_overlay($10);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 _free($15);
 STACKTOP = sp;return;
}
function _inside_hitbox($desc,$x,$y) {
 $desc = $desc|0;
 $x = +$x;
 $y = +$y;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0.0, $sq_dist = 0.0, $x_dist = 0.0, $y_dist = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = $desc;
 $2 = $x;
 $3 = $y;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 0:  {
  $7 = $2;
  $8 = $1;
  $9 = +HEAPF32[$8>>2];
  $10 = $7 - $9;
  $11 = $1;
  $12 = ((($11)) + 12|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $10 / $13;
  $x_dist = $14;
  $15 = $3;
  $16 = $1;
  $17 = ((($16)) + 4|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $15 - $18;
  $20 = $1;
  $21 = ((($20)) + 16|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $19 / $22;
  $y_dist = $23;
  $24 = $x_dist;
  $25 = $x_dist;
  $26 = $24 * $25;
  $27 = $y_dist;
  $28 = $y_dist;
  $29 = $27 * $28;
  $30 = $26 + $29;
  $sq_dist = $30;
  $31 = $sq_dist;
  $32 = $31 <= 1.0;
  $$expand_i1_val = $32&1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $57 = $$pre_trunc&1;
  STACKTOP = sp;return ($57|0);
  break;
 }
 case 1:  {
  $33 = $2;
  $34 = $1;
  $35 = +HEAPF32[$34>>2];
  $36 = $33 - $35;
  $37 = $36;
  $38 = (+Math_abs((+$37)));
  $39 = $1;
  $40 = ((($39)) + 12|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $41;
  $43 = $38 <= $42;
  if ($43) {
   $44 = $3;
   $45 = $1;
   $46 = ((($45)) + 4|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $44 - $47;
   $49 = $48;
   $50 = (+Math_abs((+$49)));
   $51 = $1;
   $52 = ((($51)) + 16|0);
   $53 = +HEAPF32[$52>>2];
   $54 = $53;
   $55 = $50 <= $54;
   $56 = $55;
  } else {
   $56 = 0;
  }
  $$expand_i1_val2 = $56&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $57 = $$pre_trunc&1;
  STACKTOP = sp;return ($57|0);
  break;
 }
 default: {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $57 = $$pre_trunc&1;
  STACKTOP = sp;return ($57|0);
 }
 }
 return (0)|0;
}
function _input_overlay_load_overlay($conf,$config_path,$overlay,$index) {
 $conf = $conf|0;
 $config_path = $config_path|0;
 $overlay = $overlay|0;
 $index = $index|0;
 var $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$expand_i1_val37 = 0, $$expand_i1_val39 = 0, $$expand_i1_val41 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0;
 var $99 = 0.0, $descs = 0, $i = 0, $img = 0, $list = 0, $overlay_descs_key = 0, $overlay_full_screen_key = 0, $overlay_name_key = 0, $overlay_path = 0, $overlay_path_key = 0, $overlay_rect = 0, $overlay_rect_key = 0, $overlay_resolved_path = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 8896|0;
 $overlay_path_key = sp + 8832|0;
 $overlay_name_key = sp + 8768|0;
 $overlay_path = sp + 4672|0;
 $overlay_resolved_path = sp + 576|0;
 $img = sp + 96|0;
 $overlay_rect_key = sp + 512|0;
 $overlay_rect = sp + 256|0;
 $overlay_full_screen_key = sp + 192|0;
 $overlay_descs_key = sp + 128|0;
 $descs = sp + 88|0;
 $1 = $conf;
 $2 = $config_path;
 $3 = $overlay;
 $4 = $index;
 $5 = $4;
 HEAP32[$vararg_buffer>>2] = $5;
 (_snprintf($overlay_path_key,64,758939,$vararg_buffer)|0);
 $6 = $1;
 $7 = (_config_get_path($6,$overlay_path_key,$overlay_path,4096)|0);
 if (!($7)) {
  $8 = HEAP32[(259664)>>2]|0;
  $9 = ($8|0)!=(0|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = HEAP32[544648>>2]|0;
  $12 = $9 ? $10 : $11;
  HEAP32[$vararg_buffer1>>2] = $overlay_path_key;
  (_fprintf($12,758957,$vararg_buffer1)|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fflush($17)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $192 = $$pre_trunc&1;
  STACKTOP = sp;return ($192|0);
 }
 $18 = $4;
 HEAP32[$vararg_buffer4>>2] = $18;
 (_snprintf($overlay_name_key,64,759017,$vararg_buffer4)|0);
 $19 = $1;
 $20 = $3;
 $21 = ((($20)) + 69|0);
 (_config_get_array($19,$overlay_name_key,$21,64)|0);
 $22 = $2;
 _fill_pathname_resolve_relative($overlay_resolved_path,$22,$overlay_path,4096);
 ;HEAP32[$img>>2]=0|0;HEAP32[$img+4>>2]=0|0;HEAP32[$img+8>>2]=0|0;
 $23 = (_texture_image_load($overlay_resolved_path,$img)|0);
 if (!($23)) {
  $24 = HEAP32[(259664)>>2]|0;
  $25 = ($24|0)!=(0|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = HEAP32[544648>>2]|0;
  $28 = $25 ? $26 : $27;
  HEAP32[$vararg_buffer7>>2] = $overlay_path;
  (_fprintf($28,759032,$vararg_buffer7)|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = ($29|0)!=(0|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = HEAP32[544648>>2]|0;
  $33 = $30 ? $31 : $32;
  (_fflush($33)|0);
  $$expand_i1_val31 = 0;
  HEAP8[$0>>0] = $$expand_i1_val31;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $192 = $$pre_trunc&1;
  STACKTOP = sp;return ($192|0);
 }
 $34 = ((($img)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $3;
 $37 = ((($36)) + 8|0);
 HEAP32[$37>>2] = $35;
 $38 = HEAP32[$img>>2]|0;
 $39 = $3;
 $40 = ((($39)) + 12|0);
 HEAP32[$40>>2] = $38;
 $41 = ((($img)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $3;
 $44 = ((($43)) + 16|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = ((($45)) + 44|0);
 HEAPF32[$46>>2] = 0.0;
 $47 = $3;
 $48 = ((($47)) + 40|0);
 HEAPF32[$48>>2] = 0.0;
 $49 = $3;
 $50 = ((($49)) + 52|0);
 HEAPF32[$50>>2] = 1.0;
 $51 = $3;
 $52 = ((($51)) + 48|0);
 HEAPF32[$52>>2] = 1.0;
 $53 = $4;
 HEAP32[$vararg_buffer10>>2] = $53;
 (_snprintf($overlay_rect_key,64,759080,$vararg_buffer10)|0);
 $54 = $1;
 $55 = (_config_get_array($54,$overlay_rect_key,$overlay_rect,256)|0);
 do {
  if ($55) {
   $56 = (_string_split($overlay_rect,758535)|0);
   $list = $56;
   $57 = $list;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59>>>0)<(4);
   if (!($60)) {
    $71 = $list;
    $72 = HEAP32[$71>>2]|0;
    $73 = HEAP32[$72>>2]|0;
    $74 = (+_strtod($73,0));
    $75 = $74;
    $76 = $3;
    $77 = ((($76)) + 40|0);
    HEAPF32[$77>>2] = $75;
    $78 = $list;
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($79)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (+_strtod($81,0));
    $83 = $82;
    $84 = $3;
    $85 = ((($84)) + 44|0);
    HEAPF32[$85>>2] = $83;
    $86 = $list;
    $87 = HEAP32[$86>>2]|0;
    $88 = ((($87)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (+_strtod($89,0));
    $91 = $90;
    $92 = $3;
    $93 = ((($92)) + 48|0);
    HEAPF32[$93>>2] = $91;
    $94 = $list;
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 24|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (+_strtod($97,0));
    $99 = $98;
    $100 = $3;
    $101 = ((($100)) + 52|0);
    HEAPF32[$101>>2] = $99;
    $102 = $list;
    _string_list_free($102);
    break;
   }
   $61 = HEAP32[(259664)>>2]|0;
   $62 = ($61|0)!=(0|0);
   $63 = HEAP32[(259664)>>2]|0;
   $64 = HEAP32[544648>>2]|0;
   $65 = $62 ? $63 : $64;
   HEAP32[$vararg_buffer13>>2] = $overlay_rect;
   (_fprintf($65,759095,$vararg_buffer13)|0);
   $66 = HEAP32[(259664)>>2]|0;
   $67 = ($66|0)!=(0|0);
   $68 = HEAP32[(259664)>>2]|0;
   $69 = HEAP32[544648>>2]|0;
   $70 = $67 ? $68 : $69;
   (_fflush($70)|0);
   $$expand_i1_val33 = 0;
   HEAP8[$0>>0] = $$expand_i1_val33;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $192 = $$pre_trunc&1;
   STACKTOP = sp;return ($192|0);
  }
 } while(0);
 $103 = $4;
 HEAP32[$vararg_buffer16>>2] = $103;
 (_snprintf($overlay_full_screen_key,64,759181,$vararg_buffer16)|0);
 $104 = $3;
 $105 = ((($104)) + 68|0);
 HEAP8[$105>>0] = 0;
 $106 = $1;
 $107 = $3;
 $108 = ((($107)) + 68|0);
 (_config_get_bool($106,$overlay_full_screen_key,$108)|0);
 $109 = $4;
 HEAP32[$vararg_buffer19>>2] = $109;
 (_snprintf($overlay_descs_key,64,759203,$vararg_buffer19)|0);
 HEAP32[$descs>>2] = 0;
 $110 = $1;
 $111 = (_config_get_uint($110,$overlay_descs_key,$descs)|0);
 if (!($111)) {
  $112 = HEAP32[(259664)>>2]|0;
  $113 = ($112|0)!=(0|0);
  $114 = HEAP32[(259664)>>2]|0;
  $115 = HEAP32[544648>>2]|0;
  $116 = $113 ? $114 : $115;
  HEAP32[$vararg_buffer22>>2] = $overlay_descs_key;
  (_fprintf($116,759219,$vararg_buffer22)|0);
  $117 = HEAP32[(259664)>>2]|0;
  $118 = ($117|0)!=(0|0);
  $119 = HEAP32[(259664)>>2]|0;
  $120 = HEAP32[544648>>2]|0;
  $121 = $118 ? $119 : $120;
  (_fflush($121)|0);
  $$expand_i1_val35 = 0;
  HEAP8[$0>>0] = $$expand_i1_val35;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $192 = $$pre_trunc&1;
  STACKTOP = sp;return ($192|0);
 }
 $122 = HEAP32[$descs>>2]|0;
 $123 = (_calloc($122,104)|0);
 $124 = $3;
 HEAP32[$124>>2] = $123;
 $125 = $3;
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)!=(0|0);
 if (!($127)) {
  $128 = HEAP32[(259664)>>2]|0;
  $129 = ($128|0)!=(0|0);
  $130 = HEAP32[(259664)>>2]|0;
  $131 = HEAP32[544648>>2]|0;
  $132 = $129 ? $130 : $131;
  (_fprintf($132,759304,$vararg_buffer25)|0);
  $133 = HEAP32[(259664)>>2]|0;
  $134 = ($133|0)!=(0|0);
  $135 = HEAP32[(259664)>>2]|0;
  $136 = HEAP32[544648>>2]|0;
  $137 = $134 ? $135 : $136;
  (_fflush($137)|0);
  $$expand_i1_val37 = 0;
  HEAP8[$0>>0] = $$expand_i1_val37;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $192 = $$pre_trunc&1;
  STACKTOP = sp;return ($192|0);
 }
 $138 = HEAP32[$descs>>2]|0;
 $139 = $3;
 $140 = ((($139)) + 4|0);
 HEAP32[$140>>2] = $138;
 $i = 0;
 while(1) {
  $141 = $i;
  $142 = $3;
  $143 = ((($142)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($141>>>0)<($144>>>0);
  if (!($145)) {
   label = 18;
   break;
  }
  $146 = $1;
  $147 = $i;
  $148 = $3;
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + (($147*104)|0)|0);
  $151 = $4;
  $152 = $i;
  $153 = HEAP32[$img>>2]|0;
  $154 = ((($img)) + 4|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (_input_overlay_load_desc($146,$150,$151,$152,$153,$155)|0);
  if (!($156)) {
   label = 16;
   break;
  }
  $168 = $i;
  $169 = (($168) + 1)|0;
  $i = $169;
 }
 if ((label|0) == 16) {
  $157 = HEAP32[(259664)>>2]|0;
  $158 = ($157|0)!=(0|0);
  $159 = HEAP32[(259664)>>2]|0;
  $160 = HEAP32[544648>>2]|0;
  $161 = $158 ? $159 : $160;
  $162 = $i;
  HEAP32[$vararg_buffer27>>2] = $162;
  (_fprintf($161,759363,$vararg_buffer27)|0);
  $163 = HEAP32[(259664)>>2]|0;
  $164 = ($163|0)!=(0|0);
  $165 = HEAP32[(259664)>>2]|0;
  $166 = HEAP32[544648>>2]|0;
  $167 = $164 ? $165 : $166;
  (_fflush($167)|0);
  $$expand_i1_val39 = 0;
  HEAP8[$0>>0] = $$expand_i1_val39;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $192 = $$pre_trunc&1;
  STACKTOP = sp;return ($192|0);
 }
 else if ((label|0) == 18) {
  $170 = $3;
  $171 = ((($170)) + 20|0);
  HEAP8[$171>>0] = 0;
  $172 = $3;
  $173 = ((($172)) + 40|0);
  $174 = +HEAPF32[$173>>2];
  $175 = $3;
  $176 = ((($175)) + 48|0);
  $177 = +HEAPF32[$176>>2];
  $178 = 0.5 * $177;
  $179 = $174 + $178;
  $180 = $3;
  $181 = ((($180)) + 60|0);
  HEAPF32[$181>>2] = $179;
  $182 = $3;
  $183 = ((($182)) + 44|0);
  $184 = +HEAPF32[$183>>2];
  $185 = $3;
  $186 = ((($185)) + 52|0);
  $187 = +HEAPF32[$186>>2];
  $188 = 0.5 * $187;
  $189 = $184 + $188;
  $190 = $3;
  $191 = ((($190)) + 64|0);
  HEAPF32[$191>>2] = $189;
  $$expand_i1_val41 = 1;
  HEAP8[$0>>0] = $$expand_i1_val41;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $192 = $$pre_trunc&1;
  STACKTOP = sp;return ($192|0);
 }
 return (0)|0;
}
function _input_overlay_load_desc($conf,$desc,$ol_index,$desc_index,$width,$height) {
 $conf = $conf|0;
 $desc = $desc|0;
 $ol_index = $ol_index|0;
 $desc_index = $desc_index|0;
 $width = $width|0;
 $height = $height|0;
 var $$expand_i1_val = 0, $$expand_i1_val23 = 0, $$expand_i1_val25 = 0, $$expand_i1_val27 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0;
 var $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $box = 0, $key = 0, $list = 0, $overlay = 0, $overlay_analog_saturate_key = 0, $overlay_desc_key = 0;
 var $overlay_target_key = 0, $ret = 0, $save = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr21 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 569|0;
 $overlay_desc_key = sp + 504|0;
 $overlay = sp + 248|0;
 $save = sp + 68|0;
 $overlay_target_key = sp + 184|0;
 $overlay_analog_saturate_key = sp + 120|0;
 $1 = $conf;
 $2 = $desc;
 $3 = $ol_index;
 $4 = $desc_index;
 $5 = $width;
 $6 = $height;
 $ret = 1;
 $7 = $3;
 $8 = $4;
 HEAP32[$vararg_buffer>>2] = $7;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 (_snprintf($overlay_desc_key,64,758464,$vararg_buffer)|0);
 $9 = $1;
 $10 = (_config_get_array($9,$overlay_desc_key,$overlay,256)|0);
 if (!($10)) {
  $11 = HEAP32[(259664)>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = HEAP32[544648>>2]|0;
  $15 = $12 ? $13 : $14;
  HEAP32[$vararg_buffer2>>2] = $overlay_desc_key;
  (_fprintf($15,758481,$vararg_buffer2)|0);
  $16 = HEAP32[(259664)>>2]|0;
  $17 = ($16|0)!=(0|0);
  $18 = HEAP32[(259664)>>2]|0;
  $19 = HEAP32[544648>>2]|0;
  $20 = $17 ? $18 : $19;
  (_fflush($20)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $208 = $$pre_trunc&1;
  STACKTOP = sp;return ($208|0);
 }
 $21 = (_string_split($overlay,758535)|0);
 $list = $21;
 $22 = $list;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $24 = HEAP32[(259664)>>2]|0;
  $25 = ($24|0)!=(0|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = HEAP32[544648>>2]|0;
  $28 = $25 ? $26 : $27;
  (_fprintf($28,758538,$vararg_buffer5)|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = ($29|0)!=(0|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = HEAP32[544648>>2]|0;
  $33 = $30 ? $31 : $32;
  (_fflush($33)|0);
  $$expand_i1_val23 = 0;
  HEAP8[$0>>0] = $$expand_i1_val23;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $208 = $$pre_trunc&1;
  STACKTOP = sp;return ($208|0);
 }
 $34 = $list;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36>>>0)<(6);
 $38 = $list;
 if ($37) {
  _string_list_free($38);
  $39 = HEAP32[(259664)>>2]|0;
  $40 = ($39|0)!=(0|0);
  $41 = HEAP32[(259664)>>2]|0;
  $42 = HEAP32[544648>>2]|0;
  $43 = $40 ? $41 : $42;
  (_fprintf($43,758601,$vararg_buffer7)|0);
  $44 = HEAP32[(259664)>>2]|0;
  $45 = ($44|0)!=(0|0);
  $46 = HEAP32[(259664)>>2]|0;
  $47 = HEAP32[544648>>2]|0;
  $48 = $45 ? $46 : $47;
  (_fflush($48)|0);
  $$expand_i1_val25 = 0;
  HEAP8[$0>>0] = $$expand_i1_val25;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $208 = $$pre_trunc&1;
  STACKTOP = sp;return ($208|0);
 }
 $49 = HEAP32[$38>>2]|0;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $x = $51;
 $52 = $list;
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $y = $55;
 $56 = $list;
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($57)) + 24|0);
 $59 = HEAP32[$58>>2]|0;
 $box = $59;
 $60 = $list;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$61>>2]|0;
 $key = $62;
 $63 = $2;
 $64 = ((($63)) + 24|0);
 $65 = $64;
 $66 = $65;
 HEAP32[$66>>2] = 0;
 $67 = (($65) + 4)|0;
 $68 = $67;
 HEAP32[$68>>2] = 0;
 $69 = $key;
 $70 = (_strcmp($69,758687)|0);
 $71 = ($70|0)==(0);
 do {
  if ($71) {
   $72 = $2;
   $73 = ((($72)) + 20|0);
   HEAP32[$73>>2] = 1;
  } else {
   $74 = $key;
   $75 = (_strcmp($74,758699)|0);
   $76 = ($75|0)==(0);
   $77 = $2;
   $78 = ((($77)) + 20|0);
   if ($76) {
    HEAP32[$78>>2] = 2;
    break;
   }
   HEAP32[$78>>2] = 0;
   $79 = $key;
   $80 = (_strtok_r($79,776046,$save)|0);
   $tmp = $80;
   while(1) {
    $81 = $tmp;
    $82 = ($81|0)!=(0|0);
    if (!($82)) {
     break;
    }
    $83 = $tmp;
    $84 = (_input_str_to_bind($83)|0);
    $85 = (_bitshift64Shl(1,0,($84|0))|0);
    $86 = tempRet0;
    $87 = $2;
    $88 = ((($87)) + 24|0);
    $89 = $88;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 4)|0;
    $93 = $92;
    $94 = HEAP32[$93>>2]|0;
    $95 = $91 | $85;
    $96 = $94 | $86;
    $97 = $88;
    $98 = $97;
    HEAP32[$98>>2] = $95;
    $99 = (($97) + 4)|0;
    $100 = $99;
    HEAP32[$100>>2] = $96;
    $101 = (_strtok_r(0,776046,$save)|0);
    $tmp = $101;
   }
   $102 = $2;
   $103 = ((($102)) + 24|0);
   $104 = $103;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = (($104) + 4)|0;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = $109 & 524288;
   $111 = (0)!=(0);
   $112 = ($110|0)!=(0);
   $113 = $111 | $112;
   if ($113) {
    $114 = $3;
    $115 = $4;
    HEAP32[$vararg_buffer9>>2] = $114;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $115;
    (_snprintf($overlay_target_key,64,758712,$vararg_buffer9)|0);
    $116 = $1;
    $117 = $2;
    $118 = ((($117)) + 40|0);
    (_config_get_array($116,$overlay_target_key,$118,64)|0);
   }
  }
 } while(0);
 $119 = $x;
 $120 = (+_strtod($119,0));
 $121 = $5;
 $122 = (+($121>>>0));
 $123 = $120 / $122;
 $124 = $123;
 $125 = $2;
 HEAPF32[$125>>2] = $124;
 $126 = $y;
 $127 = (+_strtod($126,0));
 $128 = $6;
 $129 = (+($128>>>0));
 $130 = $127 / $129;
 $131 = $130;
 $132 = $2;
 $133 = ((($132)) + 4|0);
 HEAPF32[$133>>2] = $131;
 $134 = $box;
 $135 = (_strcmp($134,758741)|0);
 $136 = ($135|0)!=(0);
 do {
  if ($136) {
   $139 = $box;
   $140 = (_strcmp($139,758748)|0);
   $141 = ($140|0)!=(0);
   if ($141) {
    $144 = HEAP32[(259664)>>2]|0;
    $145 = ($144|0)!=(0|0);
    $146 = HEAP32[(259664)>>2]|0;
    $147 = HEAP32[544648>>2]|0;
    $148 = $145 ? $146 : $147;
    $149 = $box;
    HEAP32[$vararg_buffer13>>2] = $149;
    (_fprintf($148,758753,$vararg_buffer13)|0);
    $150 = HEAP32[(259664)>>2]|0;
    $151 = ($150|0)!=(0|0);
    $152 = HEAP32[(259664)>>2]|0;
    $153 = HEAP32[544648>>2]|0;
    $154 = $151 ? $152 : $153;
    (_fflush($154)|0);
    $ret = 0;
    break;
   } else {
    $142 = $2;
    $143 = ((($142)) + 8|0);
    HEAP32[$143>>2] = 1;
    label = 21;
    break;
   }
  } else {
   $137 = $2;
   $138 = ((($137)) + 8|0);
   HEAP32[$138>>2] = 0;
   label = 21;
  }
 } while(0);
 do {
  if ((label|0) == 21) {
   $155 = $2;
   $156 = ((($155)) + 20|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)!=(0);
   if ($158) {
    $159 = $2;
    $160 = ((($159)) + 8|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ($161|0)!=(0);
    if ($162) {
     $163 = HEAP32[(259664)>>2]|0;
     $164 = ($163|0)!=(0|0);
     $165 = HEAP32[(259664)>>2]|0;
     $166 = HEAP32[544648>>2]|0;
     $167 = $164 ? $165 : $166;
     (_fprintf($167,758839,$vararg_buffer16)|0);
     $168 = HEAP32[(259664)>>2]|0;
     $169 = ($168|0)!=(0|0);
     $170 = HEAP32[(259664)>>2]|0;
     $171 = HEAP32[544648>>2]|0;
     $172 = $169 ? $170 : $171;
     (_fflush($172)|0);
     $ret = 0;
     break;
    }
    $173 = $3;
    $174 = $4;
    HEAP32[$vararg_buffer18>>2] = $173;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = $174;
    (_snprintf($overlay_analog_saturate_key,64,758909,$vararg_buffer18)|0);
    $175 = $1;
    $176 = $2;
    $177 = ((($176)) + 32|0);
    $178 = (_config_get_float($175,$overlay_analog_saturate_key,$177)|0);
    if (!($178)) {
     $179 = $2;
     $180 = ((($179)) + 32|0);
     HEAPF32[$180>>2] = 1.0;
    }
   }
   $181 = $list;
   $182 = HEAP32[$181>>2]|0;
   $183 = ((($182)) + 32|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (+_strtod($184,0));
   $186 = $5;
   $187 = (+($186>>>0));
   $188 = $185 / $187;
   $189 = $188;
   $190 = $2;
   $191 = ((($190)) + 12|0);
   HEAPF32[$191>>2] = $189;
   $192 = $list;
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($193)) + 40|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (+_strtod($195,0));
   $197 = $6;
   $198 = (+($197>>>0));
   $199 = $196 / $198;
   $200 = $199;
   $201 = $2;
   $202 = ((($201)) + 16|0);
   HEAPF32[$202>>2] = $200;
  }
 } while(0);
 $203 = $list;
 $204 = ($203|0)!=(0|0);
 if ($204) {
  $205 = $list;
  _string_list_free($205);
 }
 $206 = $ret;
 $207 = $206&1;
 $$expand_i1_val27 = $207&1;
 HEAP8[$0>>0] = $$expand_i1_val27;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $208 = $$pre_trunc&1;
 STACKTOP = sp;return ($208|0);
}
function _input_str_to_bind($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $str;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(56);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $i;
  $5 = (269552 + ($4<<3)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (_strcmp($6,$7)|0);
  $9 = ($8|0)!=(0);
  $10 = $i;
  if (!($9)) {
   label = 4;
   break;
  }
  $14 = (($10) + 1)|0;
  $i = $14;
 }
 if ((label|0) == 4) {
  $11 = (269552 + ($10<<3)|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $0 = $13;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $0 = 56;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _input_overlay_resolve_targets($ol,$index,$size) {
 $ol = $ol|0;
 $index = $index|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, $i = 0;
 var $index1 = 0, $next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = $ol;
 $2 = $index;
 $3 = $size;
 $4 = $2;
 $5 = $1;
 $6 = (($5) + (($4*136)|0)|0);
 $current = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $current;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7>>>0)<($10>>>0);
  if (!($11)) {
   label = 9;
   break;
  }
  $12 = $i;
  $13 = $current;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + (($12*104)|0)|0);
  $16 = ((($15)) + 40|0);
  $next = $16;
  $17 = $next;
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)!=(0);
  if ($19) {
   $20 = $1;
   $21 = $next;
   $22 = $3;
   $23 = (_input_overlay_find_index($20,$21,$22)|0);
   $index1 = $23;
   $24 = $index1;
   $25 = ($24|0)<(0);
   if ($25) {
    label = 5;
    break;
   }
   $37 = $index1;
   $38 = $i;
   $39 = $current;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + (($38*104)|0)|0);
   $42 = ((($41)) + 36|0);
   HEAP32[$42>>2] = $37;
  } else {
   $43 = $2;
   $44 = (($43) + 1)|0;
   $45 = $3;
   $46 = (($44>>>0) % ($45>>>0))&-1;
   $47 = $i;
   $48 = $current;
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + (($47*104)|0)|0);
   $51 = ((($50)) + 36|0);
   HEAP32[$51>>2] = $46;
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 if ((label|0) == 5) {
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  $31 = $next;
  HEAP32[$vararg_buffer>>2] = $31;
  (_fprintf($30,758395,$vararg_buffer)|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  (_fflush($36)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $54 = $$pre_trunc&1;
  STACKTOP = sp;return ($54|0);
 }
 else if ((label|0) == 9) {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $54 = $$pre_trunc&1;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _input_overlay_find_index($ol,$name,$size) {
 $ol = $ol|0;
 $name = $name|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ol;
 $2 = $name;
 $3 = $size;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $3;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = (($8) + (($7*136)|0)|0);
  $10 = ((($9)) + 69|0);
  $11 = $2;
  $12 = (_strcmp($10,$11)|0);
  $13 = ($12|0)==(0);
  $14 = $i;
  if ($13) {
   label = 4;
   break;
  }
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 if ((label|0) == 4) {
  $0 = $14;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _input_overlay_free_overlay($overlay) {
 $overlay = $overlay|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $overlay;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 STACKTOP = sp;return;
}
function _scaler_alloc($elem_size,$size) {
 $elem_size = $elem_size|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $elem_size;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 $4 = (_calloc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _scaler_free($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _scaler_ctx_gen_filter($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $ctx;
 $2 = $1;
 _scaler_ctx_gen_reset($2);
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)==($14|0);
  if ($15) {
   $16 = $1;
   $17 = ((($16)) + 60|0);
   HEAP8[$17>>0] = 1;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $18 = $1;
  $19 = ((($18)) + 36|0);
  HEAP32[$19>>2] = 310;
  $20 = $1;
  $21 = ((($20)) + 40|0);
  HEAP32[$21>>2] = 311;
  $22 = $1;
  $23 = ((($22)) + 60|0);
  HEAP8[$23>>0] = 0;
 }
 $24 = $1;
 $25 = ((($24)) + 44|0);
 HEAP32[$25>>2] = 0;
 $26 = $1;
 $27 = (_allocate_frames($26)|0);
 do {
  if ($27) {
   $28 = $1;
   $29 = ((($28)) + 60|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&1;
   $32 = $1;
   if ($31) {
    $33 = (_set_direct_pix_conv($32)|0);
    if (!($33)) {
     $$expand_i1_val2 = 0;
     HEAP8[$0>>0] = $$expand_i1_val2;
     break;
    }
   } else {
    $34 = (_set_pix_conv($32)|0);
    if (!($34)) {
     $$expand_i1_val4 = 0;
     HEAP8[$0>>0] = $$expand_i1_val4;
     break;
    }
   }
   $35 = $1;
   $36 = ((($35)) + 60|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&1;
   if (!($38)) {
    $39 = $1;
    $40 = (_scaler_gen_filter($39)|0);
    if (!($40)) {
     $$expand_i1_val6 = 0;
     HEAP8[$0>>0] = $$expand_i1_val6;
     break;
    }
   }
   $$expand_i1_val8 = 1;
   HEAP8[$0>>0] = $$expand_i1_val8;
  } else {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $41 = $$pre_trunc&1;
 STACKTOP = sp;return ($41|0);
}
function _scaler_ctx_gen_reset($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 _scaler_free($3);
 $4 = $0;
 $5 = ((($4)) + 64|0);
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 _scaler_free($7);
 $8 = $0;
 $9 = ((($8)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 _scaler_free($10);
 $11 = $0;
 $12 = ((($11)) + 80|0);
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 _scaler_free($14);
 $15 = $0;
 $16 = ((($15)) + 104|0);
 $17 = HEAP32[$16>>2]|0;
 _scaler_free($17);
 $18 = $0;
 $19 = ((($18)) + 96|0);
 $20 = HEAP32[$19>>2]|0;
 _scaler_free($20);
 $21 = $0;
 $22 = ((($21)) + 120|0);
 $23 = HEAP32[$22>>2]|0;
 _scaler_free($23);
 $24 = $0;
 $25 = ((($24)) + 64|0);
 ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;
 $26 = $0;
 $27 = ((($26)) + 80|0);
 ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;
 $28 = $0;
 $29 = ((($28)) + 104|0);
 ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;
 $30 = $0;
 $31 = ((($30)) + 96|0);
 ;HEAP32[$31>>2]=0|0;HEAP32[$31+4>>2]=0|0;
 $32 = $0;
 $33 = ((($32)) + 120|0);
 ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;
 STACKTOP = sp;return;
}
function _scaler_ctx_scale($ctx,$output,$input) {
 $ctx = $ctx|0;
 $output = $output|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $conv_out = 0, $in_stride = 0, $inp = 0, $out_stride = 0, $outp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $output;
 $2 = $input;
 $3 = $0;
 $4 = ((($3)) + 60|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 $7 = $0;
 if ($6) {
  $8 = ((($7)) + 56|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = $2;
  $12 = $0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_viiiiii[$9 & 511]($10,$11,$14,$17,$20,$23);
  STACKTOP = sp;return;
 }
 $24 = ((($7)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $2;
  $inp = $27;
  $28 = $0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $in_stride = $30;
  $31 = $0;
  $32 = ((($31)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $0;
   $36 = ((($35)) + 48|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $0;
   $39 = ((($38)) + 96|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $2;
   $42 = $0;
   $43 = HEAP32[$42>>2]|0;
   $44 = $0;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $0;
   $48 = ((($47)) + 96|0);
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $0;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   FUNCTION_TABLE_viiiiii[$37 & 511]($40,$41,$43,$46,$50,$53);
   $54 = $0;
   $55 = ((($54)) + 96|0);
   $56 = HEAP32[$55>>2]|0;
   $inp = $56;
   $57 = $0;
   $58 = ((($57)) + 96|0);
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $in_stride = $60;
  }
  $61 = $0;
  $62 = ((($61)) + 28|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(0);
  $65 = $64&1;
  $conv_out = $65;
  $66 = $1;
  $outp = $66;
  $67 = $0;
  $68 = ((($67)) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $out_stride = $69;
  $70 = $conv_out;
  $71 = $70&1;
  if ($71) {
   $72 = $0;
   $73 = ((($72)) + 120|0);
   $74 = HEAP32[$73>>2]|0;
   $outp = $74;
   $75 = $0;
   $76 = ((($75)) + 120|0);
   $77 = ((($76)) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $out_stride = $78;
  }
  $79 = $0;
  $80 = ((($79)) + 44|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $0;
  $83 = $outp;
  $84 = $inp;
  $85 = $0;
  $86 = ((($85)) + 12|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $0;
  $89 = ((($88)) + 16|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $0;
  $92 = HEAP32[$91>>2]|0;
  $93 = $0;
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $out_stride;
  $97 = $in_stride;
  FUNCTION_TABLE_viiiiiiiii[$81 & 511]($82,$83,$84,$87,$90,$92,$95,$96,$97);
  $98 = $conv_out;
  $99 = $98&1;
  if (!($99)) {
   STACKTOP = sp;return;
  }
  $100 = $0;
  $101 = ((($100)) + 52|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $1;
  $104 = $0;
  $105 = ((($104)) + 120|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $0;
  $108 = ((($107)) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $0;
  $111 = ((($110)) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $0;
  $114 = ((($113)) + 20|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $0;
  $117 = ((($116)) + 120|0);
  $118 = ((($117)) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  FUNCTION_TABLE_viiiiii[$102 & 511]($103,$106,$109,$112,$115,$119);
  STACKTOP = sp;return;
 } else {
  $120 = $0;
  $121 = ((($120)) + 24|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)!=(0);
  $124 = $0;
  if ($123) {
   $125 = ((($124)) + 48|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $0;
   $128 = ((($127)) + 96|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $2;
   $131 = $0;
   $132 = HEAP32[$131>>2]|0;
   $133 = $0;
   $134 = ((($133)) + 4|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $0;
   $137 = ((($136)) + 96|0);
   $138 = ((($137)) + 4|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $0;
   $141 = ((($140)) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   FUNCTION_TABLE_viiiiii[$126 & 511]($129,$130,$132,$135,$139,$142);
   $143 = $0;
   $144 = ((($143)) + 36|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $0;
   $147 = $0;
   $148 = ((($147)) + 96|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $0;
   $151 = ((($150)) + 96|0);
   $152 = ((($151)) + 4|0);
   $153 = HEAP32[$152>>2]|0;
   FUNCTION_TABLE_viii[$145 & 1023]($146,$149,$153);
  } else {
   $154 = ((($124)) + 36|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $0;
   $157 = $2;
   $158 = $0;
   $159 = ((($158)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   FUNCTION_TABLE_viii[$155 & 1023]($156,$157,$160);
  }
  $161 = $0;
  $162 = ((($161)) + 28|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($163|0)!=(0);
  $165 = $0;
  $166 = ((($165)) + 40|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $0;
  if ($164) {
   $169 = $0;
   $170 = ((($169)) + 120|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $0;
   $173 = ((($172)) + 120|0);
   $174 = ((($173)) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   FUNCTION_TABLE_viii[$167 & 1023]($168,$171,$175);
   $176 = $0;
   $177 = ((($176)) + 52|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $1;
   $180 = $0;
   $181 = ((($180)) + 120|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $0;
   $184 = ((($183)) + 12|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $0;
   $187 = ((($186)) + 16|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $0;
   $190 = ((($189)) + 20|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $0;
   $193 = ((($192)) + 120|0);
   $194 = ((($193)) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   FUNCTION_TABLE_viiiiii[$178 & 511]($179,$182,$185,$188,$191,$195);
   STACKTOP = sp;return;
  } else {
   $196 = $1;
   $197 = $0;
   $198 = ((($197)) + 20|0);
   $199 = HEAP32[$198>>2]|0;
   FUNCTION_TABLE_viii[$167 & 1023]($168,$196,$199);
   STACKTOP = sp;return;
  }
 }
}
function _allocate_frames($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $ctx;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 7)|0;
 $6 = $5 & -8;
 $7 = $6<<3;
 $8 = $1;
 $9 = ((($8)) + 104|0);
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = $7;
 $11 = $1;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 104|0);
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $13;
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 104|0);
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $19;
 $23 = $1;
 $24 = ((($23)) + 104|0);
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = ((($27)) + 104|0);
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = Math_imul($26, $30)|0;
 $32 = $31 >> 3;
 $33 = (_scaler_alloc(8,$32)|0);
 $34 = $1;
 $35 = ((($34)) + 104|0);
 HEAP32[$35>>2] = $33;
 $36 = $1;
 $37 = ((($36)) + 104|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $97 = $$pre_trunc&1;
  STACKTOP = sp;return ($97|0);
 }
 $40 = $1;
 $41 = ((($40)) + 24|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $1;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 7)|0;
  $47 = $46 & -8;
  $48 = $47<<2;
  $49 = $1;
  $50 = ((($49)) + 96|0);
  $51 = ((($50)) + 4|0);
  HEAP32[$51>>2] = $48;
  $52 = $1;
  $53 = ((($52)) + 96|0);
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $1;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = Math_imul($55, $58)|0;
  $60 = $59 >> 2;
  $61 = (_scaler_alloc(4,$60)|0);
  $62 = $1;
  $63 = ((($62)) + 96|0);
  HEAP32[$63>>2] = $61;
  $64 = $1;
  $65 = ((($64)) + 96|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)!=(0|0);
  if (!($67)) {
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $97 = $$pre_trunc&1;
   STACKTOP = sp;return ($97|0);
  }
 }
 $68 = $1;
 $69 = ((($68)) + 28|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $1;
  $73 = ((($72)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + 7)|0;
  $76 = $75 & -8;
  $77 = $76<<2;
  $78 = $1;
  $79 = ((($78)) + 120|0);
  $80 = ((($79)) + 4|0);
  HEAP32[$80>>2] = $77;
  $81 = $1;
  $82 = ((($81)) + 120|0);
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $1;
  $86 = ((($85)) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = Math_imul($84, $87)|0;
  $89 = $88 >> 2;
  $90 = (_scaler_alloc(4,$89)|0);
  $91 = $1;
  $92 = ((($91)) + 120|0);
  HEAP32[$92>>2] = $90;
  $93 = $1;
  $94 = ((($93)) + 120|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)!=(0|0);
  if (!($96)) {
   $$expand_i1_val4 = 0;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $97 = $$pre_trunc&1;
   STACKTOP = sp;return ($97|0);
  }
 }
 $$expand_i1_val6 = 1;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $97 = $$pre_trunc&1;
 STACKTOP = sp;return ($97|0);
}
function _set_direct_pix_conv($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $ctx;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 $9 = $1;
 do {
  if ($8) {
   $10 = ((($9)) + 56|0);
   HEAP32[$10>>2] = 312;
  } else {
   $11 = ((($9)) + 24|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(2);
   if ($13) {
    $14 = $1;
    $15 = ((($14)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = $1;
     $19 = ((($18)) + 56|0);
     HEAP32[$19>>2] = 313;
     break;
    }
   }
   $20 = $1;
   $21 = ((($20)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(3);
   if ($23) {
    $24 = $1;
    $25 = ((($24)) + 28|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0);
    if ($27) {
     $28 = $1;
     $29 = ((($28)) + 56|0);
     HEAP32[$29>>2] = 314;
     break;
    }
   }
   $30 = $1;
   $31 = ((($30)) + 24|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(3);
   if ($33) {
    $34 = $1;
    $35 = ((($34)) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(4);
    if ($37) {
     $38 = $1;
     $39 = ((($38)) + 56|0);
     HEAP32[$39>>2] = 315;
     break;
    }
   }
   $40 = $1;
   $41 = ((($40)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(2);
   if ($43) {
    $44 = $1;
    $45 = ((($44)) + 28|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(3);
    if ($47) {
     $48 = $1;
     $49 = ((($48)) + 56|0);
     HEAP32[$49>>2] = 316;
     break;
    }
   }
   $50 = $1;
   $51 = ((($50)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(3);
   if ($53) {
    $54 = $1;
    $55 = ((($54)) + 28|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(2);
    if ($57) {
     $58 = $1;
     $59 = ((($58)) + 56|0);
     HEAP32[$59>>2] = 317;
     break;
    }
   }
   $60 = $1;
   $61 = ((($60)) + 24|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(4);
   if ($63) {
    $64 = $1;
    $65 = ((($64)) + 28|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0);
    if ($67) {
     $68 = $1;
     $69 = ((($68)) + 56|0);
     HEAP32[$69>>2] = 318;
     break;
    }
   }
   $70 = $1;
   $71 = ((($70)) + 24|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(0);
   if ($73) {
    $74 = $1;
    $75 = ((($74)) + 28|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==(2);
    if ($77) {
     $78 = $1;
     $79 = ((($78)) + 56|0);
     HEAP32[$79>>2] = 319;
     break;
    }
   }
   $80 = $1;
   $81 = ((($80)) + 24|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = $1;
    $85 = ((($84)) + 28|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==(4);
    if ($87) {
     $88 = $1;
     $89 = ((($88)) + 56|0);
     HEAP32[$89>>2] = 320;
     break;
    }
   }
   $90 = $1;
   $91 = ((($90)) + 24|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(2);
   if ($93) {
    $94 = $1;
    $95 = ((($94)) + 28|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(4);
    if ($97) {
     $98 = $1;
     $99 = ((($98)) + 56|0);
     HEAP32[$99>>2] = 321;
     break;
    }
   }
   $100 = $1;
   $101 = ((($100)) + 24|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==(3);
   if ($103) {
    $104 = $1;
    $105 = ((($104)) + 28|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($106|0)==(4);
    if ($107) {
     $108 = $1;
     $109 = ((($108)) + 56|0);
     HEAP32[$109>>2] = 315;
     break;
    }
   }
   $110 = $1;
   $111 = ((($110)) + 24|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)==(0);
   if ($113) {
    $114 = $1;
    $115 = ((($114)) + 28|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)==(1);
    if ($117) {
     $118 = $1;
     $119 = ((($118)) + 56|0);
     HEAP32[$119>>2] = 322;
     break;
    }
   }
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $120 = $$pre_trunc&1;
   STACKTOP = sp;return ($120|0);
  }
 } while(0);
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $120 = $$pre_trunc&1;
 STACKTOP = sp;return ($120|0);
}
function _set_pix_conv($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $ctx;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 0:  {
  label = 6;
  break;
 }
 case 2:  {
  $5 = $1;
  $6 = ((($5)) + 48|0);
  HEAP32[$6>>2] = 313;
  label = 6;
  break;
 }
 case 3:  {
  $7 = $1;
  $8 = ((($7)) + 48|0);
  HEAP32[$8>>2] = 314;
  label = 6;
  break;
 }
 case 4:  {
  $9 = $1;
  $10 = ((($9)) + 48|0);
  HEAP32[$10>>2] = 318;
  label = 6;
  break;
 }
 default: {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 }
 }
 L6: do {
  if ((label|0) == 6) {
   $11 = $1;
   $12 = ((($11)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   switch ($13|0) {
   case 0:  {
    break;
   }
   case 2:  {
    $14 = $1;
    $15 = ((($14)) + 52|0);
    HEAP32[$15>>2] = 319;
    break;
   }
   case 4:  {
    $16 = $1;
    $17 = ((($16)) + 52|0);
    HEAP32[$17>>2] = 320;
    break;
   }
   default: {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break L6;
   }
   }
   $$expand_i1_val4 = 1;
   HEAP8[$0>>0] = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $18 = $$pre_trunc&1;
 STACKTOP = sp;return ($18|0);
}
function _conv_rgb565_0rgb1555($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $h = 0, $hi = 0, $input = 0, $lo = 0, $output = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $w = 0;
  while(1) {
   $11 = $w;
   $12 = $2;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $w;
   $15 = $input;
   $16 = (($15) + ($14<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $col = $17;
   $18 = $col;
   $19 = $18&65535;
   $20 = $19 >> 1;
   $21 = $20 & 32736;
   $22 = $21&65535;
   $hi = $22;
   $23 = $col;
   $24 = $23&65535;
   $25 = $24 & 31;
   $26 = $25&65535;
   $lo = $26;
   $27 = $hi;
   $28 = $27&65535;
   $29 = $lo;
   $30 = $29&65535;
   $31 = $28 | $30;
   $32 = $31&65535;
   $33 = $w;
   $34 = $output;
   $35 = (($34) + ($33<<1)|0);
   HEAP16[$35>>1] = $32;
   $36 = $w;
   $37 = (($36) + 1)|0;
   $w = $37;
  }
  $38 = $h;
  $39 = (($38) + 1)|0;
  $h = $39;
  $40 = $4;
  $41 = $40 >> 1;
  $42 = $output;
  $43 = (($42) + ($41<<1)|0);
  $output = $43;
  $44 = $5;
  $45 = $44 >> 1;
  $46 = $input;
  $47 = (($46) + ($45<<1)|0);
  $input = $47;
 }
 STACKTOP = sp;return;
}
function _conv_0rgb1555_rgb565($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $col = 0, $glow = 0, $h = 0;
 var $input = 0, $output = 0, $rg = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $w = 0;
  while(1) {
   $11 = $w;
   $12 = $2;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $w;
   $15 = $input;
   $16 = (($15) + ($14<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $col = $17;
   $18 = $col;
   $19 = $18&65535;
   $20 = $19 << 1;
   $21 = $20 & 65472;
   $22 = $21&65535;
   $rg = $22;
   $23 = $col;
   $24 = $23&65535;
   $25 = $24 & 31;
   $26 = $25&65535;
   $b = $26;
   $27 = $col;
   $28 = $27&65535;
   $29 = $28 >> 4;
   $30 = $29 & 32;
   $31 = $30&65535;
   $glow = $31;
   $32 = $rg;
   $33 = $32&65535;
   $34 = $b;
   $35 = $34&65535;
   $36 = $33 | $35;
   $37 = $glow;
   $38 = $37&65535;
   $39 = $36 | $38;
   $40 = $39&65535;
   $41 = $w;
   $42 = $output;
   $43 = (($42) + ($41<<1)|0);
   HEAP16[$43>>1] = $40;
   $44 = $w;
   $45 = (($44) + 1)|0;
   $w = $45;
  }
  $46 = $h;
  $47 = (($46) + 1)|0;
  $h = $47;
  $48 = $4;
  $49 = $48 >> 1;
  $50 = $output;
  $51 = (($50) + ($49<<1)|0);
  $output = $51;
  $52 = $5;
  $53 = $52 >> 1;
  $54 = $input;
  $55 = (($54) + ($53<<1)|0);
  $input = $55;
 }
 STACKTOP = sp;return;
}
function _conv_0rgb1555_argb8888($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $col = 0, $g = 0, $h = 0, $input = 0, $output = 0, $r = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $w = 0;
  while(1) {
   $11 = $w;
   $12 = $2;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $w;
   $15 = $input;
   $16 = (($15) + ($14<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $col = $18;
   $19 = $col;
   $20 = $19 >>> 10;
   $21 = $20 & 31;
   $r = $21;
   $22 = $col;
   $23 = $22 >>> 5;
   $24 = $23 & 31;
   $g = $24;
   $25 = $col;
   $26 = $25 >>> 0;
   $27 = $26 & 31;
   $b = $27;
   $28 = $r;
   $29 = $28 << 3;
   $30 = $r;
   $31 = $30 >>> 2;
   $32 = $29 | $31;
   $r = $32;
   $33 = $g;
   $34 = $33 << 3;
   $35 = $g;
   $36 = $35 >>> 2;
   $37 = $34 | $36;
   $g = $37;
   $38 = $b;
   $39 = $38 << 3;
   $40 = $b;
   $41 = $40 >>> 2;
   $42 = $39 | $41;
   $b = $42;
   $43 = $r;
   $44 = $43 << 16;
   $45 = -16777216 | $44;
   $46 = $g;
   $47 = $46 << 8;
   $48 = $45 | $47;
   $49 = $b;
   $50 = $49 << 0;
   $51 = $48 | $50;
   $52 = $w;
   $53 = $output;
   $54 = (($53) + ($52<<2)|0);
   HEAP32[$54>>2] = $51;
   $55 = $w;
   $56 = (($55) + 1)|0;
   $w = $56;
  }
  $57 = $h;
  $58 = (($57) + 1)|0;
  $h = $58;
  $59 = $4;
  $60 = $59 >> 2;
  $61 = $output;
  $62 = (($61) + ($60<<2)|0);
  $output = $62;
  $63 = $5;
  $64 = $63 >> 1;
  $65 = $input;
  $66 = (($65) + ($64<<1)|0);
  $input = $66;
 }
 STACKTOP = sp;return;
}
function _conv_rgb565_argb8888($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $col = 0, $g = 0, $h = 0, $input = 0, $output = 0, $r = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $w = 0;
  while(1) {
   $11 = $w;
   $12 = $2;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $w;
   $15 = $input;
   $16 = (($15) + ($14<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $col = $18;
   $19 = $col;
   $20 = $19 >>> 11;
   $21 = $20 & 31;
   $r = $21;
   $22 = $col;
   $23 = $22 >>> 5;
   $24 = $23 & 63;
   $g = $24;
   $25 = $col;
   $26 = $25 >>> 0;
   $27 = $26 & 31;
   $b = $27;
   $28 = $r;
   $29 = $28 << 3;
   $30 = $r;
   $31 = $30 >>> 2;
   $32 = $29 | $31;
   $r = $32;
   $33 = $g;
   $34 = $33 << 2;
   $35 = $g;
   $36 = $35 >>> 4;
   $37 = $34 | $36;
   $g = $37;
   $38 = $b;
   $39 = $38 << 3;
   $40 = $b;
   $41 = $40 >>> 2;
   $42 = $39 | $41;
   $b = $42;
   $43 = $r;
   $44 = $43 << 16;
   $45 = -16777216 | $44;
   $46 = $g;
   $47 = $46 << 8;
   $48 = $45 | $47;
   $49 = $b;
   $50 = $49 << 0;
   $51 = $48 | $50;
   $52 = $w;
   $53 = $output;
   $54 = (($53) + ($52<<2)|0);
   HEAP32[$54>>2] = $51;
   $55 = $w;
   $56 = (($55) + 1)|0;
   $w = $56;
  }
  $57 = $h;
  $58 = (($57) + 1)|0;
  $h = $58;
  $59 = $4;
  $60 = $59 >> 2;
  $61 = $output;
  $62 = (($61) + ($60<<2)|0);
  $output = $62;
  $63 = $5;
  $64 = $63 >> 1;
  $65 = $input;
  $66 = (($65) + ($64<<1)|0);
  $input = $66;
 }
 STACKTOP = sp;return;
}
function _conv_0rgb1555_bgr24($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $col = 0, $g = 0, $h = 0, $input = 0, $out = 0, $output = 0, $r = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $output;
  $out = $11;
  $w = 0;
  while(1) {
   $12 = $w;
   $13 = $2;
   $14 = ($12|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $w;
   $16 = $input;
   $17 = (($16) + ($15<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $col = $19;
   $20 = $col;
   $21 = $20 >>> 0;
   $22 = $21 & 31;
   $b = $22;
   $23 = $col;
   $24 = $23 >>> 5;
   $25 = $24 & 31;
   $g = $25;
   $26 = $col;
   $27 = $26 >>> 10;
   $28 = $27 & 31;
   $r = $28;
   $29 = $b;
   $30 = $29 << 3;
   $31 = $b;
   $32 = $31 >>> 2;
   $33 = $30 | $32;
   $b = $33;
   $34 = $g;
   $35 = $34 << 3;
   $36 = $g;
   $37 = $36 >>> 2;
   $38 = $35 | $37;
   $g = $38;
   $39 = $r;
   $40 = $39 << 3;
   $41 = $r;
   $42 = $41 >>> 2;
   $43 = $40 | $42;
   $r = $43;
   $44 = $b;
   $45 = $44&255;
   $46 = $out;
   $47 = ((($46)) + 1|0);
   $out = $47;
   HEAP8[$46>>0] = $45;
   $48 = $g;
   $49 = $48&255;
   $50 = $out;
   $51 = ((($50)) + 1|0);
   $out = $51;
   HEAP8[$50>>0] = $49;
   $52 = $r;
   $53 = $52&255;
   $54 = $out;
   $55 = ((($54)) + 1|0);
   $out = $55;
   HEAP8[$54>>0] = $53;
   $56 = $w;
   $57 = (($56) + 1)|0;
   $w = $57;
  }
  $58 = $h;
  $59 = (($58) + 1)|0;
  $h = $59;
  $60 = $4;
  $61 = $output;
  $62 = (($61) + ($60)|0);
  $output = $62;
  $63 = $5;
  $64 = $63 >> 1;
  $65 = $input;
  $66 = (($65) + ($64<<1)|0);
  $input = $66;
 }
 STACKTOP = sp;return;
}
function _conv_rgb565_bgr24($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $col = 0, $g = 0, $h = 0, $input = 0, $out = 0, $output = 0, $r = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $output;
  $out = $11;
  $w = 0;
  while(1) {
   $12 = $w;
   $13 = $2;
   $14 = ($12|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $w;
   $16 = $input;
   $17 = (($16) + ($15<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $col = $19;
   $20 = $col;
   $21 = $20 >>> 0;
   $22 = $21 & 31;
   $b = $22;
   $23 = $col;
   $24 = $23 >>> 5;
   $25 = $24 & 63;
   $g = $25;
   $26 = $col;
   $27 = $26 >>> 11;
   $28 = $27 & 31;
   $r = $28;
   $29 = $b;
   $30 = $29 << 3;
   $31 = $b;
   $32 = $31 >>> 2;
   $33 = $30 | $32;
   $b = $33;
   $34 = $g;
   $35 = $34 << 2;
   $36 = $g;
   $37 = $36 >>> 4;
   $38 = $35 | $37;
   $g = $38;
   $39 = $r;
   $40 = $39 << 3;
   $41 = $r;
   $42 = $41 >>> 2;
   $43 = $40 | $42;
   $r = $43;
   $44 = $b;
   $45 = $44&255;
   $46 = $out;
   $47 = ((($46)) + 1|0);
   $out = $47;
   HEAP8[$46>>0] = $45;
   $48 = $g;
   $49 = $48&255;
   $50 = $out;
   $51 = ((($50)) + 1|0);
   $out = $51;
   HEAP8[$50>>0] = $49;
   $52 = $r;
   $53 = $52&255;
   $54 = $out;
   $55 = ((($54)) + 1|0);
   $out = $55;
   HEAP8[$54>>0] = $53;
   $56 = $w;
   $57 = (($56) + 1)|0;
   $w = $57;
  }
  $58 = $h;
  $59 = (($58) + 1)|0;
  $h = $59;
  $60 = $4;
  $61 = $output;
  $62 = (($61) + ($60)|0);
  $output = $62;
  $63 = $5;
  $64 = $63 >> 1;
  $65 = $input;
  $66 = (($65) + ($64<<1)|0);
  $input = $66;
 }
 STACKTOP = sp;return;
}
function _conv_bgr24_argb8888($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $h = 0, $inp = 0, $input = 0, $output = 0, $r = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $input;
  $inp = $11;
  $w = 0;
  while(1) {
   $12 = $w;
   $13 = $2;
   $14 = ($12|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $inp;
   $16 = ((($15)) + 1|0);
   $inp = $16;
   $17 = HEAP8[$15>>0]|0;
   $18 = $17&255;
   $b = $18;
   $19 = $inp;
   $20 = ((($19)) + 1|0);
   $inp = $20;
   $21 = HEAP8[$19>>0]|0;
   $22 = $21&255;
   $g = $22;
   $23 = $inp;
   $24 = ((($23)) + 1|0);
   $inp = $24;
   $25 = HEAP8[$23>>0]|0;
   $26 = $25&255;
   $r = $26;
   $27 = $r;
   $28 = $27 << 16;
   $29 = -16777216 | $28;
   $30 = $g;
   $31 = $30 << 8;
   $32 = $29 | $31;
   $33 = $b;
   $34 = $33 << 0;
   $35 = $32 | $34;
   $36 = $w;
   $37 = $output;
   $38 = (($37) + ($36<<2)|0);
   HEAP32[$38>>2] = $35;
   $39 = $w;
   $40 = (($39) + 1)|0;
   $w = $40;
  }
  $41 = $h;
  $42 = (($41) + 1)|0;
  $h = $42;
  $43 = $4;
  $44 = $43 >> 2;
  $45 = $output;
  $46 = (($45) + ($44<<2)|0);
  $output = $46;
  $47 = $5;
  $48 = $input;
  $49 = (($48) + ($47)|0);
  $input = $49;
 }
 STACKTOP = sp;return;
}
function _conv_argb8888_0rgb1555($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $col = 0, $g = 0;
 var $h = 0, $input = 0, $output = 0, $r = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $w = 0;
  while(1) {
   $11 = $w;
   $12 = $2;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $w;
   $15 = $input;
   $16 = (($15) + ($14<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $col = $17;
   $18 = $col;
   $19 = $18 >>> 19;
   $20 = $19 & 31;
   $21 = $20&65535;
   $r = $21;
   $22 = $col;
   $23 = $22 >>> 11;
   $24 = $23 & 31;
   $25 = $24&65535;
   $g = $25;
   $26 = $col;
   $27 = $26 >>> 3;
   $28 = $27 & 31;
   $29 = $28&65535;
   $b = $29;
   $30 = $r;
   $31 = $30&65535;
   $32 = $31 << 10;
   $33 = $g;
   $34 = $33&65535;
   $35 = $34 << 5;
   $36 = $32 | $35;
   $37 = $b;
   $38 = $37&65535;
   $39 = $38 << 0;
   $40 = $36 | $39;
   $41 = $40&65535;
   $42 = $w;
   $43 = $output;
   $44 = (($43) + ($42<<1)|0);
   HEAP16[$44>>1] = $41;
   $45 = $w;
   $46 = (($45) + 1)|0;
   $w = $46;
  }
  $47 = $h;
  $48 = (($47) + 1)|0;
  $h = $48;
  $49 = $4;
  $50 = $49 >> 1;
  $51 = $output;
  $52 = (($51) + ($50<<1)|0);
  $output = $52;
  $53 = $5;
  $54 = $53 >> 2;
  $55 = $input;
  $56 = (($55) + ($54<<2)|0);
  $input = $56;
 }
 STACKTOP = sp;return;
}
function _conv_argb8888_bgr24($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $h = 0, $input = 0, $out = 0, $output = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $output;
  $out = $11;
  $w = 0;
  while(1) {
   $12 = $w;
   $13 = $2;
   $14 = ($12|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $w;
   $16 = $input;
   $17 = (($16) + ($15<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $col = $18;
   $19 = $col;
   $20 = $19 >>> 0;
   $21 = $20&255;
   $22 = $out;
   $23 = ((($22)) + 1|0);
   $out = $23;
   HEAP8[$22>>0] = $21;
   $24 = $col;
   $25 = $24 >>> 8;
   $26 = $25&255;
   $27 = $out;
   $28 = ((($27)) + 1|0);
   $out = $28;
   HEAP8[$27>>0] = $26;
   $29 = $col;
   $30 = $29 >>> 16;
   $31 = $30&255;
   $32 = $out;
   $33 = ((($32)) + 1|0);
   $out = $33;
   HEAP8[$32>>0] = $31;
   $34 = $w;
   $35 = (($34) + 1)|0;
   $w = $35;
  }
  $36 = $h;
  $37 = (($36) + 1)|0;
  $h = $37;
  $38 = $4;
  $39 = $output;
  $40 = (($39) + ($38)|0);
  $output = $40;
  $41 = $5;
  $42 = $41 >> 2;
  $43 = $input;
  $44 = (($43) + ($42<<2)|0);
  $input = $44;
 }
 STACKTOP = sp;return;
}
function _conv_argb8888_abgr8888($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $col = 0, $h = 0, $input = 0, $output = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $1;
 $input = $6;
 $7 = $0;
 $output = $7;
 $h = 0;
 while(1) {
  $8 = $h;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $w = 0;
  while(1) {
   $11 = $w;
   $12 = $2;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $w;
   $15 = $input;
   $16 = (($15) + ($14<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $col = $17;
   $18 = $col;
   $19 = $18 << 16;
   $20 = $19 & 16711680;
   $21 = $col;
   $22 = $21 >>> 16;
   $23 = $22 & 255;
   $24 = $20 | $23;
   $25 = $col;
   $26 = $25 & -16711936;
   $27 = $24 | $26;
   $28 = $w;
   $29 = $output;
   $30 = (($29) + ($28<<2)|0);
   HEAP32[$30>>2] = $27;
   $31 = $w;
   $32 = (($31) + 1)|0;
   $w = $32;
  }
  $33 = $h;
  $34 = (($33) + 1)|0;
  $h = $34;
  $35 = $4;
  $36 = $35 >> 2;
  $37 = $output;
  $38 = (($37) + ($36<<2)|0);
  $output = $38;
  $39 = $5;
  $40 = $39 >> 2;
  $41 = $input;
  $42 = (($41) + ($40<<2)|0);
  $input = $42;
 }
 STACKTOP = sp;return;
}
function _conv_copy($output_,$input_,$width,$height,$out_stride,$in_stride) {
 $output_ = $output_|0;
 $input_ = $input_|0;
 $width = $width|0;
 $height = $height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy_len = 0, $h = 0, $input = 0, $output = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_;
 $1 = $input_;
 $2 = $width;
 $3 = $height;
 $4 = $out_stride;
 $5 = $in_stride;
 $6 = $4;
 $7 = (Math_abs(($6|0))|0);
 $copy_len = $7;
 $8 = $5;
 $9 = (Math_abs(($8|0))|0);
 $10 = $copy_len;
 $11 = ($9|0)<($10|0);
 if ($11) {
  $12 = $5;
  $13 = (Math_abs(($12|0))|0);
  $copy_len = $13;
 }
 $14 = $1;
 $input = $14;
 $15 = $0;
 $output = $15;
 $h = 0;
 while(1) {
  $16 = $h;
  $17 = $3;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $output;
  $20 = $input;
  $21 = $copy_len;
  _memcpy(($19|0),($20|0),($21|0))|0;
  $22 = $h;
  $23 = (($22) + 1)|0;
  $h = $23;
  $24 = $4;
  $25 = $output;
  $26 = (($25) + ($24)|0);
  $output = $26;
  $27 = $5;
  $28 = $input;
  $29 = (($28) + ($27)|0);
  $input = $29;
 }
 STACKTOP = sp;return;
}
function _scaler_argb8888_vert($ctx,$output_,$stride) {
 $ctx = $ctx|0;
 $output_ = $output_|0;
 $stride = $stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0;
 var $coeff = 0, $col = 0, $filter_vert = 0, $g = 0, $h = 0, $input = 0, $input_base = 0, $input_base_y = 0, $output = 0, $r = 0, $res_a = 0, $res_b = 0, $res_g = 0, $res_r = 0, $w = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $col = sp;
 $0 = $ctx;
 $1 = $output_;
 $2 = $stride;
 $3 = $0;
 $4 = ((($3)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $input = $5;
 $6 = $1;
 $output = $6;
 $7 = $0;
 $8 = ((($7)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $filter_vert = $9;
 $h = 0;
 while(1) {
  $10 = $h;
  $11 = $0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $input;
  $16 = $h;
  $17 = $0;
  $18 = ((($17)) + 80|0);
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($16<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = ((($23)) + 104|0);
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 >> 3;
  $28 = Math_imul($22, $27)|0;
  $29 = (($15) + ($28<<3)|0);
  $input_base = $29;
  $w = 0;
  while(1) {
   $30 = $w;
   $31 = $0;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($30|0)<($33|0);
   if (!($34)) {
    break;
   }
   $res_a = 0;
   $res_r = 0;
   $res_g = 0;
   $res_b = 0;
   $35 = $input_base;
   $36 = $w;
   $37 = (($35) + ($36<<3)|0);
   $input_base_y = $37;
   $y = 0;
   while(1) {
    $38 = $y;
    $39 = $0;
    $40 = ((($39)) + 80|0);
    $41 = ((($40)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($38>>>0)<($42>>>0);
    if (!($43)) {
     break;
    }
    $44 = $input_base_y;
    $45 = $44;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = (($45) + 4)|0;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = $col;
    $52 = $51;
    HEAP32[$52>>2] = $47;
    $53 = (($51) + 4)|0;
    $54 = $53;
    HEAP32[$54>>2] = $50;
    $55 = $col;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = (($55) + 4)|0;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $61 = (_bitshift64Lshr(($57|0),($60|0),48)|0);
    $62 = tempRet0;
    $63 = $61 & 65535;
    $64 = $63&65535;
    $a = $64;
    $65 = $col;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($65) + 4)|0;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = $70 & 65535;
    $72 = $71&65535;
    $r = $72;
    $73 = $col;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (($73) + 4)|0;
    $77 = $76;
    $78 = HEAP32[$77>>2]|0;
    $79 = (_bitshift64Lshr(($75|0),($78|0),16)|0);
    $80 = tempRet0;
    $81 = $79 & 65535;
    $82 = $81&65535;
    $g = $82;
    $83 = $col;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $86 = (($83) + 4)|0;
    $87 = $86;
    $88 = HEAP32[$87>>2]|0;
    $89 = (_bitshift64Lshr(($85|0),($88|0),0)|0);
    $90 = tempRet0;
    $91 = $89 & 65535;
    $92 = $91&65535;
    $b = $92;
    $93 = $y;
    $94 = $filter_vert;
    $95 = (($94) + ($93<<1)|0);
    $96 = HEAP16[$95>>1]|0;
    $coeff = $96;
    $97 = $a;
    $98 = $97 << 16 >> 16;
    $99 = $coeff;
    $100 = $99 << 16 >> 16;
    $101 = Math_imul($98, $100)|0;
    $102 = $101 >> 16;
    $103 = $res_a;
    $104 = $103 << 16 >> 16;
    $105 = (($104) + ($102))|0;
    $106 = $105&65535;
    $res_a = $106;
    $107 = $r;
    $108 = $107 << 16 >> 16;
    $109 = $coeff;
    $110 = $109 << 16 >> 16;
    $111 = Math_imul($108, $110)|0;
    $112 = $111 >> 16;
    $113 = $res_r;
    $114 = $113 << 16 >> 16;
    $115 = (($114) + ($112))|0;
    $116 = $115&65535;
    $res_r = $116;
    $117 = $g;
    $118 = $117 << 16 >> 16;
    $119 = $coeff;
    $120 = $119 << 16 >> 16;
    $121 = Math_imul($118, $120)|0;
    $122 = $121 >> 16;
    $123 = $res_g;
    $124 = $123 << 16 >> 16;
    $125 = (($124) + ($122))|0;
    $126 = $125&65535;
    $res_g = $126;
    $127 = $b;
    $128 = $127 << 16 >> 16;
    $129 = $coeff;
    $130 = $129 << 16 >> 16;
    $131 = Math_imul($128, $130)|0;
    $132 = $131 >> 16;
    $133 = $res_b;
    $134 = $133 << 16 >> 16;
    $135 = (($134) + ($132))|0;
    $136 = $135&65535;
    $res_b = $136;
    $137 = $y;
    $138 = (($137) + 1)|0;
    $y = $138;
    $139 = $0;
    $140 = ((($139)) + 104|0);
    $141 = ((($140)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $142 >> 3;
    $144 = $input_base_y;
    $145 = (($144) + ($143<<3)|0);
    $input_base_y = $145;
   }
   $146 = $res_a;
   $147 = $146 << 16 >> 16;
   $148 = $147 >> 3;
   $149 = $148&65535;
   $res_a = $149;
   $150 = $res_r;
   $151 = $150 << 16 >> 16;
   $152 = $151 >> 3;
   $153 = $152&65535;
   $res_r = $153;
   $154 = $res_g;
   $155 = $154 << 16 >> 16;
   $156 = $155 >> 3;
   $157 = $156&65535;
   $res_g = $157;
   $158 = $res_b;
   $159 = $158 << 16 >> 16;
   $160 = $159 >> 3;
   $161 = $160&65535;
   $res_b = $161;
   $162 = $res_a;
   $163 = (_clamp_8bit($162)|0);
   $164 = $163&255;
   $165 = $164 << 24;
   $166 = $res_r;
   $167 = (_clamp_8bit($166)|0);
   $168 = $167&255;
   $169 = $168 << 16;
   $170 = $165 | $169;
   $171 = $res_g;
   $172 = (_clamp_8bit($171)|0);
   $173 = $172&255;
   $174 = $173 << 8;
   $175 = $170 | $174;
   $176 = $res_b;
   $177 = (_clamp_8bit($176)|0);
   $178 = $177&255;
   $179 = $178 << 0;
   $180 = $175 | $179;
   $181 = $w;
   $182 = $output;
   $183 = (($182) + ($181<<2)|0);
   HEAP32[$183>>2] = $180;
   $184 = $w;
   $185 = (($184) + 1)|0;
   $w = $185;
  }
  $186 = $h;
  $187 = (($186) + 1)|0;
  $h = $187;
  $188 = $0;
  $189 = ((($188)) + 80|0);
  $190 = ((($189)) + 8|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $filter_vert;
  $193 = (($192) + ($191<<1)|0);
  $filter_vert = $193;
  $194 = $2;
  $195 = $194 >> 2;
  $196 = $output;
  $197 = (($196) + ($195<<2)|0);
  $output = $197;
 }
 STACKTOP = sp;return;
}
function _scaler_argb8888_horiz($ctx,$input_,$stride) {
 $ctx = $ctx|0;
 $input_ = $input_|0;
 $stride = $stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $coeff = 0;
 var $col = 0, $filter_horiz = 0, $g = 0, $h = 0, $input = 0, $input_base_x = 0, $output = 0, $r = 0, $res_a = 0, $res_b = 0, $res_g = 0, $res_r = 0, $w = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $input_;
 $2 = $stride;
 $3 = $1;
 $input = $3;
 $4 = $0;
 $5 = ((($4)) + 104|0);
 $6 = HEAP32[$5>>2]|0;
 $output = $6;
 $h = 0;
 while(1) {
  $7 = $h;
  $8 = $0;
  $9 = ((($8)) + 104|0);
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($7|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $0;
  $14 = ((($13)) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $filter_horiz = $15;
  $w = 0;
  while(1) {
   $16 = $w;
   $17 = $0;
   $18 = ((($17)) + 104|0);
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($16|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $input;
   $23 = $w;
   $24 = $0;
   $25 = ((($24)) + 64|0);
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($23<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($22) + ($29<<2)|0);
   $input_base_x = $30;
   $res_a = 0;
   $res_r = 0;
   $res_g = 0;
   $res_b = 0;
   $x = 0;
   while(1) {
    $31 = $x;
    $32 = $0;
    $33 = ((($32)) + 64|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($31>>>0)<($35>>>0);
    if (!($36)) {
     break;
    }
    $37 = $x;
    $38 = $input_base_x;
    $39 = (($38) + ($37<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $col = $40;
    $41 = $col;
    $42 = $41 >>> 17;
    $43 = $42 & 32640;
    $44 = $43&65535;
    $a = $44;
    $45 = $col;
    $46 = $45 >>> 9;
    $47 = $46 & 32640;
    $48 = $47&65535;
    $r = $48;
    $49 = $col;
    $50 = $49 >>> 1;
    $51 = $50 & 32640;
    $52 = $51&65535;
    $g = $52;
    $53 = $col;
    $54 = $53 << 7;
    $55 = $54 & 32640;
    $56 = $55&65535;
    $b = $56;
    $57 = $x;
    $58 = $filter_horiz;
    $59 = (($58) + ($57<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $coeff = $60;
    $61 = $a;
    $62 = $61 << 16 >> 16;
    $63 = $coeff;
    $64 = $63 << 16 >> 16;
    $65 = Math_imul($62, $64)|0;
    $66 = $65 >> 16;
    $67 = $res_a;
    $68 = $67 << 16 >> 16;
    $69 = (($68) + ($66))|0;
    $70 = $69&65535;
    $res_a = $70;
    $71 = $r;
    $72 = $71 << 16 >> 16;
    $73 = $coeff;
    $74 = $73 << 16 >> 16;
    $75 = Math_imul($72, $74)|0;
    $76 = $75 >> 16;
    $77 = $res_r;
    $78 = $77 << 16 >> 16;
    $79 = (($78) + ($76))|0;
    $80 = $79&65535;
    $res_r = $80;
    $81 = $g;
    $82 = $81 << 16 >> 16;
    $83 = $coeff;
    $84 = $83 << 16 >> 16;
    $85 = Math_imul($82, $84)|0;
    $86 = $85 >> 16;
    $87 = $res_g;
    $88 = $87 << 16 >> 16;
    $89 = (($88) + ($86))|0;
    $90 = $89&65535;
    $res_g = $90;
    $91 = $b;
    $92 = $91 << 16 >> 16;
    $93 = $coeff;
    $94 = $93 << 16 >> 16;
    $95 = Math_imul($92, $94)|0;
    $96 = $95 >> 16;
    $97 = $res_b;
    $98 = $97 << 16 >> 16;
    $99 = (($98) + ($96))|0;
    $100 = $99&65535;
    $res_b = $100;
    $101 = $x;
    $102 = (($101) + 1)|0;
    $x = $102;
   }
   $103 = $res_a;
   $104 = $res_r;
   $105 = $res_g;
   $106 = $res_b;
   $107 = (_build_argb64($103,$104,$105,$106)|0);
   $108 = tempRet0;
   $109 = $w;
   $110 = $output;
   $111 = (($110) + ($109<<3)|0);
   $112 = $111;
   $113 = $112;
   HEAP32[$113>>2] = $107;
   $114 = (($112) + 4)|0;
   $115 = $114;
   HEAP32[$115>>2] = $108;
   $116 = $w;
   $117 = (($116) + 1)|0;
   $w = $117;
   $118 = $0;
   $119 = ((($118)) + 64|0);
   $120 = ((($119)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $filter_horiz;
   $123 = (($122) + ($121<<1)|0);
   $filter_horiz = $123;
  }
  $124 = $h;
  $125 = (($124) + 1)|0;
  $h = $125;
  $126 = $2;
  $127 = $126 >> 2;
  $128 = $input;
  $129 = (($128) + ($127<<2)|0);
  $input = $129;
  $130 = $0;
  $131 = ((($130)) + 104|0);
  $132 = ((($131)) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = $133 >> 3;
  $135 = $output;
  $136 = (($135) + ($134<<3)|0);
  $output = $136;
 }
 STACKTOP = sp;return;
}
function _scaler_argb8888_point_special($ctx,$output_,$input_,$out_width,$out_height,$in_width,$in_height,$out_stride,$in_stride) {
 $ctx = $ctx|0;
 $output_ = $output_|0;
 $input_ = $input_|0;
 $out_width = $out_width|0;
 $out_height = $out_height|0;
 $in_width = $in_width|0;
 $in_height = $in_height|0;
 $out_stride = $out_stride|0;
 $in_stride = $in_stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $inp = 0, $input = 0, $output = 0, $w = 0, $x = 0, $x_pos = 0, $x_step = 0, $y_pos = 0, $y_step = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $output_;
 $2 = $input_;
 $3 = $out_width;
 $4 = $out_height;
 $5 = $in_width;
 $6 = $in_height;
 $7 = $out_stride;
 $8 = $in_stride;
 $9 = $5;
 $10 = $9<<15;
 $11 = $3;
 $12 = (($10|0) / ($11|0))&-1;
 $13 = (($12) - 32768)|0;
 $x_pos = $13;
 $14 = $5;
 $15 = $14<<16;
 $16 = $3;
 $17 = (($15|0) / ($16|0))&-1;
 $x_step = $17;
 $18 = $6;
 $19 = $18<<15;
 $20 = $4;
 $21 = (($19|0) / ($20|0))&-1;
 $22 = (($21) - 32768)|0;
 $y_pos = $22;
 $23 = $6;
 $24 = $23<<16;
 $25 = $4;
 $26 = (($24|0) / ($25|0))&-1;
 $y_step = $26;
 $27 = $x_pos;
 $28 = ($27|0)<(0);
 if ($28) {
  $x_pos = 0;
 }
 $29 = $y_pos;
 $30 = ($29|0)<(0);
 if ($30) {
  $y_pos = 0;
 }
 $31 = $2;
 $input = $31;
 $32 = $1;
 $output = $32;
 $h = 0;
 while(1) {
  $33 = $h;
  $34 = $4;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $x_pos;
  $x = $36;
  $37 = $input;
  $38 = $y_pos;
  $39 = $38 >> 16;
  $40 = $8;
  $41 = $40 >> 2;
  $42 = Math_imul($39, $41)|0;
  $43 = (($37) + ($42<<2)|0);
  $inp = $43;
  $w = 0;
  while(1) {
   $44 = $w;
   $45 = $3;
   $46 = ($44|0)<($45|0);
   if (!($46)) {
    break;
   }
   $47 = $x;
   $48 = $47 >> 16;
   $49 = $inp;
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $w;
   $53 = $output;
   $54 = (($53) + ($52<<2)|0);
   HEAP32[$54>>2] = $51;
   $55 = $w;
   $56 = (($55) + 1)|0;
   $w = $56;
   $57 = $x_step;
   $58 = $x;
   $59 = (($58) + ($57))|0;
   $x = $59;
  }
  $60 = $h;
  $61 = (($60) + 1)|0;
  $h = $61;
  $62 = $y_step;
  $63 = $y_pos;
  $64 = (($63) + ($62))|0;
  $y_pos = $64;
  $65 = $7;
  $66 = $65 >> 2;
  $67 = $output;
  $68 = (($67) + ($66<<2)|0);
  $output = $68;
 }
 STACKTOP = sp;return;
}
function _clamp_8bit($col) {
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $col;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)>(255);
 do {
  if ($4) {
   $0 = -1;
  } else {
   $5 = $1;
   $6 = $5 << 16 >> 16;
   $7 = ($6|0)<(0);
   if ($7) {
    $0 = 0;
    break;
   } else {
    $8 = $1;
    $9 = $8&255;
    $0 = $9;
    break;
   }
  }
 } while(0);
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _build_argb64($a,$r,$g,$b) {
 $a = $a|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $r;
 $2 = $g;
 $3 = $b;
 $4 = $0;
 $5 = $4&65535;
 $6 = (_bitshift64Shl(($5|0),0,48)|0);
 $7 = tempRet0;
 $8 = $1;
 $9 = $8&65535;
 $10 = $7 | $9;
 $11 = $2;
 $12 = $11&65535;
 $13 = (_bitshift64Shl(($12|0),0,16)|0);
 $14 = tempRet0;
 $15 = $6 | $13;
 $16 = $10 | $14;
 $17 = $3;
 $18 = $17&65535;
 $19 = (_bitshift64Shl(($18|0),0,0)|0);
 $20 = tempRet0;
 $21 = $15 | $19;
 $22 = $16 | $20;
 tempRet0 = ($22);
 STACKTOP = sp;return ($21|0);
}
function _scaler_gen_filter($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 5|0;
 $1 = $ctx;
 $ret = 1;
 $2 = $1;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 1:  {
  $5 = $1;
  $6 = (_gen_filter_point($5)|0);
  $7 = $6&1;
  $ret = $7;
  label = 6;
  break;
 }
 case 2:  {
  $8 = $1;
  $9 = (_gen_filter_bilinear($8)|0);
  $10 = $9&1;
  $ret = $10;
  label = 6;
  break;
 }
 case 3:  {
  $11 = $1;
  $12 = (_gen_filter_sinc($11)|0);
  $13 = $12&1;
  $ret = $13;
  label = 6;
  break;
 }
 default: {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 }
 }
 do {
  if ((label|0) == 6) {
   $14 = $ret;
   $15 = $14&1;
   if ($15) {
    $16 = $1;
    _fixup_filter($16);
    $17 = $1;
    $18 = (_validate_filter($17)|0);
    $$expand_i1_val4 = $18&1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   } else {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $19 = $$pre_trunc&1;
 STACKTOP = sp;return ($19|0);
}
function _gen_filter_point($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $x_pos = 0, $x_step = 0, $y_pos = 0, $y_step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $ctx;
 $2 = $1;
 $3 = ((($2)) + 64|0);
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 1;
 $5 = $1;
 $6 = ((($5)) + 64|0);
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 1;
 $8 = $1;
 $9 = ((($8)) + 80|0);
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 1;
 $11 = $1;
 $12 = ((($11)) + 80|0);
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = 1;
 $14 = $1;
 $15 = (_allocate_filters($14)|0);
 if ($15) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = $17<<15;
  $19 = $1;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($18|0) / ($21|0))&-1;
  $23 = (($22) - 32768)|0;
  $x_pos = $23;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = $25<<16;
  $27 = $1;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($26|0) / ($29|0))&-1;
  $x_step = $30;
  $31 = $1;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33<<15;
  $35 = $1;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($34|0) / ($37|0))&-1;
  $39 = (($38) - 32768)|0;
  $y_pos = $39;
  $40 = $1;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42<<16;
  $44 = $1;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($43|0) / ($46|0))&-1;
  $y_step = $47;
  $48 = $1;
  $49 = ((($48)) + 64|0);
  $50 = $1;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $x_pos;
  $54 = $x_step;
  _gen_filter_point_sub($49,$52,$53,$54);
  $55 = $1;
  $56 = ((($55)) + 80|0);
  $57 = $1;
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $y_pos;
  $61 = $y_step;
  _gen_filter_point_sub($56,$59,$60,$61);
  $62 = $1;
  $63 = ((($62)) + 44|0);
  HEAP32[$63>>2] = 323;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $64 = $$pre_trunc&1;
  STACKTOP = sp;return ($64|0);
 } else {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $64 = $$pre_trunc&1;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _gen_filter_bilinear($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $x_pos = 0, $x_step = 0, $y_pos = 0, $y_step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $ctx;
 $2 = $1;
 $3 = ((($2)) + 64|0);
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 2;
 $5 = $1;
 $6 = ((($5)) + 64|0);
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 2;
 $8 = $1;
 $9 = ((($8)) + 80|0);
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 2;
 $11 = $1;
 $12 = ((($11)) + 80|0);
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = 2;
 $14 = $1;
 $15 = (_allocate_filters($14)|0);
 if ($15) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = $17<<15;
  $19 = $1;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($18|0) / ($21|0))&-1;
  $23 = (($22) - 32768)|0;
  $x_pos = $23;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = $25<<16;
  $27 = $1;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($26|0) / ($29|0))&-1;
  $x_step = $30;
  $31 = $1;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33<<15;
  $35 = $1;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($34|0) / ($37|0))&-1;
  $39 = (($38) - 32768)|0;
  $y_pos = $39;
  $40 = $1;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42<<16;
  $44 = $1;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($43|0) / ($46|0))&-1;
  $y_step = $47;
  $48 = $1;
  $49 = ((($48)) + 64|0);
  $50 = $1;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $x_pos;
  $54 = $x_step;
  _gen_filter_bilinear_sub($49,$52,$53,$54);
  $55 = $1;
  $56 = ((($55)) + 80|0);
  $57 = $1;
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $y_pos;
  $61 = $y_step;
  _gen_filter_bilinear_sub($56,$59,$60,$61);
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 } else {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _gen_filter_sinc($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $phase_mul_horiz = 0.0, $phase_mul_vert = 0.0, $sinc_size = 0, $x_pos = 0, $x_step = 0, $y_pos = 0, $y_step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 40|0;
 $1 = $ctx;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)>($6|0);
 if ($7) {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($9|0) / ($12|0))&-1;
  $14 = (_next_pow21282($13)|0);
  $16 = $14;
 } else {
  $16 = 1;
 }
 $15 = $16<<3;
 $sinc_size = $15;
 $17 = $sinc_size;
 $18 = $1;
 $19 = ((($18)) + 64|0);
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $17;
 $21 = $sinc_size;
 $22 = $1;
 $23 = ((($22)) + 64|0);
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = $21;
 $25 = $sinc_size;
 $26 = $1;
 $27 = ((($26)) + 80|0);
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $25;
 $29 = $sinc_size;
 $30 = $1;
 $31 = ((($30)) + 80|0);
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = $29;
 $33 = $1;
 $34 = (_allocate_filters($33)|0);
 if (!($34)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $121 = $$pre_trunc&1;
  STACKTOP = sp;return ($121|0);
 }
 $35 = $1;
 $36 = HEAP32[$35>>2]|0;
 $37 = $36<<15;
 $38 = $1;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($37|0) / ($40|0))&-1;
 $42 = (($41) - 32768)|0;
 $43 = $sinc_size;
 $44 = $43 << 15;
 $45 = (($42) - ($44))|0;
 $x_pos = $45;
 $46 = $1;
 $47 = HEAP32[$46>>2]|0;
 $48 = $47<<16;
 $49 = $1;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($48|0) / ($51|0))&-1;
 $x_step = $52;
 $53 = $1;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55<<15;
 $57 = $1;
 $58 = ((($57)) + 16|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($56|0) / ($59|0))&-1;
 $61 = (($60) - 32768)|0;
 $62 = $sinc_size;
 $63 = $62 << 15;
 $64 = (($61) - ($63))|0;
 $y_pos = $64;
 $65 = $1;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67<<16;
 $69 = $1;
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($68|0) / ($71|0))&-1;
 $y_step = $72;
 $73 = $1;
 $74 = HEAP32[$73>>2]|0;
 $75 = $1;
 $76 = ((($75)) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($74|0)>($77|0);
 if ($78) {
  $79 = $1;
  $80 = ((($79)) + 12|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (+($81|0));
  $83 = $1;
  $84 = HEAP32[$83>>2]|0;
  $85 = (+($84|0));
  $86 = $82 / $85;
  $87 = $86;
 } else {
  $87 = 1.0;
 }
 $phase_mul_horiz = $87;
 $88 = $1;
 $89 = ((($88)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $1;
 $92 = ((($91)) + 16|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($90|0)>($93|0);
 if ($94) {
  $95 = $1;
  $96 = ((($95)) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (+($97|0));
  $99 = $1;
  $100 = ((($99)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (+($101|0));
  $103 = $98 / $102;
  $104 = $103;
 } else {
  $104 = 1.0;
 }
 $phase_mul_vert = $104;
 $105 = $1;
 $106 = ((($105)) + 64|0);
 $107 = $1;
 $108 = ((($107)) + 12|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $x_pos;
 $111 = $x_step;
 $112 = $phase_mul_horiz;
 _gen_filter_sinc_sub($106,$109,$110,$111,$112);
 $113 = $1;
 $114 = ((($113)) + 80|0);
 $115 = $1;
 $116 = ((($115)) + 16|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $y_pos;
 $119 = $y_step;
 $120 = $phase_mul_vert;
 _gen_filter_sinc_sub($114,$117,$118,$119,$120);
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $121 = $$pre_trunc&1;
 STACKTOP = sp;return ($121|0);
}
function _fixup_filter($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 _fixup_filter_sub($2,$5,$7);
 $8 = $0;
 $9 = ((($8)) + 80|0);
 $10 = $0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 _fixup_filter_sub($9,$12,$15);
 STACKTOP = sp;return;
}
function _validate_filter($ctx) {
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i = 0, $i1 = 0, $max_h_pos = 0, $max_w_pos = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = $ctx;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 64|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($3) - ($7))|0;
 $max_w_pos = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $1;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $1;
  $16 = ((($15)) + 64|0);
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($14<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $max_w_pos;
  $22 = ($20|0)>($21|0);
  if ($22) {
   label = 5;
   break;
  }
  $23 = $i;
  $24 = $1;
  $25 = ((($24)) + 64|0);
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($23<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(0);
  if ($30) {
   label = 5;
   break;
  }
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 if ((label|0) == 5) {
  $31 = HEAP32[544648>>2]|0;
  $32 = $i;
  $33 = $i;
  $34 = $1;
  $35 = ((($34)) + 64|0);
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($33<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer>>2] = $32;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $39;
  (_fprintf($31,759694,$vararg_buffer)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $83 = $$pre_trunc&1;
  STACKTOP = sp;return ($83|0);
 }
 $42 = $1;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $1;
 $46 = ((($45)) + 80|0);
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($44) - ($48))|0;
 $max_h_pos = $49;
 $i1 = 0;
 while(1) {
  $50 = $i1;
  $51 = $1;
  $52 = ((($51)) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50|0)<($53|0);
  if (!($54)) {
   label = 13;
   break;
  }
  $55 = $i1;
  $56 = $1;
  $57 = ((($56)) + 80|0);
  $58 = ((($57)) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($55<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $max_h_pos;
  $63 = ($61|0)>($62|0);
  if ($63) {
   label = 11;
   break;
  }
  $64 = $i1;
  $65 = $1;
  $66 = ((($65)) + 80|0);
  $67 = ((($66)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($64<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)<(0);
  if ($71) {
   label = 11;
   break;
  }
  $81 = $i1;
  $82 = (($81) + 1)|0;
  $i1 = $82;
 }
 if ((label|0) == 11) {
  $72 = HEAP32[544648>>2]|0;
  $73 = $i1;
  $74 = $i1;
  $75 = $1;
  $76 = ((($75)) + 80|0);
  $77 = ((($76)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + ($74<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $73;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $80;
  (_fprintf($72,759719,$vararg_buffer2)|0);
  $$expand_i1_val7 = 0;
  HEAP8[$0>>0] = $$expand_i1_val7;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $83 = $$pre_trunc&1;
  STACKTOP = sp;return ($83|0);
 }
 else if ((label|0) == 13) {
  $$expand_i1_val9 = 1;
  HEAP8[$0>>0] = $$expand_i1_val9;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $83 = $$pre_trunc&1;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _allocate_filters($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($4, $7)|0;
 $9 = (_scaler_alloc(2,$8)|0);
 $10 = $0;
 $11 = ((($10)) + 64|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_scaler_alloc(4,$14)|0);
 $16 = $0;
 $17 = ((($16)) + 64|0);
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $15;
 $19 = $0;
 $20 = ((($19)) + 80|0);
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = Math_imul($22, $25)|0;
 $27 = (_scaler_alloc(2,$26)|0);
 $28 = $0;
 $29 = ((($28)) + 80|0);
 HEAP32[$29>>2] = $27;
 $30 = $0;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_scaler_alloc(4,$32)|0);
 $34 = $0;
 $35 = ((($34)) + 80|0);
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = $33;
 $37 = $0;
 $38 = ((($37)) + 64|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  $45 = 0;
  STACKTOP = sp;return ($45|0);
 }
 $41 = $0;
 $42 = ((($41)) + 80|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 $45 = $44;
 STACKTOP = sp;return ($45|0);
}
function _gen_filter_point_sub($filter,$len,$pos,$step) {
 $filter = $filter|0;
 $len = $len|0;
 $pos = $pos|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filter;
 $1 = $len;
 $2 = $pos;
 $3 = $step;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $7 >> 16;
  $9 = $i;
  $10 = $0;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9<<2)|0);
  HEAP32[$13>>2] = $8;
  $14 = $i;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14<<1)|0);
  HEAP16[$17>>1] = 16384;
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
  $20 = $3;
  $21 = $2;
  $22 = (($21) + ($20))|0;
  $2 = $22;
 }
 STACKTOP = sp;return;
}
function _gen_filter_bilinear_sub($filter,$len,$pos,$step) {
 $filter = $filter|0;
 $len = $len|0;
 $pos = $pos|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filter;
 $1 = $len;
 $2 = $pos;
 $3 = $step;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $7 >> 16;
  $9 = $i;
  $10 = $0;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9<<2)|0);
  HEAP32[$13>>2] = $8;
  $14 = $2;
  $15 = $14 & 65535;
  $16 = $15 >> 2;
  $17 = $16&65535;
  $18 = $i;
  $19 = $18<<1;
  $20 = (($19) + 1)|0;
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20<<1)|0);
  HEAP16[$23>>1] = $17;
  $24 = $i;
  $25 = $24<<1;
  $26 = (($25) + 1)|0;
  $27 = $0;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($26<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = (16384 - ($31))|0;
  $33 = $32&65535;
  $34 = $i;
  $35 = $34<<1;
  $36 = (($35) + 0)|0;
  $37 = $0;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($36<<1)|0);
  HEAP16[$39>>1] = $33;
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
  $42 = $3;
  $43 = $2;
  $44 = (($43) + ($42))|0;
  $2 = $44;
 }
 STACKTOP = sp;return;
}
function _next_pow21282($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = (($1) + -1)|0;
 $0 = $2;
 $3 = $0;
 $4 = $3 >>> 1;
 $5 = $0;
 $6 = $5 | $4;
 $0 = $6;
 $7 = $0;
 $8 = $7 >>> 2;
 $9 = $0;
 $10 = $9 | $8;
 $0 = $10;
 $11 = $0;
 $12 = $11 >>> 4;
 $13 = $0;
 $14 = $13 | $12;
 $0 = $14;
 $15 = $0;
 $16 = $15 >>> 8;
 $17 = $0;
 $18 = $17 | $16;
 $0 = $18;
 $19 = $0;
 $20 = $19 >>> 16;
 $21 = $0;
 $22 = $21 | $20;
 $0 = $22;
 $23 = $0;
 $24 = (($23) + 1)|0;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _gen_filter_sinc_sub($filter,$len,$pos,$step,$phase_mul) {
 $filter = $filter|0;
 $len = $len|0;
 $pos = $pos|0;
 $step = $step|0;
 $phase_mul = +$phase_mul;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $lanczos_phase = 0.0, $sinc_phase = 0.0, $sinc_size = 0, $sinc_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filter;
 $1 = $len;
 $2 = $pos;
 $3 = $step;
 $4 = $phase_mul;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $sinc_size = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $1;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = $11 >> 16;
  $13 = $i;
  $14 = $0;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13<<2)|0);
  HEAP32[$17>>2] = $12;
  $j = 0;
  while(1) {
   $18 = $j;
   $19 = $sinc_size;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    break;
   }
   $21 = $sinc_size;
   $22 = $21 << 15;
   $23 = $2;
   $24 = $23 & 65535;
   $25 = (($22) + ($24))|0;
   $26 = (+($25|0));
   $27 = $26 / 65536.0;
   $28 = $j;
   $29 = (+($28|0));
   $30 = $27 - $29;
   $31 = 3.1415926535897931 * $30;
   $sinc_phase = $31;
   $32 = $sinc_phase;
   $33 = $sinc_size;
   $34 = $33 >> 1;
   $35 = (+($34|0));
   $36 = $32 / $35;
   $lanczos_phase = $36;
   $37 = $sinc_phase;
   $38 = $4;
   $39 = $37 * $38;
   $40 = (+_filter_sinc($39));
   $41 = 16384.0 * $40;
   $42 = $lanczos_phase;
   $43 = (+_filter_sinc($42));
   $44 = $41 * $43;
   $45 = $4;
   $46 = $44 * $45;
   $47 = (~~(($46)));
   $sinc_val = $47;
   $48 = $sinc_val;
   $49 = $i;
   $50 = $sinc_size;
   $51 = Math_imul($49, $50)|0;
   $52 = $j;
   $53 = (($51) + ($52))|0;
   $54 = $0;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($53<<1)|0);
   HEAP16[$56>>1] = $48;
   $57 = $j;
   $58 = (($57) + 1)|0;
   $j = $58;
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
  $61 = $3;
  $62 = $2;
  $63 = (($62) + ($61))|0;
  $2 = $63;
 }
 STACKTOP = sp;return;
}
function _filter_sinc($phase) {
 $phase = +$phase;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $phase;
 $2 = $1;
 $3 = (+Math_abs((+$2)));
 $4 = $3 < 1.0E-4;
 if ($4) {
  $0 = 1.0;
 } else {
  $5 = $1;
  $6 = (+Math_sin((+$5)));
  $7 = $1;
  $8 = $6 / $7;
  $0 = $8;
 }
 $9 = $0;
 STACKTOP = sp;return (+$9);
}
function _fixup_filter_sub($filter,$out_len,$in_len) {
 $filter = $filter|0;
 $out_len = $out_len|0;
 $in_len = $in_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base_filter = 0, $base_filter1 = 0, $i = 0, $max_pos = 0, $postsample = 0, $presample = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filter;
 $1 = $out_len;
 $2 = $in_len;
 $3 = $2;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) - ($6))|0;
 $max_pos = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $1;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $max_pos;
  $18 = (($16) - ($17))|0;
  $postsample = $18;
  $19 = $i;
  $20 = $0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (0 - ($24))|0;
  $presample = $25;
  $26 = $postsample;
  $27 = ($26|0)>(0);
  do {
   if ($27) {
    $28 = $postsample;
    $29 = $i;
    $30 = $0;
    $31 = ((($30)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + ($29<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) - ($28))|0;
    HEAP32[$33>>2] = $35;
    $36 = $0;
    $37 = HEAP32[$36>>2]|0;
    $38 = $i;
    $39 = $0;
    $40 = ((($39)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = Math_imul($38, $41)|0;
    $43 = (($37) + ($42<<1)|0);
    $base_filter = $43;
    $44 = $postsample;
    $45 = $0;
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($44|0)>($47|0);
    $49 = $base_filter;
    if ($48) {
     $50 = $0;
     $51 = ((($50)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52<<1;
     _memset(($49|0),0,($53|0))|0;
     break;
    } else {
     $54 = $postsample;
     $55 = (($49) + ($54<<1)|0);
     $56 = $base_filter;
     $57 = $0;
     $58 = ((($57)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $postsample;
     $61 = (($59) - ($60))|0;
     $62 = $61<<1;
     _memmove(($55|0),($56|0),($62|0))|0;
     $63 = $base_filter;
     $64 = $postsample;
     $65 = $64<<1;
     _memset(($63|0),0,($65|0))|0;
     break;
    }
   }
  } while(0);
  $66 = $presample;
  $67 = ($66|0)>(0);
  do {
   if ($67) {
    $68 = $presample;
    $69 = $i;
    $70 = $0;
    $71 = ((($70)) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + ($69<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + ($68))|0;
    HEAP32[$73>>2] = $75;
    $76 = $0;
    $77 = HEAP32[$76>>2]|0;
    $78 = $i;
    $79 = $0;
    $80 = ((($79)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = Math_imul($78, $81)|0;
    $83 = (($77) + ($82<<1)|0);
    $base_filter1 = $83;
    $84 = $presample;
    $85 = $0;
    $86 = ((($85)) + 4|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($84|0)>($87|0);
    $89 = $base_filter1;
    if ($88) {
     $90 = $0;
     $91 = ((($90)) + 4|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $92<<1;
     _memset(($89|0),0,($93|0))|0;
     break;
    } else {
     $94 = $base_filter1;
     $95 = $presample;
     $96 = (($94) + ($95<<1)|0);
     $97 = $0;
     $98 = ((($97)) + 4|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = $presample;
     $101 = (($99) - ($100))|0;
     $102 = $101<<1;
     _memmove(($89|0),($96|0),($102|0))|0;
     $103 = $base_filter1;
     $104 = $0;
     $105 = ((($104)) + 4|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $presample;
     $108 = (($106) - ($107))|0;
     $109 = (($103) + ($108<<1)|0);
     $110 = $presample;
     $111 = $110<<1;
     _memset(($109|0),0,($111|0))|0;
     break;
    }
   }
  } while(0);
  $112 = $i;
  $113 = (($112) + 1)|0;
  $i = $113;
 }
 STACKTOP = sp;return;
}
function _state_tracker_init($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i = 0, $tracker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $info;
 $2 = (_calloc(1,12)|0);
 $tracker = $2;
 $3 = $tracker;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $140 = $0;
  STACKTOP = sp;return ($140|0);
 }
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_calloc($7,112)|0);
 $9 = $tracker;
 HEAP32[$9>>2] = $8;
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $tracker;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $12;
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = $tracker;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + (($20*112)|0)|0);
  $24 = $i;
  $25 = $1;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + (($24*80)|0)|0);
  (_strlcpy_rarch__($23,$28,64)|0);
  $29 = $i;
  $30 = $1;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($29*80)|0)|0);
  $34 = ((($33)) + 64|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $i;
  $37 = $tracker;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + (($36*112)|0)|0);
  $40 = ((($39)) + 76|0);
  HEAP32[$40>>2] = $35;
  $41 = $i;
  $42 = $1;
  $43 = ((($42)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + (($41*80)|0)|0);
  $46 = ((($45)) + 68|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $i;
  $49 = $tracker;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($48*112)|0)|0);
  $52 = ((($51)) + 84|0);
  HEAP32[$52>>2] = $47;
  $53 = $i;
  $54 = $1;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + (($53*80)|0)|0);
  $58 = ((($57)) + 76|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = ($60|0)==(0);
  if ($61) {
   $71 = 65535;
  } else {
   $62 = $i;
   $63 = $1;
   $64 = ((($63)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + (($62*80)|0)|0);
   $67 = ((($66)) + 76|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $71 = $69;
  }
  $70 = $71&65535;
  $72 = $i;
  $73 = $tracker;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + (($72*112)|0)|0);
  $76 = ((($75)) + 80|0);
  HEAP16[$76>>1] = $70;
  $77 = $i;
  $78 = $1;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + (($77*80)|0)|0);
  $82 = ((($81)) + 78|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $i;
  $85 = $tracker;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + (($84*112)|0)|0);
  $88 = ((($87)) + 82|0);
  HEAP16[$88>>1] = $83;
  $89 = $i;
  $90 = $1;
  $91 = ((($90)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + (($89*80)|0)|0);
  $94 = ((($93)) + 72|0);
  $95 = HEAP32[$94>>2]|0;
  switch ($95|0) {
  case 1:  {
   $96 = $1;
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)!=(0|0);
   if ($98) {
    $99 = $1;
    $100 = HEAP32[$99>>2]|0;
    $106 = $100;
   } else {
    $106 = 759744;
   }
   $101 = $i;
   $102 = $tracker;
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + (($101*112)|0)|0);
   $105 = ((($104)) + 72|0);
   HEAP32[$105>>2] = $106;
   break;
  }
  case 2:  {
   $107 = $tracker;
   $108 = ((($107)) + 8|0);
   $109 = $i;
   $110 = $tracker;
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + (($109*112)|0)|0);
   $113 = ((($112)) + 68|0);
   HEAP32[$113>>2] = $108;
   $114 = $i;
   $115 = $tracker;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + (($114*112)|0)|0);
   $118 = ((($117)) + 64|0);
   HEAP8[$118>>0] = 1;
   break;
  }
  case 3:  {
   $119 = $tracker;
   $120 = ((($119)) + 8|0);
   $121 = ((($120)) + 2|0);
   $122 = $i;
   $123 = $tracker;
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + (($122*112)|0)|0);
   $126 = ((($125)) + 68|0);
   HEAP32[$126>>2] = $121;
   $127 = $i;
   $128 = $tracker;
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + (($127*112)|0)|0);
   $131 = ((($130)) + 64|0);
   HEAP8[$131>>0] = 1;
   break;
  }
  default: {
   $132 = $i;
   $133 = $tracker;
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + (($132*112)|0)|0);
   $136 = ((($135)) + 72|0);
   HEAP32[$136>>2] = 759744;
  }
  }
  $137 = $i;
  $138 = (($137) + 1)|0;
  $i = $138;
 }
 $139 = $tracker;
 $0 = $139;
 $140 = $0;
 STACKTOP = sp;return ($140|0);
}
function _state_tracker_free($tracker) {
 $tracker = $tracker|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tracker;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = $0;
 _free($3);
 STACKTOP = sp;return;
}
function _state_get_uniform($tracker,$uniforms,$elem,$frame_count) {
 $tracker = $tracker|0;
 $uniforms = $uniforms|0;
 $elem = $elem|0;
 $frame_count = $frame_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elems = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tracker;
 $1 = $uniforms;
 $2 = $elem;
 $3 = $frame_count;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ($6>>>0)<($7>>>0);
 if ($8) {
  $9 = $0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
 } else {
  $12 = $2;
  $13 = $12;
 }
 $elems = $13;
 $14 = $0;
 _update_input($14);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $elems;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = $1;
  $20 = (($19) + ($18<<3)|0);
  $21 = $i;
  $22 = $0;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($21*112)|0)|0);
  $25 = $3;
  _update_element($20,$24,$25);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $elems;
 STACKTOP = sp;return ($28|0);
}
function _update_input($tracker) {
 $tracker = $tracker|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $state = sp + 12|0;
 $0 = $tracker;
 $1 = HEAP32[(16)>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 ;HEAP16[$state>>1]=0|0;HEAP16[$state+2>>1]=0|0;
 $i = 4;
 while(1) {
  $3 = $i;
  $4 = ($3>>>0)<(16);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[(16)>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[(28)>>2]|0;
  $9 = $i;
  $10 = (($9) - 4)|0;
  $11 = (270000 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiiii[$7 & 255]($8,270048,0,1,0,$12)|0);
  $14 = $13 << 16 >> 16;
  $15 = ($14|0)!=(0);
  $16 = $15 ? 1 : 0;
  $17 = $i;
  $18 = $16 << $17;
  $19 = HEAP16[$state>>1]|0;
  $20 = $19&65535;
  $21 = $20 | $18;
  $22 = $21&65535;
  HEAP16[$state>>1] = $22;
  $23 = HEAP32[(16)>>2]|0;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[(28)>>2]|0;
  $27 = $i;
  $28 = (($27) - 4)|0;
  $29 = (270000 + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (FUNCTION_TABLE_iiiiiii[$25 & 255]($26,270048,1,1,0,$30)|0);
  $32 = $31 << 16 >> 16;
  $33 = ($32|0)!=(0);
  $34 = $33 ? 1 : 0;
  $35 = $i;
  $36 = $34 << $35;
  $37 = ((($state)) + 2|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = $39 | $36;
  $41 = $40&65535;
  HEAP16[$37>>1] = $41;
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 $i1 = 0;
 while(1) {
  $44 = $i1;
  $45 = ($44>>>0)<(2);
  if (!($45)) {
   break;
  }
  $46 = $i1;
  $47 = (($state) + ($46<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $i1;
  $50 = $0;
  $51 = ((($50)) + 8|0);
  $52 = (($51) + ($49<<1)|0);
  HEAP16[$52>>1] = $48;
  $53 = $i1;
  $54 = (($53) + 1)|0;
  $i1 = $54;
 }
 STACKTOP = sp;return;
}
function _update_element($uniform,$info,$frame_count) {
 $uniform = $uniform|0;
 $info = $info|0;
 $frame_count = $frame_count|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uniform;
 $1 = $info;
 $2 = $frame_count;
 $3 = $1;
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $1;
 $6 = ((($5)) + 84|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 0:  {
  $8 = $1;
  $9 = (_fetch($8)|0);
  $10 = (+($9&65535));
  $11 = $0;
  $12 = ((($11)) + 4|0);
  HEAPF32[$12>>2] = $10;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $13 = $1;
  $14 = ((($13)) + 88|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = (_fetch($16)|0);
  $18 = $17&65535;
  $19 = ($15|0)!=($18|0);
  if ($19) {
   $20 = $1;
   $21 = ((($20)) + 88|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = ((($23)) + 88|0);
   $25 = ((($24)) + 4|0);
   HEAP32[$25>>2] = $22;
   $26 = $1;
   $27 = (_fetch($26)|0);
   $28 = $27&65535;
   $29 = $1;
   $30 = ((($29)) + 88|0);
   HEAP32[$30>>2] = $28;
  }
  $31 = $1;
  $32 = ((($31)) + 88|0);
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (+($34>>>0));
  $36 = $0;
  $37 = ((($36)) + 4|0);
  HEAPF32[$37>>2] = $35;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $38 = $1;
  $39 = ((($38)) + 104|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $1;
  $42 = (_fetch($41)|0);
  $43 = $42&65535;
  $44 = ($40|0)!=($43|0);
  if ($44) {
   $45 = $1;
   $46 = (_fetch($45)|0);
   $47 = $46&65535;
   $48 = $1;
   $49 = ((($48)) + 104|0);
   HEAP32[$49>>2] = $47;
   $50 = $2;
   $51 = $1;
   $52 = ((($51)) + 96|0);
   HEAP32[$52>>2] = $50;
  }
  $53 = $1;
  $54 = ((($53)) + 96|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (+($55|0));
  $57 = $0;
  $58 = ((($57)) + 4|0);
  HEAPF32[$58>>2] = $56;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $59 = $1;
  $60 = ((($59)) + 104|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $1;
  $63 = (_fetch($62)|0);
  $64 = $63&65535;
  $65 = ($61|0)!=($64|0);
  if ($65) {
   $66 = $1;
   $67 = (_fetch($66)|0);
   $68 = $67&65535;
   $69 = $1;
   $70 = ((($69)) + 104|0);
   HEAP32[$70>>2] = $68;
   $71 = $1;
   $72 = ((($71)) + 108|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + 1)|0;
   HEAP32[$72>>2] = $74;
  }
  $75 = $1;
  $76 = ((($75)) + 108|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (+($77|0));
  $79 = $0;
  $80 = ((($79)) + 4|0);
  HEAPF32[$80>>2] = $78;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $81 = $1;
  $82 = ((($81)) + 104|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $1;
  $85 = (_fetch($84)|0);
  $86 = $85&65535;
  $87 = ($83|0)!=($86|0);
  if ($87) {
   $88 = $1;
   $89 = (_fetch($88)|0);
   $90 = $89&65535;
   $91 = $1;
   $92 = ((($91)) + 104|0);
   HEAP32[$92>>2] = $90;
   $93 = $1;
   $94 = ((($93)) + 96|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $1;
   $97 = ((($96)) + 100|0);
   HEAP32[$97>>2] = $95;
   $98 = $2;
   $99 = $1;
   $100 = ((($99)) + 96|0);
   HEAP32[$100>>2] = $98;
  }
  $101 = $1;
  $102 = ((($101)) + 100|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (+($103|0));
  $105 = $0;
  $106 = ((($105)) + 4|0);
  HEAPF32[$106>>2] = $104;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _fetch($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $val = 0;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 $5 = $0;
 if ($4) {
  $6 = ((($5)) + 68|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP16[$7>>1]|0;
  $val = $8;
 } else {
  $9 = ((($5)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = ((($11)) + 72|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $val = $16;
 }
 $17 = $0;
 $18 = ((($17)) + 80|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = $val;
 $22 = $21&65535;
 $23 = $22 & $20;
 $24 = $23&65535;
 $val = $24;
 $25 = $0;
 $26 = ((($25)) + 82|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $37 = $val;
  STACKTOP = sp;return ($37|0);
 }
 $30 = $val;
 $31 = $30&65535;
 $32 = $0;
 $33 = ((($32)) + 82|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34&65535;
 $36 = ($31|0)!=($35|0);
 if (!($36)) {
  $37 = $val;
  STACKTOP = sp;return ($37|0);
 }
 $val = 0;
 $37 = $val;
 STACKTOP = sp;return ($37|0);
}
function _gfx_shader_read_conf_cgp($conf,$shader) {
 $conf = $conf|0;
 $shader = $shader|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $shaders = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 $shaders = sp + 16|0;
 $1 = $conf;
 $2 = $shader;
 $3 = $2;
 _memset(($3|0),0,109528)|0;
 $4 = $2;
 HEAP32[$4>>2] = 0;
 HEAP32[$shaders>>2] = 0;
 $5 = $1;
 $6 = (_config_get_uint($5,759745,$shaders)|0);
 do {
  if ($6) {
   $17 = HEAP32[$shaders>>2]|0;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    $19 = HEAP32[(259664)>>2]|0;
    $20 = ($19|0)!=(0|0);
    $21 = HEAP32[(259664)>>2]|0;
    $22 = HEAP32[544648>>2]|0;
    $23 = $20 ? $21 : $22;
    (_fprintf($23,759804,$vararg_buffer1)|0);
    $24 = HEAP32[(259664)>>2]|0;
    $25 = ($24|0)!=(0|0);
    $26 = HEAP32[(259664)>>2]|0;
    $27 = HEAP32[544648>>2]|0;
    $28 = $25 ? $26 : $27;
    (_fflush($28)|0);
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
   $29 = HEAP32[$shaders>>2]|0;
   $30 = ($29>>>0)<(16);
   $31 = HEAP32[$shaders>>2]|0;
   $32 = $30 ? $31 : 16;
   $33 = $2;
   $34 = ((($33)) + 72|0);
   HEAP32[$34>>2] = $32;
   $i = 0;
   while(1) {
    $35 = $i;
    $36 = $2;
    $37 = ((($36)) + 72|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($35>>>0)<($38>>>0);
    $40 = $1;
    if (!($39)) {
     break;
    }
    $41 = $i;
    $42 = $2;
    $43 = ((($42)) + 76|0);
    $44 = (($43) + (($41*4148)|0)|0);
    $45 = $i;
    $46 = (_shader_parse_pass($40,$44,$45)|0);
    if (!($46)) {
     label = 8;
     break;
    }
    $47 = $i;
    $48 = (($47) + 1)|0;
    $i = $48;
   }
   if ((label|0) == 8) {
    $$expand_i1_val6 = 0;
    HEAP8[$0>>0] = $$expand_i1_val6;
    break;
   }
   $49 = $2;
   $50 = (_shader_parse_textures($40,$49)|0);
   if (!($50)) {
    $$expand_i1_val8 = 0;
    HEAP8[$0>>0] = $$expand_i1_val8;
    break;
   }
   $51 = $1;
   $52 = $2;
   $53 = (_shader_parse_imports($51,$52)|0);
   if ($53) {
    $$expand_i1_val12 = 1;
    HEAP8[$0>>0] = $$expand_i1_val12;
    break;
   } else {
    $$expand_i1_val10 = 0;
    HEAP8[$0>>0] = $$expand_i1_val10;
    break;
   }
  } else {
   $7 = HEAP32[(259664)>>2]|0;
   $8 = ($7|0)!=(0|0);
   $9 = HEAP32[(259664)>>2]|0;
   $10 = HEAP32[544648>>2]|0;
   $11 = $8 ? $9 : $10;
   (_fprintf($11,759753,$vararg_buffer)|0);
   $12 = HEAP32[(259664)>>2]|0;
   $13 = ($12|0)!=(0|0);
   $14 = HEAP32[(259664)>>2]|0;
   $15 = HEAP32[544648>>2]|0;
   $16 = $13 ? $14 : $15;
   (_fflush($16)|0);
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $54 = $$pre_trunc&1;
 STACKTOP = sp;return ($54|0);
}
function _gfx_shader_read_xml($path,$shader) {
 $path = $path|0;
 $shader = $shader|0;
 var $$expand_i1_val = 0, $$expand_i1_val34 = 0, $$expand_i1_val36 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $attr = 0, $content = 0, $ctx = 0, $cur = 0, $doc = 0, $head = 0, $pass = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer29 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 224|0;
 $attr = sp + 160|0;
 $1 = $path;
 $2 = $shader;
 $ctx = (-1);
 $3 = $ctx;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = HEAP32[(259664)>>2]|0;
  $6 = ($5|0)!=(0|0);
  $7 = HEAP32[(259664)>>2]|0;
  $8 = HEAP32[544648>>2]|0;
  $9 = $6 ? $7 : $8;
  (_fprintf($9,759860,$vararg_buffer)|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = HEAP32[544648>>2]|0;
  $14 = $11 ? $12 : $13;
  (_fflush($14)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $322 = $$pre_trunc&1;
  STACKTOP = sp;return ($322|0);
 }
 $15 = HEAP8[102648>>0]|0;
 $16 = $15&1;
 if ($16) {
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  $22 = $1;
  HEAP32[$vararg_buffer1>>2] = $22;
  (_fprintf($21,759914,$vararg_buffer1)|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = ($23|0)!=(0|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = HEAP32[544648>>2]|0;
  $27 = $24 ? $25 : $26;
  (_fflush($27)|0);
 }
 $28 = $1;
 $29 = (_rxml_load_document($28)|0);
 $doc = $29;
 $head = 0;
 $cur = 0;
 $30 = $doc;
 $31 = ($30|0)!=(0|0);
 do {
  if ($31) {
   $43 = $doc;
   $44 = (_rxml_root_node($43)|0);
   $head = $44;
   $45 = $head;
   $cur = $45;
   while(1) {
    $46 = $cur;
    $47 = ($46|0)!=(0|0);
    if (!($47)) {
     break;
    }
    $48 = $cur;
    $49 = ((($48)) + 20|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)!=(0);
    if (!($51)) {
     $52 = $cur;
     $53 = HEAP32[$52>>2]|0;
     $54 = (_strcmp($53,760000)|0);
     $55 = ($54|0)!=(0);
     if (!($55)) {
      $56 = $cur;
      (_xml_get_prop($attr,64,$56,760007)|0);
      $57 = (_strcmp($attr,760016)|0);
      $58 = ($57|0)==(0);
      if ($58) {
       label = 12;
       break;
      }
     }
    }
    $110 = $cur;
    $111 = ((($110)) + 16|0);
    $112 = HEAP32[$111>>2]|0;
    $cur = $112;
   }
   do {
    if ((label|0) == 12) {
     $59 = $2;
     HEAP32[$59>>2] = 2;
     $60 = $cur;
     (_xml_get_prop($attr,64,$60,760021)|0);
     $61 = (_strcmp($attr,760027)|0);
     $62 = ($61|0)==(0);
     $63 = $2;
     $64 = ((($63)) + 4|0);
     $65 = $62&1;
     HEAP8[$64>>0] = $65;
     $66 = $2;
     $67 = ((($66)) + 5|0);
     $68 = $cur;
     $69 = (_xml_get_prop($67,64,$68,760033)|0);
     if ($69) {
      $70 = HEAP8[102648>>0]|0;
      $71 = $70&1;
      if ($71) {
       $72 = HEAP32[(259664)>>2]|0;
       $73 = ($72|0)!=(0|0);
       $74 = HEAP32[(259664)>>2]|0;
       $75 = HEAP32[544648>>2]|0;
       $76 = $73 ? $74 : $75;
       $77 = $2;
       $78 = ((($77)) + 5|0);
       HEAP32[$vararg_buffer6>>2] = $78;
       (_fprintf($76,760040,$vararg_buffer6)|0);
       $79 = HEAP32[(259664)>>2]|0;
       $80 = ($79|0)!=(0|0);
       $81 = HEAP32[(259664)>>2]|0;
       $82 = HEAP32[544648>>2]|0;
       $83 = $80 ? $81 : $82;
       (_fflush($83)|0);
      }
     }
     $84 = $2;
     $85 = ((($84)) + 4|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&1;
     if (!($87)) {
      $100 = HEAP32[(259664)>>2]|0;
      $101 = ($100|0)!=(0|0);
      $102 = HEAP32[(259664)>>2]|0;
      $103 = HEAP32[544648>>2]|0;
      $104 = $101 ? $102 : $103;
      (_fprintf($104,760149,$vararg_buffer11)|0);
      $105 = HEAP32[(259664)>>2]|0;
      $106 = ($105|0)!=(0|0);
      $107 = HEAP32[(259664)>>2]|0;
      $108 = HEAP32[544648>>2]|0;
      $109 = $106 ? $107 : $108;
      (_fflush($109)|0);
      break;
     }
     $88 = HEAP8[102648>>0]|0;
     $89 = $88&1;
     if ($89) {
      $90 = HEAP32[(259664)>>2]|0;
      $91 = ($90|0)!=(0|0);
      $92 = HEAP32[(259664)>>2]|0;
      $93 = HEAP32[544648>>2]|0;
      $94 = $91 ? $92 : $93;
      (_fprintf($94,760094,$vararg_buffer9)|0);
      $95 = HEAP32[(259664)>>2]|0;
      $96 = ($95|0)!=(0|0);
      $97 = HEAP32[(259664)>>2]|0;
      $98 = HEAP32[544648>>2]|0;
      $99 = $96 ? $97 : $98;
      (_fflush($99)|0);
     }
    }
   } while(0);
   $113 = $cur;
   $114 = ($113|0)!=(0|0);
   if ($114) {
    $115 = $cur;
    $116 = ((($115)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $cur = $117;
    L29: while(1) {
     $118 = $cur;
     $119 = ($118|0)!=(0|0);
     if (!($119)) {
      label = 51;
      break;
     }
     $120 = $2;
     $121 = ((($120)) + 72|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($122>>>0)<(16);
     if (!($123)) {
      label = 51;
      break;
     }
     $124 = $cur;
     $125 = ((($124)) + 20|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($126|0)!=(0);
     do {
      if (!($127)) {
       $128 = $cur;
       $129 = (_xml_get_content($128)|0);
       $content = $129;
       $130 = $content;
       $131 = ($130|0)!=(0|0);
       if ($131) {
        $132 = $2;
        $133 = ((($132)) + 72|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = $2;
        $136 = ((($135)) + 76|0);
        $137 = (($136) + (($134*4148)|0)|0);
        $pass = $137;
        $138 = $cur;
        $139 = HEAP32[$138>>2]|0;
        $140 = (_strcmp($139,760207)|0);
        $141 = ($140|0)==(0);
        if ($141) {
         $142 = $pass;
         $143 = ((($142)) + 4096|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($144|0)!=(0|0);
         if ($145) {
          label = 28;
          break L29;
         }
         $157 = $content;
         $158 = $1;
         $159 = $cur;
         $160 = (_xml_replace_if_file($157,$158,$159,760290)|0);
         $content = $160;
         $161 = $content;
         $162 = ($161|0)!=(0|0);
         if (!($162)) {
          label = 30;
          break L29;
         }
         $173 = $content;
         $174 = $pass;
         $175 = ((($174)) + 4096|0);
         HEAP32[$175>>2] = $173;
         break;
        }
        $176 = $cur;
        $177 = HEAP32[$176>>2]|0;
        $178 = (_strcmp($177,760369)|0);
        $179 = ($178|0)==(0);
        if ($179) {
         $180 = $2;
         $181 = ((($180)) + 4|0);
         $182 = HEAP8[$181>>0]|0;
         $183 = $182&1;
         if ($183) {
          $184 = $pass;
          $185 = ((($184)) + 4096|0);
          $186 = HEAP32[$185>>2]|0;
          $187 = ($186|0)!=(0|0);
          if (!($187)) {
           label = 35;
           break L29;
          }
         }
         $199 = $content;
         $200 = $1;
         $201 = $cur;
         $202 = (_xml_replace_if_file($199,$200,$201,760290)|0);
         $content = $202;
         $203 = $content;
         $204 = ($203|0)!=(0|0);
         if (!($204)) {
          label = 37;
          break L29;
         }
         $215 = $content;
         $216 = $pass;
         $217 = ((($216)) + 4096|0);
         $218 = ((($217)) + 4|0);
         HEAP32[$218>>2] = $215;
         $219 = $pass;
         $220 = $cur;
         $221 = (_get_xml_attrs($219,$220)|0);
         if (!($221)) {
          label = 39;
          break L29;
         }
         $232 = $2;
         $233 = ((($232)) + 72|0);
         $234 = HEAP32[$233>>2]|0;
         $235 = (($234) + 1)|0;
         HEAP32[$233>>2] = $235;
         break;
        }
        $236 = $cur;
        $237 = HEAP32[$236>>2]|0;
        $238 = (_strcmp($237,760556)|0);
        $239 = ($238|0)==(0);
        if ($239) {
         $240 = $content;
         _free($240);
         $241 = $2;
         $242 = $cur;
         $243 = (_add_texture_image($241,$242)|0);
         if ($243) {
          break;
         } else {
          label = 43;
          break L29;
         }
        }
        $254 = $cur;
        $255 = HEAP32[$254>>2]|0;
        $256 = (_strcmp($255,760616)|0);
        $257 = ($256|0)==(0);
        if ($257) {
         $258 = $content;
         _free($258);
         $259 = $2;
         $260 = $cur;
         $261 = (_add_import_value($259,$260)|0);
         if ($261) {
          break;
         } else {
          label = 46;
          break L29;
         }
        }
        $272 = $cur;
        $273 = HEAP32[$272>>2]|0;
        $274 = (_strcmp($273,760670)|0);
        $275 = ($274|0)==(0);
        if ($275) {
         $276 = $content;
         _free($276);
         $277 = $2;
         $278 = $1;
         $279 = $cur;
         $280 = (_get_script($277,$278,$279)|0);
         if (!($280)) {
          label = 49;
          break L29;
         }
        }
       }
      }
     } while(0);
     $291 = $cur;
     $292 = ((($291)) + 16|0);
     $293 = HEAP32[$292>>2]|0;
     $cur = $293;
    }
    if ((label|0) == 28) {
     $146 = HEAP32[(259664)>>2]|0;
     $147 = ($146|0)!=(0|0);
     $148 = HEAP32[(259664)>>2]|0;
     $149 = HEAP32[544648>>2]|0;
     $150 = $147 ? $148 : $149;
     (_fprintf($150,760214,$vararg_buffer13)|0);
     $151 = HEAP32[(259664)>>2]|0;
     $152 = ($151|0)!=(0|0);
     $153 = HEAP32[(259664)>>2]|0;
     $154 = HEAP32[544648>>2]|0;
     $155 = $152 ? $153 : $154;
     (_fflush($155)|0);
     $156 = $content;
     _free($156);
     break;
    }
    else if ((label|0) == 30) {
     $163 = HEAP32[(259664)>>2]|0;
     $164 = ($163|0)!=(0|0);
     $165 = HEAP32[(259664)>>2]|0;
     $166 = HEAP32[544648>>2]|0;
     $167 = $164 ? $165 : $166;
     (_fprintf($167,760294,$vararg_buffer15)|0);
     $168 = HEAP32[(259664)>>2]|0;
     $169 = ($168|0)!=(0|0);
     $170 = HEAP32[(259664)>>2]|0;
     $171 = HEAP32[544648>>2]|0;
     $172 = $169 ? $170 : $171;
     (_fflush($172)|0);
     break;
    }
    else if ((label|0) == 35) {
     $188 = HEAP32[(259664)>>2]|0;
     $189 = ($188|0)!=(0|0);
     $190 = HEAP32[(259664)>>2]|0;
     $191 = HEAP32[544648>>2]|0;
     $192 = $189 ? $190 : $191;
     (_fprintf($192,760378,$vararg_buffer17)|0);
     $193 = HEAP32[(259664)>>2]|0;
     $194 = ($193|0)!=(0|0);
     $195 = HEAP32[(259664)>>2]|0;
     $196 = HEAP32[544648>>2]|0;
     $197 = $194 ? $195 : $196;
     (_fflush($197)|0);
     $198 = $content;
     _free($198);
     break;
    }
    else if ((label|0) == 37) {
     $205 = HEAP32[(259664)>>2]|0;
     $206 = ($205|0)!=(0|0);
     $207 = HEAP32[(259664)>>2]|0;
     $208 = HEAP32[544648>>2]|0;
     $209 = $206 ? $207 : $208;
     (_fprintf($209,760294,$vararg_buffer19)|0);
     $210 = HEAP32[(259664)>>2]|0;
     $211 = ($210|0)!=(0|0);
     $212 = HEAP32[(259664)>>2]|0;
     $213 = HEAP32[544648>>2]|0;
     $214 = $211 ? $212 : $213;
     (_fflush($214)|0);
     break;
    }
    else if ((label|0) == 39) {
     $222 = HEAP32[(259664)>>2]|0;
     $223 = ($222|0)!=(0|0);
     $224 = HEAP32[(259664)>>2]|0;
     $225 = HEAP32[544648>>2]|0;
     $226 = $223 ? $224 : $225;
     (_fprintf($226,760477,$vararg_buffer21)|0);
     $227 = HEAP32[(259664)>>2]|0;
     $228 = ($227|0)!=(0|0);
     $229 = HEAP32[(259664)>>2]|0;
     $230 = HEAP32[544648>>2]|0;
     $231 = $228 ? $229 : $230;
     (_fflush($231)|0);
     break;
    }
    else if ((label|0) == 43) {
     $244 = HEAP32[(259664)>>2]|0;
     $245 = ($244|0)!=(0|0);
     $246 = HEAP32[(259664)>>2]|0;
     $247 = HEAP32[544648>>2]|0;
     $248 = $245 ? $246 : $247;
     (_fprintf($248,760564,$vararg_buffer23)|0);
     $249 = HEAP32[(259664)>>2]|0;
     $250 = ($249|0)!=(0|0);
     $251 = HEAP32[(259664)>>2]|0;
     $252 = HEAP32[544648>>2]|0;
     $253 = $250 ? $251 : $252;
     (_fflush($253)|0);
     break;
    }
    else if ((label|0) == 46) {
     $262 = HEAP32[(259664)>>2]|0;
     $263 = ($262|0)!=(0|0);
     $264 = HEAP32[(259664)>>2]|0;
     $265 = HEAP32[544648>>2]|0;
     $266 = $263 ? $264 : $265;
     (_fprintf($266,760623,$vararg_buffer25)|0);
     $267 = HEAP32[(259664)>>2]|0;
     $268 = ($267|0)!=(0|0);
     $269 = HEAP32[(259664)>>2]|0;
     $270 = HEAP32[544648>>2]|0;
     $271 = $268 ? $269 : $270;
     (_fflush($271)|0);
     break;
    }
    else if ((label|0) == 49) {
     $281 = HEAP32[(259664)>>2]|0;
     $282 = ($281|0)!=(0|0);
     $283 = HEAP32[(259664)>>2]|0;
     $284 = HEAP32[544648>>2]|0;
     $285 = $282 ? $283 : $284;
     (_fprintf($285,760677,$vararg_buffer27)|0);
     $286 = HEAP32[(259664)>>2]|0;
     $287 = ($286|0)!=(0|0);
     $288 = HEAP32[(259664)>>2]|0;
     $289 = HEAP32[544648>>2]|0;
     $290 = $287 ? $288 : $289;
     (_fflush($290)|0);
     break;
    }
    else if ((label|0) == 51) {
     $294 = $2;
     $295 = ((($294)) + 72|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = ($296|0)!=(0);
     if (!($297)) {
      $298 = HEAP32[(259664)>>2]|0;
      $299 = ($298|0)!=(0|0);
      $300 = HEAP32[(259664)>>2]|0;
      $301 = HEAP32[544648>>2]|0;
      $302 = $299 ? $300 : $301;
      (_fprintf($302,760718,$vararg_buffer29)|0);
      $303 = HEAP32[(259664)>>2]|0;
      $304 = ($303|0)!=(0|0);
      $305 = HEAP32[(259664)>>2]|0;
      $306 = HEAP32[544648>>2]|0;
      $307 = $304 ? $305 : $306;
      (_fflush($307)|0);
      break;
     }
     $308 = $doc;
     _rxml_free_document($308);
     $$expand_i1_val34 = 1;
     HEAP8[$0>>0] = $$expand_i1_val34;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $322 = $$pre_trunc&1;
     STACKTOP = sp;return ($322|0);
    }
   }
  } else {
   $32 = HEAP32[(259664)>>2]|0;
   $33 = ($32|0)!=(0|0);
   $34 = HEAP32[(259664)>>2]|0;
   $35 = HEAP32[544648>>2]|0;
   $36 = $33 ? $34 : $35;
   $37 = $1;
   HEAP32[$vararg_buffer3>>2] = $37;
   (_fprintf($36,759949,$vararg_buffer3)|0);
   $38 = HEAP32[(259664)>>2]|0;
   $39 = ($38|0)!=(0|0);
   $40 = HEAP32[(259664)>>2]|0;
   $41 = HEAP32[544648>>2]|0;
   $42 = $39 ? $40 : $41;
   (_fflush($42)|0);
  }
 } while(0);
 $309 = HEAP32[(259664)>>2]|0;
 $310 = ($309|0)!=(0|0);
 $311 = HEAP32[(259664)>>2]|0;
 $312 = HEAP32[544648>>2]|0;
 $313 = $310 ? $311 : $312;
 (_fprintf($313,760801,$vararg_buffer31)|0);
 $314 = HEAP32[(259664)>>2]|0;
 $315 = ($314|0)!=(0|0);
 $316 = HEAP32[(259664)>>2]|0;
 $317 = HEAP32[544648>>2]|0;
 $318 = $315 ? $316 : $317;
 (_fflush($318)|0);
 $319 = $doc;
 $320 = ($319|0)!=(0|0);
 if ($320) {
  $321 = $doc;
  _rxml_free_document($321);
 }
 $$expand_i1_val36 = 0;
 HEAP8[$0>>0] = $$expand_i1_val36;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $322 = $$pre_trunc&1;
 STACKTOP = sp;return ($322|0);
}
function _gfx_shader_write_conf_cgp($conf,$shader) {
 $conf = $conf|0;
 $shader = $shader|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var $i1 = 0, $i2 = 0, $i4 = 0, $i5 = 0, $key = 0, $key3 = 0, $pass = 0, $textures = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $variables = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $key = sp + 8336|0;
 $textures = sp + 4240|0;
 $key3 = sp + 4176|0;
 $variables = sp + 80|0;
 $0 = $conf;
 $1 = $shader;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 _config_set_int($2,759745,$5);
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = ((($7)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $1;
  $13 = ((($12)) + 76|0);
  $14 = (($13) + (($11*4148)|0)|0);
  $pass = $14;
  $15 = $i;
  HEAP32[$vararg_buffer>>2] = $15;
  (_snprintf($key,64,760853,$vararg_buffer)|0);
  $16 = $0;
  $17 = $pass;
  _config_set_string($16,$key,$17);
  $18 = $pass;
  $19 = ((($18)) + 4136|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $i;
   HEAP32[$vararg_buffer1>>2] = $22;
   (_snprintf($key,64,760862,$vararg_buffer1)|0);
   $23 = $0;
   $24 = $pass;
   $25 = ((($24)) + 4136|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(1);
   _config_set_bool($23,$key,$27);
  }
  $28 = $i;
  HEAP32[$vararg_buffer4>>2] = $28;
  (_snprintf($key,64,760878,$vararg_buffer4)|0);
  $29 = $0;
  $30 = $pass;
  $31 = ((($30)) + 4140|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_wrap_mode_to_str($32)|0);
  _config_set_string($29,$key,$33);
  $34 = $pass;
  $35 = ((($34)) + 4144|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = $i;
   HEAP32[$vararg_buffer7>>2] = $38;
   (_snprintf($key,64,760890,$vararg_buffer7)|0);
   $39 = $0;
   $40 = $pass;
   $41 = ((($40)) + 4144|0);
   $42 = HEAP32[$41>>2]|0;
   _config_set_int($39,$key,$42);
  }
  $43 = $0;
  $44 = $pass;
  $45 = ((($44)) + 4104|0);
  $46 = $i;
  _shader_write_fbo($43,$45,$46);
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 $49 = $1;
 $50 = ((($49)) + 66444|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0);
 L11: do {
  if ($52) {
   _memset(($textures|0),0,4096)|0;
   $53 = $1;
   $54 = ((($53)) + 66448|0);
   (_strlcpy_rarch__($textures,$54,4096)|0);
   $i1 = 1;
   while(1) {
    $55 = $i1;
    $56 = $1;
    $57 = ((($56)) + 66444|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($55>>>0)<($58>>>0);
    if (!($59)) {
     break;
    }
    (_strlcat_rarch__($textures,760908,4096)|0);
    $60 = $i1;
    $61 = $1;
    $62 = ((($61)) + 66448|0);
    $63 = (($62) + (($60*4168)|0)|0);
    (_strlcat_rarch__($textures,$63,4096)|0);
    $64 = $i1;
    $65 = (($64) + 1)|0;
    $i1 = $65;
   }
   $66 = $0;
   _config_set_string($66,760910,$textures);
   $i2 = 0;
   while(1) {
    $67 = $i2;
    $68 = $1;
    $69 = ((($68)) + 66444|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($67>>>0)<($70>>>0);
    if (!($71)) {
     break L11;
    }
    $72 = $0;
    $73 = $i2;
    $74 = $1;
    $75 = ((($74)) + 66448|0);
    $76 = (($75) + (($73*4168)|0)|0);
    $77 = $i2;
    $78 = $1;
    $79 = ((($78)) + 66448|0);
    $80 = (($79) + (($77*4168)|0)|0);
    $81 = ((($80)) + 64|0);
    _config_set_string($72,$76,$81);
    $82 = $i2;
    $83 = $1;
    $84 = ((($83)) + 66448|0);
    $85 = (($84) + (($82*4168)|0)|0);
    $86 = ((($85)) + 4160|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)!=(0);
    if ($88) {
     $89 = $i2;
     $90 = $1;
     $91 = ((($90)) + 66448|0);
     $92 = (($91) + (($89*4168)|0)|0);
     HEAP32[$vararg_buffer10>>2] = $92;
     (_snprintf($key3,64,760919,$vararg_buffer10)|0);
     $93 = $0;
     $94 = $i2;
     $95 = $1;
     $96 = ((($95)) + 66448|0);
     $97 = (($96) + (($94*4168)|0)|0);
     $98 = ((($97)) + 4160|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ($99|0)!=(1);
     _config_set_bool($93,$key3,$100);
    }
    $101 = $i2;
    $102 = $1;
    $103 = ((($102)) + 66448|0);
    $104 = (($103) + (($101*4168)|0)|0);
    HEAP32[$vararg_buffer13>>2] = $104;
    (_snprintf($key3,64,760929,$vararg_buffer13)|0);
    $105 = $0;
    $106 = $i2;
    $107 = $1;
    $108 = ((($107)) + 66448|0);
    $109 = (($108) + (($106*4168)|0)|0);
    $110 = ((($109)) + 4164|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (_wrap_mode_to_str($111)|0);
    _config_set_string($105,$key3,$112);
    $113 = $i2;
    $114 = (($113) + 1)|0;
    $i2 = $114;
   }
  }
 } while(0);
 $115 = $1;
 $116 = ((($115)) + 104916|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = ($117<<24>>24)!=(0);
 if ($118) {
  $119 = $0;
  $120 = $1;
  $121 = ((($120)) + 104916|0);
  _config_set_string($119,760942,$121);
 }
 $122 = $1;
 $123 = ((($122)) + 109016|0);
 $124 = HEAP8[$123>>0]|0;
 $125 = ($124<<24>>24)!=(0);
 if ($125) {
  $126 = $0;
  $127 = $1;
  $128 = ((($127)) + 109016|0);
  _config_set_string($126,760956,$128);
 }
 $129 = $1;
 $130 = ((($129)) + 99792|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0);
 if (!($132)) {
  STACKTOP = sp;return;
 }
 _memset(($variables|0),0,4096)|0;
 $133 = $1;
 $134 = ((($133)) + 99796|0);
 (_strlcpy_rarch__($variables,$134,4096)|0);
 $i4 = 1;
 while(1) {
  $135 = $i4;
  $136 = $1;
  $137 = ((($136)) + 99792|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($135>>>0)<($138>>>0);
  if (!($139)) {
   break;
  }
  (_strlcat_rarch__($variables,760908,4096)|0);
  $140 = $i4;
  $141 = $1;
  $142 = ((($141)) + 99796|0);
  $143 = (($142) + (($140*80)|0)|0);
  (_strlcat_rarch__($variables,$143,4096)|0);
  $144 = $i4;
  $145 = (($144) + 1)|0;
  $i4 = $145;
 }
 $146 = $0;
 _config_set_string($146,760976,$variables);
 $i5 = 0;
 while(1) {
  $147 = $i5;
  $148 = $1;
  $149 = ((($148)) + 99792|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($147>>>0)<($150>>>0);
  if (!($151)) {
   break;
  }
  $152 = $0;
  $153 = $i5;
  $154 = $1;
  $155 = ((($154)) + 99796|0);
  $156 = (($155) + (($153*80)|0)|0);
  _shader_write_variable($152,$156);
  $157 = $i5;
  $158 = (($157) + 1)|0;
  $i5 = $158;
 }
 STACKTOP = sp;return;
}
function _gfx_shader_parse_type($path,$fallback) {
 $path = $path|0;
 $fallback = $fallback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $fallback;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $6 = $1;
   $7 = (_path_get_extension($6)|0);
   $ext = $7;
   $8 = $ext;
   $9 = (_strcmp($8,765496)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = $ext;
    $12 = (_strcmp($11,765492)|0);
    $13 = ($12|0)==(0);
    if (!($13)) {
     $14 = $ext;
     $15 = (_strcmp($14,760000)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      $17 = $ext;
      $18 = (_strcmp($17,774923)|0);
      $19 = ($18|0)==(0);
      if (!($19)) {
       $20 = $ext;
       $21 = (_strcmp($20,774918)|0);
       $22 = ($21|0)==(0);
       if (!($22)) {
        $23 = $2;
        $0 = $23;
        break;
       }
      }
     }
     $0 = 2;
     break;
    }
   }
   $0 = 0;
  } else {
   $5 = $2;
   $0 = $5;
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _gfx_shader_resolve_relative($shader,$ref_path) {
 $shader = $shader|0;
 $ref_path = $ref_path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $tmp_path = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp_path = sp + 16|0;
 $0 = $shader;
 $1 = $ref_path;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $0;
  $4 = ((($3)) + 72|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = ((($8)) + 76|0);
  $10 = (($9) + (($7*4148)|0)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if ($12) {
   $13 = $i;
   $14 = $0;
   $15 = ((($14)) + 76|0);
   $16 = (($15) + (($13*4148)|0)|0);
   (_strlcpy_rarch__($tmp_path,$16,4096)|0);
   $17 = $i;
   $18 = $0;
   $19 = ((($18)) + 76|0);
   $20 = (($19) + (($17*4148)|0)|0);
   $21 = $1;
   _fill_pathname_resolve_relative($20,$21,$tmp_path,4096);
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $i1 = 0;
 while(1) {
  $24 = $i1;
  $25 = $0;
  $26 = ((($25)) + 66444|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $i1;
  $30 = $0;
  $31 = ((($30)) + 66448|0);
  $32 = (($31) + (($29*4168)|0)|0);
  $33 = ((($32)) + 64|0);
  (_strlcpy_rarch__($tmp_path,$33,4096)|0);
  $34 = $i1;
  $35 = $0;
  $36 = ((($35)) + 66448|0);
  $37 = (($36) + (($34*4168)|0)|0);
  $38 = ((($37)) + 64|0);
  $39 = $1;
  _fill_pathname_resolve_relative($38,$39,$tmp_path,4096);
  $40 = $i1;
  $41 = (($40) + 1)|0;
  $i1 = $41;
 }
 $42 = $0;
 $43 = ((($42)) + 104916|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = ($44<<24>>24)!=(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $0;
 $47 = ((($46)) + 104916|0);
 (_strlcpy_rarch__($tmp_path,$47,4096)|0);
 $48 = $0;
 $49 = ((($48)) + 104916|0);
 $50 = $1;
 _fill_pathname_resolve_relative($49,$50,$tmp_path,4096);
 STACKTOP = sp;return;
}
function _shader_parse_pass($conf,$pass,$i) {
 $conf = $conf|0;
 $pass = $pass|0;
 $i = $i|0;
 var $$expand_i1_val = 0, $$expand_i1_val48 = 0, $$expand_i1_val50 = 0, $$expand_i1_val52 = 0, $$expand_i1_val54 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $attr_name_buf = 0, $fattr = 0, $filter_name_buf = 0, $fp_fbo_buf = 0;
 var $frame_count_mod = 0, $frame_count_mod_buf = 0, $iattr = 0, $scale = 0, $scale_name_buf = 0, $scale_type = 0, $scale_type_x = 0, $scale_type_y = 0, $shader_name = 0, $smooth = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0;
 var $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer7 = 0, $wrap_mode = 0, $wrap_name_buf = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer44 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 936|0;
 $shader_name = sp + 872|0;
 $filter_name_buf = sp + 808|0;
 $smooth = sp + 800|0;
 $wrap_name_buf = sp + 736|0;
 $wrap_mode = sp + 672|0;
 $frame_count_mod = sp + 608|0;
 $frame_count_mod_buf = sp + 544|0;
 $scale_type = sp + 480|0;
 $scale_type_x = sp + 416|0;
 $scale_type_y = sp + 352|0;
 $scale_name_buf = sp + 288|0;
 $attr_name_buf = sp + 224|0;
 $fattr = sp + 136|0;
 $iattr = sp + 132|0;
 $fp_fbo_buf = sp + 160|0;
 $1 = $conf;
 $2 = $pass;
 $3 = $i;
 $4 = $3;
 HEAP32[$vararg_buffer>>2] = $4;
 (_snprintf($shader_name,64,760853,$vararg_buffer)|0);
 $5 = $1;
 $6 = $2;
 $7 = (_config_get_path($5,$shader_name,$6,4096)|0);
 if (!($7)) {
  $8 = HEAP32[(259664)>>2]|0;
  $9 = ($8|0)!=(0|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = HEAP32[544648>>2]|0;
  $12 = $9 ? $10 : $11;
  HEAP32[$vararg_buffer1>>2] = $shader_name;
  (_fprintf($12,762988,$vararg_buffer1)|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fflush($17)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $169 = $$pre_trunc&1;
  STACKTOP = sp;return ($169|0);
 }
 $18 = $3;
 HEAP32[$vararg_buffer4>>2] = $18;
 (_snprintf($filter_name_buf,64,760862,$vararg_buffer4)|0);
 HEAP8[$smooth>>0] = 0;
 $19 = $1;
 $20 = (_config_get_bool($19,$filter_name_buf,$smooth)|0);
 if ($20) {
  $21 = HEAP8[$smooth>>0]|0;
  $22 = $21&1;
  $23 = $22 ? 1 : 2;
  $24 = $2;
  $25 = ((($24)) + 4136|0);
  HEAP32[$25>>2] = $23;
 } else {
  $26 = $2;
  $27 = ((($26)) + 4136|0);
  HEAP32[$27>>2] = 0;
 }
 $28 = $3;
 HEAP32[$vararg_buffer7>>2] = $28;
 (_snprintf($wrap_name_buf,64,760878,$vararg_buffer7)|0);
 $29 = $1;
 $30 = (_config_get_array($29,$wrap_name_buf,$wrap_mode,64)|0);
 if ($30) {
  $31 = (_wrap_str_to_mode($wrap_mode)|0);
  $32 = $2;
  $33 = ((($32)) + 4140|0);
  HEAP32[$33>>2] = $31;
 }
 dest=$frame_count_mod; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $34 = $3;
 HEAP32[$vararg_buffer10>>2] = $34;
 (_snprintf($frame_count_mod_buf,64,760890,$vararg_buffer10)|0);
 $35 = $1;
 $36 = (_config_get_array($35,$frame_count_mod_buf,$frame_count_mod,64)|0);
 if ($36) {
  $37 = (_strtoul($frame_count_mod,0,0)|0);
  $38 = $2;
  $39 = ((($38)) + 4144|0);
  HEAP32[$39>>2] = $37;
 }
 $40 = $2;
 $41 = ((($40)) + 4104|0);
 $scale = $41;
 dest=$scale_type; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$scale_type_x; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$scale_type_y; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $42 = $3;
 HEAP32[$vararg_buffer13>>2] = $42;
 (_snprintf($scale_name_buf,64,763045,$vararg_buffer13)|0);
 $43 = $1;
 (_config_get_array($43,$scale_name_buf,$scale_type,64)|0);
 $44 = $3;
 HEAP32[$vararg_buffer16>>2] = $44;
 (_snprintf($scale_name_buf,64,763058,$vararg_buffer16)|0);
 $45 = $1;
 (_config_get_array($45,$scale_name_buf,$scale_type_x,64)|0);
 $46 = $3;
 HEAP32[$vararg_buffer19>>2] = $46;
 (_snprintf($scale_name_buf,64,763073,$vararg_buffer19)|0);
 $47 = $1;
 (_config_get_array($47,$scale_name_buf,$scale_type_y,64)|0);
 $48 = HEAP8[$scale_type>>0]|0;
 $49 = ($48<<24>>24)!=(0);
 if (!($49)) {
  $50 = HEAP8[$scale_type_x>>0]|0;
  $51 = ($50<<24>>24)!=(0);
  if (!($51)) {
   $52 = HEAP8[$scale_type_y>>0]|0;
   $53 = ($52<<24>>24)!=(0);
   if (!($53)) {
    $$expand_i1_val48 = 1;
    HEAP8[$0>>0] = $$expand_i1_val48;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $169 = $$pre_trunc&1;
    STACKTOP = sp;return ($169|0);
   }
  }
 }
 $54 = HEAP8[$scale_type>>0]|0;
 $55 = ($54<<24>>24)!=(0);
 if ($55) {
  (_strlcpy_rarch__($scale_type_x,$scale_type,64)|0);
  (_strlcpy_rarch__($scale_type_y,$scale_type,64)|0);
 }
 HEAPF32[$fattr>>2] = 0.0;
 HEAP32[$iattr>>2] = 0;
 $56 = $scale;
 HEAP8[$56>>0] = 1;
 $57 = $scale;
 $58 = ((($57)) + 4|0);
 HEAP32[$58>>2] = 0;
 $59 = $scale;
 $60 = ((($59)) + 8|0);
 HEAP32[$60>>2] = 0;
 $61 = $scale;
 $62 = ((($61)) + 12|0);
 HEAPF32[$62>>2] = 1.0;
 $63 = $scale;
 $64 = ((($63)) + 16|0);
 HEAPF32[$64>>2] = 1.0;
 $65 = $3;
 HEAP32[$vararg_buffer22>>2] = $65;
 (_snprintf($fp_fbo_buf,64,761380,$vararg_buffer22)|0);
 $66 = $1;
 $67 = $scale;
 $68 = ((($67)) + 28|0);
 (_config_get_bool($66,$fp_fbo_buf,$68)|0);
 $69 = HEAP8[$scale_type_x>>0]|0;
 $70 = ($69<<24>>24)!=(0);
 do {
  if ($70) {
   $71 = (_strcmp($scale_type_x,761066)|0);
   $72 = ($71|0)==(0);
   if ($72) {
    $73 = $scale;
    $74 = ((($73)) + 4|0);
    HEAP32[$74>>2] = 0;
    break;
   }
   $75 = (_strcmp($scale_type_x,761073)|0);
   $76 = ($75|0)==(0);
   if ($76) {
    $77 = $scale;
    $78 = ((($77)) + 4|0);
    HEAP32[$78>>2] = 2;
    break;
   }
   $79 = (_strcmp($scale_type_x,761082)|0);
   $80 = ($79|0)==(0);
   if ($80) {
    $81 = $scale;
    $82 = ((($81)) + 4|0);
    HEAP32[$82>>2] = 1;
    break;
   }
   $83 = HEAP32[(259664)>>2]|0;
   $84 = ($83|0)!=(0|0);
   $85 = HEAP32[(259664)>>2]|0;
   $86 = HEAP32[544648>>2]|0;
   $87 = $84 ? $85 : $86;
   (_fprintf($87,763088,$vararg_buffer25)|0);
   $88 = HEAP32[(259664)>>2]|0;
   $89 = ($88|0)!=(0|0);
   $90 = HEAP32[(259664)>>2]|0;
   $91 = HEAP32[544648>>2]|0;
   $92 = $89 ? $90 : $91;
   (_fflush($92)|0);
   $$expand_i1_val50 = 0;
   HEAP8[$0>>0] = $$expand_i1_val50;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $169 = $$pre_trunc&1;
   STACKTOP = sp;return ($169|0);
  }
 } while(0);
 $93 = HEAP8[$scale_type_y>>0]|0;
 $94 = ($93<<24>>24)!=(0);
 do {
  if ($94) {
   $95 = (_strcmp($scale_type_y,761066)|0);
   $96 = ($95|0)==(0);
   if ($96) {
    $97 = $scale;
    $98 = ((($97)) + 8|0);
    HEAP32[$98>>2] = 0;
    break;
   }
   $99 = (_strcmp($scale_type_y,761073)|0);
   $100 = ($99|0)==(0);
   if ($100) {
    $101 = $scale;
    $102 = ((($101)) + 8|0);
    HEAP32[$102>>2] = 2;
    break;
   }
   $103 = (_strcmp($scale_type_y,761082)|0);
   $104 = ($103|0)==(0);
   if ($104) {
    $105 = $scale;
    $106 = ((($105)) + 8|0);
    HEAP32[$106>>2] = 1;
    break;
   }
   $107 = HEAP32[(259664)>>2]|0;
   $108 = ($107|0)!=(0|0);
   $109 = HEAP32[(259664)>>2]|0;
   $110 = HEAP32[544648>>2]|0;
   $111 = $108 ? $109 : $110;
   (_fprintf($111,763088,$vararg_buffer27)|0);
   $112 = HEAP32[(259664)>>2]|0;
   $113 = ($112|0)!=(0|0);
   $114 = HEAP32[(259664)>>2]|0;
   $115 = HEAP32[544648>>2]|0;
   $116 = $113 ? $114 : $115;
   (_fflush($116)|0);
   $$expand_i1_val52 = 0;
   HEAP8[$0>>0] = $$expand_i1_val52;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $169 = $$pre_trunc&1;
   STACKTOP = sp;return ($169|0);
  }
 } while(0);
 $117 = $scale;
 $118 = ((($117)) + 4|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)==(1);
 $121 = $3;
 HEAP32[$vararg_buffer29>>2] = $121;
 (_snprintf($attr_name_buf,64,763129,$vararg_buffer29)|0);
 $122 = $1;
 do {
  if ($120) {
   $123 = (_config_get_int($122,$attr_name_buf,$iattr)|0);
   if ($123) {
    $124 = HEAP32[$iattr>>2]|0;
    $125 = $scale;
    $126 = ((($125)) + 20|0);
    HEAP32[$126>>2] = $124;
    break;
   }
   $127 = $3;
   HEAP32[$vararg_buffer32>>2] = $127;
   (_snprintf($attr_name_buf,64,763137,$vararg_buffer32)|0);
   $128 = $1;
   $129 = (_config_get_int($128,$attr_name_buf,$iattr)|0);
   if ($129) {
    $130 = HEAP32[$iattr>>2]|0;
    $131 = $scale;
    $132 = ((($131)) + 20|0);
    HEAP32[$132>>2] = $130;
   }
  } else {
   $133 = (_config_get_float($122,$attr_name_buf,$fattr)|0);
   if ($133) {
    $134 = +HEAPF32[$fattr>>2];
    $135 = $scale;
    $136 = ((($135)) + 12|0);
    HEAPF32[$136>>2] = $134;
    break;
   }
   $137 = $3;
   HEAP32[$vararg_buffer35>>2] = $137;
   (_snprintf($attr_name_buf,64,763137,$vararg_buffer35)|0);
   $138 = $1;
   $139 = (_config_get_float($138,$attr_name_buf,$fattr)|0);
   if ($139) {
    $140 = +HEAPF32[$fattr>>2];
    $141 = $scale;
    $142 = ((($141)) + 12|0);
    HEAPF32[$142>>2] = $140;
   }
  }
 } while(0);
 $143 = $scale;
 $144 = ((($143)) + 8|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)==(1);
 $147 = $3;
 HEAP32[$vararg_buffer38>>2] = $147;
 (_snprintf($attr_name_buf,64,763129,$vararg_buffer38)|0);
 $148 = $1;
 do {
  if ($146) {
   $149 = (_config_get_int($148,$attr_name_buf,$iattr)|0);
   if ($149) {
    $150 = HEAP32[$iattr>>2]|0;
    $151 = $scale;
    $152 = ((($151)) + 24|0);
    HEAP32[$152>>2] = $150;
    break;
   }
   $153 = $3;
   HEAP32[$vararg_buffer41>>2] = $153;
   (_snprintf($attr_name_buf,64,763147,$vararg_buffer41)|0);
   $154 = $1;
   $155 = (_config_get_int($154,$attr_name_buf,$iattr)|0);
   if ($155) {
    $156 = HEAP32[$iattr>>2]|0;
    $157 = $scale;
    $158 = ((($157)) + 24|0);
    HEAP32[$158>>2] = $156;
   }
  } else {
   $159 = (_config_get_float($148,$attr_name_buf,$fattr)|0);
   if ($159) {
    $160 = +HEAPF32[$fattr>>2];
    $161 = $scale;
    $162 = ((($161)) + 16|0);
    HEAPF32[$162>>2] = $160;
    break;
   }
   $163 = $3;
   HEAP32[$vararg_buffer44>>2] = $163;
   (_snprintf($attr_name_buf,64,763147,$vararg_buffer44)|0);
   $164 = $1;
   $165 = (_config_get_float($164,$attr_name_buf,$fattr)|0);
   if ($165) {
    $166 = +HEAPF32[$fattr>>2];
    $167 = $scale;
    $168 = ((($167)) + 16|0);
    HEAPF32[$168>>2] = $166;
   }
  }
 } while(0);
 $$expand_i1_val54 = 1;
 HEAP8[$0>>0] = $$expand_i1_val54;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $169 = $$pre_trunc&1;
 STACKTOP = sp;return ($169|0);
}
function _shader_parse_textures($conf,$shader) {
 $conf = $conf|0;
 $shader = $shader|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $id = 0, $id_filter = 0, $id_wrap = 0, $save = 0, $smooth = 0, $textures = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $wrap_mode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 1264|0;
 $textures = sp + 240|0;
 $save = sp + 24|0;
 $id_filter = sp + 176|0;
 $smooth = sp + 168|0;
 $id_wrap = sp + 104|0;
 $wrap_mode = sp + 40|0;
 $1 = $conf;
 $2 = $shader;
 $3 = $1;
 $4 = (_config_get_array($3,760910,$textures,1024)|0);
 if (!($4)) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $76 = $$pre_trunc&1;
  STACKTOP = sp;return ($76|0);
 }
 $5 = (_strtok_r($textures,760908,$save)|0);
 $id = $5;
 while(1) {
  $6 = $id;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 14;
   break;
  }
  $8 = $2;
  $9 = ((($8)) + 66444|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<(8);
  if (!($11)) {
   label = 14;
   break;
  }
  $12 = $1;
  $13 = $id;
  $14 = $2;
  $15 = ((($14)) + 66444|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = ((($17)) + 66448|0);
  $19 = (($18) + (($16*4168)|0)|0);
  $20 = ((($19)) + 64|0);
  $21 = (_config_get_array($12,$13,$20,4096)|0);
  if (!($21)) {
   label = 7;
   break;
  }
  $33 = $2;
  $34 = ((($33)) + 66444|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $2;
  $37 = ((($36)) + 66448|0);
  $38 = (($37) + (($35*4168)|0)|0);
  $39 = $id;
  (_strlcpy_rarch__($38,$39,64)|0);
  $40 = $id;
  HEAP32[$vararg_buffer1>>2] = $40;
  (_snprintf($id_filter,64,760919,$vararg_buffer1)|0);
  HEAP8[$smooth>>0] = 0;
  $41 = $1;
  $42 = (_config_get_bool($41,$id_filter,$smooth)|0);
  if ($42) {
   $43 = HEAP8[$smooth>>0]|0;
   $44 = $43&1;
   $45 = $44 ? 1 : 2;
   $46 = $2;
   $47 = ((($46)) + 66444|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $2;
   $50 = ((($49)) + 66448|0);
   $51 = (($50) + (($48*4168)|0)|0);
   $52 = ((($51)) + 4160|0);
   HEAP32[$52>>2] = $45;
  } else {
   $53 = $2;
   $54 = ((($53)) + 66444|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $2;
   $57 = ((($56)) + 66448|0);
   $58 = (($57) + (($55*4168)|0)|0);
   $59 = ((($58)) + 4160|0);
   HEAP32[$59>>2] = 0;
  }
  $60 = $id;
  HEAP32[$vararg_buffer4>>2] = $60;
  (_snprintf($id_wrap,64,760929,$vararg_buffer4)|0);
  $61 = $1;
  $62 = (_config_get_array($61,$id_wrap,$wrap_mode,64)|0);
  if ($62) {
   $63 = (_wrap_str_to_mode($wrap_mode)|0);
   $64 = $2;
   $65 = ((($64)) + 66444|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $2;
   $68 = ((($67)) + 66448|0);
   $69 = (($68) + (($66*4168)|0)|0);
   $70 = ((($69)) + 4164|0);
   HEAP32[$70>>2] = $63;
  }
  $71 = $2;
  $72 = ((($71)) + 66444|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[$72>>2] = $74;
  $75 = (_strtok_r(0,760908,$save)|0);
  $id = $75;
 }
 if ((label|0) == 7) {
  $22 = HEAP32[(259664)>>2]|0;
  $23 = ($22|0)!=(0|0);
  $24 = HEAP32[(259664)>>2]|0;
  $25 = HEAP32[544648>>2]|0;
  $26 = $23 ? $24 : $25;
  $27 = $id;
  HEAP32[$vararg_buffer>>2] = $27;
  (_fprintf($26,762929,$vararg_buffer)|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = ($28|0)!=(0|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = HEAP32[544648>>2]|0;
  $32 = $29 ? $30 : $31;
  (_fflush($32)|0);
  $$expand_i1_val8 = 0;
  HEAP8[$0>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $76 = $$pre_trunc&1;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 14) {
  $$expand_i1_val10 = 1;
  HEAP8[$0>>0] = $$expand_i1_val10;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $76 = $$pre_trunc&1;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _shader_parse_imports($conf,$shader) {
 $conf = $conf|0;
 $shader = $shader|0;
 var $$expand_i1_val = 0, $$expand_i1_val22 = 0, $$expand_i1_val24 = 0, $$expand_i1_val26 = 0, $$expand_i1_val28 = 0, $$expand_i1_val30 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $addr = 0, $equal = 0, $equal_buf = 0, $id = 0, $imports = 0, $input_slot = 0, $input_slot_buf = 0, $mask = 0, $mask_buf = 0, $save = 0, $semantic = 0, $semantic_buf = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer7 = 0, $wram_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 1512|0;
 $imports = sp + 488|0;
 $save = sp + 92|0;
 $semantic_buf = sp + 424|0;
 $wram_buf = sp + 360|0;
 $input_slot_buf = sp + 296|0;
 $mask_buf = sp + 232|0;
 $equal_buf = sp + 168|0;
 $semantic = sp + 104|0;
 $addr = sp + 80|0;
 $mask = sp + 76|0;
 $equal = sp + 72|0;
 $input_slot = sp + 68|0;
 $1 = $conf;
 $2 = $shader;
 $3 = $1;
 $4 = (_config_get_array($3,760976,$imports,1024)|0);
 if (!($4)) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $132 = $$pre_trunc&1;
  STACKTOP = sp;return ($132|0);
 }
 $5 = (_strtok_r($imports,760908,$save)|0);
 $id = $5;
 L5: while(1) {
  $6 = $id;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 35;
   break;
  }
  $8 = $2;
  $9 = ((($8)) + 99792|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<(64);
  if (!($11)) {
   label = 35;
   break;
  }
  $12 = $2;
  $13 = ((($12)) + 99792|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 99796|0);
  $17 = (($16) + (($14*80)|0)|0);
  $var = $17;
  $18 = $var;
  $19 = $id;
  (_strlcpy_rarch__($18,$19,64)|0);
  $20 = $id;
  HEAP32[$vararg_buffer>>2] = $20;
  (_snprintf($semantic_buf,64,761329,$vararg_buffer)|0);
  $21 = $id;
  HEAP32[$vararg_buffer1>>2] = $21;
  (_snprintf($wram_buf,64,761341,$vararg_buffer1)|0);
  $22 = $id;
  HEAP32[$vararg_buffer4>>2] = $22;
  (_snprintf($input_slot_buf,64,761349,$vararg_buffer4)|0);
  $23 = $id;
  HEAP32[$vararg_buffer7>>2] = $23;
  (_snprintf($mask_buf,64,761363,$vararg_buffer7)|0);
  $24 = $id;
  HEAP32[$vararg_buffer10>>2] = $24;
  (_snprintf($equal_buf,64,761371,$vararg_buffer10)|0);
  $25 = $1;
  $26 = (_config_get_array($25,$semantic_buf,$semantic,64)|0);
  if (!($26)) {
   label = 7;
   break;
  }
  $37 = (_strcmp($semantic,760984)|0);
  $38 = ($37|0)==(0);
  do {
   if ($38) {
    $39 = $var;
    $40 = ((($39)) + 68|0);
    HEAP32[$40>>2] = 0;
   } else {
    $41 = (_strcmp($semantic,760992)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     $43 = $var;
     $44 = ((($43)) + 68|0);
     HEAP32[$44>>2] = 2;
     break;
    }
    $45 = (_strcmp($semantic,761003)|0);
    $46 = ($45|0)==(0);
    if ($46) {
     $47 = $var;
     $48 = ((($47)) + 68|0);
     HEAP32[$48>>2] = 3;
     break;
    }
    $49 = (_strcmp($semantic,761020)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = $var;
     $52 = ((($51)) + 68|0);
     HEAP32[$52>>2] = 1;
     break;
    }
    $53 = (_strcmp($semantic,761037)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = $var;
     $56 = ((($55)) + 68|0);
     HEAP32[$56>>2] = 4;
     break;
    }
    $57 = (_strcmp($semantic,761057)|0);
    $58 = ($57|0)==(0);
    if (!($58)) {
     label = 20;
     break L5;
    }
    $59 = $var;
    $60 = ((($59)) + 68|0);
    HEAP32[$60>>2] = 5;
   }
  } while(0);
  HEAP32[$addr>>2] = 0;
  HEAP32[$mask>>2] = 0;
  HEAP32[$equal>>2] = 0;
  $71 = $var;
  $72 = ((($71)) + 68|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(5);
  L27: do {
   if ($74) {
    HEAP32[$input_slot>>2] = 0;
    $75 = $1;
    $76 = (_config_get_uint($75,$input_slot_buf,$input_slot)|0);
    if (!($76)) {
     $92 = $1;
     $93 = (_config_get_hex($92,$wram_buf,$addr)|0);
     if (!($93)) {
      label = 29;
      break L5;
     }
     $94 = $var;
     $95 = ((($94)) + 72|0);
     HEAP32[$95>>2] = 1;
     $96 = HEAP32[$addr>>2]|0;
     $97 = $var;
     $98 = ((($97)) + 64|0);
     HEAP32[$98>>2] = $96;
     break;
    }
    $77 = HEAP32[$input_slot>>2]|0;
    switch ($77|0) {
    case 1:  {
     $78 = $var;
     $79 = ((($78)) + 72|0);
     HEAP32[$79>>2] = 2;
     break L27;
     break;
    }
    case 2:  {
     $80 = $var;
     $81 = ((($80)) + 72|0);
     HEAP32[$81>>2] = 3;
     break L27;
     break;
    }
    default: {
     label = 26;
     break L5;
    }
    }
   }
  } while(0);
  $109 = $1;
  $110 = (_config_get_hex($109,$mask_buf,$mask)|0);
  if ($110) {
   $111 = HEAP32[$mask>>2]|0;
   $112 = $111&65535;
   $113 = $var;
   $114 = ((($113)) + 76|0);
   HEAP16[$114>>1] = $112;
  }
  $115 = $1;
  $116 = (_config_get_hex($115,$equal_buf,$equal)|0);
  if ($116) {
   $117 = HEAP32[$equal>>2]|0;
   $118 = $117&65535;
   $119 = $var;
   $120 = ((($119)) + 78|0);
   HEAP16[$120>>1] = $118;
  }
  $121 = $2;
  $122 = ((($121)) + 99792|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + 1)|0;
  HEAP32[$122>>2] = $124;
  $125 = (_strtok_r(0,760908,$save)|0);
  $id = $125;
 }
 if ((label|0) == 7) {
  $27 = HEAP32[(259664)>>2]|0;
  $28 = ($27|0)!=(0|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = HEAP32[544648>>2]|0;
  $31 = $28 ? $29 : $30;
  (_fprintf($31,762779,$vararg_buffer13)|0);
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  (_fflush($36)|0);
  $$expand_i1_val22 = 0;
  HEAP8[$0>>0] = $$expand_i1_val22;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $132 = $$pre_trunc&1;
  STACKTOP = sp;return ($132|0);
 }
 else if ((label|0) == 20) {
  $61 = HEAP32[(259664)>>2]|0;
  $62 = ($61|0)!=(0|0);
  $63 = HEAP32[(259664)>>2]|0;
  $64 = HEAP32[544648>>2]|0;
  $65 = $62 ? $63 : $64;
  (_fprintf($65,762834,$vararg_buffer15)|0);
  $66 = HEAP32[(259664)>>2]|0;
  $67 = ($66|0)!=(0|0);
  $68 = HEAP32[(259664)>>2]|0;
  $69 = HEAP32[544648>>2]|0;
  $70 = $67 ? $68 : $69;
  (_fflush($70)|0);
  $$expand_i1_val24 = 0;
  HEAP8[$0>>0] = $$expand_i1_val24;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $132 = $$pre_trunc&1;
  STACKTOP = sp;return ($132|0);
 }
 else if ((label|0) == 26) {
  $82 = HEAP32[(259664)>>2]|0;
  $83 = ($82|0)!=(0|0);
  $84 = HEAP32[(259664)>>2]|0;
  $85 = HEAP32[544648>>2]|0;
  $86 = $83 ? $84 : $85;
  (_fprintf($86,761769,$vararg_buffer17)|0);
  $87 = HEAP32[(259664)>>2]|0;
  $88 = ($87|0)!=(0|0);
  $89 = HEAP32[(259664)>>2]|0;
  $90 = HEAP32[544648>>2]|0;
  $91 = $88 ? $89 : $90;
  (_fflush($91)|0);
  $$expand_i1_val26 = 0;
  HEAP8[$0>>0] = $$expand_i1_val26;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $132 = $$pre_trunc&1;
  STACKTOP = sp;return ($132|0);
 }
 else if ((label|0) == 29) {
  $99 = HEAP32[(259664)>>2]|0;
  $100 = ($99|0)!=(0|0);
  $101 = HEAP32[(259664)>>2]|0;
  $102 = HEAP32[544648>>2]|0;
  $103 = $100 ? $101 : $102;
  (_fprintf($103,762874,$vararg_buffer19)|0);
  $104 = HEAP32[(259664)>>2]|0;
  $105 = ($104|0)!=(0|0);
  $106 = HEAP32[(259664)>>2]|0;
  $107 = HEAP32[544648>>2]|0;
  $108 = $105 ? $106 : $107;
  (_fflush($108)|0);
  $$expand_i1_val28 = 0;
  HEAP8[$0>>0] = $$expand_i1_val28;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $132 = $$pre_trunc&1;
  STACKTOP = sp;return ($132|0);
 }
 else if ((label|0) == 35) {
  $126 = $1;
  $127 = $2;
  $128 = ((($127)) + 104916|0);
  (_config_get_path($126,760942,$128,4096)|0);
  $129 = $1;
  $130 = $2;
  $131 = ((($130)) + 109016|0);
  (_config_get_array($129,760956,$131,512)|0);
  $$expand_i1_val30 = 1;
  HEAP8[$0>>0] = $$expand_i1_val30;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $132 = $$pre_trunc&1;
  STACKTOP = sp;return ($132|0);
 }
 return (0)|0;
}
function _xml_get_prop($buf,$size,$node,$prop) {
 $buf = $buf|0;
 $size = $size|0;
 $node = $node|0;
 $prop = $prop|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 21|0;
 $1 = $buf;
 $2 = $size;
 $3 = $node;
 $4 = $prop;
 $5 = $2;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = $3;
   $8 = $4;
   $9 = (_rxml_node_attrib($7,$8)|0);
   $p = $9;
   $10 = $p;
   $11 = ($10|0)!=(0|0);
   $12 = $1;
   if ($11) {
    $13 = $p;
    $14 = $2;
    $15 = (_strlcpy_rarch__($12,$13,$14)|0);
    $16 = $2;
    $17 = ($15>>>0)<($16>>>0);
    $18 = $17&1;
    $ret = $18;
    $19 = $ret;
    $20 = $19&1;
    $$expand_i1_val2 = $20&1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   } else {
    HEAP8[$12>>0] = 0;
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  } else {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $21 = $$pre_trunc&1;
 STACKTOP = sp;return ($21|0);
}
function _xml_get_content($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $content = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $content = $4;
 $5 = $content;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $content;
  $8 = (___strdup($7)|0);
  $ret = $8;
  $9 = $ret;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _xml_replace_if_file($content,$path,$node,$src_prop) {
 $content = $content|0;
 $path = $path|0;
 $node = $node|0;
 $src_prop = $src_prop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prop = 0, $shader_path = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $prop = sp + 4120|0;
 $shader_path = sp + 24|0;
 HEAP32[$1>>2] = $content;
 $2 = $path;
 $3 = $node;
 $4 = $src_prop;
 $5 = $3;
 $6 = $4;
 $7 = (_xml_get_prop($prop,4096,$5,$6)|0);
 $8 = HEAP32[$1>>2]|0;
 if (!($7)) {
  $0 = $8;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 _free($8);
 HEAP32[$1>>2] = 0;
 $9 = $2;
 _fill_pathname_resolve_relative($shader_path,$9,$prop,4096);
 $10 = HEAP8[102648>>0]|0;
 $11 = $10&1;
 if ($11) {
  $12 = HEAP32[(259664)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = HEAP32[544648>>2]|0;
  $16 = $13 ? $14 : $15;
  HEAP32[$vararg_buffer>>2] = $shader_path;
  (_fprintf($16,762732,$vararg_buffer)|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  (_fflush($21)|0);
 }
 $22 = (_read_file($shader_path,$1)|0);
 $23 = ($22|0)>=(0);
 if ($23) {
  $24 = HEAP32[$1>>2]|0;
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 } else {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _get_xml_attrs($pass,$ptr) {
 $pass = $pass|0;
 $ptr = $ptr|0;
 var $$expand_i1_val = 0, $$expand_i1_val35 = 0, $$expand_i1_val37 = 0, $$expand_i1_val39 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $attr = 0, $attr_outscale = 0, $attr_outscale_x = 0, $attr_outscale_y = 0, $attr_scale = 0, $attr_scale_x = 0, $attr_scale_y = 0;
 var $attr_size = 0, $attr_size_x = 0, $attr_size_y = 0, $fbo = 0, $fp_fbo = 0, $frame_count_mod = 0, $scale = 0.0, $scale1 = 0.0, $scale2 = 0.0, $scale3 = 0.0, $scale4 = 0.0, $scale5 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $x_attr_cnt = 0, $y_attr_cnt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 928|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 96|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 920|0;
 $attr = sp + 856|0;
 $attr_scale = sp + 792|0;
 $attr_scale_x = sp + 728|0;
 $attr_scale_y = sp + 664|0;
 $attr_size = sp + 600|0;
 $attr_size_x = sp + 536|0;
 $attr_size_y = sp + 472|0;
 $attr_outscale = sp + 408|0;
 $attr_outscale_x = sp + 344|0;
 $attr_outscale_y = sp + 280|0;
 $frame_count_mod = sp + 216|0;
 $fp_fbo = sp + 152|0;
 $1 = $pass;
 $2 = $ptr;
 $3 = $1;
 $4 = ((($3)) + 4104|0);
 $fbo = $4;
 $5 = $1;
 $6 = ((($5)) + 4144|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 4136|0);
 HEAP32[$8>>2] = 0;
 $9 = $fbo;
 $10 = ((($9)) + 28|0);
 HEAP8[$10>>0] = 0;
 $11 = $fbo;
 $12 = ((($11)) + 12|0);
 HEAPF32[$12>>2] = 1.0;
 $13 = $fbo;
 $14 = ((($13)) + 16|0);
 HEAPF32[$14>>2] = 1.0;
 $15 = $1;
 $16 = ((($15)) + 4104|0);
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = $fbo;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = $fbo;
 HEAP8[$20>>0] = 0;
 $21 = $2;
 $22 = (_xml_get_prop($attr,64,$21,761952)|0);
 do {
  if ($22) {
   $23 = (_strcmp($attr,762076)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = $1;
    $26 = ((($25)) + 4136|0);
    HEAP32[$26>>2] = 2;
    $27 = HEAP8[102648>>0]|0;
    $28 = $27&1;
    if (!($28)) {
     break;
    }
    $29 = HEAP32[(259664)>>2]|0;
    $30 = ($29|0)!=(0|0);
    $31 = HEAP32[(259664)>>2]|0;
    $32 = HEAP32[544648>>2]|0;
    $33 = $30 ? $31 : $32;
    (_fprintf($33,762131,$vararg_buffer)|0);
    $34 = HEAP32[(259664)>>2]|0;
    $35 = ($34|0)!=(0|0);
    $36 = HEAP32[(259664)>>2]|0;
    $37 = HEAP32[544648>>2]|0;
    $38 = $35 ? $36 : $37;
    (_fflush($38)|0);
    break;
   }
   $39 = (_strcmp($attr,762069)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = $1;
    $42 = ((($41)) + 4136|0);
    HEAP32[$42>>2] = 1;
    $43 = HEAP8[102648>>0]|0;
    $44 = $43&1;
    if (!($44)) {
     break;
    }
    $45 = HEAP32[(259664)>>2]|0;
    $46 = ($45|0)!=(0|0);
    $47 = HEAP32[(259664)>>2]|0;
    $48 = HEAP32[544648>>2]|0;
    $49 = $46 ? $47 : $48;
    (_fprintf($49,762174,$vararg_buffer1)|0);
    $50 = HEAP32[(259664)>>2]|0;
    $51 = ($50|0)!=(0|0);
    $52 = HEAP32[(259664)>>2]|0;
    $53 = HEAP32[544648>>2]|0;
    $54 = $51 ? $52 : $53;
    (_fflush($54)|0);
    break;
   } else {
    $55 = HEAP32[(259664)>>2]|0;
    $56 = ($55|0)!=(0|0);
    $57 = HEAP32[(259664)>>2]|0;
    $58 = HEAP32[544648>>2]|0;
    $59 = $56 ? $57 : $58;
    (_fprintf($59,762216,$vararg_buffer3)|0);
    $60 = HEAP32[(259664)>>2]|0;
    $61 = ($60|0)!=(0|0);
    $62 = HEAP32[(259664)>>2]|0;
    $63 = HEAP32[544648>>2]|0;
    $64 = $61 ? $62 : $63;
    (_fflush($64)|0);
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $347 = $$pre_trunc&1;
    STACKTOP = sp;return ($347|0);
   }
  }
 } while(0);
 $65 = $2;
 (_xml_get_prop($attr_scale,64,$65,762271)|0);
 $66 = $2;
 (_xml_get_prop($attr_scale_x,64,$66,762277)|0);
 $67 = $2;
 (_xml_get_prop($attr_scale_y,64,$67,762285)|0);
 $68 = $2;
 (_xml_get_prop($attr_size,64,$68,762293)|0);
 $69 = $2;
 (_xml_get_prop($attr_size_x,64,$69,762298)|0);
 $70 = $2;
 (_xml_get_prop($attr_size_y,64,$70,762305)|0);
 $71 = $2;
 (_xml_get_prop($attr_outscale,64,$71,762312)|0);
 $72 = $2;
 (_xml_get_prop($attr_outscale_x,64,$72,762321)|0);
 $73 = $2;
 (_xml_get_prop($attr_outscale_y,64,$73,762332)|0);
 $74 = $2;
 (_xml_get_prop($frame_count_mod,64,$74,762343)|0);
 $75 = $2;
 (_xml_get_prop($fp_fbo,64,$75,762359)|0);
 $76 = (_strcmp($fp_fbo,762377)|0);
 $77 = ($76|0)==(0);
 $78 = $fbo;
 $79 = ((($78)) + 28|0);
 $80 = $77&1;
 HEAP8[$79>>0] = $80;
 $x_attr_cnt = 0;
 $y_attr_cnt = 0;
 $81 = HEAP8[$frame_count_mod>>0]|0;
 $82 = ($81<<24>>24)!=(0);
 if ($82) {
  $83 = (_strtoul($frame_count_mod,0,0)|0);
  $84 = $1;
  $85 = ((($84)) + 4144|0);
  HEAP32[$85>>2] = $83;
  $86 = HEAP8[102648>>0]|0;
  $87 = $86&1;
  if ($87) {
   $88 = HEAP32[(259664)>>2]|0;
   $89 = ($88|0)!=(0|0);
   $90 = HEAP32[(259664)>>2]|0;
   $91 = HEAP32[544648>>2]|0;
   $92 = $89 ? $90 : $91;
   $93 = $1;
   $94 = ((($93)) + 4144|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $95;
   (_fprintf($92,762382,$vararg_buffer5)|0);
   $96 = HEAP32[(259664)>>2]|0;
   $97 = ($96|0)!=(0|0);
   $98 = HEAP32[(259664)>>2]|0;
   $99 = HEAP32[544648>>2]|0;
   $100 = $97 ? $98 : $99;
   (_fflush($100)|0);
  }
 }
 $101 = HEAP8[$attr_scale>>0]|0;
 $102 = ($101<<24>>24)!=(0);
 if ($102) {
  $103 = (+_strtod($attr_scale,0));
  $104 = $103;
  $scale = $104;
  $105 = $scale;
  $106 = $fbo;
  $107 = ((($106)) + 12|0);
  HEAPF32[$107>>2] = $105;
  $108 = $scale;
  $109 = $fbo;
  $110 = ((($109)) + 16|0);
  HEAPF32[$110>>2] = $108;
  $111 = $fbo;
  HEAP8[$111>>0] = 1;
  $112 = HEAP8[102648>>0]|0;
  $113 = $112&1;
  if ($113) {
   $114 = HEAP32[(259664)>>2]|0;
   $115 = ($114|0)!=(0|0);
   $116 = HEAP32[(259664)>>2]|0;
   $117 = HEAP32[544648>>2]|0;
   $118 = $115 ? $116 : $117;
   $119 = $scale;
   $120 = $119;
   HEAPF64[$vararg_buffer7>>3] = $120;
   (_fprintf($118,762423,$vararg_buffer7)|0);
   $121 = HEAP32[(259664)>>2]|0;
   $122 = ($121|0)!=(0|0);
   $123 = HEAP32[(259664)>>2]|0;
   $124 = HEAP32[544648>>2]|0;
   $125 = $122 ? $123 : $124;
   (_fflush($125)|0);
  }
  $126 = $x_attr_cnt;
  $127 = (($126) + 1)|0;
  $x_attr_cnt = $127;
  $128 = $y_attr_cnt;
  $129 = (($128) + 1)|0;
  $y_attr_cnt = $129;
 }
 $130 = HEAP8[$attr_scale_x>>0]|0;
 $131 = ($130<<24>>24)!=(0);
 if ($131) {
  $132 = (+_strtod($attr_scale_x,0));
  $133 = $132;
  $scale1 = $133;
  $134 = $scale1;
  $135 = $fbo;
  $136 = ((($135)) + 12|0);
  HEAPF32[$136>>2] = $134;
  $137 = $fbo;
  HEAP8[$137>>0] = 1;
  $138 = HEAP8[102648>>0]|0;
  $139 = $138&1;
  if ($139) {
   $140 = HEAP32[(259664)>>2]|0;
   $141 = ($140|0)!=(0|0);
   $142 = HEAP32[(259664)>>2]|0;
   $143 = HEAP32[544648>>2]|0;
   $144 = $141 ? $142 : $143;
   $145 = $scale1;
   $146 = $145;
   HEAPF64[$vararg_buffer10>>3] = $146;
   (_fprintf($144,762456,$vararg_buffer10)|0);
   $147 = HEAP32[(259664)>>2]|0;
   $148 = ($147|0)!=(0|0);
   $149 = HEAP32[(259664)>>2]|0;
   $150 = HEAP32[544648>>2]|0;
   $151 = $148 ? $149 : $150;
   (_fflush($151)|0);
  }
  $152 = $x_attr_cnt;
  $153 = (($152) + 1)|0;
  $x_attr_cnt = $153;
 }
 $154 = HEAP8[$attr_scale_y>>0]|0;
 $155 = ($154<<24>>24)!=(0);
 if ($155) {
  $156 = (+_strtod($attr_scale_y,0));
  $157 = $156;
  $scale2 = $157;
  $158 = $scale2;
  $159 = $fbo;
  $160 = ((($159)) + 16|0);
  HEAPF32[$160>>2] = $158;
  $161 = $fbo;
  HEAP8[$161>>0] = 1;
  $162 = HEAP8[102648>>0]|0;
  $163 = $162&1;
  if ($163) {
   $164 = HEAP32[(259664)>>2]|0;
   $165 = ($164|0)!=(0|0);
   $166 = HEAP32[(259664)>>2]|0;
   $167 = HEAP32[544648>>2]|0;
   $168 = $165 ? $166 : $167;
   $169 = $scale2;
   $170 = $169;
   HEAPF64[$vararg_buffer13>>3] = $170;
   (_fprintf($168,762491,$vararg_buffer13)|0);
   $171 = HEAP32[(259664)>>2]|0;
   $172 = ($171|0)!=(0|0);
   $173 = HEAP32[(259664)>>2]|0;
   $174 = HEAP32[544648>>2]|0;
   $175 = $172 ? $173 : $174;
   (_fflush($175)|0);
  }
  $176 = $y_attr_cnt;
  $177 = (($176) + 1)|0;
  $y_attr_cnt = $177;
 }
 $178 = HEAP8[$attr_size>>0]|0;
 $179 = ($178<<24>>24)!=(0);
 if ($179) {
  $180 = (_strtoul($attr_size,0,0)|0);
  $181 = $fbo;
  $182 = ((($181)) + 24|0);
  HEAP32[$182>>2] = $180;
  $183 = $fbo;
  $184 = ((($183)) + 20|0);
  HEAP32[$184>>2] = $180;
  $185 = $fbo;
  HEAP8[$185>>0] = 1;
  $186 = $fbo;
  $187 = ((($186)) + 8|0);
  HEAP32[$187>>2] = 1;
  $188 = $fbo;
  $189 = ((($188)) + 4|0);
  HEAP32[$189>>2] = 1;
  $190 = HEAP8[102648>>0]|0;
  $191 = $190&1;
  if ($191) {
   $192 = HEAP32[(259664)>>2]|0;
   $193 = ($192|0)!=(0|0);
   $194 = HEAP32[(259664)>>2]|0;
   $195 = HEAP32[544648>>2]|0;
   $196 = $193 ? $194 : $195;
   $197 = $fbo;
   $198 = ((($197)) + 20|0);
   $199 = HEAP32[$198>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $199;
   (_fprintf($196,762526,$vararg_buffer16)|0);
   $200 = HEAP32[(259664)>>2]|0;
   $201 = ($200|0)!=(0|0);
   $202 = HEAP32[(259664)>>2]|0;
   $203 = HEAP32[544648>>2]|0;
   $204 = $201 ? $202 : $203;
   (_fflush($204)|0);
  }
  $205 = $x_attr_cnt;
  $206 = (($205) + 1)|0;
  $x_attr_cnt = $206;
  $207 = $y_attr_cnt;
  $208 = (($207) + 1)|0;
  $y_attr_cnt = $208;
 }
 $209 = HEAP8[$attr_size_x>>0]|0;
 $210 = ($209<<24>>24)!=(0);
 if ($210) {
  $211 = (_strtoul($attr_size_x,0,0)|0);
  $212 = $fbo;
  $213 = ((($212)) + 20|0);
  HEAP32[$213>>2] = $211;
  $214 = $fbo;
  HEAP8[$214>>0] = 1;
  $215 = $fbo;
  $216 = ((($215)) + 4|0);
  HEAP32[$216>>2] = 1;
  $217 = HEAP8[102648>>0]|0;
  $218 = $217&1;
  if ($218) {
   $219 = HEAP32[(259664)>>2]|0;
   $220 = ($219|0)!=(0|0);
   $221 = HEAP32[(259664)>>2]|0;
   $222 = HEAP32[544648>>2]|0;
   $223 = $220 ? $221 : $222;
   $224 = $fbo;
   $225 = ((($224)) + 20|0);
   $226 = HEAP32[$225>>2]|0;
   HEAP32[$vararg_buffer19>>2] = $226;
   (_fprintf($223,762556,$vararg_buffer19)|0);
   $227 = HEAP32[(259664)>>2]|0;
   $228 = ($227|0)!=(0|0);
   $229 = HEAP32[(259664)>>2]|0;
   $230 = HEAP32[544648>>2]|0;
   $231 = $228 ? $229 : $230;
   (_fflush($231)|0);
  }
  $232 = $x_attr_cnt;
  $233 = (($232) + 1)|0;
  $x_attr_cnt = $233;
 }
 $234 = HEAP8[$attr_size_y>>0]|0;
 $235 = ($234<<24>>24)!=(0);
 if ($235) {
  $236 = (_strtoul($attr_size_y,0,0)|0);
  $237 = $fbo;
  $238 = ((($237)) + 24|0);
  HEAP32[$238>>2] = $236;
  $239 = $fbo;
  HEAP8[$239>>0] = 1;
  $240 = $fbo;
  $241 = ((($240)) + 8|0);
  HEAP32[$241>>2] = 1;
  $242 = HEAP8[102648>>0]|0;
  $243 = $242&1;
  if ($243) {
   $244 = HEAP32[(259664)>>2]|0;
   $245 = ($244|0)!=(0|0);
   $246 = HEAP32[(259664)>>2]|0;
   $247 = HEAP32[544648>>2]|0;
   $248 = $245 ? $246 : $247;
   $249 = $fbo;
   $250 = ((($249)) + 24|0);
   $251 = HEAP32[$250>>2]|0;
   HEAP32[$vararg_buffer22>>2] = $251;
   (_fprintf($248,762588,$vararg_buffer22)|0);
   $252 = HEAP32[(259664)>>2]|0;
   $253 = ($252|0)!=(0|0);
   $254 = HEAP32[(259664)>>2]|0;
   $255 = HEAP32[544648>>2]|0;
   $256 = $253 ? $254 : $255;
   (_fflush($256)|0);
  }
  $257 = $y_attr_cnt;
  $258 = (($257) + 1)|0;
  $y_attr_cnt = $258;
 }
 $259 = HEAP8[$attr_outscale>>0]|0;
 $260 = ($259<<24>>24)!=(0);
 if ($260) {
  $261 = (+_strtod($attr_outscale,0));
  $262 = $261;
  $scale3 = $262;
  $263 = $scale3;
  $264 = $fbo;
  $265 = ((($264)) + 16|0);
  HEAPF32[$265>>2] = $263;
  $266 = $fbo;
  $267 = ((($266)) + 12|0);
  HEAPF32[$267>>2] = $263;
  $268 = $fbo;
  HEAP8[$268>>0] = 1;
  $269 = $fbo;
  $270 = ((($269)) + 8|0);
  HEAP32[$270>>2] = 2;
  $271 = $fbo;
  $272 = ((($271)) + 4|0);
  HEAP32[$272>>2] = 2;
  $273 = HEAP8[102648>>0]|0;
  $274 = $273&1;
  if ($274) {
   $275 = HEAP32[(259664)>>2]|0;
   $276 = ($275|0)!=(0|0);
   $277 = HEAP32[(259664)>>2]|0;
   $278 = HEAP32[544648>>2]|0;
   $279 = $276 ? $277 : $278;
   $280 = $scale3;
   $281 = $280;
   HEAPF64[$vararg_buffer25>>3] = $281;
   (_fprintf($279,762620,$vararg_buffer25)|0);
   $282 = HEAP32[(259664)>>2]|0;
   $283 = ($282|0)!=(0|0);
   $284 = HEAP32[(259664)>>2]|0;
   $285 = HEAP32[544648>>2]|0;
   $286 = $283 ? $284 : $285;
   (_fflush($286)|0);
  }
  $287 = $x_attr_cnt;
  $288 = (($287) + 1)|0;
  $x_attr_cnt = $288;
  $289 = $y_attr_cnt;
  $290 = (($289) + 1)|0;
  $y_attr_cnt = $290;
 }
 $291 = HEAP8[$attr_outscale_x>>0]|0;
 $292 = ($291<<24>>24)!=(0);
 if ($292) {
  $293 = (+_strtod($attr_outscale_x,0));
  $294 = $293;
  $scale4 = $294;
  $295 = $scale4;
  $296 = $fbo;
  $297 = ((($296)) + 12|0);
  HEAPF32[$297>>2] = $295;
  $298 = $fbo;
  HEAP8[$298>>0] = 1;
  $299 = $fbo;
  $300 = ((($299)) + 4|0);
  HEAP32[$300>>2] = 2;
  $301 = HEAP8[102648>>0]|0;
  $302 = $301&1;
  if ($302) {
   $303 = HEAP32[(259664)>>2]|0;
   $304 = ($303|0)!=(0|0);
   $305 = HEAP32[(259664)>>2]|0;
   $306 = HEAP32[544648>>2]|0;
   $307 = $304 ? $305 : $306;
   $308 = $scale4;
   $309 = $308;
   HEAPF64[$vararg_buffer28>>3] = $309;
   (_fprintf($307,762656,$vararg_buffer28)|0);
   $310 = HEAP32[(259664)>>2]|0;
   $311 = ($310|0)!=(0|0);
   $312 = HEAP32[(259664)>>2]|0;
   $313 = HEAP32[544648>>2]|0;
   $314 = $311 ? $312 : $313;
   (_fflush($314)|0);
  }
  $315 = $x_attr_cnt;
  $316 = (($315) + 1)|0;
  $x_attr_cnt = $316;
 }
 $317 = HEAP8[$attr_outscale_y>>0]|0;
 $318 = ($317<<24>>24)!=(0);
 if ($318) {
  $319 = (+_strtod($attr_outscale_y,0));
  $320 = $319;
  $scale5 = $320;
  $321 = $scale5;
  $322 = $fbo;
  $323 = ((($322)) + 16|0);
  HEAPF32[$323>>2] = $321;
  $324 = $fbo;
  HEAP8[$324>>0] = 1;
  $325 = $fbo;
  $326 = ((($325)) + 8|0);
  HEAP32[$326>>2] = 2;
  $327 = HEAP8[102648>>0]|0;
  $328 = $327&1;
  if ($328) {
   $329 = HEAP32[(259664)>>2]|0;
   $330 = ($329|0)!=(0|0);
   $331 = HEAP32[(259664)>>2]|0;
   $332 = HEAP32[544648>>2]|0;
   $333 = $330 ? $331 : $332;
   $334 = $scale5;
   $335 = $334;
   HEAPF64[$vararg_buffer31>>3] = $335;
   (_fprintf($333,762694,$vararg_buffer31)|0);
   $336 = HEAP32[(259664)>>2]|0;
   $337 = ($336|0)!=(0|0);
   $338 = HEAP32[(259664)>>2]|0;
   $339 = HEAP32[544648>>2]|0;
   $340 = $337 ? $338 : $339;
   (_fflush($340)|0);
  }
  $341 = $y_attr_cnt;
  $342 = (($341) + 1)|0;
  $y_attr_cnt = $342;
 }
 $343 = $x_attr_cnt;
 $344 = ($343>>>0)>(1);
 if ($344) {
  $$expand_i1_val35 = 0;
  HEAP8[$0>>0] = $$expand_i1_val35;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $347 = $$pre_trunc&1;
  STACKTOP = sp;return ($347|0);
 }
 $345 = $y_attr_cnt;
 $346 = ($345>>>0)>(1);
 if ($346) {
  $$expand_i1_val37 = 0;
  HEAP8[$0>>0] = $$expand_i1_val37;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $347 = $$pre_trunc&1;
  STACKTOP = sp;return ($347|0);
 } else {
  $$expand_i1_val39 = 1;
  HEAP8[$0>>0] = $$expand_i1_val39;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $347 = $$pre_trunc&1;
  STACKTOP = sp;return ($347|0);
 }
 return (0)|0;
}
function _add_texture_image($shader,$ptr) {
 $shader = $shader|0;
 $ptr = $ptr|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $filter = 0, $lut = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 104|0;
 $filter = sp + 40|0;
 $1 = $shader;
 $2 = $ptr;
 $3 = $1;
 $4 = ((($3)) + 66444|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)>=(8);
 if ($6) {
  $7 = HEAP32[(259664)>>2]|0;
  $8 = ($7|0)!=(0|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = HEAP32[544648>>2]|0;
  $11 = $8 ? $9 : $10;
  (_fprintf($11,761888,$vararg_buffer)|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = HEAP32[544648>>2]|0;
  $16 = $13 ? $14 : $15;
  (_fflush($16)|0);
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $82 = $$pre_trunc&1;
  STACKTOP = sp;return ($82|0);
 }
 $17 = $1;
 $18 = ((($17)) + 66444|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 66448|0);
 $22 = (($21) + (($19*4168)|0)|0);
 $lut = $22;
 $23 = $lut;
 $24 = $2;
 (_xml_get_prop($23,64,$24,761615)|0);
 $25 = $lut;
 $26 = ((($25)) + 64|0);
 $27 = $2;
 (_xml_get_prop($26,4096,$27,761947)|0);
 dest=$filter; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $28 = $2;
 (_xml_get_prop($filter,64,$28,761952)|0);
 $29 = $lut;
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)!=(0);
 if (!($31)) {
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  (_fprintf($36,761959,$vararg_buffer1)|0);
  $37 = HEAP32[(259664)>>2]|0;
  $38 = ($37|0)!=(0|0);
  $39 = HEAP32[(259664)>>2]|0;
  $40 = HEAP32[544648>>2]|0;
  $41 = $38 ? $39 : $40;
  (_fflush($41)|0);
  $$expand_i1_val8 = 0;
  HEAP8[$0>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $82 = $$pre_trunc&1;
  STACKTOP = sp;return ($82|0);
 }
 $42 = $lut;
 $43 = ((($42)) + 64|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = ($44<<24>>24)!=(0);
 if (!($45)) {
  $46 = HEAP32[(259664)>>2]|0;
  $47 = ($46|0)!=(0|0);
  $48 = HEAP32[(259664)>>2]|0;
  $49 = HEAP32[544648>>2]|0;
  $50 = $47 ? $48 : $49;
  (_fprintf($50,762011,$vararg_buffer3)|0);
  $51 = HEAP32[(259664)>>2]|0;
  $52 = ($51|0)!=(0|0);
  $53 = HEAP32[(259664)>>2]|0;
  $54 = HEAP32[544648>>2]|0;
  $55 = $52 ? $53 : $54;
  (_fflush($55)|0);
  $$expand_i1_val10 = 0;
  HEAP8[$0>>0] = $$expand_i1_val10;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $82 = $$pre_trunc&1;
  STACKTOP = sp;return ($82|0);
 }
 $56 = (_strcmp($filter,762069)|0);
 $57 = ($56|0)==(0);
 do {
  if ($57) {
   $58 = $lut;
   $59 = ((($58)) + 4160|0);
   HEAP32[$59>>2] = 1;
  } else {
   $60 = (_strcmp($filter,762076)|0);
   $61 = ($60|0)==(0);
   if ($61) {
    $62 = $lut;
    $63 = ((($62)) + 4160|0);
    HEAP32[$63>>2] = 2;
    break;
   }
   $64 = HEAP8[$filter>>0]|0;
   $65 = ($64<<24>>24)!=(0);
   if (!($65)) {
    $66 = $lut;
    $67 = ((($66)) + 4160|0);
    HEAP32[$67>>2] = 0;
    break;
   }
   $68 = HEAP32[(259664)>>2]|0;
   $69 = ($68|0)!=(0|0);
   $70 = HEAP32[(259664)>>2]|0;
   $71 = HEAP32[544648>>2]|0;
   $72 = $69 ? $70 : $71;
   (_fprintf($72,762084,$vararg_buffer5)|0);
   $73 = HEAP32[(259664)>>2]|0;
   $74 = ($73|0)!=(0|0);
   $75 = HEAP32[(259664)>>2]|0;
   $76 = HEAP32[544648>>2]|0;
   $77 = $74 ? $75 : $76;
   (_fflush($77)|0);
   $$expand_i1_val12 = 0;
   HEAP8[$0>>0] = $$expand_i1_val12;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $82 = $$pre_trunc&1;
   STACKTOP = sp;return ($82|0);
  }
 } while(0);
 $78 = $1;
 $79 = ((($78)) + 66444|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + 1)|0;
 HEAP32[$79>>2] = $81;
 $$expand_i1_val14 = 1;
 HEAP8[$0>>0] = $$expand_i1_val14;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $82 = $$pre_trunc&1;
 STACKTOP = sp;return ($82|0);
}
function _add_import_value($shader,$ptr) {
 $shader = $shader|0;
 $ptr = $ptr|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val18 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bitequal = 0, $bitmask = 0, $input = 0, $semantic = 0, $slot = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $wram = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 376|0;
 $semantic = sp + 312|0;
 $wram = sp + 248|0;
 $input = sp + 184|0;
 $bitmask = sp + 120|0;
 $bitequal = sp + 56|0;
 $1 = $shader;
 $2 = $ptr;
 $3 = $1;
 $4 = ((($3)) + 99792|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)>=(64);
 if ($6) {
  $7 = HEAP32[(259664)>>2]|0;
  $8 = ($7|0)!=(0|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = HEAP32[544648>>2]|0;
  $11 = $8 ? $9 : $10;
  (_fprintf($11,761563,$vararg_buffer)|0);
  $12 = HEAP32[(259664)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = HEAP32[544648>>2]|0;
  $16 = $13 ? $14 : $15;
  (_fflush($16)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $134 = $$pre_trunc&1;
  STACKTOP = sp;return ($134|0);
 }
 $17 = $1;
 $18 = ((($17)) + 99792|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 99796|0);
 $22 = (($21) + (($19*80)|0)|0);
 $var = $22;
 $23 = $var;
 $24 = $2;
 (_xml_get_prop($23,64,$24,761615)|0);
 $25 = $2;
 (_xml_get_prop($semantic,64,$25,761618)|0);
 $26 = $2;
 (_xml_get_prop($wram,64,$26,761627)|0);
 $27 = $2;
 (_xml_get_prop($input,64,$27,761632)|0);
 $28 = $2;
 (_xml_get_prop($bitmask,64,$28,761643)|0);
 $29 = $2;
 (_xml_get_prop($bitequal,64,$29,761648)|0);
 $30 = HEAP8[$semantic>>0]|0;
 $31 = ($30<<24>>24)!=(0);
 if ($31) {
  $32 = $var;
  $33 = HEAP8[$32>>0]|0;
  $34 = ($33<<24>>24)!=(0);
  if ($34) {
   $45 = (_strcmp($semantic,760984)|0);
   $46 = ($45|0)==(0);
   do {
    if ($46) {
     $47 = $var;
     $48 = ((($47)) + 68|0);
     HEAP32[$48>>2] = 0;
    } else {
     $49 = (_strcmp($semantic,761020)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = $var;
      $52 = ((($51)) + 68|0);
      HEAP32[$52>>2] = 1;
      break;
     }
     $53 = (_strcmp($semantic,760992)|0);
     $54 = ($53|0)==(0);
     if ($54) {
      $55 = $var;
      $56 = ((($55)) + 68|0);
      HEAP32[$56>>2] = 2;
      break;
     }
     $57 = (_strcmp($semantic,761003)|0);
     $58 = ($57|0)==(0);
     if ($58) {
      $59 = $var;
      $60 = ((($59)) + 68|0);
      HEAP32[$60>>2] = 3;
      break;
     }
     $61 = (_strcmp($semantic,761037)|0);
     $62 = ($61|0)==(0);
     if ($62) {
      $63 = $var;
      $64 = ((($63)) + 68|0);
      HEAP32[$64>>2] = 4;
      break;
     }
     $65 = (_strcmp($semantic,761057)|0);
     $66 = ($65|0)==(0);
     if ($66) {
      $67 = $var;
      $68 = ((($67)) + 68|0);
      HEAP32[$68>>2] = 5;
      break;
     }
     $69 = HEAP32[(259664)>>2]|0;
     $70 = ($69|0)!=(0|0);
     $71 = HEAP32[(259664)>>2]|0;
     $72 = HEAP32[544648>>2]|0;
     $73 = $70 ? $71 : $72;
     (_fprintf($73,761712,$vararg_buffer3)|0);
     $74 = HEAP32[(259664)>>2]|0;
     $75 = ($74|0)!=(0|0);
     $76 = HEAP32[(259664)>>2]|0;
     $77 = HEAP32[544648>>2]|0;
     $78 = $75 ? $76 : $77;
     (_fflush($78)|0);
     $$expand_i1_val12 = 0;
     HEAP8[$0>>0] = $$expand_i1_val12;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $134 = $$pre_trunc&1;
     STACKTOP = sp;return ($134|0);
    }
   } while(0);
   $79 = $var;
   $80 = ((($79)) + 68|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)!=(5);
   L28: do {
    if ($82) {
     $83 = HEAP8[$input>>0]|0;
     $84 = ($83<<24>>24)!=(0);
     if (!($84)) {
      $101 = HEAP8[$wram>>0]|0;
      $102 = ($101<<24>>24)!=(0);
      if ($102) {
       $103 = (_strtoul($wram,0,16)|0);
       $104 = $var;
       $105 = ((($104)) + 64|0);
       HEAP32[$105>>2] = $103;
       $106 = $var;
       $107 = ((($106)) + 72|0);
       HEAP32[$107>>2] = 1;
       break;
      }
      $108 = HEAP32[(259664)>>2]|0;
      $109 = ($108|0)!=(0|0);
      $110 = HEAP32[(259664)>>2]|0;
      $111 = HEAP32[544648>>2]|0;
      $112 = $109 ? $110 : $111;
      (_fprintf($112,761822,$vararg_buffer7)|0);
      $113 = HEAP32[(259664)>>2]|0;
      $114 = ($113|0)!=(0|0);
      $115 = HEAP32[(259664)>>2]|0;
      $116 = HEAP32[544648>>2]|0;
      $117 = $114 ? $115 : $116;
      (_fflush($117)|0);
      $$expand_i1_val16 = 0;
      HEAP8[$0>>0] = $$expand_i1_val16;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $134 = $$pre_trunc&1;
      STACKTOP = sp;return ($134|0);
     }
     $85 = (_strtoul($input,0,0)|0);
     $slot = $85;
     $86 = $slot;
     switch ($86|0) {
     case 1:  {
      $87 = $var;
      $88 = ((($87)) + 72|0);
      HEAP32[$88>>2] = 2;
      break L28;
      break;
     }
     case 2:  {
      $89 = $var;
      $90 = ((($89)) + 72|0);
      HEAP32[$90>>2] = 3;
      break L28;
      break;
     }
     default: {
      $91 = HEAP32[(259664)>>2]|0;
      $92 = ($91|0)!=(0|0);
      $93 = HEAP32[(259664)>>2]|0;
      $94 = HEAP32[544648>>2]|0;
      $95 = $92 ? $93 : $94;
      (_fprintf($95,761769,$vararg_buffer5)|0);
      $96 = HEAP32[(259664)>>2]|0;
      $97 = ($96|0)!=(0|0);
      $98 = HEAP32[(259664)>>2]|0;
      $99 = HEAP32[544648>>2]|0;
      $100 = $97 ? $98 : $99;
      (_fflush($100)|0);
      $$expand_i1_val14 = 0;
      HEAP8[$0>>0] = $$expand_i1_val14;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $134 = $$pre_trunc&1;
      STACKTOP = sp;return ($134|0);
     }
     }
    }
   } while(0);
   $118 = HEAP8[$bitmask>>0]|0;
   $119 = ($118<<24>>24)!=(0);
   if ($119) {
    $120 = (_strtoul($bitmask,0,16)|0);
    $121 = $120&65535;
    $122 = $var;
    $123 = ((($122)) + 76|0);
    HEAP16[$123>>1] = $121;
   }
   $124 = HEAP8[$bitequal>>0]|0;
   $125 = ($124<<24>>24)!=(0);
   if ($125) {
    $126 = (_strtoul($bitequal,0,16)|0);
    $127 = $126&65535;
    $128 = $var;
    $129 = ((($128)) + 78|0);
    HEAP16[$129>>1] = $127;
   }
   $130 = $1;
   $131 = ((($130)) + 99792|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($132) + 1)|0;
   HEAP32[$131>>2] = $133;
   $$expand_i1_val18 = 1;
   HEAP8[$0>>0] = $$expand_i1_val18;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $134 = $$pre_trunc&1;
   STACKTOP = sp;return ($134|0);
  }
 }
 $35 = HEAP32[(259664)>>2]|0;
 $36 = ($35|0)!=(0|0);
 $37 = HEAP32[(259664)>>2]|0;
 $38 = HEAP32[544648>>2]|0;
 $39 = $36 ? $37 : $38;
 (_fprintf($39,761654,$vararg_buffer1)|0);
 $40 = HEAP32[(259664)>>2]|0;
 $41 = ($40|0)!=(0|0);
 $42 = HEAP32[(259664)>>2]|0;
 $43 = HEAP32[544648>>2]|0;
 $44 = $41 ? $42 : $43;
 (_fflush($44)|0);
 $$expand_i1_val10 = 0;
 HEAP8[$0>>0] = $$expand_i1_val10;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $134 = $$pre_trunc&1;
 STACKTOP = sp;return ($134|0);
}
function _get_script($shader,$path,$ptr) {
 $shader = $shader|0;
 $path = $path|0;
 $ptr = $ptr|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $language = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 96|0;
 $language = sp + 32|0;
 $1 = $shader;
 $2 = $path;
 $3 = $ptr;
 $4 = $1;
 $5 = ((($4)) + 109012|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[(259664)>>2]|0;
  $9 = ($8|0)!=(0|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = HEAP32[544648>>2]|0;
  $12 = $9 ? $10 : $11;
  (_fprintf($12,761408,$vararg_buffer)|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fflush($17)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $64 = $$pre_trunc&1;
  STACKTOP = sp;return ($64|0);
 }
 $18 = $1;
 $19 = ((($18)) + 109016|0);
 $20 = $3;
 (_xml_get_prop($19,512,$20,761455)|0);
 $21 = $3;
 (_xml_get_prop($language,64,$21,760007)|0);
 $22 = (_strcmp($language,761057)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = HEAP32[(259664)>>2]|0;
  $25 = ($24|0)!=(0|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = HEAP32[544648>>2]|0;
  $28 = $25 ? $26 : $27;
  (_fprintf($28,761461,$vararg_buffer1)|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = ($29|0)!=(0|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = HEAP32[544648>>2]|0;
  $33 = $30 ? $31 : $32;
  (_fflush($33)|0);
  $$expand_i1_val6 = 0;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $64 = $$pre_trunc&1;
  STACKTOP = sp;return ($64|0);
 }
 $34 = $3;
 $35 = (_xml_get_content($34)|0);
 $36 = $1;
 $37 = ((($36)) + 109012|0);
 HEAP32[$37>>2] = $35;
 $38 = $1;
 $39 = ((($38)) + 109012|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  $$expand_i1_val8 = 0;
  HEAP8[$0>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $64 = $$pre_trunc&1;
  STACKTOP = sp;return ($64|0);
 }
 $42 = $1;
 $43 = ((($42)) + 109012|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $2;
 $46 = $3;
 $47 = (_xml_replace_if_file($44,$45,$46,760290)|0);
 $48 = $1;
 $49 = ((($48)) + 109012|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = ((($50)) + 109012|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $$expand_i1_val12 = 1;
  HEAP8[$0>>0] = $$expand_i1_val12;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $64 = $$pre_trunc&1;
  STACKTOP = sp;return ($64|0);
 } else {
  $54 = HEAP32[(259664)>>2]|0;
  $55 = ($54|0)!=(0|0);
  $56 = HEAP32[(259664)>>2]|0;
  $57 = HEAP32[544648>>2]|0;
  $58 = $55 ? $56 : $57;
  (_fprintf($58,761514,$vararg_buffer3)|0);
  $59 = HEAP32[(259664)>>2]|0;
  $60 = ($59|0)!=(0|0);
  $61 = HEAP32[(259664)>>2]|0;
  $62 = HEAP32[544648>>2]|0;
  $63 = $60 ? $61 : $62;
  (_fflush($63)|0);
  $$expand_i1_val10 = 0;
  HEAP8[$0>>0] = $$expand_i1_val10;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $64 = $$pre_trunc&1;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _wrap_mode_to_str($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 0:  {
  $0 = 761118;
  break;
 }
 case 1:  {
  $0 = 761134;
  break;
 }
 case 2:  {
  $0 = 761148;
  break;
 }
 case 3:  {
  $0 = 761155;
  break;
 }
 default: {
  $0 = 761404;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _shader_write_fbo($conf,$fbo,$i) {
 $conf = $conf|0;
 $fbo = $fbo|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $key = sp + 16|0;
 $0 = $conf;
 $1 = $fbo;
 $2 = $i;
 $3 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 (_snprintf($key,64,761380,$vararg_buffer)|0);
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 _config_set_bool($4,$key,$8);
 $9 = $1;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 12|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $2;
 _shader_write_scale_dim($12,761400,$15,$18,$21,$22);
 $23 = $0;
 $24 = $1;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = ((($27)) + 16|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $1;
 $31 = ((($30)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $2;
 _shader_write_scale_dim($23,761402,$26,$29,$32,$33);
 STACKTOP = sp;return;
}
function _shader_write_variable($conf,$info) {
 $conf = $conf|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $equal_buf = 0, $id = 0, $input_slot_buf = 0, $mask_buf = 0, $semantic_buf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer7 = 0, $wram_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $semantic_buf = sp + 304|0;
 $wram_buf = sp + 240|0;
 $input_slot_buf = sp + 176|0;
 $mask_buf = sp + 112|0;
 $equal_buf = sp + 48|0;
 $0 = $conf;
 $1 = $info;
 $2 = $1;
 $id = $2;
 $3 = $id;
 HEAP32[$vararg_buffer>>2] = $3;
 (_snprintf($semantic_buf,64,761329,$vararg_buffer)|0);
 $4 = $id;
 HEAP32[$vararg_buffer1>>2] = $4;
 (_snprintf($wram_buf,64,761341,$vararg_buffer1)|0);
 $5 = $id;
 HEAP32[$vararg_buffer4>>2] = $5;
 (_snprintf($input_slot_buf,64,761349,$vararg_buffer4)|0);
 $6 = $id;
 HEAP32[$vararg_buffer7>>2] = $6;
 (_snprintf($mask_buf,64,761363,$vararg_buffer7)|0);
 $7 = $id;
 HEAP32[$vararg_buffer10>>2] = $7;
 (_snprintf($equal_buf,64,761371,$vararg_buffer10)|0);
 $8 = $0;
 $9 = $1;
 $10 = ((($9)) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_import_semantic_to_string($11)|0);
 _config_set_string($8,$semantic_buf,$12);
 $13 = $0;
 $14 = $1;
 $15 = ((($14)) + 76|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 _config_set_hex($13,$mask_buf,$17);
 $18 = $0;
 $19 = $1;
 $20 = ((($19)) + 78|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 _config_set_hex($18,$equal_buf,$22);
 $23 = $1;
 $24 = ((($23)) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 switch ($25|0) {
 case 2:  {
  $26 = $0;
  _config_set_int($26,$input_slot_buf,1);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $27 = $0;
  _config_set_int($27,$input_slot_buf,2);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $28 = $0;
  $29 = $1;
  $30 = ((($29)) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  _config_set_hex($28,$wram_buf,$31);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _wrap_str_to_mode($wrap_mode) {
 $wrap_mode = $wrap_mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $wrap_mode;
 $2 = $1;
 $3 = (_strcmp($2,761118)|0);
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $0 = 0;
  } else {
   $5 = $1;
   $6 = (_strcmp($5,761134)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $0 = 1;
    break;
   }
   $8 = $1;
   $9 = (_strcmp($8,761148)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $0 = 2;
    break;
   }
   $11 = $1;
   $12 = (_strcmp($11,761155)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $0 = 3;
    break;
   } else {
    $14 = HEAP32[(259664)>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = HEAP32[(259664)>>2]|0;
    $17 = HEAP32[544648>>2]|0;
    $18 = $15 ? $16 : $17;
    $19 = $1;
    HEAP32[$vararg_buffer>>2] = $19;
    (_fprintf($18,761171,$vararg_buffer)|0);
    $20 = HEAP32[(259664)>>2]|0;
    $21 = ($20|0)!=(0|0);
    $22 = HEAP32[(259664)>>2]|0;
    $23 = HEAP32[544648>>2]|0;
    $24 = $21 ? $22 : $23;
    (_fflush($24)|0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _shader_write_scale_dim($conf,$dim,$type,$scale,$abs,$i) {
 $conf = $conf|0;
 $dim = $dim|0;
 $type = $type|0;
 $scale = +$scale;
 $abs = $abs|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $key = sp + 40|0;
 $0 = $conf;
 $1 = $dim;
 $2 = $type;
 $3 = $scale;
 $4 = $abs;
 $5 = $i;
 $6 = $1;
 $7 = $5;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 (_snprintf($key,64,761091,$vararg_buffer)|0);
 $8 = $0;
 $9 = $2;
 $10 = (_scale_type_to_str($9)|0);
 _config_set_string($8,$key,$10);
 $11 = $1;
 $12 = $5;
 HEAP32[$vararg_buffer2>>2] = $11;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $12;
 (_snprintf($key,64,761107,$vararg_buffer2)|0);
 $13 = $2;
 $14 = ($13|0)==(1);
 $15 = $0;
 if ($14) {
  $16 = $4;
  _config_set_int($15,$key,$16);
  STACKTOP = sp;return;
 } else {
  $17 = $3;
  _config_set_float($15,$key,$17);
  STACKTOP = sp;return;
 }
}
function _scale_type_to_str($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 0:  {
  $0 = 761066;
  break;
 }
 case 2:  {
  $0 = 761073;
  break;
 }
 case 1:  {
  $0 = 761082;
  break;
 }
 default: {
  $0 = 761064;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _import_semantic_to_string($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 0:  {
  $0 = 760984;
  break;
 }
 case 2:  {
  $0 = 760992;
  break;
 }
 case 3:  {
  $0 = 761003;
  break;
 }
 case 1:  {
  $0 = 761020;
  break;
 }
 case 4:  {
  $0 = 761037;
  break;
 }
 case 5:  {
  $0 = 761057;
  break;
 }
 default: {
  $0 = 761064;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _font_renderer_create_default($driver,$handle) {
 $driver = $driver|0;
 $handle = $handle|0;
 var $$expand_i1_val = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $font_path = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 $1 = $driver;
 $2 = $handle;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3>>>0)<(1);
  if (!($4)) {
   label = 12;
   break;
  }
  $5 = HEAP8[(12641)>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)!=(0);
  $8 = $7 ? (12641) : 0;
  $font_path = $8;
  $9 = $font_path;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   $11 = $i;
   $12 = (270056 + ($11<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (FUNCTION_TABLE_i[$15 & 511]()|0);
   $font_path = $16;
  }
  $17 = $font_path;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $i;
   $20 = (270056 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$21>>2]|0;
   $23 = $font_path;
   $24 = +HEAPF32[(16740)>>2];
   $25 = (FUNCTION_TABLE_iid[$22 & 31]($23,$24)|0);
   $26 = $2;
   HEAP32[$26>>2] = $25;
   $27 = $2;
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    break;
   }
   $51 = HEAP32[(259664)>>2]|0;
   $52 = ($51|0)!=(0|0);
   $53 = HEAP32[(259664)>>2]|0;
   $54 = HEAP32[544648>>2]|0;
   $55 = $52 ? $53 : $54;
   $56 = $i;
   $57 = (270056 + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $60;
   (_fprintf($55,763203,$vararg_buffer1)|0);
   $61 = HEAP32[(259664)>>2]|0;
   $62 = ($61|0)!=(0|0);
   $63 = HEAP32[(259664)>>2]|0;
   $64 = HEAP32[544648>>2]|0;
   $65 = $62 ? $63 : $64;
   (_fflush($65)|0);
  }
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 if ((label|0) == 12) {
  $68 = $1;
  HEAP32[$68>>2] = 0;
  $69 = $2;
  HEAP32[$69>>2] = 0;
  $$expand_i1_val5 = 0;
  HEAP8[$0>>0] = $$expand_i1_val5;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $70 = $$pre_trunc&1;
  STACKTOP = sp;return ($70|0);
 }
 $30 = HEAP8[102648>>0]|0;
 $31 = $30&1;
 if ($31) {
  $32 = HEAP32[(259664)>>2]|0;
  $33 = ($32|0)!=(0|0);
  $34 = HEAP32[(259664)>>2]|0;
  $35 = HEAP32[544648>>2]|0;
  $36 = $33 ? $34 : $35;
  $37 = $i;
  $38 = (270056 + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 20|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$vararg_buffer>>2] = $41;
  (_fprintf($36,763157,$vararg_buffer)|0);
  $42 = HEAP32[(259664)>>2]|0;
  $43 = ($42|0)!=(0|0);
  $44 = HEAP32[(259664)>>2]|0;
  $45 = HEAP32[544648>>2]|0;
  $46 = $43 ? $44 : $45;
  (_fflush($46)|0);
 }
 $47 = $i;
 $48 = (270056 + ($47<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $1;
 HEAP32[$50>>2] = $49;
 $$expand_i1_val = 1;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $70 = $$pre_trunc&1;
 STACKTOP = sp;return ($70|0);
}
function _font_renderer_init($font_path,$font_size) {
 $font_path = $font_path|0;
 $font_size = +$font_size;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $handle = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $font_path;
 $2 = $font_size;
 $3 = (_calloc(1,1032)|0);
 $handle = $3;
 $4 = $handle;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $6 = $2;
 $7 = $6 / 10.0;
 $8 = (+_roundf($7));
 $9 = (~~(($8))>>>0);
 $10 = $handle;
 HEAP32[$10>>2] = $9;
 $11 = $handle;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = $handle;
  HEAP32[$14>>2] = 1;
 }
 $15 = $handle;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16*50)|0;
 $18 = $handle;
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($17, $19)|0;
 $21 = $20<<8;
 $22 = (_malloc($21)|0);
 $23 = $handle;
 $24 = ((($23)) + 1028|0);
 HEAP32[$24>>2] = $22;
 $25 = $handle;
 $26 = ((($25)) + 1028|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $29 = $handle;
  _free($29);
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $i = 0;
 while(1) {
  $30 = $i;
  $31 = ($30>>>0)<(256);
  $32 = $handle;
  if (!($31)) {
   break;
  }
  $33 = $i;
  $34 = $33&255;
  _char_to_texture($32,$34);
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $0 = $32;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _char_to_texture($handle,$letter) {
 $handle = $handle|0;
 $letter = $letter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $col = 0, $offset = 0, $rem = 0, $x = 0, $xo = 0, $y = 0, $yo = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $letter;
 $2 = $1;
 $3 = $2&255;
 $4 = ($3*5)|0;
 $5 = ($4*10)|0;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($5, $7)|0;
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = $0;
 $13 = ((($12)) + 1028|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($11)|0);
 $16 = $1;
 $17 = $16&255;
 $18 = $0;
 $19 = ((($18)) + 4|0);
 $20 = (($19) + ($17<<2)|0);
 HEAP32[$20>>2] = $15;
 $y = 0;
 while(1) {
  $21 = $y;
  $22 = ($21>>>0)<(10);
  if (!($22)) {
   break;
  }
  $x = 0;
  while(1) {
   $23 = $x;
   $24 = ($23>>>0)<(5);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $y;
   $27 = ($26*5)|0;
   $28 = (($25) + ($27))|0;
   $29 = $28 & 7;
   $30 = 1 << $29;
   $31 = $30&255;
   $rem = $31;
   $32 = $x;
   $33 = $y;
   $34 = ($33*5)|0;
   $35 = (($32) + ($34))|0;
   $36 = $35 >>> 3;
   $offset = $36;
   $37 = $1;
   $38 = $37&255;
   $39 = ($38*7)|0;
   $40 = $offset;
   $41 = (($39) + ($40))|0;
   $42 = (763265 + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = $rem;
   $46 = $45&255;
   $47 = $44 & $46;
   $48 = ($47|0)!=(0);
   $49 = $48 ? 255 : 0;
   $50 = $49&255;
   $col = $50;
   $xo = 0;
   while(1) {
    $51 = $xo;
    $52 = $0;
    $53 = HEAP32[$52>>2]|0;
    $54 = ($51>>>0)<($53>>>0);
    if (!($54)) {
     break;
    }
    $yo = 0;
    while(1) {
     $55 = $yo;
     $56 = $0;
     $57 = HEAP32[$56>>2]|0;
     $58 = ($55>>>0)<($57>>>0);
     if (!($58)) {
      break;
     }
     $59 = $col;
     $60 = $x;
     $61 = $0;
     $62 = HEAP32[$61>>2]|0;
     $63 = Math_imul($60, $62)|0;
     $64 = $xo;
     $65 = (($63) + ($64))|0;
     $66 = $y;
     $67 = $0;
     $68 = HEAP32[$67>>2]|0;
     $69 = Math_imul($66, $68)|0;
     $70 = $yo;
     $71 = (($69) + ($70))|0;
     $72 = ($71*5)|0;
     $73 = $0;
     $74 = HEAP32[$73>>2]|0;
     $75 = Math_imul($72, $74)|0;
     $76 = (($65) + ($75))|0;
     $77 = $1;
     $78 = $77&255;
     $79 = $0;
     $80 = ((($79)) + 4|0);
     $81 = (($80) + ($78<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($82) + ($76)|0);
     HEAP8[$83>>0] = $59;
     $84 = $yo;
     $85 = (($84) + 1)|0;
     $yo = $85;
    }
    $86 = $xo;
    $87 = (($86) + 1)|0;
    $xo = $87;
   }
   $88 = $x;
   $89 = (($88) + 1)|0;
   $x = $89;
  }
  $90 = $y;
  $91 = (($90) + 1)|0;
  $y = $91;
 }
 STACKTOP = sp;return;
}
function _font_renderer_msg($data,$msg,$output) {
 $data = $data|0;
 $msg = $msg|0;
 $output = $output|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $cur = 0, $handle = 0, $i = 0, $len = 0;
 var $off_x = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $msg;
 $2 = $output;
 $3 = $0;
 $handle = $3;
 $4 = $2;
 HEAP32[$4>>2] = 0;
 $cur = 0;
 $5 = $1;
 $6 = (_strlen($5)|0);
 $len = $6;
 $off_x = 0;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $len;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   label = 8;
   break;
  }
  $10 = (_calloc(1,52)|0);
  $tmp = $10;
  $11 = $tmp;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $i;
  $14 = $1;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = $handle;
  $19 = ((($18)) + 4|0);
  $20 = (($19) + ($17<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $tmp;
  HEAP32[$22>>2] = $21;
  $23 = $handle;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24*5)|0;
  $26 = $tmp;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = $25;
  $28 = $handle;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29*10)|0;
  $31 = $tmp;
  $32 = ((($31)) + 8|0);
  HEAP32[$32>>2] = $30;
  $33 = $tmp;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $tmp;
  $37 = ((($36)) + 12|0);
  HEAP32[$37>>2] = $35;
  $38 = $tmp;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $tmp;
  $42 = ((($41)) + 32|0);
  HEAP32[$42>>2] = $40;
  $43 = $tmp;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $tmp;
  $47 = ((($46)) + 36|0);
  HEAP32[$47>>2] = $45;
  $48 = $tmp;
  $49 = ((($48)) + 40|0);
  HEAP32[$49>>2] = 0;
  $50 = $tmp;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $tmp;
  $54 = ((($53)) + 44|0);
  HEAP32[$54>>2] = $52;
  $55 = $off_x;
  $56 = $tmp;
  $57 = ((($56)) + 24|0);
  HEAP32[$57>>2] = $55;
  $58 = $tmp;
  $59 = ((($58)) + 28|0);
  HEAP32[$59>>2] = 0;
  $60 = $tmp;
  $61 = ((($60)) + 48|0);
  HEAP32[$61>>2] = 0;
  $62 = $i;
  $63 = ($62|0)==(0);
  $64 = $tmp;
  if ($63) {
   $65 = $2;
   HEAP32[$65>>2] = $64;
  } else {
   $66 = $cur;
   $67 = ((($66)) + 48|0);
   HEAP32[$67>>2] = $64;
  }
  $68 = $tmp;
  $cur = $68;
  $69 = $handle;
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70*6)|0;
  $72 = $off_x;
  $73 = (($72) + ($71))|0;
  $off_x = $73;
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _font_renderer_free_output($data,$output) {
 $data = $data|0;
 $output = $output|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $itr = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $output;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $itr = $3;
 $tmp = 0;
 while(1) {
  $4 = $itr;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $itr;
  $tmp = $6;
  $7 = $itr;
  $8 = ((($7)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  $itr = $9;
  $10 = $tmp;
  _free($10);
 }
 $11 = $1;
 HEAP32[$11>>2] = 0;
 STACKTOP = sp;return;
}
function _font_renderer_free($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $handle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $handle = $1;
 $2 = $handle;
 $3 = ((($2)) + 1028|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $handle;
 _free($5);
 STACKTOP = sp;return;
}
function _font_renderer_get_default_font() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (773086|0);
}
function _texture_image_load_argb_shift($path,$out_img,$a_shift,$r_shift,$g_shift,$b_shift) {
 $path = $path|0;
 $out_img = $out_img|0;
 $a_shift = $a_shift|0;
 $r_shift = $r_shift|0;
 $g_shift = $g_shift|0;
 $b_shift = $b_shift|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $col = 0, $g = 0, $i = 0, $num_pixels = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $pixels = 0, $r = 0, $ret = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 49|0;
 $1 = $path;
 $2 = $out_img;
 $3 = $a_shift;
 $4 = $r_shift;
 $5 = $g_shift;
 $6 = $b_shift;
 $7 = $1;
 $8 = (_strstr($7,765064)|0);
 $9 = ($8|0)!=(0|0);
 $10 = $1;
 if ($9) {
  $11 = $2;
  $12 = $3;
  $13 = $4;
  $14 = $5;
  $15 = $6;
  $16 = (_texture_image_load_tga_shift($10,$11,$12,$13,$14,$15)|0);
  $$expand_i1_val = $16&1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $101 = $$pre_trunc&1;
  STACKTOP = sp;return ($101|0);
 }
 $17 = (_strstr($10,765069)|0);
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $$expand_i1_val11 = 0;
  HEAP8[$0>>0] = $$expand_i1_val11;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $101 = $$pre_trunc&1;
  STACKTOP = sp;return ($101|0);
 }
 $19 = HEAP8[102648>>0]|0;
 $20 = $19&1;
 if ($20) {
  $21 = HEAP32[(259664)>>2]|0;
  $22 = ($21|0)!=(0|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = HEAP32[544648>>2]|0;
  $25 = $22 ? $23 : $24;
  (_fprintf($25,765074,$vararg_buffer)|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  (_fflush($30)|0);
 }
 $31 = $1;
 $32 = $2;
 $33 = ((($32)) + 8|0);
 $34 = $2;
 $35 = $2;
 $36 = ((($35)) + 4|0);
 $37 = (_rpng_load_image_argb($31,$33,$34,$36)|0);
 $38 = $37&1;
 $ret = $38;
 $39 = $ret;
 $40 = $39&1;
 if (!($40)) {
  $$expand_i1_val7 = 0;
  HEAP8[$0>>0] = $$expand_i1_val7;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $101 = $$pre_trunc&1;
  STACKTOP = sp;return ($101|0);
 }
 $41 = $3;
 $42 = ($41|0)!=(24);
 $43 = $4;
 $44 = ($43|0)!=(16);
 $or$cond = $42 | $44;
 $45 = $5;
 $46 = ($45|0)!=(8);
 $or$cond3 = $or$cond | $46;
 $47 = $6;
 $48 = ($47|0)!=(0);
 $or$cond5 = $or$cond3 | $48;
 L16: do {
  if ($or$cond5) {
   $49 = $2;
   $50 = HEAP32[$49>>2]|0;
   $51 = $2;
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = Math_imul($50, $53)|0;
   $num_pixels = $54;
   $55 = $2;
   $56 = ((($55)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $pixels = $57;
   $i = 0;
   while(1) {
    $58 = $i;
    $59 = $num_pixels;
    $60 = ($58>>>0)<($59>>>0);
    if (!($60)) {
     break L16;
    }
    $61 = $i;
    $62 = $pixels;
    $63 = (($62) + ($61<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $col = $64;
    $65 = $col;
    $66 = $65 >>> 24;
    $67 = $66&255;
    $a = $67;
    $68 = $col;
    $69 = $68 >>> 16;
    $70 = $69&255;
    $r = $70;
    $71 = $col;
    $72 = $71 >>> 8;
    $73 = $72&255;
    $g = $73;
    $74 = $col;
    $75 = $74 >>> 0;
    $76 = $75&255;
    $b = $76;
    $77 = $a;
    $78 = $77&255;
    $79 = $3;
    $80 = $78 << $79;
    $81 = $r;
    $82 = $81&255;
    $83 = $4;
    $84 = $82 << $83;
    $85 = $80 | $84;
    $86 = $g;
    $87 = $86&255;
    $88 = $5;
    $89 = $87 << $88;
    $90 = $85 | $89;
    $91 = $b;
    $92 = $91&255;
    $93 = $6;
    $94 = $92 << $93;
    $95 = $90 | $94;
    $96 = $i;
    $97 = $pixels;
    $98 = (($97) + ($96<<2)|0);
    HEAP32[$98>>2] = $95;
    $99 = $i;
    $100 = (($99) + 1)|0;
    $i = $100;
   }
  }
 } while(0);
 $$expand_i1_val9 = 1;
 HEAP8[$0>>0] = $$expand_i1_val9;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $101 = $$pre_trunc&1;
 STACKTOP = sp;return ($101|0);
}
function _texture_image_load($path,$out_img) {
 $path = $path|0;
 $out_img = $out_img|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $path;
 $2 = $out_img;
 $3 = HEAP8[(188)>>0]|0;
 $4 = $3&1;
 $5 = $1;
 $6 = $2;
 if ($4) {
  $7 = (_texture_image_load_argb_shift($5,$6,24,0,8,16)|0);
  $$expand_i1_val = $7&1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $9 = $$pre_trunc&1;
  STACKTOP = sp;return ($9|0);
 } else {
  $8 = (_texture_image_load_argb_shift($5,$6,24,16,8,0)|0);
  $$expand_i1_val2 = $8&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $9 = $$pre_trunc&1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _texture_image_load_tga_shift($path,$out_img,$a_shift,$r_shift,$g_shift,$b_shift) {
 $path = $path|0;
 $out_img = $out_img|0;
 $a_shift = $a_shift|0;
 $r_shift = $r_shift|0;
 $g_shift = $g_shift|0;
 $b_shift = $b_shift|0;
 var $$expand_i1_val = 0, $$expand_i1_val13 = 0, $$expand_i1_val15 = 0, $$expand_i1_val17 = 0, $$expand_i1_val19 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a5 = 0, $b = 0, $b2 = 0, $bits = 0;
 var $buf = 0, $g = 0, $g3 = 0, $height = 0, $i = 0, $i1 = 0, $info = 0, $len = 0, $r = 0, $r4 = 0, $raw_buf = 0, $size = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 146|0;
 $raw_buf = sp + 112|0;
 $info = sp + 140|0;
 $1 = $path;
 $2 = $out_img;
 $3 = $a_shift;
 $4 = $r_shift;
 $5 = $g_shift;
 $6 = $b_shift;
 HEAP32[$raw_buf>>2] = 0;
 $7 = $1;
 $8 = (_read_file($7,$raw_buf)|0);
 $len = $8;
 $9 = $len;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = HEAP32[(259664)>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = HEAP32[544648>>2]|0;
  $15 = $12 ? $13 : $14;
  $16 = $1;
  HEAP32[$vararg_buffer>>2] = $16;
  (_fprintf($15,765113,$vararg_buffer)|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  (_fflush($21)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $228 = $$pre_trunc&1;
  STACKTOP = sp;return ($228|0);
 }
 $22 = HEAP32[$raw_buf>>2]|0;
 $buf = $22;
 $23 = $buf;
 $24 = ((($23)) + 2|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)!=(2);
 if ($27) {
  $28 = HEAP32[(259664)>>2]|0;
  $29 = ($28|0)!=(0|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = HEAP32[544648>>2]|0;
  $32 = $29 ? $30 : $31;
  (_fprintf($32,765161,$vararg_buffer1)|0);
  $33 = HEAP32[(259664)>>2]|0;
  $34 = ($33|0)!=(0|0);
  $35 = HEAP32[(259664)>>2]|0;
  $36 = HEAP32[544648>>2]|0;
  $37 = $34 ? $35 : $36;
  (_fflush($37)|0);
  $38 = $buf;
  _free($38);
  $$expand_i1_val13 = 0;
  HEAP8[$0>>0] = $$expand_i1_val13;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $228 = $$pre_trunc&1;
  STACKTOP = sp;return ($228|0);
 }
 $width = 0;
 $height = 0;
 $39 = $buf;
 $40 = ((($39)) + 12|0);
 ;HEAP8[$info>>0]=HEAP8[$40>>0]|0;HEAP8[$info+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$info+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$info+3>>0]=HEAP8[$40+3>>0]|0;HEAP8[$info+4>>0]=HEAP8[$40+4>>0]|0;HEAP8[$info+5>>0]=HEAP8[$40+5>>0]|0;
 $41 = HEAP8[$info>>0]|0;
 $42 = $41&255;
 $43 = ((($info)) + 1|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $45<<8;
 $47 = (($42) + ($46))|0;
 $width = $47;
 $48 = ((($info)) + 2|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = ((($info)) + 3|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = $53<<8;
 $55 = (($50) + ($54))|0;
 $height = $55;
 $56 = ((($info)) + 4|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $bits = $58;
 $59 = HEAP8[102648>>0]|0;
 $60 = $59&1;
 if ($60) {
  $61 = HEAP32[(259664)>>2]|0;
  $62 = ($61|0)!=(0|0);
  $63 = HEAP32[(259664)>>2]|0;
  $64 = HEAP32[544648>>2]|0;
  $65 = $62 ? $63 : $64;
  $66 = $width;
  $67 = $height;
  $68 = $bits;
  HEAP32[$vararg_buffer3>>2] = $66;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $67;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $68;
  (_fprintf($65,765218,$vararg_buffer3)|0);
  $69 = HEAP32[(259664)>>2]|0;
  $70 = ($69|0)!=(0|0);
  $71 = HEAP32[(259664)>>2]|0;
  $72 = HEAP32[544648>>2]|0;
  $73 = $70 ? $71 : $72;
  (_fflush($73)|0);
 }
 $74 = $width;
 $75 = $height;
 $76 = Math_imul($74, $75)|0;
 $77 = $76<<2;
 $size = $77;
 $78 = $size;
 $79 = (_malloc($78)|0);
 $80 = $2;
 $81 = ((($80)) + 8|0);
 HEAP32[$81>>2] = $79;
 $82 = $width;
 $83 = $2;
 HEAP32[$83>>2] = $82;
 $84 = $height;
 $85 = $2;
 $86 = ((($85)) + 4|0);
 HEAP32[$86>>2] = $84;
 $87 = $2;
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if (!($90)) {
  $91 = HEAP32[(259664)>>2]|0;
  $92 = ($91|0)!=(0|0);
  $93 = HEAP32[(259664)>>2]|0;
  $94 = HEAP32[544648>>2]|0;
  $95 = $92 ? $93 : $94;
  (_fprintf($95,765259,$vararg_buffer8)|0);
  $96 = HEAP32[(259664)>>2]|0;
  $97 = ($96|0)!=(0|0);
  $98 = HEAP32[(259664)>>2]|0;
  $99 = HEAP32[544648>>2]|0;
  $100 = $97 ? $98 : $99;
  (_fflush($100)|0);
  $101 = $buf;
  _free($101);
  $$expand_i1_val15 = 0;
  HEAP8[$0>>0] = $$expand_i1_val15;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $228 = $$pre_trunc&1;
  STACKTOP = sp;return ($228|0);
 }
 $102 = $buf;
 $103 = ((($102)) + 18|0);
 $tmp = $103;
 $104 = $bits;
 $105 = ($104|0)==(32);
 L16: do {
  if ($105) {
   $i = 0;
   while(1) {
    $106 = $i;
    $107 = $width;
    $108 = $height;
    $109 = Math_imul($107, $108)|0;
    $110 = ($106>>>0)<($109>>>0);
    if (!($110)) {
     break L16;
    }
    $111 = $i;
    $112 = $111<<2;
    $113 = (($112) + 0)|0;
    $114 = $tmp;
    $115 = (($114) + ($113)|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $b = $117;
    $118 = $i;
    $119 = $118<<2;
    $120 = (($119) + 1)|0;
    $121 = $tmp;
    $122 = (($121) + ($120)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $g = $124;
    $125 = $i;
    $126 = $125<<2;
    $127 = (($126) + 2)|0;
    $128 = $tmp;
    $129 = (($128) + ($127)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $r = $131;
    $132 = $i;
    $133 = $132<<2;
    $134 = (($133) + 3)|0;
    $135 = $tmp;
    $136 = (($135) + ($134)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $a = $138;
    $139 = $a;
    $140 = $3;
    $141 = $139 << $140;
    $142 = $r;
    $143 = $4;
    $144 = $142 << $143;
    $145 = $141 | $144;
    $146 = $g;
    $147 = $5;
    $148 = $146 << $147;
    $149 = $145 | $148;
    $150 = $b;
    $151 = $6;
    $152 = $150 << $151;
    $153 = $149 | $152;
    $154 = $i;
    $155 = $2;
    $156 = ((($155)) + 8|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (($157) + ($154<<2)|0);
    HEAP32[$158>>2] = $153;
    $159 = $i;
    $160 = (($159) + 1)|0;
    $i = $160;
   }
  } else {
   $161 = $bits;
   $162 = ($161|0)==(24);
   if (!($162)) {
    $211 = HEAP32[(259664)>>2]|0;
    $212 = ($211|0)!=(0|0);
    $213 = HEAP32[(259664)>>2]|0;
    $214 = HEAP32[544648>>2]|0;
    $215 = $212 ? $213 : $214;
    (_fprintf($215,765312,$vararg_buffer10)|0);
    $216 = HEAP32[(259664)>>2]|0;
    $217 = ($216|0)!=(0|0);
    $218 = HEAP32[(259664)>>2]|0;
    $219 = HEAP32[544648>>2]|0;
    $220 = $217 ? $218 : $219;
    (_fflush($220)|0);
    $221 = $buf;
    _free($221);
    $222 = $2;
    $223 = ((($222)) + 8|0);
    $224 = HEAP32[$223>>2]|0;
    _free($224);
    $225 = $2;
    $226 = ((($225)) + 8|0);
    HEAP32[$226>>2] = 0;
    $$expand_i1_val17 = 0;
    HEAP8[$0>>0] = $$expand_i1_val17;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $228 = $$pre_trunc&1;
    STACKTOP = sp;return ($228|0);
   }
   $i1 = 0;
   while(1) {
    $163 = $i1;
    $164 = $width;
    $165 = $height;
    $166 = Math_imul($164, $165)|0;
    $167 = ($163>>>0)<($166>>>0);
    if (!($167)) {
     break L16;
    }
    $168 = $i1;
    $169 = ($168*3)|0;
    $170 = (($169) + 0)|0;
    $171 = $tmp;
    $172 = (($171) + ($170)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $b2 = $174;
    $175 = $i1;
    $176 = ($175*3)|0;
    $177 = (($176) + 1)|0;
    $178 = $tmp;
    $179 = (($178) + ($177)|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = $180&255;
    $g3 = $181;
    $182 = $i1;
    $183 = ($182*3)|0;
    $184 = (($183) + 2)|0;
    $185 = $tmp;
    $186 = (($185) + ($184)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $r4 = $188;
    $a5 = 255;
    $189 = $a5;
    $190 = $3;
    $191 = $189 << $190;
    $192 = $r4;
    $193 = $4;
    $194 = $192 << $193;
    $195 = $191 | $194;
    $196 = $g3;
    $197 = $5;
    $198 = $196 << $197;
    $199 = $195 | $198;
    $200 = $b2;
    $201 = $6;
    $202 = $200 << $201;
    $203 = $199 | $202;
    $204 = $i1;
    $205 = $2;
    $206 = ((($205)) + 8|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = (($207) + ($204<<2)|0);
    HEAP32[$208>>2] = $203;
    $209 = $i1;
    $210 = (($209) + 1)|0;
    $i1 = $210;
   }
  }
 } while(0);
 $227 = $buf;
 _free($227);
 $$expand_i1_val19 = 1;
 HEAP8[$0>>0] = $$expand_i1_val19;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $228 = $$pre_trunc&1;
 STACKTOP = sp;return ($228|0);
}
function _rarch_resampler_realloc($re,$backend,$ident,$bw_ratio) {
 $re = $re|0;
 $backend = $backend|0;
 $ident = $ident|0;
 $bw_ratio = +$bw_ratio;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $re;
 $2 = $backend;
 $3 = $ident;
 $4 = $bw_ratio;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_vi[$14 & 1023]($16);
  }
 }
 $17 = $2;
 HEAP32[$17>>2] = 270084;
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $4;
 $22 = (FUNCTION_TABLE_id[$20 & 31]($21)|0);
 $23 = $1;
 HEAP32[$23>>2] = $22;
 $24 = $1;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $27 = $2;
  HEAP32[$27>>2] = 0;
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _resampler_sinc_new($bandwidth_mod) {
 $bandwidth_mod = +$bandwidth_mod;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cutoff = 0.0, $elems = 0, $phase_elems = 0, $re = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $1 = $bandwidth_mod;
 $2 = (_calloc(1,28)|0);
 $re = $2;
 $3 = $re;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $5 = $re;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;
 $6 = $re;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 16;
 $cutoff = 0.82499999999999996;
 $8 = $1;
 $9 = $8 < 1.0;
 if ($9) {
  $10 = $1;
  $11 = $cutoff;
  $12 = $11 * $10;
  $cutoff = $12;
  $13 = $re;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (+($15>>>0));
  $17 = $1;
  $18 = $16 / $17;
  $19 = (+Math_ceil((+$18)));
  $20 = (~~(($19))>>>0);
  $21 = $re;
  $22 = ((($21)) + 12|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $re;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 3)|0;
 $27 = $26 & -4;
 $28 = $re;
 $29 = ((($28)) + 12|0);
 HEAP32[$29>>2] = $27;
 $30 = $re;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32<<8;
 $phase_elems = $33;
 $34 = $phase_elems;
 $35 = $34<<1;
 $phase_elems = $35;
 $36 = $phase_elems;
 $37 = $re;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39<<2;
 $41 = (($36) + ($40))|0;
 $elems = $41;
 $42 = $elems;
 $43 = $42<<2;
 $44 = (_aligned_alloc__(128,$43)|0);
 $45 = $re;
 $46 = ((($45)) + 24|0);
 HEAP32[$46>>2] = $44;
 $47 = $re;
 $48 = ((($47)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0|0);
 $51 = $re;
 if (!($50)) {
  _resampler_sinc_free($51);
  $0 = 0;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $52 = ((($51)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $re;
 HEAP32[$54>>2] = $53;
 $55 = $re;
 $56 = ((($55)) + 24|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $phase_elems;
 $59 = (($57) + ($58<<2)|0);
 $60 = $re;
 $61 = ((($60)) + 4|0);
 HEAP32[$61>>2] = $59;
 $62 = $re;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $re;
 $66 = ((($65)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67<<1;
 $69 = (($64) + ($68<<2)|0);
 $70 = $re;
 $71 = ((($70)) + 8|0);
 HEAP32[$71>>2] = $69;
 $72 = $re;
 $73 = $cutoff;
 $74 = $re;
 $75 = HEAP32[$74>>2]|0;
 $76 = $re;
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 _init_sinc_table($72,$73,$75,256,$78,1);
 $79 = HEAP8[102648>>0]|0;
 $80 = $79&1;
 if ($80) {
  $81 = HEAP32[(259664)>>2]|0;
  $82 = ($81|0)!=(0|0);
  $83 = HEAP32[(259664)>>2]|0;
  $84 = HEAP32[544648>>2]|0;
  $85 = $82 ? $83 : $84;
  (_fprintf($85,765406,$vararg_buffer)|0);
  $86 = HEAP32[(259664)>>2]|0;
  $87 = ($86|0)!=(0|0);
  $88 = HEAP32[(259664)>>2]|0;
  $89 = HEAP32[544648>>2]|0;
  $90 = $87 ? $88 : $89;
  (_fflush($90)|0);
 }
 $91 = HEAP8[102648>>0]|0;
 $92 = $91&1;
 if ($92) {
  $93 = HEAP32[(259664)>>2]|0;
  $94 = ($93|0)!=(0|0);
  $95 = HEAP32[(259664)>>2]|0;
  $96 = HEAP32[544648>>2]|0;
  $97 = $94 ? $95 : $96;
  $98 = $re;
  $99 = ((($98)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  HEAP32[$vararg_buffer1>>2] = 8;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $100;
  (_fprintf($97,765437,$vararg_buffer1)|0);
  $101 = HEAP32[(259664)>>2]|0;
  $102 = ($101|0)!=(0|0);
  $103 = HEAP32[(259664)>>2]|0;
  $104 = HEAP32[544648>>2]|0;
  $105 = $102 ? $103 : $104;
  (_fflush($105)|0);
 }
 $106 = $re;
 $0 = $106;
 $107 = $0;
 STACKTOP = sp;return ($107|0);
}
function _aligned_alloc__($boundary,$size) {
 $boundary = $boundary|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $place = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $boundary;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = (($3) + ($4))|0;
 $6 = (($5) + 4)|0;
 $7 = (_malloc($6)|0);
 $ptr = $7;
 $8 = $ptr;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $ptr;
  $11 = $10;
  $12 = (($11) + 4)|0;
  $13 = $1;
  $14 = (($12) + ($13))|0;
  $15 = $1;
  $16 = (($15) - 1)|0;
  $17 = $16 ^ -1;
  $18 = $14 & $17;
  $addr = $18;
  $19 = $addr;
  $20 = $19;
  $place = $20;
  $21 = $ptr;
  $22 = $place;
  $23 = ((($22)) + -4|0);
  HEAP32[$23>>2] = $21;
  $24 = $addr;
  $25 = $24;
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _init_sinc_table($resamp,$cutoff,$phase_table,$phases,$taps,$calculate_delta) {
 $resamp = $resamp|0;
 $cutoff = +$cutoff;
 $phase_table = $phase_table|0;
 $phases = $phases|0;
 $taps = $taps|0;
 $calculate_delta = $calculate_delta|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $delta = 0.0, $delta7 = 0.0, $i = 0, $j = 0, $j1 = 0, $j2 = 0, $n = 0, $n3 = 0, $p = 0;
 var $phase = 0, $sidelobes = 0.0, $sinc_phase = 0.0, $sinc_phase5 = 0.0, $stride = 0, $val = 0.0, $val6 = 0.0, $window_mod = 0.0, $window_phase = 0.0, $window_phase4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $resamp;
 $1 = $cutoff;
 $2 = $phase_table;
 $3 = $phases;
 $4 = $taps;
 $6 = $calculate_delta&1;
 $5 = $6;
 $7 = (+_window_function(0.0));
 $window_mod = $7;
 $8 = $5;
 $9 = $8&1;
 $10 = $9 ? 2 : 1;
 $stride = $10;
 $11 = $4;
 $12 = (+($11|0));
 $13 = $12 / 2.0;
 $sidelobes = $13;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = $3;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $j = 0;
  while(1) {
   $17 = $j;
   $18 = $4;
   $19 = ($17|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = $j;
   $21 = $3;
   $22 = Math_imul($20, $21)|0;
   $23 = $i;
   $24 = (($22) + ($23))|0;
   $n = $24;
   $25 = $n;
   $26 = (+($25|0));
   $27 = $3;
   $28 = $4;
   $29 = Math_imul($27, $28)|0;
   $30 = (+($29|0));
   $31 = $26 / $30;
   $window_phase = $31;
   $32 = $window_phase;
   $33 = 2.0 * $32;
   $34 = $33 - 1.0;
   $window_phase = $34;
   $35 = $sidelobes;
   $36 = $window_phase;
   $37 = $35 * $36;
   $sinc_phase = $37;
   $38 = $1;
   $39 = $sinc_phase;
   $40 = 3.1415926535897931 * $39;
   $41 = $1;
   $42 = $40 * $41;
   $43 = (+_sinc($42));
   $44 = $38 * $43;
   $45 = $window_phase;
   $46 = (+_window_function($45));
   $47 = $44 * $46;
   $48 = $window_mod;
   $49 = $47 / $48;
   $50 = $49;
   $val = $50;
   $51 = $val;
   $52 = $i;
   $53 = $stride;
   $54 = Math_imul($52, $53)|0;
   $55 = $4;
   $56 = Math_imul($54, $55)|0;
   $57 = $j;
   $58 = (($56) + ($57))|0;
   $59 = $2;
   $60 = (($59) + ($58<<2)|0);
   HEAPF32[$60>>2] = $51;
   $61 = $j;
   $62 = (($61) + 1)|0;
   $j = $62;
  }
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $65 = $5;
 $66 = $65&1;
 if (!($66)) {
  STACKTOP = sp;return;
 }
 $p = 0;
 while(1) {
  $67 = $p;
  $68 = $3;
  $69 = (($68) - 1)|0;
  $70 = ($67|0)<($69|0);
  if (!($70)) {
   break;
  }
  $j1 = 0;
  while(1) {
   $71 = $j1;
   $72 = $4;
   $73 = ($71|0)<($72|0);
   $74 = $p;
   $75 = (($74) + 1)|0;
   if (!($73)) {
    break;
   }
   $76 = $stride;
   $77 = Math_imul($75, $76)|0;
   $78 = $4;
   $79 = Math_imul($77, $78)|0;
   $80 = $j1;
   $81 = (($79) + ($80))|0;
   $82 = $2;
   $83 = (($82) + ($81<<2)|0);
   $84 = +HEAPF32[$83>>2];
   $85 = $p;
   $86 = $stride;
   $87 = Math_imul($85, $86)|0;
   $88 = $4;
   $89 = Math_imul($87, $88)|0;
   $90 = $j1;
   $91 = (($89) + ($90))|0;
   $92 = $2;
   $93 = (($92) + ($91<<2)|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $84 - $94;
   $delta = $95;
   $96 = $delta;
   $97 = $p;
   $98 = $stride;
   $99 = Math_imul($97, $98)|0;
   $100 = (($99) + 1)|0;
   $101 = $4;
   $102 = Math_imul($100, $101)|0;
   $103 = $j1;
   $104 = (($102) + ($103))|0;
   $105 = $2;
   $106 = (($105) + ($104<<2)|0);
   HEAPF32[$106>>2] = $96;
   $107 = $j1;
   $108 = (($107) + 1)|0;
   $j1 = $108;
  }
  $p = $75;
 }
 $109 = $3;
 $110 = (($109) - 1)|0;
 $phase = $110;
 $j2 = 0;
 while(1) {
  $111 = $j2;
  $112 = $4;
  $113 = ($111|0)<($112|0);
  if (!($113)) {
   break;
  }
  $114 = $j2;
  $115 = $3;
  $116 = Math_imul($114, $115)|0;
  $117 = $phase;
  $118 = (($117) + 1)|0;
  $119 = (($116) + ($118))|0;
  $n3 = $119;
  $120 = $n3;
  $121 = (+($120|0));
  $122 = $3;
  $123 = $4;
  $124 = Math_imul($122, $123)|0;
  $125 = (+($124|0));
  $126 = $121 / $125;
  $window_phase4 = $126;
  $127 = $window_phase4;
  $128 = 2.0 * $127;
  $129 = $128 - 1.0;
  $window_phase4 = $129;
  $130 = $sidelobes;
  $131 = $window_phase4;
  $132 = $130 * $131;
  $sinc_phase5 = $132;
  $133 = $1;
  $134 = $sinc_phase5;
  $135 = 3.1415926535897931 * $134;
  $136 = $1;
  $137 = $135 * $136;
  $138 = (+_sinc($137));
  $139 = $133 * $138;
  $140 = $window_phase4;
  $141 = (+_window_function($140));
  $142 = $139 * $141;
  $143 = $window_mod;
  $144 = $142 / $143;
  $145 = $144;
  $val6 = $145;
  $146 = $val6;
  $147 = $phase;
  $148 = $stride;
  $149 = Math_imul($147, $148)|0;
  $150 = $4;
  $151 = Math_imul($149, $150)|0;
  $152 = $j2;
  $153 = (($151) + ($152))|0;
  $154 = $2;
  $155 = (($154) + ($153<<2)|0);
  $156 = +HEAPF32[$155>>2];
  $157 = $146 - $156;
  $delta7 = $157;
  $158 = $delta7;
  $159 = $phase;
  $160 = $stride;
  $161 = Math_imul($159, $160)|0;
  $162 = (($161) + 1)|0;
  $163 = $4;
  $164 = Math_imul($162, $163)|0;
  $165 = $j2;
  $166 = (($164) + ($165))|0;
  $167 = $2;
  $168 = (($167) + ($166<<2)|0);
  HEAPF32[$168>>2] = $158;
  $169 = $j2;
  $170 = (($169) + 1)|0;
  $j2 = $170;
 }
 STACKTOP = sp;return;
}
function _window_function($index) {
 $index = +$index;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $0;
 $2 = $0;
 $3 = $1 * $2;
 $4 = 1.0 - $3;
 $5 = (+Math_sqrt((+$4)));
 $6 = 5.5 * $5;
 $7 = (+_besseli0($6));
 STACKTOP = sp;return (+$7);
}
function _besseli0($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $factorial = 0.0, $factorial_mult = 0.0, $i = 0, $sum = 0.0, $two_div_pow = 0.0, $x_pow = 0.0, $x_sqr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $sum = 0.0;
 $factorial = 1.0;
 $factorial_mult = 0.0;
 $x_pow = 1.0;
 $two_div_pow = 1.0;
 $1 = $0;
 $2 = $0;
 $3 = $1 * $2;
 $x_sqr = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4>>>0)<(18);
  if (!($5)) {
   break;
  }
  $6 = $x_pow;
  $7 = $two_div_pow;
  $8 = $6 * $7;
  $9 = $factorial;
  $10 = $factorial;
  $11 = $9 * $10;
  $12 = $8 / $11;
  $13 = $sum;
  $14 = $13 + $12;
  $sum = $14;
  $15 = $factorial_mult;
  $16 = $15 + 1.0;
  $factorial_mult = $16;
  $17 = $x_sqr;
  $18 = $x_pow;
  $19 = $18 * $17;
  $x_pow = $19;
  $20 = $two_div_pow;
  $21 = $20 * 0.25;
  $two_div_pow = $21;
  $22 = $factorial_mult;
  $23 = $factorial;
  $24 = $23 * $22;
  $factorial = $24;
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 $27 = $sum;
 STACKTOP = sp;return (+$27);
}
function _sinc($val) {
 $val = +$val;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $val;
 $2 = $1;
 $3 = (+Math_abs((+$2)));
 $4 = $3 < 1.0000000000000001E-5;
 if ($4) {
  $0 = 1.0;
  $9 = $0;
  STACKTOP = sp;return (+$9);
 } else {
  $5 = $1;
  $6 = (+Math_sin((+$5)));
  $7 = $1;
  $8 = $6 / $7;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return (+$9);
 }
 return +(0.0);
}
function _resampler_sinc_process($re_,$data) {
 $re_ = $re_|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $frames = 0, $input = 0, $out_frames = 0, $output = 0, $ratio = 0, $re = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $re_;
 $1 = $data;
 $2 = $0;
 $re = $2;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = +HEAPF64[$4>>3];
 $6 = 16777216.0 / $5;
 $7 = (~~(($6))>>>0);
 $ratio = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $input = $9;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $output = $12;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $frames = $15;
 $out_frames = 0;
 L1: while(1) {
  $16 = $frames;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  while(1) {
   $18 = $frames;
   $19 = ($18|0)!=(0);
   if (!($19)) {
    break;
   }
   $20 = $re;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22>>>0)>=(16777216);
   if (!($23)) {
    break;
   }
   $24 = $re;
   $25 = ((($24)) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)!=(0);
   if (!($27)) {
    $28 = $re;
    $29 = ((($28)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $re;
    $32 = ((($31)) + 16|0);
    HEAP32[$32>>2] = $30;
   }
   $33 = $re;
   $34 = ((($33)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + -1)|0;
   HEAP32[$34>>2] = $36;
   $37 = $input;
   $38 = ((($37)) + 4|0);
   $input = $38;
   $39 = +HEAPF32[$37>>2];
   $40 = $re;
   $41 = ((($40)) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $re;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42<<2)|0);
   HEAPF32[$46>>2] = $39;
   $47 = $re;
   $48 = ((($47)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $re;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($49) + ($52))|0;
   $54 = $re;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($53<<2)|0);
   HEAPF32[$57>>2] = $39;
   $58 = $input;
   $59 = ((($58)) + 4|0);
   $input = $59;
   $60 = +HEAPF32[$58>>2];
   $61 = $re;
   $62 = ((($61)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $re;
   $65 = ((($64)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($66) + ($63<<2)|0);
   HEAPF32[$67>>2] = $60;
   $68 = $re;
   $69 = ((($68)) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $re;
   $72 = ((($71)) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($70) + ($73))|0;
   $75 = $re;
   $76 = ((($75)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + ($74<<2)|0);
   HEAPF32[$78>>2] = $60;
   $79 = $re;
   $80 = ((($79)) + 20|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) - 16777216)|0;
   HEAP32[$80>>2] = $82;
   $83 = $frames;
   $84 = (($83) + -1)|0;
   $frames = $84;
  }
  while(1) {
   $85 = $re;
   $86 = ((($85)) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87>>>0)<(16777216);
   if (!($88)) {
    continue L1;
   }
   $89 = $re;
   $90 = $output;
   _process_sinc_C($89,$90);
   $91 = $output;
   $92 = ((($91)) + 8|0);
   $output = $92;
   $93 = $out_frames;
   $94 = (($93) + 1)|0;
   $out_frames = $94;
   $95 = $ratio;
   $96 = $re;
   $97 = ((($96)) + 20|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($95))|0;
   HEAP32[$97>>2] = $99;
  }
 }
 $100 = $out_frames;
 $101 = $1;
 $102 = ((($101)) + 12|0);
 HEAP32[$102>>2] = $100;
 STACKTOP = sp;return;
}
function _process_sinc_C($resamp,$out_buffer) {
 $resamp = $resamp|0;
 $out_buffer = $out_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $buffer_l = 0, $buffer_r = 0, $delta = 0.0, $delta_table = 0;
 var $i = 0, $phase = 0, $phase_table = 0, $sinc_val = 0.0, $sum_l = 0.0, $sum_r = 0.0, $taps = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $resamp;
 $1 = $out_buffer;
 $sum_l = 0.0;
 $sum_r = 0.0;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + ($7<<2)|0);
 $buffer_l = $8;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14<<2)|0);
 $buffer_r = $15;
 $16 = $0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $taps = $18;
 $19 = $0;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> 16;
 $phase = $22;
 $23 = $0;
 $24 = HEAP32[$23>>2]|0;
 $25 = $phase;
 $26 = $taps;
 $27 = Math_imul($25, $26)|0;
 $28 = $27<<1;
 $29 = (($24) + ($28<<2)|0);
 $phase_table = $29;
 $30 = $phase_table;
 $31 = $taps;
 $32 = (($30) + ($31<<2)|0);
 $delta_table = $32;
 $33 = $0;
 $34 = ((($33)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 65535;
 $37 = (+($36>>>0));
 $38 = $37 * 1.52587890625E-5;
 $delta = $38;
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = $taps;
  $41 = ($39>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $i;
  $43 = $phase_table;
  $44 = (($43) + ($42<<2)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $i;
  $47 = $delta_table;
  $48 = (($47) + ($46<<2)|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $delta;
  $51 = $49 * $50;
  $52 = $45 + $51;
  $sinc_val = $52;
  $53 = $i;
  $54 = $buffer_l;
  $55 = (($54) + ($53<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $sinc_val;
  $58 = $56 * $57;
  $59 = $sum_l;
  $60 = $59 + $58;
  $sum_l = $60;
  $61 = $i;
  $62 = $buffer_r;
  $63 = (($62) + ($61<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $sinc_val;
  $66 = $64 * $65;
  $67 = $sum_r;
  $68 = $67 + $66;
  $sum_r = $68;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $71 = $sum_l;
 $72 = $1;
 HEAPF32[$72>>2] = $71;
 $73 = $sum_r;
 $74 = $1;
 $75 = ((($74)) + 4|0);
 HEAPF32[$75>>2] = $73;
 STACKTOP = sp;return;
}
function _resampler_sinc_free($re) {
 $re = $re|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $resampler = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $re;
 $1 = $0;
 $resampler = $1;
 $2 = $resampler;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $resampler;
  $5 = ((($4)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  _aligned_free__($6);
 }
 $7 = $resampler;
 _free($7);
 STACKTOP = sp;return;
}
function _aligned_free__($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + -4|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function _null_audio_init($device,$rate,$latency) {
 $device = $device|0;
 $rate = $rate|0;
 $latency = $latency|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $device;
 $1 = $rate;
 $2 = $latency;
 STACKTOP = sp;return ((-1)|0);
}
function _null_audio_write($data,$buf,$size) {
 $data = $data|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $buf;
 $2 = $size;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function _null_audio_stop($data) {
 $data = $data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 STACKTOP = sp;return 1;
}
function _null_audio_start($data) {
 $data = $data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 STACKTOP = sp;return 1;
}
function _null_audio_set_nonblock_state($data,$state) {
 $data = $data|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $2 = $state&1;
 $1 = $2;
 STACKTOP = sp;return;
}
function _null_audio_free($data) {
 $data = $data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 STACKTOP = sp;return;
}
function _null_audio_use_float($data) {
 $data = $data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 STACKTOP = sp;return 1;
}
function _rarch_get_time_usec() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $tv = sp + 8|0;
 $1 = (_clock_gettime(1,($tv|0))|0);
 $2 = ($1|0)<(0);
 if ($2) {
  $3 = $0;
  $4 = $3;
  HEAP32[$4>>2] = 0;
  $5 = (($3) + 4)|0;
  $6 = $5;
  HEAP32[$6>>2] = 0;
 } else {
  $7 = HEAP32[$tv>>2]|0;
  $8 = ($7|0)<(0);
  $9 = $8 << 31 >> 31;
  $10 = (___muldi3(($7|0),($9|0),1000000,0)|0);
  $11 = tempRet0;
  $12 = ((($tv)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 500)|0;
  $15 = (($14|0) / 1000)&-1;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (_i64Add(($10|0),($11|0),($15|0),($17|0))|0);
  $19 = tempRet0;
  $20 = $0;
  $21 = $20;
  HEAP32[$21>>2] = $18;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
 }
 $24 = $0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 tempRet0 = ($29);
 STACKTOP = sp;return ($26|0);
}
function _rarch_get_cpu_features($cpu) {
 $cpu = $cpu|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $0;
 ;HEAP32[$1>>2]=0|0;
 STACKTOP = sp;return;
}
function _shader_manager_init($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cgp_path = 0, $conf = 0, $ext = 0, $shader_dir = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cgp_path = sp + 16|0;
 $0 = $rgui;
 $conf = 0;
 $1 = (_path_get_extension((344))|0);
 $ext = $1;
 $2 = $ext;
 $3 = (_strcmp($2,774923)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = $ext;
  $6 = (_strcmp($5,765492)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $18 = $ext;
   $19 = (_strcmp($18,774918)|0);
   $20 = ($19|0)==(0);
   if (!($20)) {
    $21 = $ext;
    $22 = (_strcmp($21,765496)|0);
    $23 = ($22|0)==(0);
    if (!($23)) {
     $30 = HEAP8[(8545)>>0]|0;
     $31 = $30 << 24 >> 24;
     $32 = ($31|0)!=(0);
     $33 = $32 ? (8545) : (94412);
     $shader_dir = $33;
     $34 = $shader_dir;
     _fill_pathname_join($cgp_path,$34,769634,4096);
     $35 = (_config_file_new($cgp_path)|0);
     $conf = $35;
     $36 = $conf;
     $37 = ($36|0)!=(0|0);
     if (!($37)) {
      $38 = $shader_dir;
      _fill_pathname_join($cgp_path,$38,769645,4096);
      $39 = (_config_file_new($cgp_path)|0);
      $conf = $39;
     }
     $40 = $conf;
     $41 = ($40|0)!=(0|0);
     if (!($41)) {
      STACKTOP = sp;return;
     }
     $42 = $conf;
     $43 = $0;
     $44 = ((($43)) + 4180|0);
     $45 = (_gfx_shader_read_conf_cgp($42,$44)|0);
     if ($45) {
      $46 = $0;
      $47 = ((($46)) + 4180|0);
      _gfx_shader_resolve_relative($47,$cgp_path);
     }
     $48 = $conf;
     _config_file_free($48);
     STACKTOP = sp;return;
    }
   }
   $24 = $0;
   $25 = ((($24)) + 4180|0);
   $26 = ((($25)) + 76|0);
   (_strlcpy_rarch__($26,(344),4096)|0);
   $27 = $0;
   $28 = ((($27)) + 4180|0);
   $29 = ((($28)) + 72|0);
   HEAP32[$29>>2] = 1;
   STACKTOP = sp;return;
  }
 }
 $8 = (_config_file_new((344))|0);
 $conf = $8;
 $9 = $conf;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $conf;
 $12 = $0;
 $13 = ((($12)) + 4180|0);
 $14 = (_gfx_shader_read_conf_cgp($11,$13)|0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 4180|0);
  _gfx_shader_resolve_relative($16,(344));
 }
 $17 = $conf;
 _config_file_free($17);
 STACKTOP = sp;return;
}
function _shader_manager_get_str($shader,$type_str,$type_str_size,$type) {
 $shader = $shader|0;
 $type_str = $type_str|0;
 $type_str_size = $type_str_size|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pass = 0, $scale = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $shader;
 $1 = $type_str;
 $2 = $type_str_size;
 $3 = $type;
 $4 = $3;
 $5 = ($4|0)==(29);
 if ($5) {
  $6 = $1;
  HEAP8[$6>>0] = 0;
  STACKTOP = sp;return;
 }
 $7 = $3;
 $8 = ($7|0)==(30);
 if ($8) {
  $9 = $1;
  $10 = $2;
  $11 = $0;
  $12 = ((($11)) + 72|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  (_snprintf($9,$10,768097,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $14 = $3;
 $15 = (($14) - 31)|0;
 $16 = (($15>>>0) / 3)&-1;
 $pass = $16;
 $17 = $3;
 $18 = (($17) - 31)|0;
 $19 = (($18>>>0) % 3)&-1;
 switch ($19|0) {
 case 0:  {
  $20 = $pass;
  $21 = $0;
  $22 = ((($21)) + 76|0);
  $23 = (($22) + (($20*4148)|0)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=(0);
  $26 = $1;
  if ($25) {
   $27 = $pass;
   $28 = $0;
   $29 = ((($28)) + 76|0);
   $30 = (($29) + (($27*4148)|0)|0);
   $31 = $2;
   _fill_pathname_base($26,$30,$31);
   STACKTOP = sp;return;
  } else {
   $32 = $2;
   (_strlcpy_rarch__($26,768139,$32)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  $33 = $pass;
  $34 = $0;
  $35 = ((($34)) + 76|0);
  $36 = (($35) + (($33*4148)|0)|0);
  $37 = ((($36)) + 4136|0);
  $38 = HEAP32[$37>>2]|0;
  switch ($38|0) {
  case 1:  {
   $39 = $1;
   $40 = $2;
   (_strlcpy_rarch__($39,768027,$40)|0);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $41 = $1;
   $42 = $2;
   (_strlcpy_rarch__($41,768034,$42)|0);
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   $43 = $1;
   $44 = $2;
   (_strlcpy_rarch__($43,765499,$44)|0);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 2:  {
  $45 = $pass;
  $46 = $0;
  $47 = ((($46)) + 76|0);
  $48 = (($47) + (($45*4148)|0)|0);
  $49 = ((($48)) + 4104|0);
  $50 = ((($49)) + 12|0);
  $51 = +HEAPF32[$50>>2];
  $52 = (~~(($51))>>>0);
  $scale = $52;
  $53 = $scale;
  $54 = ($53|0)!=(0);
  $55 = $1;
  $56 = $2;
  if ($54) {
   $57 = $scale;
   HEAP32[$vararg_buffer1>>2] = $57;
   (_snprintf($55,$56,765510,$vararg_buffer1)|0);
   STACKTOP = sp;return;
  } else {
   (_strlcpy_rarch__($55,765499,$56)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _rgui_list_push($userdata,$path,$type,$directory_ptr) {
 $userdata = $userdata|0;
 $path = $path|0;
 $type = $type|0;
 $directory_ptr = $directory_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $userdata;
 $1 = $path;
 $2 = $type;
 $3 = $directory_ptr;
 $4 = $0;
 $list = $4;
 $5 = $list;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $list;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $list;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9>>>0)>=($12>>>0);
 if ($13) {
  $14 = $list;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$15>>2] = $17;
  $18 = $list;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20<<1;
  HEAP32[$19>>2] = $21;
  $22 = $list;
  $23 = HEAP32[$22>>2]|0;
  $24 = $list;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26*12)|0;
  $28 = (_realloc($23,$27)|0);
  $29 = $list;
  HEAP32[$29>>2] = $28;
 }
 $30 = $1;
 $31 = (___strdup($30)|0);
 $32 = $list;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $list;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + (($34*12)|0)|0);
 HEAP32[$37>>2] = $31;
 $38 = $2;
 $39 = $list;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $list;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + (($41*12)|0)|0);
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = $38;
 $46 = $3;
 $47 = $list;
 $48 = ((($47)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $list;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + (($49*12)|0)|0);
 $53 = ((($52)) + 8|0);
 HEAP32[$53>>2] = $46;
 $54 = $list;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + 1)|0;
 HEAP32[$55>>2] = $57;
 STACKTOP = sp;return;
}
function _rgui_list_pop($list,$directory_ptr) {
 $list = $list|0;
 $directory_ptr = $directory_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $directory_ptr;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = $0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  HEAP32[$7>>2] = $9;
  $10 = $0;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + (($9*12)|0)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
 }
 $14 = $1;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + (($18*12)|0)|0);
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function _rgui_list_free($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = ((($2)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + (($6*12)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 $15 = $0;
 _free($15);
 STACKTOP = sp;return;
}
function _rgui_list_clear($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = ((($2)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + (($6*12)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = $0;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 0;
 STACKTOP = sp;return;
}
function _rgui_list_get_at_offset($list,$index,$path,$file_type) {
 $list = $list|0;
 $index = $index|0;
 $path = $path|0;
 $file_type = $file_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $index;
 $2 = $path;
 $3 = $file_type;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + (($6*12)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  HEAP32[$11>>2] = $10;
 }
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = $0;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($14*12)|0)|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function _rgui_list_get_last($list,$path,$file_type) {
 $list = $list|0;
 $path = $path|0;
 $file_type = $file_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $path;
 $2 = $file_type;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - 1)|0;
 $12 = $1;
 $13 = $2;
 _rgui_list_get_at_offset($7,$11,$12,$13);
 STACKTOP = sp;return;
}
function _menu_rom_history_push($path,$core_path,$core_name) {
 $path = $path|0;
 $core_path = $core_path|0;
 $core_name = $core_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $core_path;
 $2 = $core_name;
 $3 = HEAP32[270140>>2]|0;
 $4 = ((($3)) + 113712|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[270140>>2]|0;
 $8 = ((($7)) + 113712|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 _rom_history_push($9,$10,$11,$12);
 STACKTOP = sp;return;
}
function _menu_rom_history_push_current() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 8|0;
 $0 = HEAP8[(102652)>>0]|0;
 $1 = $0&1;
 if ($1) {
  HEAP32[$vararg_buffer>>2] = (135442);
  (_snprintf($tmp,4096,765514,$vararg_buffer)|0);
 } else {
  (_strlcpy_rarch__($tmp,(139538),4096)|0);
 }
 $2 = HEAP8[$tmp>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($3) {
  _path_resolve_realpath($tmp,4096);
 }
 $4 = HEAP8[$tmp>>0]|0;
 $5 = $4 << 24 >> 24;
 $6 = ($5|0)!=(0);
 $7 = $6 ? $tmp : 0;
 $8 = HEAP32[(196912)>>2]|0;
 _menu_rom_history_push($7,(78028),$8);
 STACKTOP = sp;return;
}
function _load_menu_game_prepare() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $str = 0, $tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 4104|0;
 $str = sp + 8|0;
 $0 = HEAP8[(139538)>>0]|0;
 $1 = $0 << 24 >> 24;
 $2 = ($1|0)!=(0);
 if ($2) {
  label = 3;
 } else {
  $3 = HEAP32[270140>>2]|0;
  $4 = ((($3)) + 4176|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&1;
  if ($6) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $7 = HEAP8[(139538)>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = (259656);
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = (($10) + 4)|0;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = $12 & 128;
   $17 = ($16|0)!=(0);
   $18 = (0)!=(0);
   $19 = $17 | $18;
   if ($19) {
    _fill_pathname_base($tmp,(139538),4096);
    HEAP32[$vararg_buffer>>2] = $tmp;
    (_snprintf($str,4096,765521,$vararg_buffer)|0);
    $20 = HEAP32[(251148)>>2]|0;
    _msg_queue_push($20,$str,1,1);
   }
  }
  $21 = HEAP8[(139538)>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)!=(0);
  $24 = $23 ? (139538) : 0;
  $25 = HEAP32[270140>>2]|0;
  $26 = ((($25)) + 4160|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = HEAP32[270140>>2]|0;
   $30 = ((($29)) + 4160|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31;
  } else {
   $32 = 773086;
  }
  _menu_rom_history_push($24,(78028),$32);
 }
 $33 = HEAP32[270140>>2]|0;
 $34 = ((($33)) + 8|0);
 $35 = $34;
 $36 = $35;
 HEAP32[$36>>2] = 0;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[270140>>2]|0;
 $40 = $39;
 $41 = $40;
 HEAP32[$41>>2] = 0;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = 0;
 $44 = HEAP32[270140>>2]|0;
 $45 = ((($44)) + 16|0);
 HEAP8[$45>>0] = 0;
 $46 = HEAP32[270140>>2]|0;
 $47 = ((($46)) + 53|0);
 HEAP8[$47>>0] = 1;
 $48 = HEAP32[270144>>2]|0;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = HEAP32[270144>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = HEAP32[270144>>2]|0;
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[270140>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 511]($55)|0);
  }
 }
 $56 = HEAP32[(216)>>2]|0;
 $57 = ($56|0)!=(0|0);
 if ($57) {
  $58 = HEAP32[(216)>>2]|0;
  $59 = ((($58)) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  if ($61) {
   $62 = HEAP32[(216)>>2]|0;
   $63 = ((($62)) + 24|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[(24)>>2]|0;
   $66 = HEAP32[270140>>2]|0;
   $67 = ((($66)) + 36|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&1;
   FUNCTION_TABLE_viii[$64 & 1023]($65,$69,0);
  }
 }
 $70 = HEAP32[(12)>>2]|0;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  _rarch_render_cached_frame();
 }
 $72 = HEAP32[(216)>>2]|0;
 $73 = ($72|0)!=(0|0);
 if (!($73)) {
  STACKTOP = sp;return;
 }
 $74 = HEAP32[(216)>>2]|0;
 $75 = ((($74)) + 24|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)!=(0|0);
 if (!($77)) {
  STACKTOP = sp;return;
 }
 $78 = HEAP32[(216)>>2]|0;
 $79 = ((($78)) + 24|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = HEAP32[(24)>>2]|0;
 FUNCTION_TABLE_viii[$80 & 1023]($81,0,0);
 STACKTOP = sp;return;
}
function _load_menu_game_history($game_index) {
 $game_index = $game_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $core_name = 0, $core_path = 0, $path = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $path = sp + 8|0;
 $core_path = sp + 4|0;
 $core_name = sp;
 $0 = $game_index;
 HEAP32[$path>>2] = 0;
 HEAP32[$core_path>>2] = 0;
 HEAP32[$core_name>>2] = 0;
 $1 = HEAP32[270140>>2]|0;
 $2 = ((($1)) + 113712|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 _rom_history_get_index($3,$4,$path,$core_path,$core_name);
 $5 = HEAP32[$core_path>>2]|0;
 (_rarch_environment_cb(131072,$5)|0);
 $6 = HEAP32[$path>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = HEAP32[270140>>2]|0;
 $9 = ((($8)) + 4176|0);
 if ($7) {
  HEAP8[$9>>0] = 0;
  $10 = HEAP32[$path>>2]|0;
  (_rarch_environment_cb(131073,$10)|0);
  STACKTOP = sp;return;
 } else {
  HEAP8[$9>>0] = 1;
  $10 = HEAP32[$path>>2]|0;
  (_rarch_environment_cb(131073,$10)|0);
  STACKTOP = sp;return;
 }
}
function _load_menu_game() {
 var $$expand_i1_val = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $msg = 0, $name = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 8240|0;
 $args = sp + 24|0;
 $name = sp + 4144|0;
 $msg = sp + 48|0;
 $1 = HEAP8[(259668)>>0]|0;
 $2 = $1&1;
 if ($2) {
  _rarch_main_deinit();
 }
 ;HEAP32[$args>>2]=0|0;HEAP32[$args+4>>2]=0|0;HEAP32[$args+8>>2]=0|0;HEAP32[$args+12>>2]=0|0;HEAP32[$args+16>>2]=0|0;HEAP32[$args+20>>2]=0|0;
 $3 = HEAP8[102648>>0]|0;
 $4 = $3&1;
 $5 = ((($args)) + 20|0);
 $6 = $4&1;
 HEAP8[$5>>0] = $6;
 $7 = HEAP8[(123154)>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)!=(0);
 $10 = $9 ? (123154) : 0;
 $11 = ((($args)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP8[(172306)>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)!=(0);
 $15 = $14 ? (172306) : 0;
 $16 = ((($args)) + 4|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP8[(176402)>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = ($18|0)!=(0);
 $20 = $19 ? (176402) : 0;
 $21 = ((($args)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP8[(139538)>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)!=(0);
 $25 = $24 ? (139538) : 0;
 HEAP32[$args>>2] = $25;
 $26 = ((($args)) + 16|0);
 HEAP32[$26>>2] = (78028);
 $27 = HEAP32[270140>>2]|0;
 $28 = ((($27)) + 4176|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&1;
 $31 = ((($args)) + 21|0);
 $32 = $30&1;
 HEAP8[$31>>0] = $32;
 $33 = HEAP32[270140>>2]|0;
 $34 = ((($33)) + 4176|0);
 HEAP8[$34>>0] = 0;
 $35 = (_rarch_main_init_wrap($args)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  _fill_pathname_base($name,(139538),4096);
  HEAP32[$vararg_buffer1>>2] = $name;
  (_snprintf($msg,4096,765589,$vararg_buffer1)|0);
  $49 = HEAP32[(251148)>>2]|0;
  _msg_queue_push($49,$msg,1,90);
  $50 = HEAP32[270140>>2]|0;
  $51 = ((($50)) + 53|0);
  HEAP8[$51>>0] = 1;
  $52 = HEAP32[(259664)>>2]|0;
  $53 = ($52|0)!=(0|0);
  $54 = HEAP32[(259664)>>2]|0;
  $55 = HEAP32[544648>>2]|0;
  $56 = $53 ? $54 : $55;
  (_fprintf($56,765609,$vararg_buffer3)|0);
  $57 = HEAP32[(259664)>>2]|0;
  $58 = ($57|0)!=(0|0);
  $59 = HEAP32[(259664)>>2]|0;
  $60 = HEAP32[544648>>2]|0;
  $61 = $58 ? $59 : $60;
  (_fflush($61)|0);
  $$expand_i1_val6 = 0;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 $37 = HEAP8[102648>>0]|0;
 $38 = $37&1;
 if ($38) {
  $39 = HEAP32[(259664)>>2]|0;
  $40 = ($39|0)!=(0|0);
  $41 = HEAP32[(259664)>>2]|0;
  $42 = HEAP32[544648>>2]|0;
  $43 = $40 ? $41 : $42;
  (_fprintf($43,765543,$vararg_buffer)|0);
  $44 = HEAP32[(259664)>>2]|0;
  $45 = ($44|0)!=(0|0);
  $46 = HEAP32[(259664)>>2]|0;
  $47 = HEAP32[544648>>2]|0;
  $48 = $45 ? $46 : $47;
  (_fflush($48)|0);
 }
 $$expand_i1_val = 1;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $62 = $$pre_trunc&1;
 STACKTOP = sp;return ($62|0);
}
function _menu_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $history_path = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $history_path = sp + 16|0;
 $0 = (_menu_ctx_init_first(270144,270140)|0);
 if (!($0)) {
  $1 = HEAP32[(259664)>>2]|0;
  $2 = ($1|0)!=(0|0);
  $3 = HEAP32[(259664)>>2]|0;
  $4 = HEAP32[544648>>2]|0;
  $5 = $2 ? $3 : $4;
  (_fprintf($5,765662,$vararg_buffer)|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = HEAP32[(259664)>>2]|0;
  $9 = HEAP32[544648>>2]|0;
  $10 = $7 ? $8 : $9;
  (_fflush($10)|0);
  _rarch_fail1479(1,765711);
 }
 $11 = HEAP32[270140>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = $12;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[270140>>2]|0;
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[270140>>2]|0;
 $23 = ((($22)) + 16|0);
 HEAP8[$23>>0] = 0;
 $24 = HEAP32[270140>>2]|0;
 $25 = ((($24)) + 36|0);
 HEAP8[$25>>0] = 1;
 $26 = HEAP32[270140>>2]|0;
 $27 = ((($26)) + 113708|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[270140>>2]|0;
 $29 = ((($28)) + 4160|0);
 _retro_get_system_info($29);
 $30 = HEAP32[270140>>2]|0;
 _shader_manager_init($30);
 $31 = HEAP8[(123154)>>0]|0;
 $32 = ($31<<24>>24)!=(0);
 if (!($32)) {
  $51 = (_rarch_get_time_usec()|0);
  $52 = tempRet0;
  $53 = HEAP32[270140>>2]|0;
  $54 = ((($53)) + 113720|0);
  $55 = $54;
  $56 = $55;
  HEAP32[$56>>2] = $51;
  $57 = (($55) + 4)|0;
  $58 = $57;
  HEAP32[$58>>2] = $52;
  STACKTOP = sp;return;
 }
 $33 = HEAP8[(73928)>>0]|0;
 $34 = ($33<<24>>24)!=(0);
 if ($34) {
  (_strlcpy_rarch__($history_path,(73928),4096)|0);
 } else {
  _fill_pathname_resolve_relative($history_path,(123154),765723,4096);
 }
 $35 = HEAP8[102648>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = HEAP32[(259664)>>2]|0;
  $38 = ($37|0)!=(0|0);
  $39 = HEAP32[(259664)>>2]|0;
  $40 = HEAP32[544648>>2]|0;
  $41 = $38 ? $39 : $40;
  HEAP32[$vararg_buffer1>>2] = $history_path;
  (_fprintf($41,765751,$vararg_buffer1)|0);
  $42 = HEAP32[(259664)>>2]|0;
  $43 = ($42|0)!=(0|0);
  $44 = HEAP32[(259664)>>2]|0;
  $45 = HEAP32[544648>>2]|0;
  $46 = $43 ? $44 : $45;
  (_fflush($46)|0);
 }
 $47 = HEAP32[(78024)>>2]|0;
 $48 = (_rom_history_init($history_path,$47)|0);
 $49 = HEAP32[270140>>2]|0;
 $50 = ((($49)) + 113712|0);
 HEAP32[$50>>2] = $48;
 $51 = (_rarch_get_time_usec()|0);
 $52 = tempRet0;
 $53 = HEAP32[270140>>2]|0;
 $54 = ((($53)) + 113720|0);
 $55 = $54;
 $56 = $55;
 HEAP32[$56>>2] = $51;
 $57 = (($55) + 4)|0;
 $58 = $57;
 HEAP32[$58>>2] = $52;
 STACKTOP = sp;return;
}
function _menu_free() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[270144>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[270144>>2]|0;
  $3 = ((($2)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = HEAP32[270144>>2]|0;
   $7 = ((($6)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[270140>>2]|0;
   FUNCTION_TABLE_vi[$8 & 1023]($9);
  }
 }
 $10 = HEAP32[270140>>2]|0;
 $11 = ((($10)) + 113712|0);
 $12 = HEAP32[$11>>2]|0;
 _rom_history_free($12);
 $13 = HEAP32[270140>>2]|0;
 _free($13);
 return;
}
function _menu_ticker_line($buf,$len,$index,$str,$selected) {
 $buf = $buf|0;
 $len = $len|0;
 $index = $index|0;
 $str = $str|0;
 $selected = $selected|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $left_offset = 0, $phase = 0, $phase_left_moving = 0, $phase_left_stop = 0, $phase_right_stop = 0, $right_offset = 0, $str_len = 0, $ticker_period = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $len;
 $2 = $index;
 $3 = $str;
 $5 = $selected&1;
 $4 = $5;
 $6 = $3;
 $7 = (_strlen($6)|0);
 $str_len = $7;
 $8 = $str_len;
 $9 = $1;
 $10 = ($8>>>0)<=($9>>>0);
 if ($10) {
  $11 = $0;
  $12 = $3;
  $13 = $1;
  $14 = (($13) + 1)|0;
  (_strlcpy_rarch__($11,$12,$14)|0);
  STACKTOP = sp;return;
 }
 $15 = $4;
 $16 = $15&1;
 if (!($16)) {
  $17 = $0;
  $18 = $3;
  $19 = $1;
  $20 = (($19) + 1)|0;
  $21 = (($20) - 3)|0;
  (_strlcpy_rarch__($17,$18,$21)|0);
  $22 = $0;
  $23 = $1;
  $24 = (($23) + 1)|0;
  (_strlcat_rarch__($22,768023,$24)|0);
  STACKTOP = sp;return;
 }
 $25 = $str_len;
 $26 = $1;
 $27 = (($25) - ($26))|0;
 $28 = $27<<1;
 $29 = (($28) + 4)|0;
 $ticker_period = $29;
 $30 = $2;
 $31 = $ticker_period;
 $32 = (($30>>>0) % ($31>>>0))&-1;
 $phase = $32;
 $phase_left_stop = 2;
 $33 = $phase_left_stop;
 $34 = $str_len;
 $35 = $1;
 $36 = (($34) - ($35))|0;
 $37 = (($33) + ($36))|0;
 $phase_left_moving = $37;
 $38 = $phase_left_moving;
 $39 = (($38) + 2)|0;
 $phase_right_stop = $39;
 $40 = $phase;
 $41 = $phase_left_stop;
 $42 = (($40) - ($41))|0;
 $left_offset = $42;
 $43 = $str_len;
 $44 = $1;
 $45 = (($43) - ($44))|0;
 $46 = $phase;
 $47 = $phase_right_stop;
 $48 = (($46) - ($47))|0;
 $49 = (($45) - ($48))|0;
 $right_offset = $49;
 $50 = $phase;
 $51 = $phase_left_stop;
 $52 = ($50>>>0)<($51>>>0);
 if ($52) {
  $53 = $0;
  $54 = $3;
  $55 = $1;
  $56 = (($55) + 1)|0;
  (_strlcpy_rarch__($53,$54,$56)|0);
  STACKTOP = sp;return;
 }
 $57 = $phase;
 $58 = $phase_left_moving;
 $59 = ($57>>>0)<($58>>>0);
 if ($59) {
  $60 = $0;
  $61 = $3;
  $62 = $left_offset;
  $63 = (($61) + ($62)|0);
  $64 = $1;
  $65 = (($64) + 1)|0;
  (_strlcpy_rarch__($60,$63,$65)|0);
  STACKTOP = sp;return;
 }
 $66 = $phase;
 $67 = $phase_right_stop;
 $68 = ($66>>>0)<($67>>>0);
 $69 = $0;
 $70 = $3;
 if ($68) {
  $71 = $str_len;
  $72 = (($70) + ($71)|0);
  $73 = $1;
  $74 = (0 - ($73))|0;
  $75 = (($72) + ($74)|0);
  $76 = $1;
  $77 = (($76) + 1)|0;
  (_strlcpy_rarch__($69,$75,$77)|0);
  STACKTOP = sp;return;
 } else {
  $78 = $right_offset;
  $79 = (($70) + ($78)|0);
  $80 = $1;
  $81 = (($80) + 1)|0;
  (_strlcpy_rarch__($69,$79,$81)|0);
  STACKTOP = sp;return;
 }
}
function _menu_iterate() {
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta = 0, $input_entry_ret = 0;
 var $input_state = 0, $or$cond = 0, $sleep_msec = 0, $target_msec = 0, $time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 44|0;
 $time = sp + 32|0;
 $delta = sp + 24|0;
 $target_msec = sp + 16|0;
 $sleep_msec = sp + 8|0;
 $input_state = sp;
 $1 = $input_state;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $input_entry_ret = 0;
 $5 = (259656);
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $7 & 32;
 $12 = ($11|0)!=(0);
 $13 = (0)!=(0);
 $14 = $12 | $13;
 if ($14) {
  $15 = HEAP32[270140>>2]|0;
  $16 = ((($15)) + 52|0);
  HEAP8[$16>>0] = 1;
  $17 = (259656);
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $19 & -33;
  $24 = (259656);
  $25 = $24;
  HEAP32[$25>>2] = $23;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = HEAP32[270140>>2]|0;
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $31 | 256;
  $36 = $28;
  $37 = $36;
  HEAP32[$37>>2] = $35;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $34;
 }
 _rarch_input_poll();
 _rarch_check_overlay();
 $40 = (_input_key_pressed_func1483(30)|0);
 if ($40) {
  label = 5;
 } else {
  $41 = HEAP32[(12)>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[(24)>>2]|0;
  $45 = (FUNCTION_TABLE_ii[$43 & 511]($44)|0);
  if ($45) {
   $57 = (_rgui_input()|0);
   $58 = tempRet0;
   $59 = $input_state;
   $60 = $59;
   HEAP32[$60>>2] = $57;
   $61 = (($59) + 4)|0;
   $62 = $61;
   HEAP32[$62>>2] = $58;
   $63 = HEAP32[270140>>2]|0;
   $64 = ((($63)) + 16|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&1;
   if ($66) {
    $67 = HEAP8[765792>>0]|0;
    $68 = $67&1;
    if (!($68)) {
     HEAP8[765792>>0] = 1;
     $69 = HEAP8[765793>>0]|0;
     $70 = $69&1;
     $71 = $70 ? 12 : 6;
     $72 = HEAP32[270140>>2]|0;
     $73 = ((($72)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = HEAP32[270140>>2]|0;
     $75 = ((($74)) + 24|0);
     HEAP32[$75>>2] = 0;
    }
    $76 = HEAP32[270140>>2]|0;
    $77 = ((($76)) + 24|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = HEAP32[270140>>2]|0;
    $80 = ((($79)) + 20|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($78>>>0)>=($81>>>0);
    if ($82) {
     HEAP8[765792>>0] = 0;
     $83 = $input_state;
     $84 = $83;
     $85 = HEAP32[$84>>2]|0;
     $86 = (($83) + 4)|0;
     $87 = $86;
     $88 = HEAP32[$87>>2]|0;
     $89 = HEAP32[270140>>2]|0;
     $90 = ((($89)) + 8|0);
     $91 = $90;
     $92 = $91;
     HEAP32[$92>>2] = $85;
     $93 = (($91) + 4)|0;
     $94 = $93;
     HEAP32[$94>>2] = $88;
    }
    HEAP8[765793>>0] = 0;
   } else {
    HEAP8[765792>>0] = 0;
    HEAP8[765793>>0] = 1;
   }
   $95 = HEAP32[270140>>2]|0;
   $96 = ((($95)) + 24|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 1)|0;
   HEAP32[$96>>2] = $98;
   $99 = $input_state;
   $100 = $99;
   $101 = HEAP32[$100>>2]|0;
   $102 = (($99) + 4)|0;
   $103 = $102;
   $104 = HEAP32[$103>>2]|0;
   $105 = HEAP32[270140>>2]|0;
   $106 = $105;
   $107 = $106;
   HEAP32[$107>>2] = $101;
   $108 = (($106) + 4)|0;
   $109 = $108;
   HEAP32[$109>>2] = $104;
   $110 = HEAP32[270144>>2]|0;
   $111 = ($110|0)!=(0|0);
   if ($111) {
    $112 = HEAP32[270144>>2]|0;
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)!=(0|0);
    if ($114) {
     $115 = HEAP32[270144>>2]|0;
     $116 = HEAP32[$115>>2]|0;
     $117 = HEAP32[270140>>2]|0;
     $118 = (FUNCTION_TABLE_ii[$116 & 511]($117)|0);
     $input_entry_ret = $118;
    }
   }
   $119 = HEAP32[(216)>>2]|0;
   $120 = ($119|0)!=(0|0);
   if ($120) {
    $121 = HEAP32[(216)>>2]|0;
    $122 = ((($121)) + 24|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($123|0)!=(0|0);
    if ($124) {
     $125 = HEAP32[(216)>>2]|0;
     $126 = ((($125)) + 24|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = HEAP32[(24)>>2]|0;
     $129 = HEAP32[270140>>2]|0;
     $130 = ((($129)) + 36|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = $131&1;
     FUNCTION_TABLE_viii[$127 & 1023]($128,$132,0);
    }
   }
   _rarch_render_cached_frame();
   $133 = (_rarch_get_time_usec()|0);
   $134 = tempRet0;
   $135 = $time;
   $136 = $135;
   HEAP32[$136>>2] = $133;
   $137 = (($135) + 4)|0;
   $138 = $137;
   HEAP32[$138>>2] = $134;
   $139 = $time;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (($139) + 4)|0;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = HEAP32[270140>>2]|0;
   $146 = ((($145)) + 113720|0);
   $147 = $146;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = (_i64Subtract(($141|0),($144|0),($149|0),($152|0))|0);
   $154 = tempRet0;
   $155 = (___divdi3(($153|0),($154|0),1000,0)|0);
   $156 = tempRet0;
   $157 = $delta;
   $158 = $157;
   HEAP32[$158>>2] = $155;
   $159 = (($157) + 4)|0;
   $160 = $159;
   HEAP32[$160>>2] = $156;
   $161 = +HEAPF32[(8540)>>2];
   $162 = 750.0 / $161;
   $163 = (~~$162)>>>0;
   $164 = +Math_abs($162) >= 1.0 ? $162 > 0.0 ? (~~+Math_min(+Math_floor($162 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($162 - +(~~$162 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $165 = $target_msec;
   $166 = $165;
   HEAP32[$166>>2] = $163;
   $167 = (($165) + 4)|0;
   $168 = $167;
   HEAP32[$168>>2] = $164;
   $169 = $target_msec;
   $170 = $169;
   $171 = HEAP32[$170>>2]|0;
   $172 = (($169) + 4)|0;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = $delta;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   $178 = (($175) + 4)|0;
   $179 = $178;
   $180 = HEAP32[$179>>2]|0;
   $181 = (_i64Subtract(($171|0),($174|0),($177|0),($180|0))|0);
   $182 = tempRet0;
   $183 = $sleep_msec;
   $184 = $183;
   HEAP32[$184>>2] = $181;
   $185 = (($183) + 4)|0;
   $186 = $185;
   HEAP32[$186>>2] = $182;
   $187 = $sleep_msec;
   $188 = $187;
   $189 = HEAP32[$188>>2]|0;
   $190 = (($187) + 4)|0;
   $191 = $190;
   $192 = HEAP32[$191>>2]|0;
   $193 = ($192|0)>(0);
   $194 = ($189>>>0)>(0);
   $195 = ($192|0)==(0);
   $196 = $195 & $194;
   $197 = $193 | $196;
   if ($197) {
    $198 = $sleep_msec;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = (($198) + 4)|0;
    $202 = $201;
    $203 = HEAP32[$202>>2]|0;
    _rarch_sleep1484($200);
   }
   $204 = (_rarch_get_time_usec()|0);
   $205 = tempRet0;
   $206 = HEAP32[270140>>2]|0;
   $207 = ((($206)) + 113720|0);
   $208 = $207;
   $209 = $208;
   HEAP32[$209>>2] = $204;
   $210 = (($208) + 4)|0;
   $211 = $210;
   HEAP32[$211>>2] = $205;
   $212 = HEAP32[(216)>>2]|0;
   $213 = ($212|0)!=(0|0);
   if ($213) {
    $214 = HEAP32[(216)>>2]|0;
    $215 = ((($214)) + 24|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ($216|0)!=(0|0);
    if ($217) {
     $218 = HEAP32[(216)>>2]|0;
     $219 = ((($218)) + 24|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = HEAP32[(24)>>2]|0;
     FUNCTION_TABLE_viii[$220 & 1023]($221,0,0);
    }
   }
   $222 = HEAP32[270140>>2]|0;
   $223 = HEAP32[270140>>2]|0;
   $224 = $223;
   $225 = $224;
   $226 = HEAP32[$225>>2]|0;
   $227 = (($224) + 4)|0;
   $228 = $227;
   $229 = HEAP32[$228>>2]|0;
   $230 = (_rgui_input_postprocess($222,$226,$229)|0);
   $231 = ($230|0)!=(0);
   $232 = $input_entry_ret;
   $233 = ($232|0)!=(0);
   $or$cond = $231 | $233;
   if (!($or$cond)) {
    $$expand_i1_val = 1;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $234 = $$pre_trunc&1;
    STACKTOP = sp;return ($234|0);
   }
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $46 = (259656);
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = $48 | 1;
  $53 = (259656);
  $54 = $53;
  HEAP32[$54>>2] = $52;
  $55 = (($53) + 4)|0;
  $56 = $55;
  HEAP32[$56>>2] = $51;
 }
 $$expand_i1_val3 = 0;
 HEAP8[$0>>0] = $$expand_i1_val3;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $234 = $$pre_trunc&1;
 STACKTOP = sp;return ($234|0);
}
function _rarch_fail1479($error_code,$error) {
 $error_code = $error_code|0;
 $error = $error|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $error_code;
 $1 = $error;
 $2 = HEAP8[(259669)>>0]|0;
 $3 = $2&1;
 if ($3) {
  $14 = $1;
  (_strlcpy_rarch__((259671),$14,1024)|0);
  $15 = $0;
  _longjmp(((260696)|0),($15|0));
  // unreachable;
 } else {
  $4 = HEAP32[(259664)>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[(259664)>>2]|0;
  $7 = HEAP32[544648>>2]|0;
  $8 = $5 ? $6 : $7;
  HEAP32[$vararg_buffer>>2] = 765843;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 846;
  (_fprintf($8,765794,$vararg_buffer)|0);
  $9 = HEAP32[(259664)>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = HEAP32[544648>>2]|0;
  $13 = $10 ? $11 : $12;
  (_fflush($13)|0);
  _exit(2);
  // unreachable;
 }
}
function _input_key_pressed_func1483($key) {
 $key = $key|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 5|0;
 $1 = $key;
 $2 = HEAP8[(39)>>0]|0;
 $3 = $2&1;
 if ($3) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $32 = $$pre_trunc&1;
  STACKTOP = sp;return ($32|0);
 } else {
  $4 = HEAP32[(16)>>2]|0;
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[(28)>>2]|0;
  $8 = $1;
  $9 = (FUNCTION_TABLE_iii[$6 & 511]($7,$8)|0);
  $10 = $9&1;
  $ret = $10;
  $11 = (200);
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = (_bitshift64Shl(1,0,($17|0))|0);
  $19 = tempRet0;
  $20 = $13 & $18;
  $21 = $16 & $19;
  $22 = $ret;
  $23 = $22&1;
  $24 = $23&1;
  $25 = $24 | $20;
  $26 = ($25|0)!=(0);
  $27 = ($21|0)!=(0);
  $28 = $26 | $27;
  $29 = $28&1;
  $ret = $29;
  $30 = $ret;
  $31 = $30&1;
  $$expand_i1_val2 = $31&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $32 = $$pre_trunc&1;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _rgui_input() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $input_state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input_state = sp;
 $0 = $input_state;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4>>>0)<(16);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[(16)>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[(28)>>2]|0;
  $10 = $i;
  $11 = (($10) + 0)|0;
  $12 = (270148 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiiiiii[$8 & 255]($9,270212,0,1,0,$13)|0);
  $15 = $14 << 16 >> 16;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $i;
   $18 = (($17) + 1)|0;
   $19 = (270148 + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_bitshift64Shl(1,0,($20|0))|0);
   $22 = tempRet0;
   $30 = $21;$32 = $22;
  } else {
   $30 = 0;$32 = 0;
  }
  $23 = $input_state;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $25 | $30;
  $31 = $28 | $32;
  $33 = $input_state;
  $34 = $33;
  HEAP32[$34>>2] = $29;
  $35 = (($33) + 4)|0;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (200);
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = $i;
  $44 = (($43) + 0)|0;
  $45 = (270148 + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (_bitshift64Shl(1,0,($46|0))|0);
  $48 = tempRet0;
  $49 = $39 & $47;
  $50 = $42 & $48;
  $51 = ($49|0)!=(0);
  $52 = ($50|0)!=(0);
  $53 = $51 | $52;
  if ($53) {
   $54 = $i;
   $55 = (($54) + 1)|0;
   $56 = (270148 + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (_bitshift64Shl(1,0,($57|0))|0);
   $59 = tempRet0;
   $67 = $58;$69 = $59;
  } else {
   $67 = 0;$69 = 0;
  }
  $60 = $input_state;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($60) + 4)|0;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = $62 | $67;
  $68 = $65 | $69;
  $70 = $input_state;
  $71 = $70;
  HEAP32[$71>>2] = $66;
  $72 = (($70) + 4)|0;
  $73 = $72;
  HEAP32[$73>>2] = $68;
  $74 = $i;
  $75 = (($74) + 2)|0;
  $i = $75;
 }
 $76 = (_input_key_pressed_func1483(55)|0);
 $77 = $76 ? 256 : 0;
 $76 ? 0 : 0;
 $78 = $input_state;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = $80 | $77;
 $85 = $input_state;
 $86 = $85;
 HEAP32[$86>>2] = $84;
 $87 = (($85) + 4)|0;
 $88 = $87;
 HEAP32[$88>>2] = $83;
 $89 = $input_state;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($89) + 4)|0;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[270140>>2]|0;
 $96 = $95;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = $98 ^ -1;
 $103 = $101 ^ -1;
 $104 = $91 & $102;
 $105 = $94 & $103;
 $106 = HEAP32[270140>>2]|0;
 $107 = ((($106)) + 8|0);
 $108 = $107;
 $109 = $108;
 HEAP32[$109>>2] = $104;
 $110 = (($108) + 4)|0;
 $111 = $110;
 HEAP32[$111>>2] = $105;
 $112 = $input_state;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 $115 = (($112) + 4)|0;
 $116 = $115;
 $117 = HEAP32[$116>>2]|0;
 $118 = $114 & 15;
 $119 = ($118|0)!=(0);
 $120 = (0)!=(0);
 $121 = $119 | $120;
 if (!($121)) {
  $136 = 0;
  $133 = HEAP32[270140>>2]|0;
  $134 = ((($133)) + 16|0);
  $135 = $136&1;
  HEAP8[$134>>0] = $135;
  $137 = $input_state;
  $138 = $137;
  $139 = HEAP32[$138>>2]|0;
  $140 = (($137) + 4)|0;
  $141 = $140;
  $142 = HEAP32[$141>>2]|0;
  tempRet0 = ($142);
  STACKTOP = sp;return ($139|0);
 }
 $122 = $input_state;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = (($122) + 4)|0;
 $126 = $125;
 $127 = HEAP32[$126>>2]|0;
 $128 = $124 & 256;
 $129 = ($128|0)!=(0);
 $130 = (0)!=(0);
 $131 = $129 | $130;
 $132 = $131 ^ 1;
 $136 = $132;
 $133 = HEAP32[270140>>2]|0;
 $134 = ((($133)) + 16|0);
 $135 = $136&1;
 HEAP8[$134>>0] = $135;
 $137 = $input_state;
 $138 = $137;
 $139 = HEAP32[$138>>2]|0;
 $140 = (($137) + 4)|0;
 $141 = $140;
 $142 = HEAP32[$141>>2]|0;
 tempRet0 = ($142);
 STACKTOP = sp;return ($139|0);
}
function _rarch_sleep1484($msec) {
 $msec = $msec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tv = sp;
 $0 = $msec;
 ;HEAP32[$tv>>2]=0|0;HEAP32[$tv+4>>2]=0|0;
 $1 = $0;
 $2 = (($1>>>0) / 1000)&-1;
 HEAP32[$tv>>2] = $2;
 $3 = $0;
 $4 = (($3>>>0) % 1000)&-1;
 $5 = ($4*1000000)|0;
 $6 = ((($tv)) + 4|0);
 HEAP32[$6>>2] = $5;
 (_nanosleep(($tv|0),(0|0))|0);
 STACKTOP = sp;return;
}
function _menu_ctx_init_first($driver,$handle) {
 $driver = $driver|0;
 $handle = $handle|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $driver;
 $2 = $handle;
 $3 = HEAP32[270216>>2]|0;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $i = 0;
   while(1) {
    $5 = $i;
    $6 = (270216 + ($5<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)!=(0|0);
    if (!($8)) {
     label = 8;
     break;
    }
    $9 = $i;
    $10 = (270216 + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_i[$13 & 511]()|0);
    $h = $14;
    $15 = $h;
    $16 = ($15|0)!=(0|0);
    $17 = $i;
    if ($16) {
     label = 6;
     break;
    }
    $23 = (($17) + 1)|0;
    $i = $23;
   }
   if ((label|0) == 6) {
    $18 = (270216 + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $1;
    HEAP32[$20>>2] = $19;
    $21 = $h;
    $22 = $2;
    HEAP32[$22>>2] = $21;
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
   else if ((label|0) == 8) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  } else {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $24 = $$pre_trunc&1;
 STACKTOP = sp;return ($24|0);
}
function _rgui_input_postprocess($data,$0,$1) {
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $9 = 0, $ret = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $type = sp + 8|0;
 $2 = $data;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $ret = 0;
 $8 = HEAP32[270140>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $12 & 256;
 $17 = ($16|0)!=(0);
 $18 = (0)!=(0);
 $19 = $17 | $18;
 if ($19) {
  $20 = HEAP8[(259668)>>0]|0;
  $21 = $20&1;
  if ($21) {
   $22 = HEAP8[(260857)>>0]|0;
   $23 = $22&1;
   if (!($23)) {
    $24 = (259656);
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($24) + 4)|0;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = $26 | 64;
    $31 = (259656);
    $32 = $31;
    HEAP32[$32>>2] = $30;
    $33 = (($31) + 4)|0;
    $34 = $33;
    HEAP32[$34>>2] = $29;
    $35 = (259656);
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = (($35) + 4)|0;
    $39 = $38;
    $40 = HEAP32[$39>>2]|0;
    $41 = $37 | 1;
    $42 = (259656);
    $43 = $42;
    HEAP32[$43>>2] = $41;
    $44 = (($42) + 4)|0;
    $45 = $44;
    HEAP32[$45>>2] = $40;
    $ret = -1;
   }
  }
 }
 $46 = (259656);
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = $48 & 64;
 $53 = ($52|0)!=(0);
 $54 = (0)!=(0);
 $55 = $53 | $54;
 if ($55) {
  $56 = (259656);
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = $58 & -65;
  $63 = (259656);
  $64 = $63;
  HEAP32[$64>>2] = $62;
  $65 = (($63) + 4)|0;
  $66 = $65;
  HEAP32[$66>>2] = $61;
 }
 $67 = $ret;
 $68 = ($67|0)<(0);
 if (!($68)) {
  $82 = $ret;
  STACKTOP = sp;return ($82|0);
 }
 HEAP32[$type>>2] = 0;
 $69 = HEAP32[270140>>2]|0;
 $70 = ((($69)) + 40|0);
 $71 = HEAP32[$70>>2]|0;
 _rgui_list_get_last($71,0,$type);
 while(1) {
  $72 = HEAP32[$type>>2]|0;
  $73 = ($72|0)!=(4);
  if (!($73)) {
   break;
  }
  $74 = HEAP32[270140>>2]|0;
  $75 = ((($74)) + 40|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = HEAP32[270140>>2]|0;
  $78 = ((($77)) + 48|0);
  _rgui_list_pop($76,$78);
  $79 = HEAP32[270140>>2]|0;
  $80 = ((($79)) + 40|0);
  $81 = HEAP32[$80>>2]|0;
  _rgui_list_get_last($81,0,$type);
 }
 $82 = $ret;
 STACKTOP = sp;return ($82|0);
}
function _rgui_iterate($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $action = 0;
 var $cat_path = 0, $dir = 0, $image = 0, $menu_type = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pass = 0, $path = 0, $ret = 0, $rgui = 0, $shader_path = 0, $type = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dir = sp + 24|0;
 $menu_type = sp + 20|0;
 $path = sp + 12|0;
 $type = sp + 8|0;
 $cat_path = sp + 8240|0;
 $shader_path = sp + 4144|0;
 $image = sp + 48|0;
 $1 = $data;
 $2 = $1;
 $rgui = $2;
 $action = 10;
 $3 = $rgui;
 $4 = ((($3)) + 8|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $7 & 1;
 $12 = ($11|0)!=(0);
 $13 = (0)!=(0);
 $14 = $12 | $13;
 do {
  if ($14) {
   $action = 0;
  } else {
   $15 = $rgui;
   $16 = ((($15)) + 8|0);
   $17 = $16;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = $19 & 2;
   $24 = ($23|0)!=(0);
   $25 = (0)!=(0);
   $26 = $24 | $25;
   if ($26) {
    $action = 1;
    break;
   }
   $27 = $rgui;
   $28 = ((($27)) + 8|0);
   $29 = $28;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) + 4)|0;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = $31 & 4;
   $36 = ($35|0)!=(0);
   $37 = (0)!=(0);
   $38 = $36 | $37;
   if ($38) {
    $action = 2;
    break;
   }
   $39 = $rgui;
   $40 = ((($39)) + 8|0);
   $41 = $40;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = $43 & 8;
   $48 = ($47|0)!=(0);
   $49 = (0)!=(0);
   $50 = $48 | $49;
   if ($50) {
    $action = 3;
    break;
   }
   $51 = $rgui;
   $52 = ((($51)) + 8|0);
   $53 = $52;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($53) + 4)|0;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = $55 & 32;
   $60 = ($59|0)!=(0);
   $61 = (0)!=(0);
   $62 = $60 | $61;
   if ($62) {
    $action = 5;
    break;
   }
   $63 = $rgui;
   $64 = ((($63)) + 8|0);
   $65 = $64;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $68 = (($65) + 4)|0;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = $67 & 16;
   $72 = ($71|0)!=(0);
   $73 = (0)!=(0);
   $74 = $72 | $73;
   if ($74) {
    $action = 4;
    break;
   }
   $75 = $rgui;
   $76 = ((($75)) + 8|0);
   $77 = $76;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($77) + 4)|0;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = $79 & 128;
   $84 = ($83|0)!=(0);
   $85 = (0)!=(0);
   $86 = $84 | $85;
   if ($86) {
    $action = 8;
    break;
   }
   $87 = $rgui;
   $88 = ((($87)) + 8|0);
   $89 = $88;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + 4)|0;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = $91 & 64;
   $96 = ($95|0)!=(0);
   $97 = (0)!=(0);
   $98 = $96 | $97;
   if ($98) {
    $action = 7;
   }
  }
 } while(0);
 HEAP32[$dir>>2] = 0;
 HEAP32[$menu_type>>2] = 0;
 $99 = $rgui;
 $100 = ((($99)) + 40|0);
 $101 = HEAP32[$100>>2]|0;
 _rgui_list_get_last($101,$dir,$menu_type);
 $ret = 0;
 $102 = HEAP32[(216)>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = HEAP32[(216)>>2]|0;
  $105 = ((($104)) + 24|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)!=(0|0);
  if ($107) {
   $108 = HEAP32[(216)>>2]|0;
   $109 = ((($108)) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[(24)>>2]|0;
   $112 = HEAP32[270224>>2]|0;
   $113 = HEAP32[270228>>2]|0;
   FUNCTION_TABLE_viiiiid[$110 & 63]($111,545528,0,$112,$113,1.0);
  }
 }
 $114 = HEAP32[$menu_type>>2]|0;
 $115 = (_menu_type_is_settings($114)|0);
 if ($115) {
  $116 = $rgui;
  $117 = $action;
  $118 = (_rgui_settings_iterate($116,$117)|0);
  $0 = $118;
  $438 = $0;
  STACKTOP = sp;return ($438|0);
 }
 $119 = HEAP32[$menu_type>>2]|0;
 $120 = ($119|0)==(12);
 $121 = HEAP32[$menu_type>>2]|0;
 $122 = ($121|0)==(13);
 $or$cond = $120 | $122;
 $123 = $rgui;
 if ($or$cond) {
  $124 = $action;
  $125 = (_rgui_viewport_iterate($123,$124)|0);
  $0 = $125;
  $438 = $0;
  STACKTOP = sp;return ($438|0);
 }
 $126 = ((($123)) + 52|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&1;
 $129 = $action;
 $130 = ($129|0)!=(9);
 $or$cond3 = $128 & $130;
 if ($or$cond3) {
  $action = 10;
 }
 $131 = $action;
 L39: do {
  switch ($131|0) {
  case 0:  {
   $132 = $rgui;
   $133 = ((($132)) + 48|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($134>>>0)>(0);
   $136 = $rgui;
   if ($135) {
    $137 = ((($136)) + 48|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + -1)|0;
    HEAP32[$137>>2] = $139;
    break L39;
   } else {
    $140 = ((($136)) + 44|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($141)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) - 1)|0;
    $145 = $rgui;
    $146 = ((($145)) + 48|0);
    HEAP32[$146>>2] = $144;
    break L39;
   }
   break;
  }
  case 1:  {
   $147 = $rgui;
   $148 = ((($147)) + 48|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) + 1)|0;
   $151 = $rgui;
   $152 = ((($151)) + 44|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ((($153)) + 8|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($150>>>0)<($155>>>0);
   $157 = $rgui;
   $158 = ((($157)) + 48|0);
   if ($156) {
    $159 = HEAP32[$158>>2]|0;
    $160 = (($159) + 1)|0;
    HEAP32[$158>>2] = $160;
    break L39;
   } else {
    HEAP32[$158>>2] = 0;
    break L39;
   }
   break;
  }
  case 2:  {
   $161 = $rgui;
   $162 = ((($161)) + 48|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ($163>>>0)>(8);
   $165 = $rgui;
   $166 = ((($165)) + 48|0);
   if ($164) {
    $167 = HEAP32[$166>>2]|0;
    $168 = (($167) - 8)|0;
    HEAP32[$166>>2] = $168;
    break L39;
   } else {
    HEAP32[$166>>2] = 0;
    break L39;
   }
   break;
  }
  case 3:  {
   $169 = $rgui;
   $170 = ((($169)) + 48|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + 8)|0;
   $173 = $rgui;
   $174 = ((($173)) + 44|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ((($175)) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ($172>>>0)<($177>>>0);
   $179 = $rgui;
   if ($178) {
    $180 = ((($179)) + 48|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($181) + 8)|0;
    HEAP32[$180>>2] = $182;
    break L39;
   } else {
    $183 = ((($179)) + 44|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ((($184)) + 8|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186) - 1)|0;
    $188 = $rgui;
    $189 = ((($188)) + 48|0);
    HEAP32[$189>>2] = $187;
    break L39;
   }
   break;
  }
  case 5:  {
   $190 = $rgui;
   $191 = ((($190)) + 40|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ((($192)) + 8|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = ($194>>>0)>(1);
   if ($195) {
    $196 = $rgui;
    $197 = ((($196)) + 52|0);
    HEAP8[$197>>0] = 1;
    $198 = $rgui;
    $199 = ((($198)) + 40|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = $rgui;
    $202 = ((($201)) + 48|0);
    _rgui_list_pop($200,$202);
   }
   break;
  }
  case 4:  {
   $203 = $rgui;
   $204 = ((($203)) + 44|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = ((($205)) + 8|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ($207|0)==(0);
   if ($208) {
    $0 = 0;
    $438 = $0;
    STACKTOP = sp;return ($438|0);
   }
   HEAP32[$path>>2] = 0;
   HEAP32[$type>>2] = 0;
   $209 = $rgui;
   $210 = ((($209)) + 44|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $rgui;
   $213 = ((($212)) + 48|0);
   $214 = HEAP32[$213>>2]|0;
   _rgui_list_get_at_offset($211,$214,$path,$type);
   $215 = HEAP32[$type>>2]|0;
   $216 = (_menu_type_is_shader_browser($215)|0);
   if (!($216)) {
    $217 = HEAP32[$type>>2]|0;
    $218 = (_menu_type_is_directory_browser($217)|0);
    $219 = HEAP32[$type>>2]|0;
    $220 = ($219|0)==(90);
    $or$cond5 = $218 | $220;
    $221 = HEAP32[$type>>2]|0;
    $222 = ($221|0)==(57);
    $or$cond7 = $or$cond5 | $222;
    $223 = HEAP32[$type>>2]|0;
    $224 = ($223|0)==(71);
    $or$cond9 = $or$cond7 | $224;
    $225 = HEAP32[$type>>2]|0;
    $226 = ($225|0)==(1);
    $or$cond11 = $or$cond9 | $226;
    if (!($or$cond11)) {
     $240 = HEAP32[$menu_type>>2]|0;
     $241 = (_menu_type_is_shader_browser($240)|0);
     $242 = HEAP32[$menu_type>>2]|0;
     if ($241) {
      $243 = ($242|0)==(28);
      if ($243) {
       $244 = HEAP32[$dir>>2]|0;
       $245 = HEAP32[$path>>2]|0;
       _fill_pathname_join($shader_path,$244,$245,4096);
       $246 = $rgui;
       $247 = ((($246)) + 4180|0);
       $248 = (_gfx_shader_parse_type($shader_path,3)|0);
       _shader_manager_set_preset($247,$248,$shader_path);
      } else {
       $249 = HEAP32[$menu_type>>2]|0;
       $250 = (($249) - 31)|0;
       $251 = (($250>>>0) / 3)&-1;
       $pass = $251;
       $252 = $pass;
       $253 = $rgui;
       $254 = ((($253)) + 4180|0);
       $255 = ((($254)) + 76|0);
       $256 = (($255) + (($252*4148)|0)|0);
       $257 = HEAP32[$dir>>2]|0;
       $258 = HEAP32[$path>>2]|0;
       _fill_pathname_join($256,$257,$258,4096);
      }
      $259 = $rgui;
      _rgui_flush_menu_stack_type($259,26);
      break L39;
     }
     $260 = ($242|0)==(57);
     if ($260) {
      $261 = $rgui;
      _rgui_flush_menu_stack($261);
      break L39;
     }
     $262 = HEAP32[$menu_type>>2]|0;
     $263 = ($262|0)==(90);
     if ($263) {
      $264 = HEAP32[$dir>>2]|0;
      $265 = HEAP32[$path>>2]|0;
      _fill_pathname_join((61632),$264,$265,4096);
      $266 = HEAP32[(192)>>2]|0;
      $267 = ($266|0)!=(0|0);
      if ($267) {
       $268 = HEAP32[(192)>>2]|0;
       _input_overlay_free($268);
      }
      $269 = (_input_overlay_new((61632))|0);
      HEAP32[(192)>>2] = $269;
      $270 = HEAP32[(192)>>2]|0;
      $271 = ($270|0)!=(0|0);
      if (!($271)) {
       $272 = HEAP32[(259664)>>2]|0;
       $273 = ($272|0)!=(0|0);
       $274 = HEAP32[(259664)>>2]|0;
       $275 = HEAP32[544648>>2]|0;
       $276 = $273 ? $274 : $275;
       (_fprintf($276,769654,$vararg_buffer)|0);
       $277 = HEAP32[(259664)>>2]|0;
       $278 = ($277|0)!=(0|0);
       $279 = HEAP32[(259664)>>2]|0;
       $280 = HEAP32[544648>>2]|0;
       $281 = $278 ? $279 : $280;
       (_fflush($281)|0);
      }
      $282 = $rgui;
      _rgui_flush_menu_stack_type($282,60);
      break L39;
     }
     $283 = HEAP32[$menu_type>>2]|0;
     $284 = ($283|0)==(71);
     if ($284) {
      $285 = HEAP32[$dir>>2]|0;
      $286 = HEAP32[$path>>2]|0;
      _fill_pathname_join($image,$285,$286,4096);
      _rarch_disk_control_append_image($image);
      $287 = (259656);
      $288 = $287;
      $289 = HEAP32[$288>>2]|0;
      $290 = (($287) + 4)|0;
      $291 = $290;
      $292 = HEAP32[$291>>2]|0;
      $293 = $289 | 1;
      $294 = (259656);
      $295 = $294;
      HEAP32[$295>>2] = $293;
      $296 = (($294) + 4)|0;
      $297 = $296;
      HEAP32[$297>>2] = $292;
      $298 = $rgui;
      _rgui_flush_menu_stack($298);
      $ret = -1;
      break L39;
     }
     $299 = HEAP32[$menu_type>>2]|0;
     $300 = ($299|0)==(56);
     if ($300) {
      $301 = $rgui;
      $302 = ((($301)) + 48|0);
      $303 = HEAP32[$302>>2]|0;
      _load_menu_game_history($303);
      $304 = $rgui;
      _rgui_flush_menu_stack($304);
      $ret = -1;
      break L39;
     }
     $305 = HEAP32[$menu_type>>2]|0;
     $306 = ($305|0)==(75);
     if ($306) {
      $307 = HEAP32[$dir>>2]|0;
      (_strlcpy_rarch__((98545),$307,4096)|0);
      $308 = $rgui;
      $309 = ((($308)) + 54|0);
      $310 = HEAP32[$dir>>2]|0;
      (_strlcpy_rarch__($309,$310,4096)|0);
      $311 = $rgui;
      _rgui_flush_menu_stack_type($311,61);
      break L39;
     }
     $312 = HEAP32[$menu_type>>2]|0;
     $313 = ($312|0)==(74);
     if ($313) {
      $314 = HEAP32[$dir>>2]|0;
      (_strlcpy_rarch__((90316),$314,4096)|0);
      $315 = $rgui;
      _rgui_flush_menu_stack_type($315,61);
      break L39;
     }
     $316 = HEAP32[$menu_type>>2]|0;
     $317 = ($316|0)==(78);
     if ($317) {
      $318 = HEAP32[$dir>>2]|0;
      (_strlcpy_rarch__((172306),$318,4096)|0);
      $319 = $rgui;
      _rgui_flush_menu_stack_type($319,61);
      break L39;
     }
     $320 = HEAP32[$menu_type>>2]|0;
     $321 = ($320|0)==(80);
     if ($321) {
      $322 = HEAP32[$dir>>2]|0;
      (_strlcpy_rarch__((180498),$322,4096)|0);
      $323 = $rgui;
      _rgui_flush_menu_stack_type($323,61);
      break L39;
     }
     $324 = HEAP32[$menu_type>>2]|0;
     $325 = ($324|0)==(77);
     if ($325) {
      $326 = HEAP32[$dir>>2]|0;
      (_strlcpy_rarch__((176402),$326,4096)|0);
      $327 = $rgui;
      _rgui_flush_menu_stack_type($327,61);
      break L39;
     }
     $328 = HEAP32[$menu_type>>2]|0;
     $329 = ($328|0)==(76);
     if ($329) {
      $330 = HEAP32[$dir>>2]|0;
      (_strlcpy_rarch__((8545),$330,4096)|0);
      $331 = $rgui;
      _rgui_flush_menu_stack_type($331,61);
      break L39;
     }
     $332 = HEAP32[$menu_type>>2]|0;
     $333 = ($332|0)==(81);
     $334 = HEAP32[$dir>>2]|0;
     if ($333) {
      (_strlcpy_rarch__((94412),$334,4096)|0);
      $335 = $rgui;
      _rgui_flush_menu_stack_type($335,61);
      break L39;
     } else {
      $336 = HEAP32[$path>>2]|0;
      _fill_pathname_join((139538),$334,$336,4096);
      $337 = (259656);
      $338 = $337;
      $339 = HEAP32[$338>>2]|0;
      $340 = (($337) + 4)|0;
      $341 = $340;
      $342 = HEAP32[$341>>2]|0;
      $343 = $339 | 2;
      $344 = (259656);
      $345 = $344;
      HEAP32[$345>>2] = $343;
      $346 = (($344) + 4)|0;
      $347 = $346;
      HEAP32[$347>>2] = $342;
      $348 = $rgui;
      _rgui_flush_menu_stack($348);
      $349 = $rgui;
      $350 = ((($349)) + 53|0);
      HEAP8[$350>>0] = 1;
      $ret = -1;
      break L39;
     }
    }
   }
   $227 = HEAP32[$dir>>2]|0;
   $228 = HEAP32[$path>>2]|0;
   _fill_pathname_join($cat_path,$227,$228,4096);
   $229 = $rgui;
   $230 = ((($229)) + 40|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = HEAP32[$type>>2]|0;
   $233 = $rgui;
   $234 = ((($233)) + 48|0);
   $235 = HEAP32[$234>>2]|0;
   _rgui_list_push($231,$cat_path,$232,$235);
   $236 = $rgui;
   $237 = ((($236)) + 48|0);
   HEAP32[$237>>2] = 0;
   $238 = $rgui;
   $239 = ((($238)) + 52|0);
   HEAP8[$239>>0] = 1;
   break;
  }
  case 6:  {
   $351 = $rgui;
   $352 = ((($351)) + 48|0);
   HEAP32[$352>>2] = 0;
   $353 = $rgui;
   $354 = ((($353)) + 52|0);
   HEAP8[$354>>0] = 1;
   break;
  }
  case 7:  {
   $355 = $rgui;
   $356 = ((($355)) + 52|0);
   HEAP8[$356>>0] = 1;
   while(1) {
    $357 = $rgui;
    $358 = ((($357)) + 40|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ((($359)) + 8|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = ($361>>>0)>(1);
    $363 = $rgui;
    if (!($362)) {
     break;
    }
    $364 = ((($363)) + 40|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = $rgui;
    $367 = ((($366)) + 48|0);
    _rgui_list_pop($365,$367);
   }
   $368 = (_rgui_settings_iterate($363,6)|0);
   $0 = $368;
   $438 = $0;
   STACKTOP = sp;return ($438|0);
   break;
  }
  case 9:  {
   $369 = $rgui;
   $370 = ((($369)) + 53|0);
   HEAP8[$370>>0] = 1;
   break;
  }
  default: {
  }
  }
 } while(0);
 $371 = $rgui;
 $372 = ((($371)) + 40|0);
 $373 = HEAP32[$372>>2]|0;
 _rgui_list_get_last($373,$dir,$menu_type);
 $374 = $rgui;
 $375 = ((($374)) + 52|0);
 $376 = HEAP8[$375>>0]|0;
 $377 = $376&1;
 do {
  if ($377) {
   $378 = HEAP32[$menu_type>>2]|0;
   $379 = ($378|0)==(1);
   if (!($379)) {
    $380 = HEAP32[$menu_type>>2]|0;
    $381 = (_menu_type_is_shader_browser($380)|0);
    if (!($381)) {
     $382 = HEAP32[$menu_type>>2]|0;
     $383 = (_menu_type_is_directory_browser($382)|0);
     $384 = HEAP32[$menu_type>>2]|0;
     $385 = ($384|0)==(90);
     $or$cond13 = $383 | $385;
     $386 = HEAP32[$menu_type>>2]|0;
     $387 = ($386|0)==(57);
     $or$cond15 = $or$cond13 | $387;
     $388 = HEAP32[$menu_type>>2]|0;
     $389 = ($388|0)==(56);
     $or$cond17 = $or$cond15 | $389;
     $390 = HEAP32[$menu_type>>2]|0;
     $391 = ($390|0)==(71);
     $or$cond19 = $or$cond17 | $391;
     if (!($or$cond19)) {
      break;
     }
    }
   }
   $392 = $rgui;
   $393 = ((($392)) + 52|0);
   HEAP8[$393>>0] = 0;
   $394 = $rgui;
   $395 = ((($394)) + 44|0);
   $396 = HEAP32[$395>>2]|0;
   _rgui_list_clear($396);
   $397 = HEAP32[$menu_type>>2]|0;
   $398 = ($397|0)==(56);
   $399 = $rgui;
   if ($398) {
    _history_parse($399);
   } else {
    $400 = HEAP32[$dir>>2]|0;
    $401 = HEAP32[$menu_type>>2]|0;
    $402 = $rgui;
    $403 = ((($402)) + 44|0);
    $404 = HEAP32[$403>>2]|0;
    (_directory_parse($399,$400,$401,$404)|0);
   }
   $405 = $rgui;
   $406 = ((($405)) + 48|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = $rgui;
   $409 = ((($408)) + 44|0);
   $410 = HEAP32[$409>>2]|0;
   $411 = ((($410)) + 8|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = ($407>>>0)>=($412>>>0);
   if ($413) {
    $414 = $rgui;
    $415 = ((($414)) + 44|0);
    $416 = HEAP32[$415>>2]|0;
    $417 = ((($416)) + 8|0);
    $418 = HEAP32[$417>>2]|0;
    $419 = ($418|0)!=(0);
    if ($419) {
     $420 = $rgui;
     $421 = ((($420)) + 44|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ((($422)) + 8|0);
     $424 = HEAP32[$423>>2]|0;
     $425 = (($424) - 1)|0;
     $426 = $rgui;
     $427 = ((($426)) + 48|0);
     HEAP32[$427>>2] = $425;
     break;
    }
   }
   $428 = $rgui;
   $429 = ((($428)) + 44|0);
   $430 = HEAP32[$429>>2]|0;
   $431 = ((($430)) + 8|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = ($432|0)!=(0);
   if (!($433)) {
    $434 = $rgui;
    $435 = ((($434)) + 48|0);
    HEAP32[$435>>2] = 0;
   }
  }
 } while(0);
 $436 = $rgui;
 _render_text($436);
 $437 = $ret;
 $0 = $437;
 $438 = $0;
 STACKTOP = sp;return ($438|0);
}
function _menu_type_is_settings($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $0;
 $2 = ($1|0)==(4);
 $3 = $0;
 $4 = ($3|0)==(58);
 $or$cond = $2 | $4;
 $5 = $0;
 $6 = ($5|0)==(5);
 $or$cond3 = $or$cond | $6;
 $7 = $0;
 $8 = ($7|0)==(26);
 $or$cond5 = $or$cond3 | $8;
 $9 = $0;
 $10 = ($9|0)==(59);
 $or$cond7 = $or$cond5 | $10;
 $11 = $0;
 $12 = ($11|0)==(69);
 $or$cond9 = $or$cond7 | $12;
 $13 = $0;
 $14 = ($13|0)==(61);
 $or$cond11 = $or$cond9 | $14;
 $15 = $0;
 $16 = ($15|0)==(62);
 $or$cond13 = $or$cond11 | $16;
 if ($or$cond13) {
  $19 = 1;
  STACKTOP = sp;return ($19|0);
 }
 $17 = $0;
 $18 = ($17|0)==(60);
 $19 = $18;
 STACKTOP = sp;return ($19|0);
}
function _rgui_settings_iterate($rgui,$action) {
 $rgui = $rgui|0;
 $action = $action|0;
 var $$not = 0, $$old = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $custom = 0, $dir = 0, $label = 0, $menu_type = 0, $or$cond = 0, $or$cond12 = 0, $or$cond15 = 0, $or$cond18 = 0, $or$cond21 = 0, $or$cond24 = 0, $or$cond27 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond6 = 0, $or$cond9 = 0, $ret = 0, $type = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $type = sp + 20|0;
 $label = sp + 16|0;
 $dir = sp + 12|0;
 $menu_type = sp + 8|0;
 $1 = $rgui;
 $2 = $action;
 $3 = HEAP32[270224>>2]|0;
 $4 = $3<<1;
 $5 = $1;
 $6 = ((($5)) + 32|0);
 HEAP32[$6>>2] = $4;
 HEAP32[$type>>2] = 0;
 HEAP32[$label>>2] = 0;
 $7 = $2;
 $8 = ($7|0)!=(6);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  _rgui_list_get_at_offset($11,$14,$label,$type);
 }
 $15 = HEAP32[$type>>2]|0;
 $16 = ($15|0)==(57);
 if ($16) {
  HEAP32[$label>>2] = 773086;
 } else {
  $17 = HEAP32[$type>>2]|0;
  $18 = ($17|0)==(71);
  if ($18) {
   $19 = $1;
   $20 = ((($19)) + 54|0);
   HEAP32[$label>>2] = $20;
  }
 }
 HEAP32[$dir>>2] = 0;
 HEAP32[$menu_type>>2] = 0;
 $21 = $1;
 $22 = ((($21)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 _rgui_list_get_last($23,$dir,$menu_type);
 $24 = $1;
 $25 = ((($24)) + 52|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 if ($27) {
  $2 = 10;
 }
 $28 = $2;
 L12: do {
  switch ($28|0) {
  case 0:  {
   $29 = $1;
   $30 = ((($29)) + 48|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31>>>0)>(0);
   $33 = $1;
   if ($32) {
    $34 = ((($33)) + 48|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + -1)|0;
    HEAP32[$34>>2] = $36;
    break L12;
   } else {
    $37 = ((($33)) + 44|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($38)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) - 1)|0;
    $42 = $1;
    $43 = ((($42)) + 48|0);
    HEAP32[$43>>2] = $41;
    break L12;
   }
   break;
  }
  case 1:  {
   $44 = $1;
   $45 = ((($44)) + 48|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 1)|0;
   $48 = $1;
   $49 = ((($48)) + 44|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($47>>>0)<($52>>>0);
   $54 = $1;
   $55 = ((($54)) + 48|0);
   if ($53) {
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + 1)|0;
    HEAP32[$55>>2] = $57;
    break L12;
   } else {
    HEAP32[$55>>2] = 0;
    break L12;
   }
   break;
  }
  case 5:  {
   $58 = $1;
   $59 = ((($58)) + 40|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62>>>0)>(1);
   if ($63) {
    $64 = $1;
    $65 = ((($64)) + 40|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $1;
    $68 = ((($67)) + 48|0);
    _rgui_list_pop($66,$68);
    $69 = $1;
    $70 = ((($69)) + 52|0);
    HEAP8[$70>>0] = 1;
   }
   break;
  }
  case 8: case 4: case 3: case 2:  {
   $71 = HEAP32[$type>>2]|0;
   $72 = ($71|0)==(55);
   $73 = $2;
   $74 = ($73|0)==(4);
   $or$cond = $72 & $74;
   if ($or$cond) {
    $75 = $1;
    $76 = ((($75)) + 40|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $1;
    $79 = ((($78)) + 54|0);
    $80 = $1;
    $81 = ((($80)) + 48|0);
    $82 = HEAP32[$81>>2]|0;
    _rgui_list_push($77,$79,1,$82);
    $83 = $1;
    $84 = ((($83)) + 48|0);
    HEAP32[$84>>2] = 0;
    $85 = $1;
    $86 = ((($85)) + 52|0);
    HEAP8[$86>>0] = 1;
    break L12;
   }
   $87 = HEAP32[$type>>2]|0;
   $88 = ($87|0)==(56);
   if ($88) {
    $$old = $2;
    $$old2 = ($$old|0)==(4);
    if ($$old2) {
     label = 23;
    }
   } else {
    $89 = HEAP32[$type>>2]|0;
    $90 = (_menu_type_is_directory_browser($89)|0);
    $91 = $2;
    $92 = ($91|0)==(4);
    $or$cond3 = $90 & $92;
    if ($or$cond3) {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    $93 = $1;
    $94 = ((($93)) + 40|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = HEAP32[$type>>2]|0;
    $97 = $1;
    $98 = ((($97)) + 48|0);
    $99 = HEAP32[$98>>2]|0;
    _rgui_list_push($95,773086,$96,$99);
    $100 = $1;
    $101 = ((($100)) + 48|0);
    HEAP32[$101>>2] = 0;
    $102 = $1;
    $103 = ((($102)) + 52|0);
    HEAP8[$103>>0] = 1;
    break L12;
   }
   $104 = HEAP32[$type>>2]|0;
   $105 = (_menu_type_is_settings($104)|0);
   $106 = HEAP32[$type>>2]|0;
   $107 = ($106|0)==(57);
   $or$cond6 = $105 | $107;
   $108 = HEAP32[$type>>2]|0;
   $109 = ($108|0)==(71);
   $or$cond9 = $or$cond6 | $109;
   $110 = $2;
   $111 = ($110|0)==(4);
   $or$cond12 = $or$cond9 & $111;
   if ($or$cond12) {
    $112 = $1;
    $113 = ((($112)) + 40|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = HEAP32[$label>>2]|0;
    $116 = HEAP32[$type>>2]|0;
    $117 = $1;
    $118 = ((($117)) + 48|0);
    $119 = HEAP32[$118>>2]|0;
    _rgui_list_push($114,$115,$116,$119);
    $120 = $1;
    $121 = ((($120)) + 48|0);
    HEAP32[$121>>2] = 0;
    $122 = $1;
    $123 = ((($122)) + 52|0);
    HEAP8[$123>>0] = 1;
    break L12;
   }
   $124 = HEAP32[$type>>2]|0;
   $125 = ($124|0)==(12);
   $126 = $2;
   $127 = ($126|0)==(4);
   $or$cond15 = $125 & $127;
   $128 = $1;
   if ($or$cond15) {
    $129 = ((($128)) + 40|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = HEAP32[$type>>2]|0;
    $132 = $1;
    $133 = ((($132)) + 48|0);
    $134 = HEAP32[$133>>2]|0;
    _rgui_list_push($130,773086,$131,$134);
    $custom = (259612);
    $135 = HEAP32[(12)>>2]|0;
    $136 = ((($135)) + 44|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = HEAP32[(24)>>2]|0;
    $139 = $custom;
    FUNCTION_TABLE_vii[$137 & 1023]($138,$139);
    $140 = $custom;
    $141 = ((($140)) + 8|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (+($142>>>0));
    $144 = $custom;
    $145 = ((($144)) + 12|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (+($146>>>0));
    $148 = $143 / $147;
    HEAPF32[(265780)>>2] = $148;
    HEAP32[(336)>>2] = 7;
    $149 = HEAP32[(216)>>2]|0;
    $150 = ((($149)) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)!=(0|0);
    if (!($152)) {
     break L12;
    }
    $153 = HEAP32[(216)>>2]|0;
    $154 = ((($153)) + 12|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = HEAP32[(24)>>2]|0;
    $157 = HEAP32[(336)>>2]|0;
    FUNCTION_TABLE_vii[$155 & 1023]($156,$157);
    break L12;
   }
   $158 = HEAP32[$type>>2]|0;
   $159 = $2;
   $160 = HEAP32[$menu_type>>2]|0;
   $161 = (_rgui_settings_toggle_setting($128,$158,$159,$160)|0);
   $ret = $161;
   $162 = $ret;
   $163 = ($162|0)!=(0);
   if ($163) {
    $164 = $ret;
    $0 = $164;
    $219 = $0;
    STACKTOP = sp;return ($219|0);
   }
   break;
  }
  case 6:  {
   $165 = $1;
   $166 = ((($165)) + 48|0);
   HEAP32[$166>>2] = 0;
   $167 = $1;
   $168 = ((($167)) + 52|0);
   HEAP8[$168>>0] = 1;
   break;
  }
  case 9:  {
   $169 = $1;
   $170 = ((($169)) + 53|0);
   HEAP8[$170>>0] = 1;
   break;
  }
  default: {
  }
  }
 } while(0);
 $171 = $1;
 $172 = ((($171)) + 40|0);
 $173 = HEAP32[$172>>2]|0;
 _rgui_list_get_last($173,$dir,$menu_type);
 $174 = $1;
 $175 = ((($174)) + 52|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = $176&1;
 $$not = $177 ^ 1;
 $178 = HEAP32[$menu_type>>2]|0;
 $179 = ($178|0)==(1);
 $or$cond18 = $$not | $179;
 do {
  if (!($or$cond18)) {
   $180 = HEAP32[$menu_type>>2]|0;
   $181 = (_menu_type_is_shader_browser($180)|0);
   if (!($181)) {
    $182 = HEAP32[$menu_type>>2]|0;
    $183 = (_menu_type_is_directory_browser($182)|0);
    $184 = HEAP32[$menu_type>>2]|0;
    $185 = ($184|0)==(90);
    $or$cond21 = $183 | $185;
    $186 = HEAP32[$menu_type>>2]|0;
    $187 = ($186|0)==(57);
    $or$cond24 = $or$cond21 | $187;
    $188 = HEAP32[$menu_type>>2]|0;
    $189 = ($188|0)==(71);
    $or$cond27 = $or$cond24 | $189;
    $190 = HEAP32[$menu_type>>2]|0;
    $191 = ($190|0)==(56);
    $or$cond30 = $or$cond27 | $191;
    if (!($or$cond30)) {
     $192 = $1;
     $193 = ((($192)) + 52|0);
     HEAP8[$193>>0] = 0;
     $194 = HEAP32[$menu_type>>2]|0;
     $195 = ($194|0)==(60);
     if ($195) {
      $196 = $1;
      _rgui_settings_controller_populate_entries($196);
      break;
     }
     $197 = HEAP32[$menu_type>>2]|0;
     $198 = ($197|0)==(61);
     if ($198) {
      $199 = $1;
      _rgui_settings_path_populate_entries($199);
      break;
     }
     $200 = HEAP32[$menu_type>>2]|0;
     $201 = ($200|0)==(62);
     if ($201) {
      $202 = $1;
      _rgui_settings_options_populate_entries($202);
      break;
     }
     $203 = HEAP32[$menu_type>>2]|0;
     $204 = ($203|0)==(58);
     if ($204) {
      $205 = $1;
      _rgui_settings_core_options_populate_entries($205);
      break;
     }
     $206 = HEAP32[$menu_type>>2]|0;
     $207 = ($206|0)==(59);
     if ($207) {
      $208 = $1;
      _rgui_settings_audio_options_populate_entries($208);
      break;
     }
     $209 = HEAP32[$menu_type>>2]|0;
     $210 = ($209|0)==(69);
     if ($210) {
      $211 = $1;
      _rgui_settings_disc_options_populate_entries($211);
      break;
     }
     $212 = HEAP32[$menu_type>>2]|0;
     $213 = ($212|0)==(5);
     if ($213) {
      $214 = $1;
      _rgui_settings_video_options_populate_entries($214);
      break;
     }
     $215 = HEAP32[$menu_type>>2]|0;
     $216 = ($215|0)==(26);
     $217 = $1;
     if ($216) {
      _rgui_settings_shader_manager_populate_entries($217);
      break;
     } else {
      _rgui_settings_populate_entries($217);
      break;
     }
    }
   }
  }
 } while(0);
 $218 = $1;
 _render_text($218);
 $0 = 0;
 $219 = $0;
 STACKTOP = sp;return ($219|0);
}
function _rgui_settings_toggle_setting($rgui,$setting,$action,$menu_type) {
 $rgui = $rgui|0;
 $setting = $setting|0;
 $action = $action|0;
 $menu_type = $menu_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $changed = 0, $changed1 = 0, $control = 0, $current = 0, $current_device = 0, $current_index = 0, $i = 0, $keybind_action = 0, $keybind_action2 = 0, $keybind_action3 = 0, $next_index = 0, $num_disks = 0, $or$cond = 0, $or$cond11 = 0;
 var $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, $port = 0, $step = 0, $updated = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $rgui;
 $2 = $setting;
 $3 = $action;
 $4 = $menu_type;
 $5 = $1;
 $6 = ((($5)) + 113708|0);
 $7 = HEAP32[$6>>2]|0;
 $port = $7;
 $8 = $2;
 $9 = ($8>>>0)>=(6);
 $10 = $2;
 $11 = ($10>>>0)<=(25);
 $or$cond = $9 & $11;
 if ($or$cond) {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = (_video_option_toggle_setting($12,$13,$14)|0);
  $0 = $15;
  $465 = $0;
  STACKTOP = sp;return ($465|0);
 }
 $16 = $2;
 $17 = ($16>>>0)>=(27);
 $18 = $2;
 $19 = ($18>>>0)<=(54);
 $or$cond3 = $17 & $19;
 if ($or$cond3) {
  $20 = $1;
  $21 = $2;
  $22 = $3;
  $23 = (_shader_manager_toggle_setting($20,$21,$22)|0);
  $0 = $23;
  $465 = $0;
  STACKTOP = sp;return ($465|0);
 }
 $24 = $2;
 $25 = ($24>>>0)>=(65536);
 $26 = $2;
 if ($25) {
  $27 = $3;
  $28 = (_rgui_core_setting_toggle($26,$27)|0);
  $0 = $28;
  $465 = $0;
  STACKTOP = sp;return ($465|0);
 }
 L13: do {
  switch ($26|0) {
  case 63:  {
   $29 = $3;
   $30 = ($29|0)==(4);
   $31 = $3;
   $32 = ($31|0)==(2);
   $or$cond5 = $30 | $32;
   $33 = $3;
   $34 = ($33|0)==(3);
   $or$cond7 = $or$cond5 | $34;
   if (!($or$cond7)) {
    $37 = $3;
    $38 = ($37|0)==(8);
    if (!($38)) {
     break L13;
    }
    HEAP8[(98508)>>0] = 0;
    _rarch_deinit_rewind();
    break L13;
   }
   _settings_set(4096,0);
   $35 = HEAP8[(98508)>>0]|0;
   $36 = $35&1;
   if ($36) {
    _rarch_init_rewind();
    break L13;
   } else {
    _rarch_deinit_rewind();
    break L13;
   }
   break;
  }
  case 73:  {
   $39 = $3;
   $40 = ($39|0)==(4);
   $41 = $3;
   $42 = ($41|0)==(2);
   $or$cond9 = $40 | $42;
   $43 = $3;
   $44 = ($43|0)==(3);
   $or$cond11 = $or$cond9 | $44;
   if ($or$cond11) {
    $45 = HEAP8[(16771)>>0]|0;
    $46 = $45&1;
    $47 = $46 ^ 1;
    $48 = $47&1;
    HEAP8[(16771)>>0] = $48;
    break L13;
   }
   $49 = $3;
   $50 = ($49|0)==(8);
   if ($50) {
    HEAP8[(16771)>>0] = 1;
   }
   break;
  }
  case 64:  {
   $51 = $3;
   $52 = ($51|0)==(4);
   $53 = $3;
   $54 = ($53|0)==(3);
   $or$cond13 = $52 | $54;
   if ($or$cond13) {
    _settings_set(134217728,0);
    break L13;
   }
   $55 = $3;
   $56 = ($55|0)==(2);
   if ($56) {
    _settings_set(67108864,0);
    break L13;
   }
   $57 = $3;
   $58 = ($57|0)==(8);
   if ($58) {
    _settings_set(268435456,0);
   }
   break;
  }
  case 65:  {
   $59 = $3;
   $60 = ($59|0)==(4);
   $61 = $3;
   $62 = ($61|0)==(3);
   $or$cond15 = $60 | $62;
   $63 = $3;
   $64 = ($63|0)==(2);
   $or$cond17 = $or$cond15 | $64;
   if ($or$cond17) {
    $65 = HEAP8[(259670)>>0]|0;
    $66 = $65&1;
    $67 = $66 ^ 1;
    $68 = $67&1;
    HEAP8[(259670)>>0] = $68;
    break L13;
   }
   $69 = $3;
   $70 = ($69|0)==(8);
   if ($70) {
    HEAP8[(259670)>>0] = 1;
   }
   break;
  }
  case 68: case 67:  {
   $71 = $3;
   $72 = ($71|0)==(4);
   if ($72) {
    $73 = $2;
    $74 = ($73|0)==(67);
    if ($74) {
     _rarch_save_state();
    } else {
     _rarch_load_state();
    }
    $75 = (259656);
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = (($75) + 4)|0;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = $77 | 1;
    $82 = (259656);
    $83 = $82;
    HEAP32[$83>>2] = $81;
    $84 = (($82) + 4)|0;
    $85 = $84;
    HEAP32[$85>>2] = $80;
    $0 = -1;
    $465 = $0;
    STACKTOP = sp;return ($465|0);
   }
   $86 = $3;
   $87 = ($86|0)==(8);
   if ($87) {
    _settings_set(0,128);
    break L13;
   }
   $88 = $3;
   $89 = ($88|0)==(2);
   if ($89) {
    _settings_set(8192,0);
    break L13;
   }
   $90 = $3;
   $91 = ($90|0)==(3);
   if ($91) {
    _settings_set(16384,0);
   }
   break;
  }
  case 72:  {
   $92 = $3;
   $93 = ($92|0)==(4);
   if ($93) {
    _rarch_take_screenshot();
   }
   break;
  }
  case 82:  {
   $94 = $3;
   $95 = ($94|0)==(4);
   if ($95) {
    _rarch_game_reset();
    $96 = (259656);
    $97 = $96;
    $98 = HEAP32[$97>>2]|0;
    $99 = (($96) + 4)|0;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = $98 | 1;
    $103 = (259656);
    $104 = $103;
    HEAP32[$104>>2] = $102;
    $105 = (($103) + 4)|0;
    $106 = $105;
    HEAP32[$106>>2] = $101;
    $0 = -1;
    $465 = $0;
    STACKTOP = sp;return ($465|0);
   }
   break;
  }
  case 83:  {
   $107 = $3;
   $108 = ($107|0)==(8);
   if ($108) {
    _settings_set(0,4);
    break L13;
   } else {
    _settings_set(8,0);
    break L13;
   }
   break;
  }
  case 84:  {
   $109 = $3;
   $110 = ($109|0)==(8);
   if ($110) {
    _settings_set(0,8);
    break L13;
   }
   $111 = $3;
   $112 = ($111|0)==(2);
   if ($112) {
    _settings_set(16,0);
    break L13;
   }
   $113 = $3;
   $114 = ($113|0)==(3);
   if ($114) {
    _settings_set(32,0);
   }
   break;
  }
  case 86:  {
   $115 = $3;
   $116 = ($115|0)==(8);
   $117 = $3;
   $118 = ($117|0)==(2);
   $or$cond19 = $116 | $118;
   if ($or$cond19) {
    $119 = (259656);
    $120 = $119;
    $121 = HEAP32[$120>>2]|0;
    $122 = (($119) + 4)|0;
    $123 = $122;
    $124 = HEAP32[$123>>2]|0;
    $125 = $121 & -257;
    $126 = (259656);
    $127 = $126;
    HEAP32[$127>>2] = $125;
    $128 = (($126) + 4)|0;
    $129 = $128;
    HEAP32[$129>>2] = $124;
    break L13;
   }
   $130 = $3;
   $131 = ($130|0)==(3);
   if ($131) {
    $132 = (259656);
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = (($132) + 4)|0;
    $136 = $135;
    $137 = HEAP32[$136>>2]|0;
    $138 = $134 | 256;
    $139 = (259656);
    $140 = $139;
    HEAP32[$140>>2] = $138;
    $141 = (($139) + 4)|0;
    $142 = $141;
    HEAP32[$142>>2] = $137;
   }
   break;
  }
  case 70:  {
   $control = (201612);
   $143 = $control;
   $144 = ((($143)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = (FUNCTION_TABLE_i[$145 & 511]()|0);
   $num_disks = $146;
   $147 = $control;
   $148 = ((($147)) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (FUNCTION_TABLE_i[$149 & 511]()|0);
   $current = $150;
   $step = 0;
   $151 = $3;
   $152 = ($151|0)==(3);
   $153 = $3;
   $154 = ($153|0)==(4);
   $or$cond21 = $152 | $154;
   if ($or$cond21) {
    $step = 1;
   } else {
    $155 = $3;
    $156 = ($155|0)==(2);
    if ($156) {
     $step = -1;
    }
   }
   $157 = $step;
   $158 = ($157|0)!=(0);
   if ($158) {
    $159 = $current;
    $160 = $num_disks;
    $161 = (($159) + ($160))|0;
    $162 = (($161) + 1)|0;
    $163 = $step;
    $164 = (($162) + ($163))|0;
    $165 = $num_disks;
    $166 = (($165) + 1)|0;
    $167 = (($164>>>0) % ($166>>>0))&-1;
    $next_index = $167;
    _rarch_disk_control_set_eject(1,0);
    $168 = $next_index;
    _rarch_disk_control_set_index($168);
    _rarch_disk_control_set_eject(0,0);
   }
   break;
  }
  case 87:  {
   $169 = $3;
   $170 = ($169|0)==(4);
   if ($170) {
    $171 = (259656);
    $172 = $171;
    $173 = HEAP32[$172>>2]|0;
    $174 = (($171) + 4)|0;
    $175 = $174;
    $176 = HEAP32[$175>>2]|0;
    $177 = $173 & -2;
    $178 = (259656);
    $179 = $178;
    HEAP32[$179>>2] = $177;
    $180 = (($178) + 4)|0;
    $181 = $180;
    HEAP32[$181>>2] = $176;
    $182 = (259656);
    $183 = $182;
    $184 = HEAP32[$183>>2]|0;
    $185 = (($182) + 4)|0;
    $186 = $185;
    $187 = HEAP32[$186>>2]|0;
    $188 = $184 | 1024;
    $189 = (259656);
    $190 = $189;
    HEAP32[$190>>2] = $188;
    $191 = (($189) + 4)|0;
    $192 = $191;
    HEAP32[$192>>2] = $187;
    $0 = -1;
    $465 = $0;
    STACKTOP = sp;return ($465|0);
   }
   break;
  }
  case 88:  {
   $193 = $3;
   $194 = ($193|0)==(4);
   if ($194) {
    $195 = HEAP8[(259668)>>0]|0;
    $196 = $195&1;
    if ($196) {
     $197 = (259656);
     $198 = $197;
     $199 = HEAP32[$198>>2]|0;
     $200 = (($197) + 4)|0;
     $201 = $200;
     $202 = HEAP32[$201>>2]|0;
     $203 = $199 | 1;
     $204 = (259656);
     $205 = $204;
     HEAP32[$205>>2] = $203;
     $206 = (($204) + 4)|0;
     $207 = $206;
     HEAP32[$207>>2] = $202;
     $0 = -1;
     $465 = $0;
     STACKTOP = sp;return ($465|0);
    }
   }
   break;
  }
  case 89:  {
   $208 = $3;
   $209 = ($208|0)==(4);
   if ($209) {
    $210 = (259656);
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = $212 & -2;
    $217 = (259656);
    $218 = $217;
    HEAP32[$218>>2] = $216;
    $219 = (($217) + 4)|0;
    $220 = $219;
    HEAP32[$220>>2] = $215;
    $0 = -1;
    $465 = $0;
    STACKTOP = sp;return ($465|0);
   }
   break;
  }
  case 90:  {
   $221 = $3;
   switch ($221|0) {
   case 4:  {
    $222 = $1;
    $223 = ((($222)) + 40|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $2;
    $226 = $1;
    $227 = ((($226)) + 48|0);
    $228 = HEAP32[$227>>2]|0;
    _rgui_list_push($224,(180498),$225,$228);
    $229 = $1;
    $230 = ((($229)) + 48|0);
    HEAP32[$230>>2] = 0;
    $231 = $1;
    $232 = ((($231)) + 52|0);
    HEAP8[$232>>0] = 1;
    break L13;
    break;
   }
   case 8:  {
    break;
   }
   default: {
    break L13;
   }
   }
   $233 = HEAP32[(192)>>2]|0;
   $234 = ($233|0)!=(0|0);
   if ($234) {
    $235 = HEAP32[(192)>>2]|0;
    _input_overlay_free($235);
   }
   HEAP32[(192)>>2] = 0;
   HEAP8[(61632)>>0] = 0;
   break;
  }
  case 91:  {
   $changed = 1;
   $236 = $3;
   switch ($236|0) {
   case 2:  {
    _settings_set(1048576,0);
    break;
   }
   case 4: case 3:  {
    _settings_set(2097152,0);
    break;
   }
   case 8:  {
    _settings_set(-2147483648,0);
    break;
   }
   default: {
    $changed = 0;
   }
   }
   $237 = $changed;
   $238 = $237&1;
   $239 = HEAP32[(192)>>2]|0;
   $240 = ($239|0)!=(0|0);
   $or$cond23 = $238 & $240;
   if ($or$cond23) {
    $241 = HEAP32[(192)>>2]|0;
    $242 = +HEAPF32[(65728)>>2];
    _input_overlay_set_alpha_mod($241,$242);
   }
   break;
  }
  case 92:  {
   $changed1 = 1;
   $243 = $3;
   switch ($243|0) {
   case 2:  {
    _settings_set(4194304,0);
    break;
   }
   case 4: case 3:  {
    _settings_set(8388608,0);
    break;
   }
   case 8:  {
    _settings_set(0,1);
    break;
   }
   default: {
    $changed1 = 0;
   }
   }
   $244 = $changed1;
   $245 = $244&1;
   $246 = HEAP32[(192)>>2]|0;
   $247 = ($246|0)!=(0|0);
   $or$cond25 = $245 & $247;
   if ($or$cond25) {
    $248 = HEAP32[(192)>>2]|0;
    $249 = +HEAPF32[(65732)>>2];
    _input_overlay_set_scale_factor($248,$249);
   }
   break;
  }
  case 93:  {
   $250 = $3;
   $251 = ($250|0)==(8);
   do {
    if ($251) {
     $252 = $1;
     $253 = ((($252)) + 113708|0);
     HEAP32[$253>>2] = 0;
    } else {
     $254 = $3;
     $255 = ($254|0)==(2);
     if ($255) {
      $256 = $1;
      $257 = ((($256)) + 113708|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = ($258|0)!=(0);
      if (!($259)) {
       break;
      }
      $260 = $1;
      $261 = ((($260)) + 113708|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = (($262) + -1)|0;
      HEAP32[$261>>2] = $263;
      break;
     }
     $264 = $3;
     $265 = ($264|0)==(3);
     if ($265) {
      $266 = $1;
      $267 = ((($266)) + 113708|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = ($268>>>0)<(7);
      if ($269) {
       $270 = $1;
       $271 = ((($270)) + 113708|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = (($272) + 1)|0;
       HEAP32[$271>>2] = $273;
      }
     }
    }
   } while(0);
   $274 = $1;
   $275 = ((($274)) + 113708|0);
   $276 = HEAP32[$275>>2]|0;
   $port = $276;
   break;
  }
  case 94:  {
   $277 = HEAP32[(16)>>2]|0;
   $278 = ((($277)) + 20|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = ($279|0)!=(0|0);
   $281 = $port;
   if (!($280)) {
    $327 = ((61012) + ($281<<2)|0);
    $p = $327;
    $328 = $3;
    $329 = ($328|0)==(8);
    do {
     if ($329) {
      $330 = $port;
      $331 = $p;
      HEAP32[$331>>2] = $330;
     } else {
      $332 = $3;
      $333 = ($332|0)==(2);
      if ($333) {
       $334 = $p;
       $335 = HEAP32[$334>>2]|0;
       $336 = (($335) + -1)|0;
       HEAP32[$334>>2] = $336;
       break;
      }
      $337 = $3;
      $338 = ($337|0)==(3);
      if ($338) {
       $339 = $p;
       $340 = HEAP32[$339>>2]|0;
       $341 = (($340) + 1)|0;
       HEAP32[$339>>2] = $341;
      }
     }
    } while(0);
    $342 = $p;
    $343 = HEAP32[$342>>2]|0;
    $344 = ($343|0)<(-1);
    $345 = $p;
    if ($344) {
     HEAP32[$345>>2] = -1;
     break L13;
    }
    $346 = HEAP32[$345>>2]|0;
    $347 = ($346|0)>=(8);
    if (!($347)) {
     break L13;
    }
    $348 = $p;
    HEAP32[$348>>2] = 7;
    break L13;
   }
   $282 = ((61044) + ($281<<2)|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = (($283) + 0)|0;
   HEAP32[$282>>2] = $284;
   $285 = $3;
   $286 = ($285|0)==(8);
   do {
    if ($286) {
     $287 = $port;
     $288 = ((61044) + ($287<<2)|0);
     HEAP32[$288>>2] = 0;
    } else {
     $289 = $3;
     $290 = ($289|0)==(2);
     if ($290) {
      $291 = $port;
      $292 = ((61044) + ($291<<2)|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = (($293) + -1)|0;
      HEAP32[$292>>2] = $294;
      break;
     }
     $295 = $3;
     $296 = ($295|0)==(3);
     if ($296) {
      $297 = $port;
      $298 = ((61044) + ($297<<2)|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = (($299) + 1)|0;
      HEAP32[$298>>2] = $300;
     }
    }
   } while(0);
   $301 = $port;
   $302 = ((61044) + ($301<<2)|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = ($303>>>0)>=(0);
   if ($304) {
    $305 = $port;
    $306 = ((61044) + ($305<<2)|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (($307) - 0)|0;
    HEAP32[$306>>2] = $308;
   }
   $keybind_action = 16;
   $309 = $port;
   $310 = ((61588) + ($309<<2)|0);
   $311 = HEAP32[$310>>2]|0;
   switch ($311|0) {
   case 1:  {
    $312 = $keybind_action;
    $313 = $312 | 64;
    $keybind_action = $313;
    break;
   }
   case 2:  {
    $314 = $keybind_action;
    $315 = $314 | 128;
    $keybind_action = $315;
    break;
   }
   case 0:  {
    $316 = $keybind_action;
    $317 = $316 | 32;
    $keybind_action = $317;
    break;
   }
   default: {
   }
   }
   $318 = HEAP32[(16)>>2]|0;
   $319 = ((($318)) + 20|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = HEAP32[(28)>>2]|0;
   $322 = $port;
   $323 = ((61044) + ($322<<2)|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = $port;
   $326 = $keybind_action;
   FUNCTION_TABLE_viiiii[$320 & 511]($321,$324,$325,0,$326);
   break;
  }
  case 95:  {
   $349 = $port;
   $350 = ((60976) + ($349<<2)|0);
   $351 = HEAP32[$350>>2]|0;
   $current_device = $351;
   $current_index = 0;
   $i = 0;
   while(1) {
    $352 = $i;
    $353 = ($352>>>0)<(8);
    if (!($353)) {
     break;
    }
    $354 = $current_device;
    $355 = $i;
    $356 = (270248 + ($355<<2)|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = ($354|0)==($357|0);
    $359 = $i;
    if ($358) {
     label = 124;
     break;
    }
    $360 = (($359) + 1)|0;
    $i = $360;
   }
   if ((label|0) == 124) {
    $current_index = $359;
   }
   $updated = 1;
   $361 = $3;
   switch ($361|0) {
   case 8:  {
    $current_device = 1;
    break;
   }
   case 2:  {
    $362 = $current_index;
    $363 = (($362) + 8)|0;
    $364 = (($363) - 1)|0;
    $365 = (($364>>>0) % 8)&-1;
    $366 = (270248 + ($365<<2)|0);
    $367 = HEAP32[$366>>2]|0;
    $current_device = $367;
    break;
   }
   case 4: case 3:  {
    $368 = $current_index;
    $369 = (($368) + 1)|0;
    $370 = (($369>>>0) % 8)&-1;
    $371 = (270248 + ($370<<2)|0);
    $372 = HEAP32[$371>>2]|0;
    $current_device = $372;
    break;
   }
   default: {
    $updated = 0;
   }
   }
   $373 = $updated;
   $374 = $373&1;
   if ($374) {
    $375 = $current_device;
    $376 = $port;
    $377 = ((60976) + ($376<<2)|0);
    HEAP32[$377>>2] = $375;
    $378 = HEAP32[265092>>2]|0;
    $379 = $port;
    $380 = $current_device;
    FUNCTION_TABLE_vii[$378 & 1023]($379,$380);
   }
   break;
  }
  case 96:  {
   $381 = $port;
   $382 = ((61588) + ($381<<2)|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = (($383) + 4)|0;
   HEAP32[$382>>2] = $384;
   $385 = $3;
   $386 = ($385|0)==(8);
   do {
    if ($386) {
     $387 = $port;
     $388 = ((61588) + ($387<<2)|0);
     HEAP32[$388>>2] = 1;
    } else {
     $389 = $3;
     $390 = ($389|0)==(2);
     if ($390) {
      $391 = $port;
      $392 = ((61588) + ($391<<2)|0);
      $393 = HEAP32[$392>>2]|0;
      $394 = (($393) + -1)|0;
      HEAP32[$392>>2] = $394;
      break;
     }
     $395 = $3;
     $396 = ($395|0)==(3);
     if ($396) {
      $397 = $port;
      $398 = ((61588) + ($397<<2)|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = (($399) + 1)|0;
      HEAP32[$398>>2] = $400;
     }
    }
   } while(0);
   $401 = $port;
   $402 = ((61588) + ($401<<2)|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = (($403>>>0) % 4)&-1;
   HEAP32[$402>>2] = $404;
   $405 = HEAP32[(16)>>2]|0;
   $406 = ((($405)) + 20|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = ($407|0)!=(0|0);
   if ($408) {
    $keybind_action2 = 0;
    $409 = $port;
    $410 = ((61588) + ($409<<2)|0);
    $411 = HEAP32[$410>>2]|0;
    switch ($411|0) {
    case 1:  {
     $keybind_action2 = 64;
     break;
    }
    case 2:  {
     $keybind_action2 = 128;
     break;
    }
    case 0:  {
     $keybind_action2 = 32;
     break;
    }
    default: {
    }
    }
    $412 = $keybind_action2;
    $413 = ($412|0)!=(0);
    if ($413) {
     $414 = HEAP32[(16)>>2]|0;
     $415 = ((($414)) + 20|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = HEAP32[(28)>>2]|0;
     $418 = $port;
     $419 = ((61044) + ($418<<2)|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = $port;
     $422 = $keybind_action2;
     FUNCTION_TABLE_viiiii[$416 & 511]($417,$420,$421,0,$422);
    }
   }
   break;
  }
  case 112: case 111: case 110: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 98: case 97:  {
   $423 = HEAP32[(16)>>2]|0;
   $424 = ((($423)) + 20|0);
   $425 = HEAP32[$424>>2]|0;
   $426 = ($425|0)!=(0|0);
   if ($426) {
    $keybind_action3 = 0;
    $427 = $3;
    $428 = ($427|0)==(8);
    do {
     if ($428) {
      $keybind_action3 = 8;
     } else {
      $429 = $3;
      $430 = ($429|0)==(2);
      if ($430) {
       $keybind_action3 = 2;
       break;
      }
      $431 = $3;
      $432 = ($431|0)==(3);
      if ($432) {
       $keybind_action3 = 4;
      }
     }
    } while(0);
    $433 = $keybind_action3;
    $434 = ($433|0)!=(0);
    if ($434) {
     $435 = HEAP32[(16)>>2]|0;
     $436 = ((($435)) + 20|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = HEAP32[(28)>>2]|0;
     $439 = $2;
     $440 = (($439) - 97)|0;
     $441 = ((61044) + ($440<<2)|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = $port;
     $444 = $2;
     $445 = (($444) - 97)|0;
     $446 = (270280 + ($445<<2)|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = $keybind_action3;
     FUNCTION_TABLE_viiiii[$437 & 511]($438,$442,$443,$447,$448);
     label = 155;
    } else {
     label = 155;
    }
   } else {
    label = 155;
   }
   break;
  }
  case 75:  {
   label = 155;
   break;
  }
  case 74:  {
   $453 = $3;
   $454 = ($453|0)==(8);
   if ($454) {
    HEAP8[(90316)>>0] = 0;
   }
   break;
  }
  case 78:  {
   $455 = $3;
   $456 = ($455|0)==(8);
   if ($456) {
    HEAP8[(172306)>>0] = 0;
   }
   break;
  }
  case 80:  {
   $457 = $3;
   $458 = ($457|0)==(8);
   if ($458) {
    HEAP8[(180498)>>0] = 0;
   }
   break;
  }
  case 77:  {
   $459 = $3;
   $460 = ($459|0)==(8);
   if ($460) {
    HEAP8[(176402)>>0] = 0;
   }
   break;
  }
  case 76:  {
   $461 = $3;
   $462 = ($461|0)==(8);
   if ($462) {
    HEAP8[(8545)>>0] = 0;
   }
   break;
  }
  case 81:  {
   $463 = $3;
   $464 = ($463|0)==(8);
   if ($464) {
    HEAP8[(94412)>>0] = 0;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 155) {
  $449 = $3;
  $450 = ($449|0)==(8);
  if ($450) {
   HEAP8[(98545)>>0] = 0;
   $451 = $1;
   $452 = ((($451)) + 54|0);
   HEAP8[$452>>0] = 0;
  }
 }
 $0 = 0;
 $465 = $0;
 STACKTOP = sp;return ($465|0);
}
function _video_option_toggle_setting($rgui,$setting,$action) {
 $rgui = $rgui|0;
 $setting = $setting|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $deviation = 0, $old = 0, $old_scale = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $refresh_rate = 0, $sample_points = 0, $scale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $refresh_rate = sp + 8|0;
 $deviation = sp;
 $sample_points = sp + 16|0;
 $0 = $rgui;
 $1 = $setting;
 $2 = $action;
 $3 = $1;
 do {
  switch ($3|0) {
  case 15:  {
   $4 = $2;
   $5 = ($4|0)==(8);
   if ($5) {
    _settings_set(0,32);
    $6 = HEAP32[(12)>>2]|0;
    $7 = ((($6)) + 40|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[(24)>>2]|0;
    $10 = HEAP32[(340)>>2]|0;
    $11 = HEAP32[(196972)>>2]|0;
    $12 = (($10) + ($11))|0;
    $13 = (($12>>>0) % 4)&-1;
    FUNCTION_TABLE_vii[$8 & 1023]($9,$13);
    STACKTOP = sp;return 0;
   }
   $14 = $2;
   $15 = ($14|0)==(2);
   if ($15) {
    _settings_set(1024,0);
    $16 = HEAP32[(12)>>2]|0;
    $17 = ((($16)) + 40|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[(24)>>2]|0;
    $20 = HEAP32[(340)>>2]|0;
    $21 = HEAP32[(196972)>>2]|0;
    $22 = (($20) + ($21))|0;
    $23 = (($22>>>0) % 4)&-1;
    FUNCTION_TABLE_vii[$18 & 1023]($19,$23);
    STACKTOP = sp;return 0;
   }
   $24 = $2;
   $25 = ($24|0)==(3);
   if (!($25)) {
    STACKTOP = sp;return 0;
   }
   _settings_set(2048,0);
   $26 = HEAP32[(12)>>2]|0;
   $27 = ((($26)) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[(24)>>2]|0;
   $30 = HEAP32[(340)>>2]|0;
   $31 = HEAP32[(196972)>>2]|0;
   $32 = (($30) + ($31))|0;
   $33 = (($32>>>0) % 4)&-1;
   FUNCTION_TABLE_vii[$28 & 1023]($29,$33);
   STACKTOP = sp;return 0;
   break;
  }
  case 7:  {
   $34 = $2;
   $35 = ($34|0)==(8);
   if ($35) {
    _settings_set(0,16);
   } else {
    _settings_set(128,0);
   }
   $36 = HEAP32[(216)>>2]|0;
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if (!($38)) {
    STACKTOP = sp;return 0;
   }
   $39 = HEAP32[(216)>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[(24)>>2]|0;
   $42 = HEAP8[(324)>>0]|0;
   $43 = $42&1;
   FUNCTION_TABLE_viii[$40 & 1023]($41,1,$43);
   STACKTOP = sp;return 0;
   break;
  }
  case 9:  {
   $44 = $2;
   $45 = ($44|0)==(8);
   if ($45) {
    HEAP32[(259636)>>2] = 0;
    $46 = HEAP32[(216)>>2]|0;
    $47 = ((($46)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0|0);
    if (!($49)) {
     STACKTOP = sp;return 0;
    }
    $50 = HEAP32[(216)>>2]|0;
    $51 = ((($50)) + 16|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = HEAP32[(24)>>2]|0;
    FUNCTION_TABLE_vi[$52 & 1023]($53);
    STACKTOP = sp;return 0;
   }
   $54 = $2;
   $55 = ($54|0)==(2);
   if ($55) {
    $56 = HEAP32[(259636)>>2]|0;
    $57 = ($56>>>0)>(0);
    if (!($57)) {
     STACKTOP = sp;return 0;
    }
    $58 = HEAP32[(259636)>>2]|0;
    $59 = (($58) + -1)|0;
    HEAP32[(259636)>>2] = $59;
    $60 = HEAP32[(216)>>2]|0;
    $61 = ((($60)) + 16|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)!=(0|0);
    if (!($63)) {
     STACKTOP = sp;return 0;
    }
    $64 = HEAP32[(216)>>2]|0;
    $65 = ((($64)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = HEAP32[(24)>>2]|0;
    FUNCTION_TABLE_vi[$66 & 1023]($67);
    STACKTOP = sp;return 0;
   } else {
    $68 = $2;
    $69 = ($68|0)==(3);
    $70 = HEAP32[(259636)>>2]|0;
    $71 = ($70>>>0)<(1);
    $or$cond9 = $69 & $71;
    if (!($or$cond9)) {
     STACKTOP = sp;return 0;
    }
    $72 = HEAP32[(259636)>>2]|0;
    $73 = (($72) + 1)|0;
    HEAP32[(259636)>>2] = $73;
    $74 = HEAP32[(216)>>2]|0;
    $75 = ((($74)) + 16|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(0|0);
    if (!($77)) {
     STACKTOP = sp;return 0;
    }
    $78 = HEAP32[(216)>>2]|0;
    $79 = ((($78)) + 16|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = HEAP32[(24)>>2]|0;
    FUNCTION_TABLE_vi[$80 & 1023]($81);
    STACKTOP = sp;return 0;
   }
   break;
  }
  case 10:  {
   $82 = $2;
   $83 = ($82|0)==(8);
   if ($83) {
    _settings_set(0,2);
   } else {
    $84 = $2;
    $85 = ($84|0)==(2);
    $86 = $2;
    $87 = ($86|0)==(3);
    $or$cond = $85 | $87;
    $88 = $2;
    $89 = ($88|0)==(4);
    $or$cond3 = $or$cond | $89;
    if ($or$cond3) {
     _settings_set(4,0);
    }
   }
   $90 = HEAP32[(216)>>2]|0;
   $91 = ((($90)) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)!=(0|0);
   if (!($93)) {
    STACKTOP = sp;return 0;
   }
   $94 = HEAP32[(216)>>2]|0;
   $95 = ((($94)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP32[(24)>>2]|0;
   FUNCTION_TABLE_vi[$96 & 1023]($97);
   STACKTOP = sp;return 0;
   break;
  }
  case 11:  {
   $98 = $2;
   $99 = ($98|0)==(8);
   do {
    if ($99) {
     _settings_set(536870912,0);
    } else {
     $100 = $2;
     $101 = ($100|0)==(2);
     if ($101) {
      _settings_set(1,0);
      break;
     }
     $102 = $2;
     $103 = ($102|0)==(3);
     if ($103) {
      _settings_set(2,0);
     }
    }
   } while(0);
   $104 = HEAP32[(216)>>2]|0;
   $105 = ((($104)) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)!=(0|0);
   if (!($107)) {
    STACKTOP = sp;return 0;
   }
   $108 = HEAP32[(216)>>2]|0;
   $109 = ((($108)) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[(24)>>2]|0;
   $112 = HEAP32[(336)>>2]|0;
   FUNCTION_TABLE_vii[$110 & 1023]($111,$112);
   STACKTOP = sp;return 0;
   break;
  }
  case 14:  {
   $113 = $2;
   $114 = ($113|0)==(4);
   if (!($114)) {
    STACKTOP = sp;return 0;
   }
   $115 = HEAP8[(296)>>0]|0;
   $116 = $115&1;
   $117 = $116 ^ 1;
   _rarch_set_fullscreen($117);
   STACKTOP = sp;return 0;
   break;
  }
  case 16:  {
   $118 = $2;
   switch ($118|0) {
   case 8:  {
    _settings_set(1073741824,0);
    STACKTOP = sp;return 0;
    break;
   }
   case 4: case 3: case 2:  {
    _settings_set(16777216,0);
    STACKTOP = sp;return 0;
    break;
   }
   default: {
    STACKTOP = sp;return 0;
   }
   }
   break;
  }
  case 17:  {
   $119 = $2;
   switch ($119|0) {
   case 8:  {
    HEAP8[(313)>>0] = 0;
    STACKTOP = sp;return 0;
    break;
   }
   case 4: case 3: case 2:  {
    $120 = HEAP8[(313)>>0]|0;
    $121 = $120&1;
    $122 = $121 ^ 1;
    $123 = $122&1;
    HEAP8[(313)>>0] = $123;
    STACKTOP = sp;return 0;
    break;
   }
   default: {
    STACKTOP = sp;return 0;
   }
   }
   break;
  }
  case 19:  {
   $124 = $2;
   switch ($124|0) {
   case 8:  {
    HEAP8[(314)>>0] = 0;
    STACKTOP = sp;return 0;
    break;
   }
   case 4: case 3: case 2:  {
    $125 = HEAP8[(314)>>0]|0;
    $126 = $125&1;
    $127 = $126 ^ 1;
    $128 = $127&1;
    HEAP8[(314)>>0] = $128;
    STACKTOP = sp;return 0;
    break;
   }
   default: {
    STACKTOP = sp;return 0;
   }
   }
   break;
  }
  case 23:  {
   $129 = $2;
   switch ($129|0) {
   case 8:  {
    HEAP8[(326)>>0] = 1;
    STACKTOP = sp;return 0;
    break;
   }
   case 4: case 3: case 2:  {
    $130 = HEAP8[(326)>>0]|0;
    $131 = $130&1;
    $132 = $131 ^ 1;
    $133 = $132&1;
    HEAP8[(326)>>0] = $133;
    STACKTOP = sp;return 0;
    break;
   }
   default: {
    STACKTOP = sp;return 0;
   }
   }
   break;
  }
  case 22: case 21:  {
   $134 = $1;
   $135 = ($134|0)==(21);
   $136 = $135 ? (288) : (292);
   $scale = $136;
   $137 = $scale;
   $138 = +HEAPF32[$137>>2];
   $old_scale = $138;
   $139 = $2;
   switch ($139|0) {
   case 8:  {
    $140 = $scale;
    HEAPF32[$140>>2] = 3.0;
    break;
   }
   case 2:  {
    $141 = $scale;
    $142 = +HEAPF32[$141>>2];
    $143 = $142 - 1.0;
    HEAPF32[$141>>2] = $143;
    break;
   }
   case 3:  {
    $144 = $scale;
    $145 = +HEAPF32[$144>>2];
    $146 = $145 + 1.0;
    HEAPF32[$144>>2] = $146;
    break;
   }
   default: {
   }
   }
   $147 = $scale;
   $148 = +HEAPF32[$147>>2];
   $149 = (+_roundf($148));
   $150 = $scale;
   HEAPF32[$150>>2] = $149;
   $151 = $scale;
   $152 = +HEAPF32[$151>>2];
   $153 = $152 > 1.0;
   if ($153) {
    $154 = $scale;
    $155 = +HEAPF32[$154>>2];
    $157 = $155;
   } else {
    $157 = 1.0;
   }
   $156 = $scale;
   HEAPF32[$156>>2] = $157;
   $158 = $old_scale;
   $159 = $scale;
   $160 = +HEAPF32[$159>>2];
   $161 = $158 != $160;
   if (!($161)) {
    STACKTOP = sp;return 0;
   }
   $162 = HEAP8[(296)>>0]|0;
   $163 = $162&1;
   if ($163) {
    STACKTOP = sp;return 0;
   }
   $164 = HEAP8[(296)>>0]|0;
   $165 = $164&1;
   _rarch_set_fullscreen($165);
   STACKTOP = sp;return 0;
   break;
  }
  case 20:  {
   $166 = HEAP32[(316)>>2]|0;
   $old = $166;
   $167 = $2;
   switch ($167|0) {
   case 8:  {
    HEAP32[(316)>>2] = 1;
    break;
   }
   case 2:  {
    $168 = HEAP32[(316)>>2]|0;
    $169 = (($168) + -1)|0;
    HEAP32[(316)>>2] = $169;
    break;
   }
   case 4: case 3:  {
    $170 = HEAP32[(316)>>2]|0;
    $171 = (($170) + 1)|0;
    HEAP32[(316)>>2] = $171;
    break;
   }
   default: {
   }
   }
   $172 = HEAP32[(316)>>2]|0;
   $173 = ($172>>>0)<(4);
   $174 = HEAP32[(316)>>2]|0;
   $175 = $173 ? $174 : 4;
   HEAP32[(316)>>2] = $175;
   $176 = HEAP32[(316)>>2]|0;
   $177 = ($176>>>0)>(1);
   $178 = HEAP32[(316)>>2]|0;
   $179 = $177 ? $178 : 1;
   HEAP32[(316)>>2] = $179;
   $180 = $old;
   $181 = HEAP32[(316)>>2]|0;
   $182 = ($180|0)!=($181|0);
   $183 = HEAP32[(12)>>2]|0;
   $184 = ($183|0)!=(0|0);
   $or$cond5 = $182 & $184;
   $185 = HEAP32[(24)>>2]|0;
   $186 = ($185|0)!=(0|0);
   $or$cond7 = $or$cond5 & $186;
   if (!($or$cond7)) {
    STACKTOP = sp;return 0;
   }
   $187 = HEAP32[(12)>>2]|0;
   $188 = ((($187)) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = HEAP32[(24)>>2]|0;
   FUNCTION_TABLE_vii[$189 & 1023]($190,0);
   STACKTOP = sp;return 0;
   break;
  }
  case 18:  {
   $191 = $2;
   switch ($191|0) {
   case 8:  {
    HEAP32[(320)>>2] = 0;
    STACKTOP = sp;return 0;
    break;
   }
   case 2:  {
    $192 = HEAP32[(320)>>2]|0;
    $193 = ($192>>>0)>(0);
    if (!($193)) {
     STACKTOP = sp;return 0;
    }
    $194 = HEAP32[(320)>>2]|0;
    $195 = (($194) + -1)|0;
    HEAP32[(320)>>2] = $195;
    STACKTOP = sp;return 0;
    break;
   }
   case 4: case 3:  {
    $196 = HEAP32[(320)>>2]|0;
    $197 = ($196>>>0)<(3);
    if (!($197)) {
     STACKTOP = sp;return 0;
    }
    $198 = HEAP32[(320)>>2]|0;
    $199 = (($198) + 1)|0;
    HEAP32[(320)>>2] = $199;
    STACKTOP = sp;return 0;
    break;
   }
   default: {
    STACKTOP = sp;return 0;
   }
   }
   break;
  }
  case 24:  {
   $200 = $2;
   switch ($200|0) {
   case 8:  {
    $201 = (250976);
    $202 = $201;
    HEAP32[$202>>2] = 0;
    $203 = (($201) + 4)|0;
    $204 = $203;
    HEAP32[$204>>2] = 0;
    STACKTOP = sp;return 0;
    break;
   }
   case 4:  {
    HEAPF64[$refresh_rate>>3] = 0.0;
    HEAPF64[$deviation>>3] = 0.0;
    HEAP32[$sample_points>>2] = 0;
    $205 = (_driver_monitor_fps_statistics($refresh_rate,$deviation,$sample_points)|0);
    if (!($205)) {
     STACKTOP = sp;return 0;
    }
    $206 = +HEAPF64[$refresh_rate>>3];
    $207 = $206;
    _driver_set_monitor_refresh_rate($207);
    $208 = HEAP32[(12)>>2]|0;
    $209 = ((($208)) + 8|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = HEAP32[(24)>>2]|0;
    FUNCTION_TABLE_vii[$210 & 1023]($211,0);
    STACKTOP = sp;return 0;
    break;
   }
   default: {
    STACKTOP = sp;return 0;
   }
   }
   break;
  }
  default: {
   STACKTOP = sp;return 0;
  }
  }
 } while(0);
 return (0)|0;
}
function _shader_manager_toggle_setting($rgui,$setting,$action) {
 $rgui = $rgui|0;
 $setting = $setting|0;
 $action = $action|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cgp_path = 0, $conf = 0, $conf_path = 0, $current_scale = 0, $delta = 0, $delta3 = 0, $dist_filter = 0, $dist_scale = 0, $dist_shader = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $pass = 0, $pass1 = 0, $pass2 = 0, $shader_dir = 0, $type = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $cgp_path = sp + 72|0;
 $1 = $rgui;
 $2 = $setting;
 $3 = $action;
 $4 = $2;
 $5 = (($4) - 31)|0;
 $dist_shader = $5;
 $6 = $2;
 $7 = (($6) - 32)|0;
 $dist_filter = $7;
 $8 = $2;
 $9 = (($8) - 33)|0;
 $dist_scale = $9;
 $10 = $2;
 $11 = ($10|0)==(27);
 L1: do {
  if ($11) {
   $12 = $3;
   switch ($12|0) {
   case 8:  {
    HEAP8[(324)>>0] = 1;
    break L1;
    break;
   }
   case 4: case 3: case 2:  {
    $13 = HEAP8[(324)>>0]|0;
    $14 = $13&1;
    $15 = $14 ^ 1;
    $16 = $15&1;
    HEAP8[(324)>>0] = $16;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  } else {
   $17 = $2;
   $18 = ($17|0)==(29);
   if ($18) {
    $19 = HEAP32[(12)>>2]|0;
    $20 = ((($19)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    $23 = $3;
    $24 = ($23|0)!=(4);
    $or$cond = $22 | $24;
    if ($or$cond) {
     $0 = 0;
     $199 = $0;
     STACKTOP = sp;return ($199|0);
    }
    $25 = HEAP8[102648>>0]|0;
    $26 = $25&1;
    if ($26) {
     $27 = HEAP32[(259664)>>2]|0;
     $28 = ($27|0)!=(0|0);
     $29 = HEAP32[(259664)>>2]|0;
     $30 = HEAP32[544648>>2]|0;
     $31 = $28 ? $29 : $30;
     (_fprintf($31,769602,$vararg_buffer)|0);
     $32 = HEAP32[(259664)>>2]|0;
     $33 = ($32|0)!=(0|0);
     $34 = HEAP32[(259664)>>2]|0;
     $35 = HEAP32[544648>>2]|0;
     $36 = $33 ? $34 : $35;
     (_fflush($36)|0);
    }
    $37 = $1;
    $38 = ((($37)) + 4180|0);
    $39 = (_shader_manager_get_type($38)|0);
    $type = $39;
    $40 = $1;
    $41 = ((($40)) + 4180|0);
    $42 = ((($41)) + 72|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)!=(0);
    $45 = $type;
    $46 = ($45|0)!=(3);
    $or$cond3 = $44 & $46;
    if (!($or$cond3)) {
     $65 = (_gfx_shader_parse_type(773086,2)|0);
     $type = $65;
     $66 = $type;
     $67 = ($66|0)==(3);
     $$ = $67 ? 2 : $65;
     $type = $$;
     $68 = $type;
     _shader_manager_set_preset(0,$68,0);
     break;
    }
    $47 = $type;
    $48 = ($47|0)==(2);
    $49 = $48 ? 769634 : 769645;
    $conf_path = $49;
    $50 = HEAP8[(8545)>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = ($51|0)!=(0);
    $53 = $52 ? (8545) : (94412);
    $shader_dir = $53;
    $54 = $shader_dir;
    $55 = $conf_path;
    _fill_pathname_join($cgp_path,$54,$55,4096);
    $56 = (_config_file_new(0)|0);
    $conf = $56;
    $57 = $conf;
    $58 = ($57|0)!=(0|0);
    if ($58) {
     $59 = $conf;
     $60 = $1;
     $61 = ((($60)) + 4180|0);
     _gfx_shader_write_conf_cgp($59,$61);
     $62 = $conf;
     (_config_file_write($62,$cgp_path)|0);
     $63 = $conf;
     _config_file_free($63);
     $64 = $type;
     _shader_manager_set_preset(0,$64,$cgp_path);
     break;
    }
    $0 = 0;
    $199 = $0;
    STACKTOP = sp;return ($199|0);
   }
   $69 = $2;
   $70 = ($69|0)==(30);
   if ($70) {
    $71 = $3;
    switch ($71|0) {
    case 8:  {
     $72 = $1;
     $73 = ((($72)) + 4180|0);
     $74 = ((($73)) + 72|0);
     HEAP32[$74>>2] = 0;
     break;
    }
    case 2:  {
     $75 = $1;
     $76 = ((($75)) + 4180|0);
     $77 = ((($76)) + 72|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = $1;
      $81 = ((($80)) + 4180|0);
      $82 = ((($81)) + 72|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + -1)|0;
      HEAP32[$82>>2] = $84;
     }
     break;
    }
    case 4: case 3:  {
     $85 = $1;
     $86 = ((($85)) + 4180|0);
     $87 = ((($86)) + 72|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($88>>>0)<(8);
     if ($89) {
      $90 = $1;
      $91 = ((($90)) + 4180|0);
      $92 = ((($91)) + 72|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($93) + 1)|0;
      HEAP32[$92>>2] = $94;
     }
     break;
    }
    default: {
    }
    }
    $95 = $1;
    $96 = ((($95)) + 52|0);
    HEAP8[$96>>0] = 1;
    break;
   }
   $97 = $dist_shader;
   $98 = (($97>>>0) % 3)&-1;
   $99 = ($98|0)==(0);
   $100 = $2;
   $101 = ($100|0)==(28);
   $or$cond5 = $99 | $101;
   if ($or$cond5) {
    $102 = $dist_shader;
    $103 = (($102>>>0) / 3)&-1;
    $dist_shader = $103;
    $104 = $2;
    $105 = ($104|0)==(28);
    if ($105) {
     $106 = $dist_shader;
     $107 = $1;
     $108 = ((($107)) + 4180|0);
     $109 = ((($108)) + 76|0);
     $110 = (($109) + (($106*4148)|0)|0);
     $111 = $110;
    } else {
     $111 = 0;
    }
    $pass = $111;
    $112 = $3;
    switch ($112|0) {
    case 4:  {
     $113 = $1;
     $114 = ((($113)) + 40|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = $2;
     $117 = $1;
     $118 = ((($117)) + 48|0);
     $119 = HEAP32[$118>>2]|0;
     _rgui_list_push($115,(8545),$116,$119);
     $120 = $1;
     $121 = ((($120)) + 48|0);
     HEAP32[$121>>2] = 0;
     $122 = $1;
     $123 = ((($122)) + 52|0);
     HEAP8[$123>>0] = 1;
     break L1;
     break;
    }
    case 8:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $124 = $pass;
    $125 = ($124|0)!=(0|0);
    if (!($125)) {
     break;
    }
    $126 = $pass;
    HEAP8[$126>>0] = 0;
    break;
   }
   $127 = $dist_filter;
   $128 = (($127>>>0) % 3)&-1;
   $129 = ($128|0)==(0);
   if ($129) {
    $130 = $dist_filter;
    $131 = (($130>>>0) / 3)&-1;
    $dist_filter = $131;
    $132 = $dist_filter;
    $133 = $1;
    $134 = ((($133)) + 4180|0);
    $135 = ((($134)) + 76|0);
    $136 = (($135) + (($132*4148)|0)|0);
    $pass1 = $136;
    $137 = $3;
    switch ($137|0) {
    case 8:  {
     $138 = $dist_filter;
     $139 = $1;
     $140 = ((($139)) + 4180|0);
     $141 = ((($140)) + 76|0);
     $142 = (($141) + (($138*4148)|0)|0);
     $143 = ((($142)) + 4136|0);
     HEAP32[$143>>2] = 0;
     break L1;
     break;
    }
    case 4: case 3: case 2:  {
     $144 = $3;
     $145 = ($144|0)==(2);
     $146 = $145 ? 2 : 1;
     $delta = $146;
     $147 = $pass1;
     $148 = ((($147)) + 4136|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = $delta;
     $151 = (($149) + ($150))|0;
     $152 = (($151>>>0) % 3)&-1;
     $153 = $pass1;
     $154 = ((($153)) + 4136|0);
     HEAP32[$154>>2] = $152;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   }
   $155 = $dist_scale;
   $156 = (($155>>>0) % 3)&-1;
   $157 = ($156|0)==(0);
   if ($157) {
    $158 = $dist_scale;
    $159 = (($158>>>0) / 3)&-1;
    $dist_scale = $159;
    $160 = $dist_scale;
    $161 = $1;
    $162 = ((($161)) + 4180|0);
    $163 = ((($162)) + 76|0);
    $164 = (($163) + (($160*4148)|0)|0);
    $pass2 = $164;
    $165 = $3;
    switch ($165|0) {
    case 8:  {
     $166 = $pass2;
     $167 = ((($166)) + 4104|0);
     $168 = ((($167)) + 16|0);
     HEAPF32[$168>>2] = 0.0;
     $169 = $pass2;
     $170 = ((($169)) + 4104|0);
     $171 = ((($170)) + 12|0);
     HEAPF32[$171>>2] = 0.0;
     $172 = $pass2;
     $173 = ((($172)) + 4104|0);
     HEAP8[$173>>0] = 0;
     break L1;
     break;
    }
    case 4: case 3: case 2:  {
     $174 = $pass2;
     $175 = ((($174)) + 4104|0);
     $176 = ((($175)) + 12|0);
     $177 = +HEAPF32[$176>>2];
     $178 = (~~(($177))>>>0);
     $current_scale = $178;
     $179 = $3;
     $180 = ($179|0)==(2);
     $181 = $180 ? 5 : 1;
     $delta3 = $181;
     $182 = $current_scale;
     $183 = $delta3;
     $184 = (($182) + ($183))|0;
     $185 = (($184>>>0) % 6)&-1;
     $current_scale = $185;
     $186 = $current_scale;
     $187 = ($186|0)!=(0);
     $188 = $pass2;
     $189 = ((($188)) + 4104|0);
     $190 = $187&1;
     HEAP8[$189>>0] = $190;
     $191 = $current_scale;
     $192 = (+($191>>>0));
     $193 = $pass2;
     $194 = ((($193)) + 4104|0);
     $195 = ((($194)) + 16|0);
     HEAPF32[$195>>2] = $192;
     $196 = $pass2;
     $197 = ((($196)) + 4104|0);
     $198 = ((($197)) + 12|0);
     HEAPF32[$198>>2] = $192;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   }
  }
 } while(0);
 $0 = 0;
 $199 = $0;
 STACKTOP = sp;return ($199|0);
}
function _shader_manager_get_type($shader) {
 $shader = $shader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $pass_type = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $shader;
 $type = 3;
 $i = 0;
 L1: while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ((($3)) + 72|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   label = 10;
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = ((($8)) + 76|0);
  $10 = (($9) + (($7*4148)|0)|0);
  $11 = (_gfx_shader_parse_type($10,3)|0);
  $pass_type = $11;
  $12 = $pass_type;
  switch ($12|0) {
  case 2: case 0:  {
   break;
  }
  default: {
   label = 8;
   break L1;
  }
  }
  $13 = $type;
  $14 = ($13|0)==(3);
  if ($14) {
   $15 = $pass_type;
   $type = $15;
  } else {
   $16 = $type;
   $17 = $pass_type;
   $18 = ($16|0)!=($17|0);
   if ($18) {
    label = 7;
    break;
   }
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 7) {
  $0 = 3;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 8) {
  $0 = 3;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 10) {
  $21 = $type;
  $0 = $21;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _rgui_core_setting_toggle($setting,$action) {
 $setting = $setting|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $setting;
 $1 = $action;
 $2 = $0;
 $3 = (($2) - 65536)|0;
 $index = $3;
 $4 = $1;
 switch ($4|0) {
 case 2:  {
  $5 = HEAP32[(201704)>>2]|0;
  $6 = $index;
  _core_option_prev($5,$6);
  break;
 }
 case 4: case 3:  {
  $7 = HEAP32[(201704)>>2]|0;
  $8 = $index;
  _core_option_next($7,$8);
  break;
 }
 case 8:  {
  $9 = HEAP32[(201704)>>2]|0;
  $10 = $index;
  _core_option_set_default($9,$10);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return 0;
}
function _rgui_settings_controller_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = $0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 _rgui_list_push($6,769477,90,0);
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 _rgui_list_push($9,769492,91,0);
 $10 = $0;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 _rgui_list_push($12,769508,92,0);
 $13 = $0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 _rgui_list_push($15,769522,93,0);
 $16 = $0;
 $17 = ((($16)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 _rgui_list_push($18,769529,94,0);
 $19 = $0;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 _rgui_list_push($21,769536,95,0);
 $22 = HEAP32[(16)>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[(16)>>2]|0;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $0;
 $29 = ((($28)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 _rgui_list_push($30,769548,96,0);
 $31 = $0;
 $32 = ((($31)) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 _rgui_list_push($33,769563,97,0);
 $34 = $0;
 $35 = ((($34)) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 _rgui_list_push($36,769566,98,0);
 $37 = $0;
 $38 = ((($37)) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 _rgui_list_push($39,769571,99,0);
 $40 = $0;
 $41 = ((($40)) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 _rgui_list_push($42,769576,100,0);
 $43 = $0;
 $44 = ((($43)) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 _rgui_list_push($45,840613,101,0);
 $46 = $0;
 $47 = ((($46)) + 44|0);
 $48 = HEAP32[$47>>2]|0;
 _rgui_list_push($48,840611,102,0);
 $49 = $0;
 $50 = ((($49)) + 44|0);
 $51 = HEAP32[$50>>2]|0;
 _rgui_list_push($51,769582,103,0);
 $52 = $0;
 $53 = ((($52)) + 44|0);
 $54 = HEAP32[$53>>2]|0;
 _rgui_list_push($54,769584,104,0);
 $55 = $0;
 $56 = ((($55)) + 44|0);
 $57 = HEAP32[$56>>2]|0;
 _rgui_list_push($57,840622,105,0);
 $58 = $0;
 $59 = ((($58)) + 44|0);
 $60 = HEAP32[$59>>2]|0;
 _rgui_list_push($60,840615,106,0);
 $61 = $0;
 $62 = ((($61)) + 44|0);
 $63 = HEAP32[$62>>2]|0;
 _rgui_list_push($63,769586,107,0);
 $64 = $0;
 $65 = ((($64)) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 _rgui_list_push($66,769588,108,0);
 $67 = $0;
 $68 = ((($67)) + 44|0);
 $69 = HEAP32[$68>>2]|0;
 _rgui_list_push($69,769590,109,0);
 $70 = $0;
 $71 = ((($70)) + 44|0);
 $72 = HEAP32[$71>>2]|0;
 _rgui_list_push($72,769593,110,0);
 $73 = $0;
 $74 = ((($73)) + 44|0);
 $75 = HEAP32[$74>>2]|0;
 _rgui_list_push($75,769596,111,0);
 $76 = $0;
 $77 = ((($76)) + 44|0);
 $78 = HEAP32[$77>>2]|0;
 _rgui_list_push($78,769599,112,0);
 STACKTOP = sp;return;
}
function _rgui_settings_path_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = $0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 _rgui_list_push($6,769347,75,0);
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 _rgui_list_push($9,769365,76,0);
 $10 = $0;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 _rgui_list_push($12,769382,77,0);
 $13 = $0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 _rgui_list_push($15,769402,78,0);
 $16 = $0;
 $17 = ((($16)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 _rgui_list_push($18,769421,80,0);
 $19 = $0;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 _rgui_list_push($21,769439,81,0);
 $22 = $0;
 $23 = ((($22)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 _rgui_list_push($24,769456,74,0);
 STACKTOP = sp;return;
}
function _rgui_settings_options_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = $0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 _rgui_list_push($6,769265,63,0);
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 _rgui_list_push($9,769272,64,0);
 $10 = $0;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 _rgui_list_push($12,769291,73,0);
 $13 = $0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 _rgui_list_push($15,769307,65,0);
 $16 = $0;
 $17 = ((($16)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 _rgui_list_push($18,769327,86,0);
 STACKTOP = sp;return;
}
function _rgui_settings_core_options_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $opts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = HEAP32[(201704)>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $21 = $0;
  $22 = ((($21)) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  _rgui_list_push($23,769243,65535,0);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[(201704)>>2]|0;
 $7 = (_core_option_size($6)|0);
 $opts = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $opts;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[(201704)>>2]|0;
  $15 = $i;
  $16 = (_core_option_get_desc($14,$15)|0);
  $17 = $i;
  $18 = (65536 + ($17))|0;
  _rgui_list_push($13,$16,$18,0);
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 STACKTOP = sp;return;
}
function _rgui_settings_audio_options_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = $0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 _rgui_list_push($6,769213,83,0);
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 _rgui_list_push($9,769224,84,0);
 STACKTOP = sp;return;
}
function _rgui_settings_disc_options_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = $0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 _rgui_list_push($6,769184,70,0);
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 _rgui_list_push($9,769195,71,0);
 STACKTOP = sp;return;
}
function _rgui_settings_video_options_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = $0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 _rgui_list_push($6,768936,26,0);
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 _rgui_list_push($9,768951,10,0);
 $10 = $0;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 _rgui_list_push($12,768965,11,0);
 $13 = $0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 _rgui_list_push($15,768978,12,0);
 $16 = $0;
 $17 = ((($16)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 _rgui_list_push($18,768991,14,0);
 $19 = $0;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 _rgui_list_push($21,769009,15,0);
 $22 = $0;
 $23 = ((($22)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 _rgui_list_push($24,769018,16,0);
 $25 = $0;
 $26 = ((($25)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 _rgui_list_push($27,769024,17,0);
 $28 = $0;
 $29 = ((($28)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 _rgui_list_push($30,769038,18,0);
 $31 = $0;
 $32 = ((($31)) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 _rgui_list_push($33,769059,19,0);
 $34 = $0;
 $35 = ((($34)) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 _rgui_list_push($36,769081,20,0);
 $37 = $0;
 $38 = ((($37)) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 _rgui_list_push($39,769101,21,0);
 $40 = $0;
 $41 = ((($40)) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 _rgui_list_push($42,769120,22,0);
 $43 = $0;
 $44 = ((($43)) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 _rgui_list_push($45,769139,23,0);
 $46 = $0;
 $47 = ((($46)) + 44|0);
 $48 = HEAP32[$47>>2]|0;
 _rgui_list_push($48,769162,24,0);
 STACKTOP = sp;return;
}
function _rgui_settings_shader_manager_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = $0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 _rgui_list_push($6,768821,29,0);
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 _rgui_list_push($9,768842,27,0);
 $10 = $0;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 _rgui_list_push($12,768857,28,0);
 $13 = $0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 _rgui_list_push($15,768876,30,0);
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $0;
  $18 = ((($17)) + 4180|0);
  $19 = ((($18)) + 72|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($16>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $i;
  HEAP32[$vararg_buffer>>2] = $22;
  (_snprintf($buf,64,768890,$vararg_buffer)|0);
  $23 = $0;
  $24 = ((($23)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $i;
  $27 = ($26*3)|0;
  $28 = (31 + ($27))|0;
  _rgui_list_push($25,$buf,$28,0);
  $29 = $i;
  HEAP32[$vararg_buffer1>>2] = $29;
  (_snprintf($buf,64,768901,$vararg_buffer1)|0);
  $30 = $0;
  $31 = ((($30)) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $i;
  $34 = ($33*3)|0;
  $35 = (32 + ($34))|0;
  _rgui_list_push($32,$buf,$35,0);
  $36 = $i;
  HEAP32[$vararg_buffer4>>2] = $36;
  (_snprintf($buf,64,768919,$vararg_buffer4)|0);
  $37 = $0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $i;
  $41 = ($40*3)|0;
  $42 = (33 + ($41))|0;
  _rgui_list_push($39,$buf,$42,0);
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 STACKTOP = sp;return;
}
function _rgui_settings_populate_entries($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 _rgui_list_clear($3);
 $4 = $0;
 $5 = ((($4)) + 113712|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $0;
  $9 = ((($8)) + 44|0);
  $10 = HEAP32[$9>>2]|0;
  _rgui_list_push($10,768605,56,0);
 }
 $11 = $0;
 $12 = ((($11)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 _rgui_list_push($13,768625,55,0);
 $14 = $0;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 _rgui_list_push($16,768635,58,0);
 $17 = $0;
 $18 = ((($17)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 _rgui_list_push($19,768648,5,0);
 $20 = $0;
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 _rgui_list_push($22,768662,59,0);
 $23 = $0;
 $24 = ((($23)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 _rgui_list_push($25,768676,60,0);
 $26 = $0;
 $27 = ((($26)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 _rgui_list_push($28,768690,61,0);
 $29 = $0;
 $30 = ((($29)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 _rgui_list_push($31,768703,62,0);
 $32 = HEAP8[(259668)>>0]|0;
 $33 = $32&1;
 if ($33) {
  $34 = HEAP8[(260857)>>0]|0;
  $35 = $34&1;
  if (!($35)) {
   $36 = HEAP32[(201628)>>2]|0;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $0;
    $39 = ((($38)) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    _rgui_list_push($40,768712,69,0);
   }
   $41 = $0;
   $42 = ((($41)) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   _rgui_list_push($43,768725,67,0);
   $44 = $0;
   $45 = ((($44)) + 44|0);
   $46 = HEAP32[$45>>2]|0;
   _rgui_list_push($46,768736,68,0);
   $47 = $0;
   $48 = ((($47)) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   _rgui_list_push($49,768747,72,0);
   $50 = $0;
   $51 = ((($50)) + 44|0);
   $52 = HEAP32[$51>>2]|0;
   _rgui_list_push($52,768763,88,0);
   $53 = $0;
   $54 = ((($53)) + 44|0);
   $55 = HEAP32[$54>>2]|0;
   _rgui_list_push($55,768775,82,0);
  }
 }
 $56 = $0;
 $57 = ((($56)) + 44|0);
 $58 = HEAP32[$57>>2]|0;
 _rgui_list_push($58,768788,87,0);
 $59 = $0;
 $60 = ((($59)) + 44|0);
 $61 = HEAP32[$60>>2]|0;
 _rgui_list_push($61,768806,89,0);
 STACKTOP = sp;return;
}
function _rgui_viewport_iterate($rgui,$action) {
 $rgui = $rgui|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0;
 var $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $base_msg = 0, $custom = 0, $geom = 0, $menu_type = 0, $msg = 0, $stride_x = 0, $stride_y = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var $vp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $menu_type = sp + 84|0;
 $vp = sp + 48|0;
 $msg = sp + 104|0;
 $0 = $rgui;
 $1 = $action;
 $custom = (259612);
 HEAP32[$menu_type>>2] = 0;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 _rgui_list_get_last($4,0,$menu_type);
 $geom = (196928);
 $5 = HEAP8[(333)>>0]|0;
 $6 = $5&1;
 if ($6) {
  $7 = $geom;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8;
 } else {
  $9 = 1;
 }
 $stride_x = $9;
 $10 = HEAP8[(333)>>0]|0;
 $11 = $10&1;
 if ($11) {
  $12 = $geom;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14;
 } else {
  $15 = 1;
 }
 $stride_y = $15;
 $16 = $1;
 switch ($16|0) {
 case 0:  {
  $17 = HEAP32[$menu_type>>2]|0;
  $18 = ($17|0)==(12);
  if ($18) {
   $19 = $stride_y;
   $20 = $custom;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) - ($19))|0;
   HEAP32[$21>>2] = $23;
   $24 = $stride_y;
   $25 = $custom;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24))|0;
   HEAP32[$26>>2] = $28;
  } else {
   $29 = $custom;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $stride_y;
   $33 = ($31>>>0)>=($32>>>0);
   if ($33) {
    $34 = $stride_y;
    $35 = $custom;
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) - ($34))|0;
    HEAP32[$36>>2] = $38;
   }
  }
  $39 = HEAP32[(216)>>2]|0;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = HEAP32[(216)>>2]|0;
   $44 = ((($43)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = HEAP32[(24)>>2]|0;
   FUNCTION_TABLE_vi[$45 & 1023]($46);
  }
  break;
 }
 case 1:  {
  $47 = HEAP32[$menu_type>>2]|0;
  $48 = ($47|0)==(12);
  $49 = $stride_y;
  $50 = $custom;
  if ($48) {
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($49))|0;
   HEAP32[$51>>2] = $53;
   $54 = $custom;
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $stride_y;
   $58 = ($56>>>0)>=($57>>>0);
   if ($58) {
    $59 = $stride_y;
    $60 = $custom;
    $61 = ((($60)) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) - ($59))|0;
    HEAP32[$61>>2] = $63;
   }
  } else {
   $64 = ((($50)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + ($49))|0;
   HEAP32[$64>>2] = $66;
  }
  $67 = HEAP32[(216)>>2]|0;
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0|0);
  if ($70) {
   $71 = HEAP32[(216)>>2]|0;
   $72 = ((($71)) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[(24)>>2]|0;
   FUNCTION_TABLE_vi[$73 & 1023]($74);
  }
  break;
 }
 case 2:  {
  $75 = HEAP32[$menu_type>>2]|0;
  $76 = ($75|0)==(12);
  if ($76) {
   $77 = $stride_x;
   $78 = $custom;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) - ($77))|0;
   HEAP32[$78>>2] = $80;
   $81 = $stride_x;
   $82 = $custom;
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($81))|0;
   HEAP32[$83>>2] = $85;
  } else {
   $86 = $custom;
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $stride_x;
   $90 = ($88>>>0)>=($89>>>0);
   if ($90) {
    $91 = $stride_x;
    $92 = $custom;
    $93 = ((($92)) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) - ($91))|0;
    HEAP32[$93>>2] = $95;
   }
  }
  $96 = HEAP32[(216)>>2]|0;
  $97 = ((($96)) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)!=(0|0);
  if ($99) {
   $100 = HEAP32[(216)>>2]|0;
   $101 = ((($100)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = HEAP32[(24)>>2]|0;
   FUNCTION_TABLE_vi[$102 & 1023]($103);
  }
  break;
 }
 case 3:  {
  $104 = HEAP32[$menu_type>>2]|0;
  $105 = ($104|0)==(12);
  $106 = $stride_x;
  $107 = $custom;
  if ($105) {
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + ($106))|0;
   HEAP32[$107>>2] = $109;
   $110 = $custom;
   $111 = ((($110)) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $stride_x;
   $114 = ($112>>>0)>=($113>>>0);
   if ($114) {
    $115 = $stride_x;
    $116 = $custom;
    $117 = ((($116)) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) - ($115))|0;
    HEAP32[$117>>2] = $119;
   }
  } else {
   $120 = ((($107)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + ($106))|0;
   HEAP32[$120>>2] = $122;
  }
  $123 = HEAP32[(216)>>2]|0;
  $124 = ((($123)) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)!=(0|0);
  if ($126) {
   $127 = HEAP32[(216)>>2]|0;
   $128 = ((($127)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = HEAP32[(24)>>2]|0;
   FUNCTION_TABLE_vi[$129 & 1023]($130);
  }
  break;
 }
 case 5:  {
  $131 = $0;
  $132 = ((($131)) + 40|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = $0;
  $135 = ((($134)) + 48|0);
  _rgui_list_pop($133,$135);
  $136 = HEAP32[$menu_type>>2]|0;
  $137 = ($136|0)==(13);
  if ($137) {
   $138 = $0;
   $139 = ((($138)) + 40|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $0;
   $142 = ((($141)) + 48|0);
   $143 = HEAP32[$142>>2]|0;
   _rgui_list_push($140,773086,12,$143);
  }
  break;
 }
 case 4:  {
  $144 = $0;
  $145 = ((($144)) + 40|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $0;
  $148 = ((($147)) + 48|0);
  _rgui_list_pop($146,$148);
  $149 = HEAP32[$menu_type>>2]|0;
  $150 = ($149|0)==(12);
  if ($150) {
   $151 = HEAP8[(333)>>0]|0;
   $152 = $151&1;
   if (!($152)) {
    $153 = $0;
    $154 = ((($153)) + 40|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $0;
    $157 = ((($156)) + 48|0);
    $158 = HEAP32[$157>>2]|0;
    _rgui_list_push($155,773086,13,$158);
   }
  }
  break;
 }
 case 8:  {
  $159 = HEAP8[(333)>>0]|0;
  $160 = $159&1;
  if (!($160)) {
   $161 = HEAP32[(12)>>2]|0;
   $162 = ((($161)) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = HEAP32[(24)>>2]|0;
   FUNCTION_TABLE_vii[$163 & 1023]($164,$vp);
   $165 = HEAP32[$menu_type>>2]|0;
   $166 = ($165|0)==(12);
   if ($166) {
    $167 = $custom;
    $168 = HEAP32[$167>>2]|0;
    $169 = $custom;
    $170 = ((($169)) + 8|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) + ($168))|0;
    HEAP32[$170>>2] = $172;
    $173 = $custom;
    $174 = ((($173)) + 4|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $custom;
    $177 = ((($176)) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($178) + ($175))|0;
    HEAP32[$177>>2] = $179;
    $180 = $custom;
    HEAP32[$180>>2] = 0;
    $181 = $custom;
    $182 = ((($181)) + 4|0);
    HEAP32[$182>>2] = 0;
   } else {
    $183 = ((($vp)) + 16|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $custom;
    $186 = HEAP32[$185>>2]|0;
    $187 = (($184) - ($186))|0;
    $188 = $custom;
    $189 = ((($188)) + 8|0);
    HEAP32[$189>>2] = $187;
    $190 = ((($vp)) + 20|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $custom;
    $193 = ((($192)) + 4|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (($191) - ($194))|0;
    $196 = $custom;
    $197 = ((($196)) + 12|0);
    HEAP32[$197>>2] = $195;
   }
   $198 = HEAP32[(216)>>2]|0;
   $199 = ((($198)) + 16|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ($200|0)!=(0|0);
   if ($201) {
    $202 = HEAP32[(216)>>2]|0;
    $203 = ((($202)) + 16|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = HEAP32[(24)>>2]|0;
    FUNCTION_TABLE_vi[$204 & 1023]($205);
   }
  }
  break;
 }
 case 7:  {
  $206 = $0;
  $207 = ((($206)) + 40|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = $0;
  $210 = ((($209)) + 48|0);
  _rgui_list_pop($208,$210);
  break;
 }
 case 9:  {
  $211 = $0;
  $212 = ((($211)) + 53|0);
  HEAP8[$212>>0] = 1;
  break;
 }
 default: {
 }
 }
 $213 = $0;
 $214 = ((($213)) + 40|0);
 $215 = HEAP32[$214>>2]|0;
 _rgui_list_get_last($215,0,$menu_type);
 $216 = $0;
 _render_text($216);
 $base_msg = 0;
 $217 = HEAP8[(333)>>0]|0;
 $218 = $217&1;
 if ($218) {
  $219 = $custom;
  HEAP32[$219>>2] = 0;
  $220 = $custom;
  $221 = ((($220)) + 4|0);
  HEAP32[$221>>2] = 0;
  $222 = $custom;
  $223 = ((($222)) + 8|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $geom;
  $226 = HEAP32[$225>>2]|0;
  $227 = (($224) + ($226))|0;
  $228 = (($227) - 1)|0;
  $229 = $geom;
  $230 = HEAP32[$229>>2]|0;
  $231 = (($228>>>0) / ($230>>>0))&-1;
  $232 = $geom;
  $233 = HEAP32[$232>>2]|0;
  $234 = Math_imul($231, $233)|0;
  $235 = $custom;
  $236 = ((($235)) + 8|0);
  HEAP32[$236>>2] = $234;
  $237 = $custom;
  $238 = ((($237)) + 12|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = $geom;
  $241 = ((($240)) + 4|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (($239) + ($242))|0;
  $244 = (($243) - 1)|0;
  $245 = $geom;
  $246 = ((($245)) + 4|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($244>>>0) / ($247>>>0))&-1;
  $249 = $geom;
  $250 = ((($249)) + 4|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = Math_imul($248, $251)|0;
  $253 = $custom;
  $254 = ((($253)) + 12|0);
  HEAP32[$254>>2] = $252;
  $base_msg = 768499;
  $255 = $base_msg;
  $256 = $custom;
  $257 = ((($256)) + 8|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = $custom;
  $260 = ((($259)) + 12|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = $custom;
  $263 = ((($262)) + 8|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = $geom;
  $266 = HEAP32[$265>>2]|0;
  $267 = (($264>>>0) / ($266>>>0))&-1;
  $268 = $custom;
  $269 = ((($268)) + 12|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $geom;
  $272 = ((($271)) + 4|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (($270>>>0) / ($273>>>0))&-1;
  HEAP32[$vararg_buffer>>2] = $255;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $258;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $261;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $267;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $274;
  (_snprintf($msg,64,768509,$vararg_buffer)|0);
 } else {
  $275 = HEAP32[$menu_type>>2]|0;
  $276 = ($275|0)==(12);
  if ($276) {
   $base_msg = 768537;
  } else {
   $277 = HEAP32[$menu_type>>2]|0;
   $278 = ($277|0)==(13);
   if ($278) {
    $base_msg = 768559;
   }
  }
  $279 = $base_msg;
  $280 = $custom;
  $281 = HEAP32[$280>>2]|0;
  $282 = $custom;
  $283 = ((($282)) + 4|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $custom;
  $286 = ((($285)) + 8|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = $custom;
  $289 = ((($288)) + 12|0);
  $290 = HEAP32[$289>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $279;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $281;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $284;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $287;
  $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
  HEAP32[$vararg_ptr11>>2] = $290;
  (_snprintf($msg,64,768583,$vararg_buffer5)|0);
 }
 $291 = $0;
 _render_messagebox($291,$msg);
 $292 = $custom;
 $293 = ((($292)) + 8|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = ($294|0)!=(0);
 if (!($295)) {
  $296 = $stride_x;
  $297 = $custom;
  $298 = ((($297)) + 8|0);
  HEAP32[$298>>2] = $296;
 }
 $299 = $custom;
 $300 = ((($299)) + 12|0);
 $301 = HEAP32[$300>>2]|0;
 $302 = ($301|0)!=(0);
 if (!($302)) {
  $303 = $stride_y;
  $304 = $custom;
  $305 = ((($304)) + 12|0);
  HEAP32[$305>>2] = $303;
 }
 $306 = $custom;
 $307 = ((($306)) + 8|0);
 $308 = HEAP32[$307>>2]|0;
 $309 = (+($308>>>0));
 $310 = $custom;
 $311 = ((($310)) + 12|0);
 $312 = HEAP32[$311>>2]|0;
 $313 = (+($312>>>0));
 $314 = $309 / $313;
 HEAPF32[(265780)>>2] = $314;
 $315 = HEAP32[(216)>>2]|0;
 $316 = ((($315)) + 16|0);
 $317 = HEAP32[$316>>2]|0;
 $318 = ($317|0)!=(0|0);
 if (!($318)) {
  STACKTOP = sp;return 0;
 }
 $319 = HEAP32[(216)>>2]|0;
 $320 = ((($319)) + 16|0);
 $321 = HEAP32[$320>>2]|0;
 $322 = HEAP32[(24)>>2]|0;
 FUNCTION_TABLE_vi[$321 & 1023]($322);
 STACKTOP = sp;return 0;
}
function _render_messagebox($rgui,$message) {
 $rgui = $rgui|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $height = 0, $msg = 0, $width = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $message;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = (___strdup($7)|0);
 $msg = $8;
 $9 = $msg;
 $10 = (_strlen($9)|0);
 $11 = HEAP32[270224>>2]|0;
 $12 = (($11) - 15)|0;
 $13 = (($12) - 15)|0;
 $14 = (($13>>>0) / 6)&-1;
 $15 = ($10>>>0)>($14>>>0);
 if ($15) {
  $16 = HEAP32[270224>>2]|0;
  $17 = (($16) - 15)|0;
  $18 = (($17) - 15)|0;
  $19 = (($18>>>0) / 6)&-1;
  $20 = (($19) - 2)|0;
  $21 = $msg;
  $22 = (($21) + ($20)|0);
  HEAP8[$22>>0] = 46;
  $23 = HEAP32[270224>>2]|0;
  $24 = (($23) - 15)|0;
  $25 = (($24) - 15)|0;
  $26 = (($25>>>0) / 6)&-1;
  $27 = (($26) - 1)|0;
  $28 = $msg;
  $29 = (($28) + ($27)|0);
  HEAP8[$29>>0] = 46;
  $30 = HEAP32[270224>>2]|0;
  $31 = (($30) - 15)|0;
  $32 = (($31) - 15)|0;
  $33 = (($32>>>0) / 6)&-1;
  $34 = (($33) - 0)|0;
  $35 = $msg;
  $36 = (($35) + ($34)|0);
  HEAP8[$36>>0] = 46;
  $37 = HEAP32[270224>>2]|0;
  $38 = (($37) - 15)|0;
  $39 = (($38) - 15)|0;
  $40 = (($39>>>0) / 6)&-1;
  $41 = (($40) + 1)|0;
  $42 = $msg;
  $43 = (($42) + ($41)|0);
  HEAP8[$43>>0] = 0;
 }
 $44 = $msg;
 $45 = (_strlen($44)|0);
 $46 = ($45*6)|0;
 $47 = (($46) - 1)|0;
 $48 = (($47) + 6)|0;
 $49 = (($48) + 10)|0;
 $width = $49;
 $height = 26;
 $50 = HEAP32[270224>>2]|0;
 $51 = $width;
 $52 = (($50) - ($51))|0;
 $53 = (($52>>>0) / 2)&-1;
 $x = $53;
 $54 = HEAP32[270228>>2]|0;
 $55 = $height;
 $56 = (($54) - ($55))|0;
 $57 = (($56>>>0) / 2)&-1;
 $y = $57;
 $58 = $0;
 $59 = ((($58)) + 28|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $0;
 $62 = ((($61)) + 32|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $x;
 $65 = (($64) + 5)|0;
 $66 = $y;
 $67 = (($66) + 5)|0;
 $68 = $width;
 $69 = (($68) - 10)|0;
 $70 = $height;
 $71 = (($70) - 10)|0;
 _fill_rect($60,$63,$65,$67,$69,$71,324);
 $72 = $0;
 $73 = ((($72)) + 28|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $0;
 $76 = ((($75)) + 32|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $x;
 $79 = $y;
 $80 = $width;
 $81 = (($80) - 5)|0;
 _fill_rect($74,$77,$78,$79,$81,5,325);
 $82 = $0;
 $83 = ((($82)) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $0;
 $86 = ((($85)) + 32|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $x;
 $89 = $width;
 $90 = (($88) + ($89))|0;
 $91 = (($90) - 5)|0;
 $92 = $y;
 $93 = $height;
 $94 = (($93) - 5)|0;
 _fill_rect($84,$87,$91,$92,5,$94,325);
 $95 = $0;
 $96 = ((($95)) + 28|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $0;
 $99 = ((($98)) + 32|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $x;
 $102 = (($101) + 5)|0;
 $103 = $y;
 $104 = $height;
 $105 = (($103) + ($104))|0;
 $106 = (($105) - 5)|0;
 $107 = $width;
 $108 = (($107) - 5)|0;
 _fill_rect($97,$100,$102,$106,$108,5,325);
 $109 = $0;
 $110 = ((($109)) + 28|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $0;
 $113 = ((($112)) + 32|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $x;
 $116 = $y;
 $117 = (($116) + 5)|0;
 $118 = $height;
 $119 = (($118) - 5)|0;
 _fill_rect($111,$114,$115,$117,5,$119,325);
 $120 = $0;
 $121 = $x;
 $122 = (($121) + 8)|0;
 $123 = $y;
 $124 = (($123) + 8)|0;
 $125 = $msg;
 _blit_line($120,$122,$124,$125,0);
 $126 = $msg;
 _free($126);
 STACKTOP = sp;return;
}
function _fill_rect($buf,$pitch,$x,$y,$width,$height,$col) {
 $buf = $buf|0;
 $pitch = $pitch|0;
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $pitch;
 $2 = $x;
 $3 = $y;
 $4 = $width;
 $5 = $height;
 $6 = $col;
 $7 = $3;
 $j = $7;
 while(1) {
  $8 = $j;
  $9 = $3;
  $10 = $5;
  $11 = (($9) + ($10))|0;
  $12 = ($8>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $i = $13;
  while(1) {
   $14 = $i;
   $15 = $2;
   $16 = $4;
   $17 = (($15) + ($16))|0;
   $18 = ($14>>>0)<($17>>>0);
   if (!($18)) {
    break;
   }
   $19 = $6;
   $20 = $i;
   $21 = $j;
   $22 = (FUNCTION_TABLE_iii[$19 & 511]($20,$21)|0);
   $23 = $j;
   $24 = $1;
   $25 = $24 >>> 1;
   $26 = Math_imul($23, $25)|0;
   $27 = $i;
   $28 = (($26) + ($27))|0;
   $29 = $0;
   $30 = (($29) + ($28<<1)|0);
   HEAP16[$30>>1] = $22;
   $31 = $i;
   $32 = (($31) + 1)|0;
   $i = $32;
  }
  $33 = $j;
  $34 = (($33) + 1)|0;
  $j = $34;
 }
 STACKTOP = sp;return;
}
function _gray_filler($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $col = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $2 >>> 1;
 $0 = $3;
 $4 = $1;
 $5 = $4 >>> 1;
 $1 = $5;
 $6 = $0;
 $7 = $1;
 $8 = (($6) + ($7))|0;
 $9 = $8 & 1;
 $10 = (($9) + 1)|0;
 $col = $10;
 $11 = $col;
 $12 = $11 << 13;
 $13 = $col;
 $14 = $13 << 9;
 $15 = $12 | $14;
 $16 = $col;
 $17 = $16 << 5;
 $18 = $15 | $17;
 $19 = $18 | 12;
 $20 = $19&65535;
 STACKTOP = sp;return ($20|0);
}
function _green_filler($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $col = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $2 >>> 1;
 $0 = $3;
 $4 = $1;
 $5 = $4 >>> 1;
 $1 = $5;
 $6 = $0;
 $7 = $1;
 $8 = (($6) + ($7))|0;
 $9 = $8 & 1;
 $10 = (($9) + 1)|0;
 $col = $10;
 $11 = $col;
 $12 = $11 << 13;
 $13 = $col;
 $14 = $13 << 10;
 $15 = $12 | $14;
 $16 = $col;
 $17 = $16 << 5;
 $18 = $15 | $17;
 $19 = $18 | 12;
 $20 = $19&65535;
 STACKTOP = sp;return ($20|0);
}
function _blit_line($rgui,$x,$y,$message,$green) {
 $rgui = $rgui|0;
 $x = $x|0;
 $y = $y|0;
 $message = $message|0;
 $green = $green|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $col = 0, $i = 0, $j = 0, $offset = 0, $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $x;
 $2 = $y;
 $3 = $message;
 $5 = $green&1;
 $4 = $5;
 while(1) {
  $6 = $3;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   break;
  }
  $j = 0;
  while(1) {
   $9 = $j;
   $10 = ($9|0)<(10);
   if (!($10)) {
    break;
   }
   $i = 0;
   while(1) {
    $11 = $i;
    $12 = ($11|0)<(5);
    if (!($12)) {
     break;
    }
    $13 = $i;
    $14 = $j;
    $15 = ($14*5)|0;
    $16 = (($13) + ($15))|0;
    $17 = $16 & 7;
    $18 = 1 << $17;
    $19 = $18&255;
    $rem = $19;
    $20 = $i;
    $21 = $j;
    $22 = ($21*5)|0;
    $23 = (($20) + ($22))|0;
    $24 = $23 >> 3;
    $offset = $24;
    $25 = $3;
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = ($27*7)|0;
    $29 = $offset;
    $30 = (($28) + ($29))|0;
    $31 = $0;
    $32 = ((($31)) + 4152|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + ($30)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = $rem;
    $38 = $37&255;
    $39 = $36 & $38;
    $40 = ($39|0)!=(0);
    $41 = $40&1;
    $col = $41;
    $42 = $col;
    $43 = $42&1;
    if ($43) {
     $44 = $4;
     $45 = $44&1;
     $46 = $45 ? 32639 : 65535;
     $47 = $46&65535;
     $48 = $2;
     $49 = $j;
     $50 = (($48) + ($49))|0;
     $51 = $0;
     $52 = ((($51)) + 32|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $53 >>> 1;
     $55 = Math_imul($50, $54)|0;
     $56 = $1;
     $57 = $i;
     $58 = (($56) + ($57))|0;
     $59 = (($55) + ($58))|0;
     $60 = $0;
     $61 = ((($60)) + 28|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + ($59<<1)|0);
     HEAP16[$63>>1] = $47;
    }
    $64 = $i;
    $65 = (($64) + 1)|0;
    $i = $65;
   }
   $66 = $j;
   $67 = (($66) + 1)|0;
   $j = $67;
  }
  $68 = $1;
  $69 = (($68) + 6)|0;
  $1 = $69;
  $70 = $3;
  $71 = ((($70)) + 1|0);
  $3 = $71;
 }
 STACKTOP = sp;return;
}
function _menu_type_is_shader_browser($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $0;
 $2 = ($1>>>0)>=(31);
 $3 = $0;
 $4 = ($3>>>0)<=(54);
 $or$cond = $2 & $4;
 if ($or$cond) {
  $5 = $0;
  $6 = (($5) - 31)|0;
  $7 = (($6>>>0) % 3)&-1;
  $8 = ($7|0)==(0);
  if ($8) {
   $11 = 1;
   STACKTOP = sp;return ($11|0);
  }
 }
 $9 = $0;
 $10 = ($9|0)==(28);
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function _menu_type_is_directory_browser($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $0;
 $2 = ($1|0)==(75);
 $3 = $0;
 $4 = ($3|0)==(76);
 $or$cond = $2 | $4;
 $5 = $0;
 $6 = ($5|0)==(77);
 $or$cond3 = $or$cond | $6;
 $7 = $0;
 $8 = ($7|0)==(78);
 $or$cond5 = $or$cond3 | $8;
 $9 = $0;
 $10 = ($9|0)==(80);
 $or$cond7 = $or$cond5 | $10;
 $11 = $0;
 $12 = ($11|0)==(74);
 $or$cond9 = $or$cond7 | $12;
 if ($or$cond9) {
  $15 = 1;
  STACKTOP = sp;return ($15|0);
 }
 $13 = $0;
 $14 = ($13|0)==(81);
 $15 = $14;
 STACKTOP = sp;return ($15|0);
}
function _shader_manager_set_preset($shader,$type,$path) {
 $shader = $shader|0;
 $type = $type|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conf = 0, $or$cond = 0;
 var $ret = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $shader;
 $1 = $type;
 $2 = $path;
 $3 = HEAP8[102648>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = HEAP32[(259664)>>2]|0;
  $6 = ($5|0)!=(0|0);
  $7 = HEAP32[(259664)>>2]|0;
  $8 = HEAP32[544648>>2]|0;
  $9 = $6 ? $7 : $8;
  $10 = $2;
  $11 = ($10|0)!=(0|0);
  $12 = $2;
  $13 = $11 ? $12 : 768403;
  HEAP32[$vararg_buffer>>2] = $13;
  (_fprintf($9,768415,$vararg_buffer)|0);
  $14 = HEAP32[(259664)>>2]|0;
  $15 = ($14|0)!=(0|0);
  $16 = HEAP32[(259664)>>2]|0;
  $17 = HEAP32[544648>>2]|0;
  $18 = $15 ? $16 : $17;
  (_fflush($18)|0);
 }
 $19 = HEAP32[(12)>>2]|0;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[(24)>>2]|0;
 $23 = $1;
 $24 = $2;
 $25 = (FUNCTION_TABLE_iiii[$21 & 1023]($22,$23,$24)|0);
 $26 = $25&1;
 $ret = $26;
 $27 = $ret;
 $28 = $27&1;
 if (!($28)) {
  $48 = HEAP32[(259664)>>2]|0;
  $49 = ($48|0)!=(0|0);
  $50 = HEAP32[(259664)>>2]|0;
  $51 = HEAP32[544648>>2]|0;
  $52 = $49 ? $50 : $51;
  (_fprintf($52,768452,$vararg_buffer2)|0);
  $53 = HEAP32[(259664)>>2]|0;
  $54 = ($53|0)!=(0|0);
  $55 = HEAP32[(259664)>>2]|0;
  $56 = HEAP32[544648>>2]|0;
  $57 = $54 ? $55 : $56;
  (_fflush($57)|0);
  HEAP8[(4440)>>0] = 0;
  STACKTOP = sp;return;
 }
 $29 = $2;
 $30 = ($29|0)!=(0|0);
 $31 = $2;
 $32 = $30 ? $31 : 773086;
 (_strlcpy_rarch__((344),$32,4096)|0);
 HEAP8[(4440)>>0] = 1;
 $33 = $2;
 $34 = ($33|0)!=(0|0);
 $35 = $0;
 $36 = ($35|0)!=(0|0);
 $or$cond = $34 & $36;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $37 = $2;
 $38 = (_config_file_new($37)|0);
 $conf = $38;
 $39 = $conf;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $conf;
  $42 = $0;
  (_gfx_shader_read_conf_cgp($41,$42)|0);
  $43 = $0;
  $44 = $2;
  _gfx_shader_resolve_relative($43,$44);
  $45 = $conf;
  _config_file_free($45);
 }
 $46 = HEAP32[270140>>2]|0;
 $47 = ((($46)) + 52|0);
 HEAP8[$47>>0] = 1;
 STACKTOP = sp;return;
}
function _rgui_flush_menu_stack_type($rgui,$final_type) {
 $rgui = $rgui|0;
 $final_type = $final_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $type = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $type = sp;
 $0 = $rgui;
 $1 = $final_type;
 $2 = $0;
 $3 = ((($2)) + 52|0);
 HEAP8[$3>>0] = 1;
 HEAP32[$type>>2] = 0;
 $4 = $0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 _rgui_list_get_last($6,0,$type);
 while(1) {
  $7 = HEAP32[$type>>2]|0;
  $8 = $1;
  $9 = ($7|0)!=($8|0);
  if (!($9)) {
   break;
  }
  $10 = $0;
  $11 = ((($10)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = ((($13)) + 48|0);
  _rgui_list_pop($12,$14);
  $15 = $0;
  $16 = ((($15)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  _rgui_list_get_last($17,0,$type);
 }
 STACKTOP = sp;return;
}
function _rgui_flush_menu_stack($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 _rgui_flush_menu_stack_type($1,4);
 STACKTOP = sp;return;
}
function _history_parse($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $core_name = 0, $core_path = 0, $fill_buf = 0, $history_size = 0, $i = 0, $path = 0, $path_short = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $path = sp + 16|0;
 $core_path = sp + 12|0;
 $core_name = sp + 8|0;
 $fill_buf = sp + 4128|0;
 $path_short = sp + 32|0;
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 113712|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_rom_history_size($3)|0);
 $history_size = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $history_size;
  $7 = ($5>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  HEAP32[$path>>2] = 0;
  HEAP32[$core_path>>2] = 0;
  HEAP32[$core_name>>2] = 0;
  $8 = $0;
  $9 = ((($8)) + 113712|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $i;
  _rom_history_get_index($10,$11,$path,$core_path,$core_name);
  $12 = HEAP32[$path>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = HEAP32[$path>>2]|0;
   $15 = (_path_basename($14)|0);
   _fill_pathname($path_short,$15,773086,4096);
   $16 = HEAP32[$core_name>>2]|0;
   HEAP32[$vararg_buffer>>2] = $path_short;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $16;
   (_snprintf($fill_buf,4096,768395,$vararg_buffer)|0);
  } else {
   $17 = HEAP32[$core_name>>2]|0;
   (_strlcpy_rarch__($fill_buf,$17,4096)|0);
  }
  $18 = $0;
  $19 = ((($18)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  _rgui_list_push($20,$fill_buf,0,0);
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return;
}
function _directory_parse($rgui,$directory,$menu_type,$ctx) {
 $rgui = $rgui|0;
 $directory = $directory|0;
 $menu_type = $menu_type|0;
 $ctx = $ctx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $ext_buf = 0, $exts = 0, $i = 0, $is_dir = 0, $list = 0, $path = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 1064|0;
 $ext_buf = sp + 40|0;
 $1 = $rgui;
 $2 = $directory;
 $3 = $menu_type;
 $4 = $ctx;
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 if (!($7)) {
  $8 = $4;
  $9 = $3;
  _rgui_list_push($8,768343,$9,0);
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $80 = $$pre_trunc&1;
  STACKTOP = sp;return ($80|0);
 }
 $10 = $3;
 $11 = ($10|0)==(57);
 do {
  if ($11) {
   $exts = 773086;
  } else {
   $12 = $3;
   $13 = ($12|0)==(28);
   if ($13) {
    $exts = 768345;
    break;
   }
   $14 = $3;
   $15 = (_menu_type_is_shader_browser($14)|0);
   if ($15) {
    $exts = 768355;
    break;
   }
   $16 = $3;
   $17 = ($16|0)==(90);
   if ($17) {
    $exts = 768363;
    break;
   }
   $18 = $3;
   $19 = (_menu_type_is_directory_browser($18)|0);
   if ($19) {
    $exts = 773086;
    break;
   }
   $20 = $1;
   $21 = ((($20)) + 4160|0);
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0|0);
   if (!($24)) {
    $exts = (197504);
    break;
   }
   $exts = $ext_buf;
   $25 = $1;
   $26 = ((($25)) + 4160|0);
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)!=(0);
   if ($30) {
    $31 = $1;
    $32 = ((($31)) + 4160|0);
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    HEAP32[$vararg_buffer>>2] = $34;
    (_snprintf($ext_buf,1024,768367,$vararg_buffer)|0);
    break;
   } else {
    HEAP8[$ext_buf>>0] = 0;
    break;
   }
  }
 } while(0);
 $35 = $2;
 $36 = $exts;
 $37 = (_dir_list_new($35,$36,1)|0);
 $list = $37;
 $38 = $list;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $80 = $$pre_trunc&1;
  STACKTOP = sp;return ($80|0);
 }
 $40 = $list;
 _dir_list_sort($40,1);
 $41 = $3;
 $42 = (_menu_type_is_directory_browser($41)|0);
 if ($42) {
  $43 = $4;
  _rgui_list_push($43,768374,3,0);
 }
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = $list;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($44>>>0)<($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = $i;
  $50 = $list;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($49<<3)|0);
  $53 = ((($52)) + 4|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&1;
  $56 = $55&1;
  $is_dir = $56;
  $57 = $3;
  $58 = (_menu_type_is_directory_browser($57)|0);
  if ($58) {
   $59 = $is_dir;
   $60 = $59&1;
   if ($60) {
    label = 26;
   }
  } else {
   label = 26;
  }
  if ((label|0) == 26) {
   label = 0;
   $61 = $i;
   $62 = $list;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($61<<3)|0);
   $65 = HEAP32[$64>>2]|0;
   $path = $65;
   $66 = $2;
   $67 = HEAP8[$66>>0]|0;
   $68 = ($67<<24>>24)!=(0);
   if ($68) {
    $69 = $path;
    $70 = (_path_basename($69)|0);
    $path = $70;
   }
   $71 = $4;
   $72 = $path;
   $73 = $is_dir;
   $74 = $73&1;
   $75 = $3;
   $76 = $74 ? $75 : 0;
   _rgui_list_push($71,$72,$76,0);
  }
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 $79 = $list;
 _string_list_free($79);
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $80 = $$pre_trunc&1;
 STACKTOP = sp;return ($80|0);
}
function _render_text($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $begin = 0, $control = 0, $core_name = 0, $core_name1 = 0, $core_version = 0, $current = 0, $deviation = 0, $device_name = 0, $dir = 0, $end = 0;
 var $entry_title_buf = 0, $i = 0, $id = 0, $images = 0, $key_label = 0, $map = 0, $menu_type = 0, $message = 0, $name = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $path = 0, $port = 0, $refresh_rate = 0, $sample_points = 0, $selected = 0, $title = 0, $title_buf = 0, $title_msg = 0, $type = 0, $type_str = 0, $type_str_buf = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer78 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer89 = 0;
 var $vararg_buffer92 = 0, $vararg_buffer95 = 0, $vararg_buffer98 = 0, $vararg_ptr118 = 0, $vararg_ptr119 = 0, $vararg_ptr120 = 0, $vararg_ptr121 = 0, $vararg_ptr122 = 0, $vararg_ptr58 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr87 = 0, $vararg_ptr88 = 0, $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer115 = sp + 360|0;
 $vararg_buffer112 = sp + 352|0;
 $vararg_buffer109 = sp + 344|0;
 $vararg_buffer106 = sp + 336|0;
 $vararg_buffer103 = sp + 328|0;
 $vararg_buffer100 = sp + 320|0;
 $vararg_buffer98 = sp + 312|0;
 $vararg_buffer95 = sp + 304|0;
 $vararg_buffer92 = sp + 296|0;
 $vararg_buffer89 = sp + 288|0;
 $vararg_buffer84 = sp + 264|0;
 $vararg_buffer81 = sp + 256|0;
 $vararg_buffer78 = sp + 248|0;
 $vararg_buffer75 = sp + 240|0;
 $vararg_buffer72 = sp + 232|0;
 $vararg_buffer69 = sp + 224|0;
 $vararg_buffer67 = sp + 216|0;
 $vararg_buffer64 = sp + 208|0;
 $vararg_buffer59 = sp + 192|0;
 $vararg_buffer55 = sp + 184|0;
 $vararg_buffer52 = sp + 176|0;
 $vararg_buffer49 = sp + 168|0;
 $vararg_buffer46 = sp + 160|0;
 $vararg_buffer43 = sp + 152|0;
 $vararg_buffer40 = sp + 144|0;
 $vararg_buffer37 = sp + 136|0;
 $vararg_buffer34 = sp + 128|0;
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer22 = sp + 96|0;
 $vararg_buffer = sp + 88|0;
 $title = sp + 1632|0;
 $dir = sp + 460|0;
 $menu_type = sp + 456|0;
 $title_buf = sp + 1376|0;
 $title_msg = sp + 1312|0;
 $path = sp + 428|0;
 $type = sp + 424|0;
 $message = sp + 1056|0;
 $type_str = sp + 800|0;
 $refresh_rate = sp + 80|0;
 $deviation = sp + 72|0;
 $sample_points = sp + 412|0;
 $key_label = sp;
 $entry_title_buf = sp + 544|0;
 $type_str_buf = sp + 480|0;
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = (259656);
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = $7 & 4;
  $12 = ($11|0)!=(0);
  $13 = (0)!=(0);
  $14 = $12 | $13;
  if ($14) {
   $15 = $0;
   $16 = ((($15)) + 53|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&1;
   if (!($18)) {
    STACKTOP = sp;return;
   }
  }
 }
 $19 = $0;
 $20 = ((($19)) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[270228>>2]|0;
 $23 = (($22) - 27)|0;
 $24 = (($23) - 15)|0;
 $25 = (($24>>>0) / 11)&-1;
 $26 = (($25) - 1)|0;
 $27 = (($26>>>0) / 2)&-1;
 $28 = ($21>>>0)>=($27>>>0);
 if ($28) {
  $29 = $0;
  $30 = ((($29)) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[270228>>2]|0;
  $33 = (($32) - 27)|0;
  $34 = (($33) - 15)|0;
  $35 = (($34>>>0) / 11)&-1;
  $36 = (($35) - 1)|0;
  $37 = (($36>>>0) / 2)&-1;
  $38 = (($31) - ($37))|0;
  $39 = $38;
 } else {
  $39 = 0;
 }
 $begin = $39;
 $40 = $0;
 $41 = ((($40)) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[270228>>2]|0;
 $44 = (($43) - 27)|0;
 $45 = (($44) - 15)|0;
 $46 = (($45>>>0) / 11)&-1;
 $47 = (($46) - 1)|0;
 $48 = (($42) + ($47))|0;
 $49 = $0;
 $50 = ((($49)) + 44|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($48>>>0)<=($53>>>0);
 $55 = $0;
 if ($54) {
  $56 = ((($55)) + 48|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[270228>>2]|0;
  $59 = (($58) - 27)|0;
  $60 = (($59) - 15)|0;
  $61 = (($60>>>0) / 11)&-1;
  $62 = (($61) - 1)|0;
  $63 = (($57) + ($62))|0;
  $68 = $63;
 } else {
  $64 = ((($55)) + 44|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $67;
 }
 $end = $68;
 $69 = $0;
 $70 = ((($69)) + 44|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[270228>>2]|0;
 $75 = (($74) - 27)|0;
 $76 = (($75) - 15)|0;
 $77 = (($76>>>0) / 11)&-1;
 $78 = (($77) - 1)|0;
 $79 = ($73>>>0)<=($78>>>0);
 if ($79) {
  $begin = 0;
 }
 $80 = $end;
 $81 = $begin;
 $82 = (($80) - ($81))|0;
 $83 = HEAP32[270228>>2]|0;
 $84 = (($83) - 27)|0;
 $85 = (($84) - 15)|0;
 $86 = (($85>>>0) / 11)&-1;
 $87 = (($86) - 1)|0;
 $88 = ($82>>>0)>($87>>>0);
 if ($88) {
  $89 = $begin;
  $90 = HEAP32[270228>>2]|0;
  $91 = (($90) - 27)|0;
  $92 = (($91) - 15)|0;
  $93 = (($92>>>0) / 11)&-1;
  $94 = (($93) - 1)|0;
  $95 = (($89) + ($94))|0;
  $end = $95;
 }
 $96 = $0;
 _render_background($96);
 HEAP32[$dir>>2] = 0;
 HEAP32[$menu_type>>2] = 0;
 $97 = $0;
 $98 = ((($97)) + 40|0);
 $99 = HEAP32[$98>>2]|0;
 _rgui_list_get_last($99,$dir,$menu_type);
 $100 = HEAP32[$menu_type>>2]|0;
 $101 = ($100|0)==(57);
 do {
  if ($101) {
   $102 = HEAP32[$dir>>2]|0;
   HEAP32[$vararg_buffer>>2] = $102;
   (_snprintf($title,256,767724,$vararg_buffer)|0);
  } else {
   $103 = HEAP32[$menu_type>>2]|0;
   $104 = ($103|0)==(71);
   if ($104) {
    $105 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer22>>2] = $105;
    (_snprintf($title,256,767742,$vararg_buffer22)|0);
    break;
   }
   $106 = HEAP32[$menu_type>>2]|0;
   $107 = ($106|0)==(5);
   if ($107) {
    (_strlcpy_rarch__($title,767757,256)|0);
    break;
   }
   $108 = HEAP32[$menu_type>>2]|0;
   $109 = ($108|0)==(26);
   if ($109) {
    (_strlcpy_rarch__($title,767771,256)|0);
    break;
   }
   $110 = HEAP32[$menu_type>>2]|0;
   $111 = ($110|0)==(59);
   if ($111) {
    (_strlcpy_rarch__($title,767786,256)|0);
    break;
   }
   $112 = HEAP32[$menu_type>>2]|0;
   $113 = ($112|0)==(69);
   if ($113) {
    (_strlcpy_rarch__($title,767800,256)|0);
    break;
   }
   $114 = HEAP32[$menu_type>>2]|0;
   $115 = ($114|0)==(58);
   if ($115) {
    (_strlcpy_rarch__($title,767813,256)|0);
    break;
   }
   $116 = HEAP32[$menu_type>>2]|0;
   $117 = (_menu_type_is_shader_browser($116)|0);
   if ($117) {
    $118 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer25>>2] = $118;
    (_snprintf($title,256,767826,$vararg_buffer25)|0);
    break;
   }
   $119 = HEAP32[$menu_type>>2]|0;
   $120 = ($119|0)==(60);
   $121 = HEAP32[$menu_type>>2]|0;
   $122 = ($121|0)==(61);
   $or$cond = $120 | $122;
   $123 = HEAP32[$menu_type>>2]|0;
   $124 = ($123|0)==(62);
   $or$cond3 = $or$cond | $124;
   $125 = HEAP32[$menu_type>>2]|0;
   $126 = ($125|0)==(12);
   $or$cond5 = $or$cond3 | $126;
   $127 = HEAP32[$menu_type>>2]|0;
   $128 = ($127|0)==(13);
   $or$cond7 = $or$cond5 | $128;
   $129 = HEAP32[$menu_type>>2]|0;
   $130 = ($129|0)==(4);
   $or$cond9 = $or$cond7 | $130;
   if ($or$cond9) {
    $131 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer28>>2] = $131;
    (_snprintf($title,256,767836,$vararg_buffer28)|0);
    break;
   }
   $132 = HEAP32[$menu_type>>2]|0;
   $133 = ($132|0)==(56);
   if ($133) {
    (_strlcpy_rarch__($title,767844,256)|0);
    break;
   }
   $134 = HEAP32[$menu_type>>2]|0;
   $135 = ($134|0)==(90);
   if ($135) {
    $136 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer31>>2] = $136;
    (_snprintf($title,256,767857,$vararg_buffer31)|0);
    break;
   }
   $137 = HEAP32[$menu_type>>2]|0;
   $138 = ($137|0)==(75);
   if ($138) {
    $139 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer34>>2] = $139;
    (_snprintf($title,256,767868,$vararg_buffer34)|0);
    break;
   }
   $140 = HEAP32[$menu_type>>2]|0;
   $141 = ($140|0)==(74);
   if ($141) {
    $142 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer37>>2] = $142;
    (_snprintf($title,256,767883,$vararg_buffer37)|0);
    break;
   }
   $143 = HEAP32[$menu_type>>2]|0;
   $144 = ($143|0)==(76);
   if ($144) {
    $145 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer40>>2] = $145;
    (_snprintf($title,256,767901,$vararg_buffer40)|0);
    break;
   }
   $146 = HEAP32[$menu_type>>2]|0;
   $147 = ($146|0)==(77);
   if ($147) {
    $148 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer43>>2] = $148;
    (_snprintf($title,256,767915,$vararg_buffer43)|0);
    break;
   }
   $149 = HEAP32[$menu_type>>2]|0;
   $150 = ($149|0)==(78);
   if ($150) {
    $151 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer46>>2] = $151;
    (_snprintf($title,256,767932,$vararg_buffer46)|0);
    break;
   }
   $152 = HEAP32[$menu_type>>2]|0;
   $153 = ($152|0)==(80);
   if ($153) {
    $154 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer49>>2] = $154;
    (_snprintf($title,256,767948,$vararg_buffer49)|0);
    break;
   }
   $155 = HEAP32[$menu_type>>2]|0;
   $156 = ($155|0)==(81);
   if ($156) {
    $157 = HEAP32[$dir>>2]|0;
    HEAP32[$vararg_buffer52>>2] = $157;
    (_snprintf($title,256,767963,$vararg_buffer52)|0);
    break;
   }
   $158 = $0;
   $159 = ((($158)) + 4160|0);
   $160 = HEAP32[$159>>2]|0;
   $core_name = $160;
   $161 = $core_name;
   $162 = ($161|0)!=(0|0);
   if (!($162)) {
    $163 = HEAP32[(196912)>>2]|0;
    $core_name = $163;
   }
   $164 = $core_name;
   $165 = ($164|0)!=(0|0);
   if (!($165)) {
    $core_name = 767977;
   }
   $166 = $core_name;
   $167 = HEAP32[$dir>>2]|0;
   HEAP32[$vararg_buffer55>>2] = $166;
   $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
   HEAP32[$vararg_ptr58>>2] = $167;
   (_snprintf($title,256,767985,$vararg_buffer55)|0);
  }
 } while(0);
 $168 = HEAP32[270224>>2]|0;
 $169 = (($168) - 15)|0;
 $170 = (($169) - 15)|0;
 $171 = (($170>>>0) / 6)&-1;
 $172 = (($171) - 3)|0;
 $173 = HEAP32[(259432)>>2]|0;
 $174 = (($173>>>0) / 15)&-1;
 _menu_ticker_line($title_buf,$172,$174,$title,1);
 $175 = $0;
 _blit_line($175,30,15,$title_buf,1);
 $176 = $0;
 $177 = ((($176)) + 4160|0);
 $178 = HEAP32[$177>>2]|0;
 $core_name1 = $178;
 $179 = $core_name1;
 $180 = ($179|0)!=(0|0);
 if (!($180)) {
  $181 = HEAP32[(196912)>>2]|0;
  $core_name1 = $181;
 }
 $182 = $core_name1;
 $183 = ($182|0)!=(0|0);
 if (!($183)) {
  $core_name1 = 767977;
 }
 $184 = $0;
 $185 = ((($184)) + 4160|0);
 $186 = ((($185)) + 4|0);
 $187 = HEAP32[$186>>2]|0;
 $core_version = $187;
 $188 = $core_version;
 $189 = ($188|0)!=(0|0);
 if (!($189)) {
  $190 = HEAP32[(196916)>>2]|0;
  $core_version = $190;
 }
 $191 = $core_version;
 $192 = ($191|0)!=(0|0);
 if (!($192)) {
  $core_version = 773086;
 }
 $193 = $core_name1;
 $194 = $core_version;
 HEAP32[$vararg_buffer59>>2] = 768009;
 $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
 HEAP32[$vararg_ptr62>>2] = $193;
 $vararg_ptr63 = ((($vararg_buffer59)) + 8|0);
 HEAP32[$vararg_ptr63>>2] = $194;
 (_snprintf($title_msg,64,767998,$vararg_buffer59)|0);
 $195 = $0;
 $196 = HEAP32[270228>>2]|0;
 $197 = (($196) - 27)|0;
 $198 = (($197) - 15)|0;
 $199 = (($198>>>0) / 11)&-1;
 $200 = (($199) - 1)|0;
 $201 = ($200*11)|0;
 $202 = (($201) + 27)|0;
 $203 = (($202) + 2)|0;
 _blit_line($195,30,$203,$title_msg,1);
 $x = 15;
 $y = 27;
 $204 = $begin;
 $i = $204;
 while(1) {
  $205 = $i;
  $206 = $end;
  $207 = ($205>>>0)<($206>>>0);
  if (!($207)) {
   break;
  }
  HEAP32[$path>>2] = 0;
  HEAP32[$type>>2] = 0;
  $208 = $0;
  $209 = ((($208)) + 44|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $i;
  _rgui_list_get_at_offset($210,$211,$path,$type);
  $212 = HEAP32[$menu_type>>2]|0;
  $213 = ($212|0)==(60);
  $214 = HEAP32[$menu_type>>2]|0;
  $215 = ($214|0)==(61);
  $216 = $213 ? 1 : $215;
  $217 = $216 ? 24 : 19;
  $w = $217;
  $218 = $0;
  $219 = ((($218)) + 113708|0);
  $220 = HEAP32[$219>>2]|0;
  $port = $220;
  $221 = HEAP32[$type>>2]|0;
  $222 = ($221>>>0)>=(27);
  $223 = HEAP32[$type>>2]|0;
  $224 = ($223>>>0)<=(54);
  $or$cond11 = $222 & $224;
  $225 = HEAP32[$menu_type>>2]|0;
  L95: do {
   if ($or$cond11) {
    $226 = (_menu_type_is_shader_browser($225)|0);
    if ($226) {
     $227 = HEAP32[$type>>2]|0;
     $228 = (_menu_type_is_shader_browser($227)|0);
     if ($228) {
      HEAP32[$type>>2] = 1;
      (_strlcpy_rarch__($type_str,768017,256)|0);
      $w = 5;
      break;
     }
    }
    $229 = HEAP32[$type>>2]|0;
    $230 = ($229|0)==(26);
    $231 = HEAP32[$type>>2]|0;
    $232 = ($231|0)==(28);
    $or$cond13 = $230 | $232;
    if ($or$cond13) {
     (_strlcpy_rarch__($type_str,768023,256)|0);
     break;
    }
    $233 = HEAP32[$type>>2]|0;
    $234 = ($233|0)==(27);
    if ($234) {
     $235 = HEAP8[(324)>>0]|0;
     $236 = $235&1;
     $237 = $236 ? 768027 : 768034;
     HEAP32[$vararg_buffer64>>2] = $237;
     (_snprintf($type_str,256,768042,$vararg_buffer64)|0);
     break;
    } else {
     $238 = $0;
     $239 = ((($238)) + 4180|0);
     $240 = HEAP32[$type>>2]|0;
     _shader_manager_get_str($239,$type_str,256,$240);
     break;
    }
   } else {
    $241 = ($225|0)==(57);
    $242 = HEAP32[$menu_type>>2]|0;
    $243 = ($242|0)==(90);
    $or$cond15 = $241 | $243;
    $244 = HEAP32[$menu_type>>2]|0;
    $245 = ($244|0)==(71);
    $or$cond17 = $or$cond15 | $245;
    if (!($or$cond17)) {
     $246 = HEAP32[$menu_type>>2]|0;
     $247 = (_menu_type_is_directory_browser($246)|0);
     if (!($247)) {
      $252 = HEAP32[$menu_type>>2]|0;
      $253 = ($252|0)==(56);
      if ($253) {
       HEAP8[$type_str>>0] = 0;
       $w = 0;
       break;
      }
      $254 = HEAP32[$type>>2]|0;
      $255 = ($254>>>0)>=(65536);
      if ($255) {
       $256 = HEAP32[(201704)>>2]|0;
       $257 = HEAP32[$type>>2]|0;
       $258 = (($257) - 65536)|0;
       $259 = (_core_option_get_val($256,$258)|0);
       (_strlcpy_rarch__($type_str,$259,256)|0);
       break;
      }
      $260 = HEAP32[$type>>2]|0;
      do {
       switch ($260|0) {
       case 15:  {
        $261 = HEAP32[(340)>>2]|0;
        $262 = (755230 + ($261<<5)|0);
        (_strlcpy_rarch__($type_str,$262,256)|0);
        break L95;
        break;
       }
       case 8:  {
        $263 = (259656);
        $264 = $263;
        $265 = HEAP32[$264>>2]|0;
        $266 = (($263) + 4)|0;
        $267 = $266;
        $268 = HEAP32[$267>>2]|0;
        $269 = $265 & 65536;
        $270 = ($269|0)!=(0);
        $271 = (0)!=(0);
        $272 = $270 | $271;
        $273 = $272 ? 768052 : 768055;
        (_snprintf($type_str,256,$273,$vararg_buffer67)|0);
        break L95;
        break;
       }
       case 7:  {
        $274 = HEAP8[(324)>>0]|0;
        $275 = $274&1;
        if ($275) {
         (_strlcpy_rarch__($type_str,768059,256)|0);
         break L95;
        } else {
         (_strlcpy_rarch__($type_str,768078,256)|0);
         break L95;
        }
        break;
       }
       case 9:  {
        $276 = HEAP32[(259636)>>2]|0;
        HEAP32[$vararg_buffer69>>2] = $276;
        (_snprintf($type_str,256,768094,$vararg_buffer69)|0);
        break L95;
        break;
       }
       case 16:  {
        $277 = HEAP8[(312)>>0]|0;
        $278 = $277&1;
        $279 = $278 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$279,256)|0);
        break L95;
        break;
       }
       case 17:  {
        $280 = HEAP8[(313)>>0]|0;
        $281 = $280&1;
        $282 = $281 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$282,256)|0);
        break L95;
        break;
       }
       case 19:  {
        $283 = HEAP8[(314)>>0]|0;
        $284 = $283&1;
        $285 = $284 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$285,256)|0);
        break L95;
        break;
       }
       case 20:  {
        $286 = HEAP32[(316)>>2]|0;
        HEAP32[$vararg_buffer72>>2] = $286;
        (_snprintf($type_str,256,768097,$vararg_buffer72)|0);
        break L95;
        break;
       }
       case 21:  {
        $287 = +HEAPF32[(288)>>2];
        $288 = $287;
        HEAPF64[$vararg_buffer75>>3] = $288;
        (_snprintf($type_str,256,768100,$vararg_buffer75)|0);
        break L95;
        break;
       }
       case 22:  {
        $289 = +HEAPF32[(292)>>2];
        $290 = $289;
        HEAPF64[$vararg_buffer78>>3] = $290;
        (_snprintf($type_str,256,768100,$vararg_buffer78)|0);
        break L95;
        break;
       }
       case 23:  {
        $291 = HEAP8[(326)>>0]|0;
        $292 = $291&1;
        $293 = $292 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$293,256)|0);
        break L95;
        break;
       }
       case 18:  {
        $294 = HEAP32[(320)>>2]|0;
        HEAP32[$vararg_buffer81>>2] = $294;
        (_snprintf($type_str,256,768097,$vararg_buffer81)|0);
        break L95;
        break;
       }
       case 24:  {
        HEAPF64[$refresh_rate>>3] = 0.0;
        HEAPF64[$deviation>>3] = 0.0;
        HEAP32[$sample_points>>2] = 0;
        $295 = (_driver_monitor_fps_statistics($refresh_rate,$deviation,$sample_points)|0);
        if ($295) {
         $296 = +HEAPF64[$refresh_rate>>3];
         $297 = +HEAPF64[$deviation>>3];
         $298 = 100.0 * $297;
         $299 = HEAP32[$sample_points>>2]|0;
         HEAPF64[$vararg_buffer84>>3] = $296;
         $vararg_ptr87 = ((($vararg_buffer84)) + 8|0);
         HEAPF64[$vararg_ptr87>>3] = $298;
         $vararg_ptr88 = ((($vararg_buffer84)) + 16|0);
         HEAP32[$vararg_ptr88>>2] = $299;
         (_snprintf($type_str,256,768106,$vararg_buffer84)|0);
         break L95;
        } else {
         (_strlcpy_rarch__($type_str,768139,256)|0);
         break L95;
        }
        break;
       }
       case 10:  {
        $300 = HEAP8[(333)>>0]|0;
        $301 = $300&1;
        $302 = $301 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$302,256)|0);
        break L95;
        break;
       }
       case 11:  {
        $303 = HEAP32[(336)>>2]|0;
        $304 = (265240 + (($303*68)|0)|0);
        (_strlcpy_rarch__($type_str,$304,256)|0);
        break L95;
        break;
       }
       case 0:  {
        (_strlcpy_rarch__($type_str,768045,256)|0);
        $w = 6;
        break L95;
        break;
       }
       case 1:  {
        (_strlcpy_rarch__($type_str,768017,256)|0);
        $w = 5;
        break L95;
        break;
       }
       case 63:  {
        $305 = HEAP8[(98508)>>0]|0;
        $306 = $305&1;
        $307 = $306 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$307,256)|0);
        break L95;
        break;
       }
       case 73:  {
        $308 = HEAP8[(16771)>>0]|0;
        $309 = $308&1;
        $310 = $309 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$310,256)|0);
        break L95;
        break;
       }
       case 64:  {
        $311 = HEAP32[(98516)>>2]|0;
        HEAP32[$vararg_buffer89>>2] = $311;
        (_snprintf($type_str,256,768097,$vararg_buffer89)|0);
        break L95;
        break;
       }
       case 65:  {
        $312 = HEAP8[(259670)>>0]|0;
        $313 = $312&1;
        $314 = $313 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$314,256)|0);
        break L95;
        break;
       }
       case 66:  {
        $315 = HEAP32[(98532)>>2]|0;
        $316 = ($315|0)!=(0);
        $317 = $316 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$317,256)|0);
        break L95;
        break;
       }
       case 68: case 67:  {
        $318 = HEAP32[(196888)>>2]|0;
        HEAP32[$vararg_buffer92>>2] = $318;
        (_snprintf($type_str,256,768094,$vararg_buffer92)|0);
        break L95;
        break;
       }
       case 83:  {
        $319 = HEAP8[(201753)>>0]|0;
        $320 = $319&1;
        $321 = $320 ? 768052 : 768055;
        (_strlcpy_rarch__($type_str,$321,256)|0);
        break L95;
        break;
       }
       case 84:  {
        $322 = +HEAPF32[(25024)>>2];
        $323 = $322;
        HEAPF64[$vararg_buffer95>>3] = $323;
        (_snprintf($type_str,256,768143,$vararg_buffer95)|0);
        break L95;
        break;
       }
       case 86:  {
        $324 = (259656);
        $325 = $324;
        $326 = HEAP32[$325>>2]|0;
        $327 = (($324) + 4)|0;
        $328 = $327;
        $329 = HEAP32[$328>>2]|0;
        $330 = $326 & 256;
        $331 = ($330|0)!=(0);
        $332 = (0)!=(0);
        $333 = $331 | $332;
        $334 = $333 ? 768052 : 768055;
        (_snprintf($type_str,256,$334,$vararg_buffer98)|0);
        break L95;
        break;
       }
       case 75:  {
        $335 = HEAP8[(98545)>>0]|0;
        $336 = $335 << 24 >> 24;
        $337 = ($336|0)!=(0);
        $338 = $337 ? (98545) : 768148;
        (_strlcpy_rarch__($type_str,$338,256)|0);
        break L95;
        break;
       }
       case 74:  {
        $339 = HEAP8[(90316)>>0]|0;
        $340 = $339 << 24 >> 24;
        $341 = ($340|0)!=(0);
        $342 = $341 ? (90316) : 768158;
        (_strlcpy_rarch__($type_str,$342,256)|0);
        break L95;
        break;
       }
       case 78:  {
        $343 = HEAP8[(172306)>>0]|0;
        $344 = $343 << 24 >> 24;
        $345 = ($344|0)!=(0);
        $346 = $345 ? (172306) : 768158;
        (_strlcpy_rarch__($type_str,$346,256)|0);
        break L95;
        break;
       }
       case 80:  {
        $347 = HEAP8[(180498)>>0]|0;
        $348 = $347 << 24 >> 24;
        $349 = ($348|0)!=(0);
        $350 = $349 ? (180498) : 768148;
        (_strlcpy_rarch__($type_str,$350,256)|0);
        break L95;
        break;
       }
       case 77:  {
        $351 = HEAP8[(176402)>>0]|0;
        $352 = $351 << 24 >> 24;
        $353 = ($352|0)!=(0);
        $354 = $353 ? (176402) : 768158;
        (_strlcpy_rarch__($type_str,$354,256)|0);
        break L95;
        break;
       }
       case 76:  {
        $355 = HEAP8[(8545)>>0]|0;
        $356 = $355 << 24 >> 24;
        $357 = ($356|0)!=(0);
        $358 = $357 ? (8545) : 768148;
        (_strlcpy_rarch__($type_str,$358,256)|0);
        break L95;
        break;
       }
       case 81:  {
        $359 = HEAP8[(94412)>>0]|0;
        $360 = $359 << 24 >> 24;
        $361 = ($360|0)!=(0);
        $362 = $361 ? (94412) : 768158;
        (_strlcpy_rarch__($type_str,$362,256)|0);
        break L95;
        break;
       }
       case 70:  {
        $control = (201612);
        $363 = $control;
        $364 = ((($363)) + 16|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = (FUNCTION_TABLE_i[$365 & 511]()|0);
        $images = $366;
        $367 = $control;
        $368 = ((($367)) + 8|0);
        $369 = HEAP32[$368>>2]|0;
        $370 = (FUNCTION_TABLE_i[$369 & 511]()|0);
        $current = $370;
        $371 = $current;
        $372 = $images;
        $373 = ($371>>>0)>=($372>>>0);
        if ($373) {
         (_strlcpy_rarch__($type_str,768168,256)|0);
         break L95;
        } else {
         $374 = $current;
         $375 = (($374) + 1)|0;
         HEAP32[$vararg_buffer100>>2] = $375;
         (_snprintf($type_str,256,768097,$vararg_buffer100)|0);
         break L95;
        }
        break;
       }
       case 62: case 61: case 60: case 71: case 57: case 28: case 26: case 69: case 59: case 5: case 14: case 12: case 58: case 56: case 55:  {
        (_strlcpy_rarch__($type_str,768023,256)|0);
        break L95;
        break;
       }
       case 90:  {
        $376 = (_path_basename((61632))|0);
        (_strlcpy_rarch__($type_str,$376,256)|0);
        break L95;
        break;
       }
       case 91:  {
        $377 = +HEAPF32[(65728)>>2];
        $378 = $377;
        HEAPF64[$vararg_buffer103>>3] = $378;
        (_snprintf($type_str,256,768176,$vararg_buffer103)|0);
        break L95;
        break;
       }
       case 92:  {
        $379 = +HEAPF32[(65732)>>2];
        $380 = $379;
        HEAPF64[$vararg_buffer106>>3] = $380;
        (_snprintf($type_str,256,768176,$vararg_buffer106)|0);
        break L95;
        break;
       }
       case 93:  {
        $381 = $port;
        $382 = (($381) + 1)|0;
        HEAP32[$vararg_buffer109>>2] = $382;
        (_snprintf($type_str,256,768181,$vararg_buffer109)|0);
        break L95;
        break;
       }
       case 94:  {
        $383 = $port;
        $384 = ((61012) + ($383<<2)|0);
        $385 = HEAP32[$384>>2]|0;
        $map = $385;
        $386 = $map;
        $387 = ($386|0)>=(0);
        $388 = $map;
        $389 = ($388|0)<(8);
        $or$cond19 = $387 & $389;
        if (!($or$cond19)) {
         (_strlcpy_rarch__($type_str,768200,256)|0);
         break L95;
        }
        $390 = $map;
        $391 = ((61076) + ($390<<6)|0);
        $device_name = $391;
        $392 = $device_name;
        $393 = HEAP8[$392>>0]|0;
        $394 = ($393<<24>>24)!=(0);
        if ($394) {
         $395 = $device_name;
         (_strlcpy_rarch__($type_str,$395,256)|0);
         break L95;
        } else {
         $396 = $map;
         HEAP32[$vararg_buffer112>>2] = $396;
         (_snprintf($type_str,256,768185,$vararg_buffer112)|0);
         break L95;
        }
        break;
       }
       case 95:  {
        $397 = $port;
        $398 = ((60976) + ($397<<2)|0);
        $399 = HEAP32[$398>>2]|0;
        switch ($399|0) {
        case 0:  {
         $name = 768209;
         break;
        }
        case 1:  {
         $name = 768214;
         break;
        }
        case 5:  {
         $name = 768221;
         break;
        }
        case 257:  {
         $name = 768238;
         break;
        }
        case 2:  {
         $name = 768247;
         break;
        }
        case 516:  {
         $name = 768253;
         break;
        }
        case 772:  {
         $name = 768263;
         break;
        }
        case 260:  {
         $name = 768274;
         break;
        }
        default: {
         $name = 768285;
        }
        }
        $400 = $name;
        (_strlcpy_rarch__($type_str,$400,256)|0);
        break L95;
        break;
       }
       case 96:  {
        $401 = $port;
        $402 = ((61588) + ($401<<2)|0);
        $403 = HEAP32[$402>>2]|0;
        switch ($403|0) {
        case 0:  {
         (_strlcpy_rarch__($type_str,768209,256)|0);
         break L95;
         break;
        }
        case 1:  {
         (_strlcpy_rarch__($type_str,768293,256)|0);
         break L95;
         break;
        }
        case 3:  {
         (_strlcpy_rarch__($type_str,768304,256)|0);
         break L95;
         break;
        }
        case 2:  {
         (_strlcpy_rarch__($type_str,768316,256)|0);
         break L95;
         break;
        }
        default: {
         break L95;
        }
        }
        break;
       }
       case 112: case 111: case 110: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 98: case 97:  {
        $404 = HEAP32[$type>>2]|0;
        $405 = (($404) - 97)|0;
        $406 = (270280 + ($405<<2)|0);
        $407 = HEAP32[$406>>2]|0;
        $id = $407;
        $408 = ((($key_label)) + 8|0);
        (_strlcpy_rarch__($408,768285,64)|0);
        $409 = $id;
        $410 = $port;
        $411 = ((25128) + (($410*2240)|0)|0);
        $412 = (($411) + (($409*40)|0)|0);
        $413 = ((($412)) + 16|0);
        $414 = $413;
        $415 = $414;
        $416 = HEAP32[$415>>2]|0;
        $417 = (($414) + 4)|0;
        $418 = $417;
        $419 = HEAP32[$418>>2]|0;
        $420 = $key_label;
        $421 = $420;
        HEAP32[$421>>2] = $416;
        $422 = (($420) + 4)|0;
        $423 = $422;
        HEAP32[$423>>2] = $419;
        $424 = HEAP32[(16)>>2]|0;
        $425 = ((($424)) + 20|0);
        $426 = HEAP32[$425>>2]|0;
        $427 = ($426|0)!=(0|0);
        if ($427) {
         $428 = HEAP32[(16)>>2]|0;
         $429 = ((($428)) + 20|0);
         $430 = HEAP32[$429>>2]|0;
         FUNCTION_TABLE_viiiii[$430 & 511]($key_label,0,0,0,256);
        }
        $431 = ((($key_label)) + 8|0);
        (_strlcpy_rarch__($type_str,$431,256)|0);
        break L95;
        break;
       }
       default: {
        HEAP8[$type_str>>0] = 0;
        $w = 0;
        break L95;
       }
       }
      } while(0);
     }
    }
    $248 = HEAP32[$type>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     (_strlcpy_rarch__($type_str,768045,256)|0);
     $w = 6;
     break;
    }
    $250 = HEAP32[$type>>2]|0;
    $251 = ($250|0)==(3);
    if ($251) {
     HEAP8[$type_str>>0] = 0;
     $w = 0;
     break;
    } else {
     (_strlcpy_rarch__($type_str,768017,256)|0);
     HEAP32[$type>>2] = 1;
     $w = 5;
     break;
    }
   }
  } while(0);
  $432 = $i;
  $433 = $0;
  $434 = ((($433)) + 48|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = ($432|0)==($435|0);
  $437 = $436&1;
  $selected = $437;
  $438 = HEAP32[$path>>2]|0;
  (_strlcpy_rarch__($entry_title_buf,$438,256)|0);
  (_strlcpy_rarch__($type_str_buf,$type_str,64)|0);
  $439 = HEAP32[$type>>2]|0;
  $440 = ($439|0)==(0);
  $441 = HEAP32[$type>>2]|0;
  $442 = ($441|0)==(1);
  $or$cond21 = $440 | $442;
  if ($or$cond21) {
   $443 = HEAP32[270224>>2]|0;
   $444 = (($443) - 15)|0;
   $445 = (($444) - 15)|0;
   $446 = (($445>>>0) / 6)&-1;
   $447 = $w;
   $448 = (($447) + 1)|0;
   $449 = (($448) + 2)|0;
   $450 = (($446) - ($449))|0;
   $451 = HEAP32[(259432)>>2]|0;
   $452 = (($451>>>0) / 15)&-1;
   $453 = HEAP32[$path>>2]|0;
   $454 = $selected;
   $455 = $454&1;
   _menu_ticker_line($entry_title_buf,$450,$452,$453,$455);
  } else {
   $456 = $w;
   $457 = HEAP32[(259432)>>2]|0;
   $458 = (($457>>>0) / 15)&-1;
   $459 = $selected;
   $460 = $459&1;
   _menu_ticker_line($type_str_buf,$456,$458,$type_str,$460);
  }
  $461 = $selected;
  $462 = $461&1;
  $463 = $462 ? 62 : 32;
  $464 = HEAP32[270224>>2]|0;
  $465 = (($464) - 15)|0;
  $466 = (($465) - 15)|0;
  $467 = (($466>>>0) / 6)&-1;
  $468 = $w;
  $469 = (($468) + 1)|0;
  $470 = (($469) + 2)|0;
  $471 = (($467) - ($470))|0;
  $472 = HEAP32[270224>>2]|0;
  $473 = (($472) - 15)|0;
  $474 = (($473) - 15)|0;
  $475 = (($474>>>0) / 6)&-1;
  $476 = $w;
  $477 = (($476) + 1)|0;
  $478 = (($477) + 2)|0;
  $479 = (($475) - ($478))|0;
  $480 = $w;
  HEAP32[$vararg_buffer115>>2] = $463;
  $vararg_ptr118 = ((($vararg_buffer115)) + 4|0);
  HEAP32[$vararg_ptr118>>2] = $471;
  $vararg_ptr119 = ((($vararg_buffer115)) + 8|0);
  HEAP32[$vararg_ptr119>>2] = $479;
  $vararg_ptr120 = ((($vararg_buffer115)) + 12|0);
  HEAP32[$vararg_ptr120>>2] = $entry_title_buf;
  $vararg_ptr121 = ((($vararg_buffer115)) + 16|0);
  HEAP32[$vararg_ptr121>>2] = $480;
  $vararg_ptr122 = ((($vararg_buffer115)) + 20|0);
  HEAP32[$vararg_ptr122>>2] = $type_str_buf;
  (_snprintf($message,256,768328,$vararg_buffer115)|0);
  $481 = $0;
  $482 = $x;
  $483 = $y;
  $484 = $selected;
  $485 = $484&1;
  _blit_line($481,$482,$483,$message,$485);
  $486 = $i;
  $487 = (($486) + 1)|0;
  $i = $487;
  $488 = $y;
  $489 = (($488) + 11)|0;
  $y = $489;
 }
 STACKTOP = sp;return;
}
function _render_background($rgui) {
 $rgui = $rgui|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[270224>>2]|0;
 $8 = HEAP32[270228>>2]|0;
 _fill_rect($3,$6,0,0,$7,$8,324);
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[270224>>2]|0;
 $16 = (($15) - 10)|0;
 _fill_rect($11,$14,5,5,$16,5,325);
 $17 = $0;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[270228>>2]|0;
 $24 = (($23) - 10)|0;
 $25 = HEAP32[270224>>2]|0;
 $26 = (($25) - 10)|0;
 _fill_rect($19,$22,5,$24,$26,5,325);
 $27 = $0;
 $28 = ((($27)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[270228>>2]|0;
 $34 = (($33) - 10)|0;
 _fill_rect($29,$32,5,5,5,$34,325);
 $35 = $0;
 $36 = ((($35)) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 $39 = ((($38)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[270224>>2]|0;
 $42 = (($41) - 10)|0;
 $43 = HEAP32[270228>>2]|0;
 $44 = (($43) - 10)|0;
 _fill_rect($37,$40,$42,5,5,$44,325);
 STACKTOP = sp;return;
}
function _rgui_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $custom = 0, $font_bin_buf = 0, $font_bmp_buf = 0, $framebuf = 0, $framebuf_pitch = 0, $rgui = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $framebuf = 545528;
 $1 = HEAP32[270224>>2]|0;
 $2 = $1<<1;
 $framebuf_pitch = $2;
 $font_bmp_buf = 0;
 $font_bin_buf = 765880;
 $3 = (_calloc(1,113728)|0);
 $rgui = $3;
 $4 = $framebuf;
 $5 = $rgui;
 $6 = ((($5)) + 28|0);
 HEAP32[$6>>2] = $4;
 $7 = $framebuf_pitch;
 $8 = $rgui;
 $9 = ((($8)) + 32|0);
 HEAP32[$9>>2] = $7;
 $10 = $font_bmp_buf;
 $11 = ($10|0)!=(0|0);
 do {
  if ($11) {
   $12 = $rgui;
   $13 = $font_bmp_buf;
   _init_font($12,$13);
  } else {
   $14 = $font_bin_buf;
   $15 = ($14|0)!=(0|0);
   if ($15) {
    $16 = $font_bin_buf;
    $17 = $rgui;
    $18 = ((($17)) + 4152|0);
    HEAP32[$18>>2] = $16;
    break;
   }
   $19 = HEAP32[(259664)>>2]|0;
   $20 = ($19|0)!=(0|0);
   $21 = HEAP32[(259664)>>2]|0;
   $22 = HEAP32[544648>>2]|0;
   $23 = $20 ? $21 : $22;
   (_fprintf($23,767677,$vararg_buffer)|0);
   $24 = HEAP32[(259664)>>2]|0;
   $25 = ($24|0)!=(0|0);
   $26 = HEAP32[(259664)>>2]|0;
   $27 = HEAP32[544648>>2]|0;
   $28 = $25 ? $26 : $27;
   (_fflush($28)|0);
   $29 = (259656);
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) + 4)|0;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = $31 & -6;
   $36 = (259656);
   $37 = $36;
   HEAP32[$37>>2] = $35;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $34;
   $0 = 0;
   $79 = $0;
   STACKTOP = sp;return ($79|0);
  }
 } while(0);
 $40 = $rgui;
 $41 = ((($40)) + 54|0);
 (_strlcpy_rarch__($41,(98545),4096)|0);
 $42 = (_calloc(1,12)|0);
 $43 = $rgui;
 $44 = ((($43)) + 40|0);
 HEAP32[$44>>2] = $42;
 $45 = (_calloc(1,12)|0);
 $46 = $rgui;
 $47 = ((($46)) + 44|0);
 HEAP32[$47>>2] = $45;
 $48 = $rgui;
 $49 = ((($48)) + 40|0);
 $50 = HEAP32[$49>>2]|0;
 _rgui_list_push($50,773086,4,0);
 $51 = $rgui;
 $52 = ((($51)) + 48|0);
 HEAP32[$52>>2] = 0;
 $53 = $rgui;
 _rgui_settings_populate_entries($53);
 $custom = (259612);
 $54 = HEAP32[(24)>>2]|0;
 $55 = ($54|0)!=(0|0);
 do {
  if ($55) {
   $56 = $custom;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)!=(0);
   if ($59) {
    $60 = $custom;
    $61 = ((($60)) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)!=(0);
    if ($63) {
     label = 10;
     break;
    }
   }
   $64 = HEAP32[(12)>>2]|0;
   $65 = ((($64)) + 44|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP32[(24)>>2]|0;
   $68 = $custom;
   FUNCTION_TABLE_vii[$66 & 1023]($67,$68);
   $69 = $custom;
   $70 = ((($69)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (+($71>>>0));
   $73 = $custom;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75>>>0));
   $77 = $72 / $76;
   HEAPF32[(265780)>>2] = $77;
  } else {
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  HEAPF32[(265780)>>2] = 1.3333333730697632;
 }
 $78 = $rgui;
 $0 = $78;
 $79 = $0;
 STACKTOP = sp;return ($79|0);
}
function _init_font($rgui,$font_bmp_buf) {
 $rgui = $rgui|0;
 $font_bmp_buf = $font_bmp_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $font = 0, $i = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgui;
 $1 = $font_bmp_buf;
 $2 = (_calloc(1,1792)|0);
 $font = $2;
 $3 = $0;
 $4 = ((($3)) + 4156|0);
 HEAP8[$4>>0] = 1;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5>>>0)<(256);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = (($7>>>0) / 16)&-1;
  $y = $8;
  $9 = $i;
  $10 = (($9>>>0) % 16)&-1;
  $x = $10;
  $11 = $i;
  $12 = ($11*7)|0;
  $13 = $font;
  $14 = (($13) + ($12)|0);
  $15 = $1;
  $16 = ((($15)) + 54|0);
  $17 = $y;
  $18 = $17<<4;
  $19 = (255 - ($18))|0;
  $20 = $19<<8;
  $21 = $x;
  $22 = $21<<4;
  $23 = (($20) + ($22))|0;
  $24 = ($23*3)|0;
  $25 = (($16) + ($24)|0);
  _rgui_copy_glyph($14,$25);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $font;
 $29 = $0;
 $30 = ((($29)) + 4152|0);
 HEAP32[$30>>2] = $28;
 STACKTOP = sp;return;
}
function _rgui_copy_glyph($glyph,$buf) {
 $glyph = $glyph|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $offset = 0, $rem = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $glyph;
 $1 = $buf;
 $y = 0;
 while(1) {
  $2 = $y;
  $3 = ($2|0)<(10);
  if (!($3)) {
   break;
  }
  $x = 0;
  while(1) {
   $4 = $x;
   $5 = ($4|0)<(5);
   $6 = $y;
   if (!($5)) {
    break;
   }
   $7 = (0 - ($6))|0;
   $8 = $7<<8;
   $9 = $x;
   $10 = (($8) + ($9))|0;
   $11 = ($10*3)|0;
   $12 = (($11) + 0)|0;
   $13 = $1;
   $14 = (($13) + ($12)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 << 0;
   $18 = $y;
   $19 = (0 - ($18))|0;
   $20 = $19<<8;
   $21 = $x;
   $22 = (($20) + ($21))|0;
   $23 = ($22*3)|0;
   $24 = (($23) + 1)|0;
   $25 = $1;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = $17 | $29;
   $31 = $y;
   $32 = (0 - ($31))|0;
   $33 = $32<<8;
   $34 = $x;
   $35 = (($33) + ($34))|0;
   $36 = ($35*3)|0;
   $37 = (($36) + 2)|0;
   $38 = $1;
   $39 = (($38) + ($37)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $41 << 16;
   $43 = $30 | $42;
   $col = $43;
   $44 = $x;
   $45 = $y;
   $46 = ($45*5)|0;
   $47 = (($44) + ($46))|0;
   $48 = $47 & 7;
   $49 = 1 << $48;
   $50 = $49&255;
   $rem = $50;
   $51 = $x;
   $52 = $y;
   $53 = ($52*5)|0;
   $54 = (($51) + ($53))|0;
   $55 = $54 >> 3;
   $offset = $55;
   $56 = $col;
   $57 = ($56|0)!=(255);
   if ($57) {
    $58 = $rem;
    $59 = $58&255;
    $60 = $offset;
    $61 = $0;
    $62 = (($61) + ($60)|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = $64 | $59;
    $66 = $65&255;
    HEAP8[$62>>0] = $66;
   }
   $67 = $x;
   $68 = (($67) + 1)|0;
   $x = $68;
  }
  $69 = (($6) + 1)|0;
  $y = $69;
 }
 STACKTOP = sp;return;
}
function _rgui_free($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rgui = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $rgui = $1;
 $2 = $rgui;
 $3 = ((($2)) + 4156|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = $rgui;
  $7 = ((($6)) + 4152|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
 }
 $9 = $rgui;
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 _rgui_list_free($11);
 $12 = $rgui;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 _rgui_list_free($14);
 STACKTOP = sp;return;
}
function _rom_history_get_index($hist,$index,$path,$core_path,$core_name) {
 $hist = $hist|0;
 $index = $index|0;
 $path = $path|0;
 $core_path = $core_path|0;
 $core_name = $core_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hist;
 $1 = $index;
 $2 = $path;
 $3 = $core_path;
 $4 = $core_name;
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($5*12)|0)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 $11 = $1;
 $12 = $0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($11*12)|0)|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 HEAP32[$17>>2] = $16;
 $18 = $1;
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + (($18*12)|0)|0);
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function _rom_history_push($hist,$path,$core_path,$core_name) {
 $hist = $hist|0;
 $path = $path|0;
 $core_path = $core_path|0;
 $core_name = $core_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $equal_path = 0, $i = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $hist;
 $1 = $path;
 $2 = $core_path;
 $3 = $core_name;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   label = 5;
  } else {
   $11 = $i;
   $12 = $0;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + (($11*12)|0)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0|0);
   if ($16) {
    label = 5;
   } else {
    $35 = 1;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $17 = $1;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = $i;
    $20 = $0;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + (($19*12)|0)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)!=(0|0);
    if ($24) {
     $25 = $1;
     $26 = $i;
     $27 = $0;
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + (($26*12)|0)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (_strcmp($25,$30)|0);
     $32 = ($31|0)!=(0);
     $33 = $32 ^ 1;
     $35 = $33;
    } else {
     $35 = 0;
    }
   } else {
    $35 = 0;
   }
  }
  $34 = $35&1;
  $equal_path = $34;
  $36 = $equal_path;
  $37 = $36&1;
  if ($37) {
   $38 = $i;
   $39 = $0;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + (($38*12)|0)|0);
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $2;
   $45 = (_strcmp($43,$44)|0);
   $46 = ($45|0)!=(0);
   if (!($46)) {
    $47 = $i;
    $48 = $0;
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + (($47*12)|0)|0);
    $51 = ((($50)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $3;
    $54 = (_strcmp($52,$53)|0);
    $55 = ($54|0)!=(0);
    if (!($55)) {
     label = 11;
     break;
    }
   }
  }
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 if ((label|0) == 11) {
  $56 = $i;
  $57 = ($56|0)==(0);
  if ($57) {
   STACKTOP = sp;return;
  }
  $58 = $i;
  $59 = $0;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + (($58*12)|0)|0);
  ;HEAP32[$tmp>>2]=HEAP32[$61>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$tmp+8>>2]=HEAP32[$61+8>>2]|0;
  $62 = $0;
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 12|0);
  $65 = $0;
  $66 = HEAP32[$65>>2]|0;
  $67 = $i;
  $68 = ($67*12)|0;
  _memmove(($64|0),($66|0),($68|0))|0;
  $69 = $0;
  $70 = HEAP32[$69>>2]|0;
  ;HEAP32[$70>>2]=HEAP32[$tmp>>2]|0;HEAP32[$70+4>>2]=HEAP32[$tmp+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$tmp+8>>2]|0;
  STACKTOP = sp;return;
 }
 $73 = $0;
 $74 = ((($73)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $0;
 $77 = ((($76)) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75|0)==($78|0);
 if ($79) {
  $80 = $0;
  $81 = ((($80)) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) - 1)|0;
  $84 = $0;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + (($83*12)|0)|0);
  _rom_history_free_entry($86);
  $87 = $0;
  $88 = ((($87)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + -1)|0;
  HEAP32[$88>>2] = $90;
 }
 $91 = $0;
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 12|0);
 $94 = $0;
 $95 = HEAP32[$94>>2]|0;
 $96 = $0;
 $97 = ((($96)) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($98) - 1)|0;
 $100 = ($99*12)|0;
 _memmove(($93|0),($95|0),($100|0))|0;
 $101 = $1;
 $102 = ($101|0)!=(0|0);
 if ($102) {
  $103 = $1;
  $104 = (___strdup($103)|0);
  $107 = $104;
 } else {
  $107 = 0;
 }
 $105 = $0;
 $106 = HEAP32[$105>>2]|0;
 HEAP32[$106>>2] = $107;
 $108 = $2;
 $109 = (___strdup($108)|0);
 $110 = $0;
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($111)) + 4|0);
 HEAP32[$112>>2] = $109;
 $113 = $3;
 $114 = (___strdup($113)|0);
 $115 = $0;
 $116 = HEAP32[$115>>2]|0;
 $117 = ((($116)) + 8|0);
 HEAP32[$117>>2] = $114;
 $118 = $0;
 $119 = ((($118)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + 1)|0;
 HEAP32[$119>>2] = $121;
 STACKTOP = sp;return;
}
function _rom_history_free($hist) {
 $hist = $hist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hist;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  _rom_history_write_file($7);
 }
 $8 = $0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $0;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + (($16*12)|0)|0);
  _rom_history_free_entry($19);
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 $22 = $0;
 $23 = HEAP32[$22>>2]|0;
 _free($23);
 $24 = $0;
 _free($24);
 STACKTOP = sp;return;
}
function _rom_history_size($hist) {
 $hist = $hist|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hist;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _rom_history_init($path,$size) {
 $path = $path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $size;
 $3 = (_calloc(1,16)|0);
 $hist = $3;
 $4 = $hist;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $6 = $2;
 $7 = (_calloc($6,12)|0);
 $8 = $hist;
 HEAP32[$8>>2] = $7;
 $9 = $hist;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  $13 = $hist;
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $12;
  $15 = $hist;
  $16 = $1;
  $17 = (_rom_history_read_file($15,$16)|0);
  if ($17) {
   $18 = $1;
   $19 = (___strdup($18)|0);
   $20 = $hist;
   $21 = ((($20)) + 12|0);
   HEAP32[$21>>2] = $19;
   $22 = $hist;
   $0 = $22;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $23 = $hist;
 _rom_history_free($23);
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _rom_history_free_entry($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $0;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 STACKTOP = sp;return;
}
function _rom_history_write_file($hist) {
 $hist = $hist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $file = 0;
 var $i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $hist;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_fopen($3,769702)|0);
 $file = $4;
 $5 = $file;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7>>>0)<($10>>>0);
  $12 = $file;
  if (!($11)) {
   break;
  }
  $13 = $i;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($13*12)|0)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $i;
   $20 = $0;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + (($19*12)|0)|0);
   $23 = HEAP32[$22>>2]|0;
   $36 = $23;
  } else {
   $36 = 773086;
  }
  $24 = $i;
  $25 = $0;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + (($24*12)|0)|0);
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $i;
  $31 = $0;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($30*12)|0)|0);
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer>>2] = $36;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $29;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $35;
  (_fprintf($12,769704,$vararg_buffer)|0);
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 (_fclose($12)|0);
 STACKTOP = sp;return;
}
function _rom_history_read_file($hist,$path) {
 $hist = $hist|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $entry = 0, $file = 0, $i = 0, $last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12312|0;
 $buf = sp + 24|0;
 $1 = $hist;
 $2 = $path;
 $3 = $2;
 $4 = (_fopen($3,769700)|0);
 $file = $4;
 $5 = $file;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 $entry = 0;
 $last = 0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 L5: while(1) {
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $i = 0;
  while(1) {
   $16 = $i;
   $17 = ($16>>>0)<(3);
   if (!($17)) {
    break;
   }
   $18 = $i;
   $19 = (($buf) + ($18<<12)|0);
   HEAP8[$19>>0] = 0;
   $20 = $i;
   $21 = (($buf) + ($20<<12)|0);
   $22 = $file;
   $23 = (_fgets($21,4096,$22)|0);
   $24 = ($23|0)!=(0|0);
   if (!($24)) {
    break L5;
   }
   $25 = $i;
   $26 = (($buf) + ($25<<12)|0);
   $27 = (_strrchr($26,10)|0);
   $last = $27;
   $28 = $last;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = $last;
    HEAP8[$30>>0] = 0;
   }
   $31 = $i;
   $32 = (($31) + 1)|0;
   $i = $32;
  }
  $33 = $1;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($35*12)|0)|0);
  $entry = $38;
  $39 = ((($buf)) + 4096|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)!=(0);
  if (!($41)) {
   break;
  }
  $42 = ((($buf)) + 8192|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)!=(0);
  if (!($44)) {
   break;
  }
  $45 = HEAP8[$buf>>0]|0;
  $46 = ($45<<24>>24)!=(0);
  if ($46) {
   $47 = (___strdup($buf)|0);
   $48 = $entry;
   HEAP32[$48>>2] = $47;
  }
  $49 = ((($buf)) + 4096|0);
  $50 = (___strdup($49)|0);
  $51 = $entry;
  $52 = ((($51)) + 4|0);
  HEAP32[$52>>2] = $50;
  $53 = ((($buf)) + 8192|0);
  $54 = (___strdup($53)|0);
  $55 = $entry;
  $56 = ((($55)) + 8|0);
  HEAP32[$56>>2] = $54;
  $57 = $1;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$58>>2] = $60;
 }
 $61 = $file;
 (_fclose($61)|0);
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $62 = $$pre_trunc&1;
 STACKTOP = sp;return ($62|0);
}
function _gl_shader_set_coords($data,$coords,$mat) {
 $data = $data|0;
 $coords = $coords|0;
 $mat = $mat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, $ret_coords = 0, $ret_mvp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $coords;
 $2 = $mat;
 $3 = $0;
 $gl = $3;
 $ret_coords = 0;
 $ret_mvp = 0;
 $4 = $gl;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $gl;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (FUNCTION_TABLE_ii[$12 & 511]($13)|0);
  $15 = $14&1;
  $ret_coords = $15;
 }
 $16 = $gl;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $gl;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $2;
 $26 = (FUNCTION_TABLE_ii[$24 & 511]($25)|0);
 $27 = $26&1;
 $ret_mvp = $27;
 STACKTOP = sp;return;
}
function _gl_deinit_fbo($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 1640|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $gl;
 $7 = ((($6)) + 1636|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $gl;
 $10 = ((($9)) + 676|0);
 _glDeleteTextures(($8|0),($10|0));
 $11 = $gl;
 $12 = ((($11)) + 1636|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $gl;
 $15 = ((($14)) + 612|0);
 _glDeleteFramebuffers(($13|0),($15|0));
 $16 = $gl;
 $17 = ((($16)) + 676|0);
 dest=$17; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $18 = $gl;
 $19 = ((($18)) + 612|0);
 dest=$19; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $20 = $gl;
 $21 = ((($20)) + 1640|0);
 HEAP8[$21>>0] = 0;
 $22 = $gl;
 $23 = ((($22)) + 1636|0);
 HEAP32[$23>>2] = 0;
 STACKTOP = sp;return;
}
function _gl_init_fbo($data,$width,$height) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gl = 0, $i = 0, $i1 = 0;
 var $scale = 0, $scale_last = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $scale = sp + 64|0;
 $scale_last = sp + 32|0;
 $0 = $data;
 $1 = $width;
 $2 = $height;
 $3 = $0;
 $gl = $3;
 $4 = $gl;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $gl;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_i[$12 & 511]()|0);
  $15 = $13;
 } else {
  $15 = 0;
 }
 $14 = ($15|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $16 = $gl;
 _gl_shader_scale($16,1,$scale);
 $17 = $gl;
 $18 = $gl;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $gl;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (FUNCTION_TABLE_i[$26 & 511]()|0);
  $28 = $27;
 } else {
  $28 = 0;
 }
 _gl_shader_scale($17,$28,$scale_last);
 $29 = $gl;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $gl;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_i[$37 & 511]()|0);
  $40 = $38;
 } else {
  $40 = 0;
 }
 $39 = ($40|0)==(1);
 if ($39) {
  $41 = HEAP8[$scale>>0]|0;
  $42 = $41&1;
  if (!($42)) {
   STACKTOP = sp;return;
  }
 }
 $43 = $gl;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $gl;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_i[$51 & 511]()|0);
  $54 = $52;
 } else {
  $54 = 0;
 }
 $53 = (($54) - 1)|0;
 $55 = $gl;
 $56 = ((($55)) + 1636|0);
 HEAP32[$56>>2] = $53;
 $57 = HEAP8[$scale_last>>0]|0;
 $58 = $57&1;
 if ($58) {
  $59 = $gl;
  $60 = ((($59)) + 1636|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$60>>2] = $62;
 }
 $63 = HEAP8[$scale>>0]|0;
 $64 = $63&1;
 if (!($64)) {
  $65 = ((($scale)) + 12|0);
  HEAPF32[$65>>2] = 1.0;
  $66 = ((($scale)) + 16|0);
  HEAPF32[$66>>2] = 1.0;
  $67 = ((($scale)) + 8|0);
  HEAP32[$67>>2] = 0;
  $68 = ((($scale)) + 4|0);
  HEAP32[$68>>2] = 0;
  HEAP8[$scale>>0] = 1;
 }
 $69 = $gl;
 $70 = ((($69)) + 1124|0);
 ;HEAP32[$70>>2]=HEAP32[$scale>>2]|0;HEAP32[$70+4>>2]=HEAP32[$scale+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$scale+8>>2]|0;HEAP32[$70+12>>2]=HEAP32[$scale+12>>2]|0;HEAP32[$70+16>>2]=HEAP32[$scale+16>>2]|0;HEAP32[$70+20>>2]=HEAP32[$scale+20>>2]|0;HEAP32[$70+24>>2]=HEAP32[$scale+24>>2]|0;HEAP32[$70+28>>2]=HEAP32[$scale+28>>2]|0;
 $i = 1;
 while(1) {
  $71 = $i;
  $72 = $gl;
  $73 = ((($72)) + 1636|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($71|0)<($74|0);
  $76 = $gl;
  if (!($75)) {
   break;
  }
  $77 = $i;
  $78 = (($77) + 1)|0;
  $79 = $i;
  $80 = $gl;
  $81 = ((($80)) + 1124|0);
  $82 = (($81) + ($79<<5)|0);
  _gl_shader_scale($76,$78,$82);
  $83 = $i;
  $84 = $gl;
  $85 = ((($84)) + 1124|0);
  $86 = (($85) + ($83<<5)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&1;
  if (!($88)) {
   $89 = $i;
   $90 = $gl;
   $91 = ((($90)) + 1124|0);
   $92 = (($91) + ($89<<5)|0);
   $93 = ((($92)) + 16|0);
   HEAPF32[$93>>2] = 1.0;
   $94 = $i;
   $95 = $gl;
   $96 = ((($95)) + 1124|0);
   $97 = (($96) + ($94<<5)|0);
   $98 = ((($97)) + 12|0);
   HEAPF32[$98>>2] = 1.0;
   $99 = $i;
   $100 = $gl;
   $101 = ((($100)) + 1124|0);
   $102 = (($101) + ($99<<5)|0);
   $103 = ((($102)) + 8|0);
   HEAP32[$103>>2] = 0;
   $104 = $i;
   $105 = $gl;
   $106 = ((($105)) + 1124|0);
   $107 = (($106) + ($104<<5)|0);
   $108 = ((($107)) + 4|0);
   HEAP32[$108>>2] = 0;
   $109 = $i;
   $110 = $gl;
   $111 = ((($110)) + 1124|0);
   $112 = (($111) + ($109<<5)|0);
   HEAP8[$112>>0] = 1;
  }
  $113 = $i;
  $114 = (($113) + 1)|0;
  $i = $114;
 }
 $115 = $1;
 $116 = $2;
 $117 = $gl;
 $118 = ((($117)) + 1728|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $gl;
 $121 = ((($120)) + 1732|0);
 $122 = HEAP32[$121>>2]|0;
 _gl_compute_fbo_geometry($76,$115,$116,$119,$122);
 $i1 = 0;
 while(1) {
  $123 = $i1;
  $124 = $gl;
  $125 = ((($124)) + 1636|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($123|0)<($126|0);
  if (!($127)) {
   break;
  }
  $128 = $i1;
  $129 = $gl;
  $130 = ((($129)) + 740|0);
  $131 = (($130) + (($128*24)|0)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (_next_pow21668($132)|0);
  $134 = $i1;
  $135 = $gl;
  $136 = ((($135)) + 740|0);
  $137 = (($136) + (($134*24)|0)|0);
  $138 = ((($137)) + 16|0);
  HEAP32[$138>>2] = $133;
  $139 = $i1;
  $140 = $gl;
  $141 = ((($140)) + 740|0);
  $142 = (($141) + (($139*24)|0)|0);
  $143 = ((($142)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (_next_pow21668($144)|0);
  $146 = $i1;
  $147 = $gl;
  $148 = ((($147)) + 740|0);
  $149 = (($148) + (($146*24)|0)|0);
  $150 = ((($149)) + 20|0);
  HEAP32[$150>>2] = $145;
  $151 = HEAP8[102648>>0]|0;
  $152 = $151&1;
  if ($152) {
   $153 = HEAP32[(259664)>>2]|0;
   $154 = ($153|0)!=(0|0);
   $155 = HEAP32[(259664)>>2]|0;
   $156 = HEAP32[544648>>2]|0;
   $157 = $154 ? $155 : $156;
   $158 = $i1;
   $159 = $i1;
   $160 = $gl;
   $161 = ((($160)) + 740|0);
   $162 = (($161) + (($159*24)|0)|0);
   $163 = ((($162)) + 16|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $i1;
   $166 = $gl;
   $167 = ((($166)) + 740|0);
   $168 = (($167) + (($165*24)|0)|0);
   $169 = ((($168)) + 20|0);
   $170 = HEAP32[$169>>2]|0;
   HEAP32[$vararg_buffer>>2] = $158;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $164;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $170;
   (_fprintf($157,769714,$vararg_buffer)|0);
   $171 = HEAP32[(259664)>>2]|0;
   $172 = ($171|0)!=(0|0);
   $173 = HEAP32[(259664)>>2]|0;
   $174 = HEAP32[544648>>2]|0;
   $175 = $172 ? $173 : $174;
   (_fflush($175)|0);
  }
  $176 = $i1;
  $177 = (($176) + 1)|0;
  $i1 = $177;
 }
 $178 = $gl;
 _gl_create_fbo_textures($178);
 $179 = $gl;
 $180 = (_gl_create_fbo_targets($179)|0);
 $181 = $gl;
 if ($180) {
  $196 = ((($181)) + 1640|0);
  HEAP8[$196>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $182 = ((($181)) + 1636|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $gl;
  $185 = ((($184)) + 676|0);
  _glDeleteTextures(($183|0),($185|0));
  $186 = HEAP32[(259664)>>2]|0;
  $187 = ($186|0)!=(0|0);
  $188 = HEAP32[(259664)>>2]|0;
  $189 = HEAP32[544648>>2]|0;
  $190 = $187 ? $188 : $189;
  (_fprintf($190,769750,$vararg_buffer3)|0);
  $191 = HEAP32[(259664)>>2]|0;
  $192 = ($191|0)!=(0|0);
  $193 = HEAP32[(259664)>>2]|0;
  $194 = HEAP32[544648>>2]|0;
  $195 = $192 ? $193 : $194;
  (_fflush($195)|0);
  STACKTOP = sp;return;
 }
}
function _gl_set_projection($data,$ortho,$allow_rotate) {
 $data = $data|0;
 $ortho = $ortho|0;
 $allow_rotate = $allow_rotate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var $gl = 0, $rot = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rot = sp;
 $0 = $data;
 $1 = $ortho;
 $3 = $allow_rotate&1;
 $2 = $3;
 $4 = $0;
 $gl = $4;
 $5 = $gl;
 $6 = ((($5)) + 1936|0);
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 $16 = ((($15)) + 12|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 16|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = ((($21)) + 20|0);
 $23 = +HEAPF32[$22>>2];
 _matrix_ortho($6,$8,$11,$14,$17,$20,$23);
 $24 = $2;
 $25 = $24&1;
 $26 = $gl;
 if ($25) {
  $27 = ((($26)) + 1716|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($28>>>0));
  $30 = 3.1415926535897931 * $29;
  $31 = $30 / 180.0;
  $32 = $31;
  _matrix_rotate_z($rot,$32);
  $33 = $gl;
  $34 = ((($33)) + 1872|0);
  $35 = $gl;
  $36 = ((($35)) + 1936|0);
  _matrix_multiply($34,$rot,$36);
  STACKTOP = sp;return;
 } else {
  $37 = ((($26)) + 1872|0);
  $38 = $gl;
  $39 = ((($38)) + 1936|0);
  dest=$37; src=$39; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function _gl_set_viewport($data,$width,$height,$force_full,$allow_rotate) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $force_full = $force_full|0;
 $allow_rotate = $allow_rotate|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $custom = 0, $delta = 0.0, $desired_aspect = 0.0, $device_aspect = 0.0;
 var $gl = 0, $ortho = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ortho = sp + 16|0;
 $0 = $data;
 $1 = $width;
 $2 = $height;
 $5 = $force_full&1;
 $3 = $5;
 $6 = $allow_rotate&1;
 $4 = $6;
 $7 = $0;
 $gl = $7;
 $x = 0;
 $y = 0;
 ;HEAP32[$ortho>>2]=HEAP32[270648>>2]|0;HEAP32[$ortho+4>>2]=HEAP32[270648+4>>2]|0;HEAP32[$ortho+8>>2]=HEAP32[270648+8>>2]|0;HEAP32[$ortho+12>>2]=HEAP32[270648+12>>2]|0;HEAP32[$ortho+16>>2]=HEAP32[270648+16>>2]|0;HEAP32[$ortho+20>>2]=HEAP32[270648+20>>2]|0;
 $device_aspect = 0.0;
 $8 = $gl;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $gl;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = $2;
  $19 = (+FUNCTION_TABLE_dii[$16 & 127]($17,$18));
  $device_aspect = $19;
 } else {
  $20 = $1;
  $21 = (+($20>>>0));
  $22 = $2;
  $23 = (+($22>>>0));
  $24 = $21 / $23;
  $device_aspect = $24;
 }
 $25 = HEAP8[(333)>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = $3;
  $28 = $27&1;
  if ($28) {
   label = 7;
  } else {
   $29 = $gl;
   $30 = ((($29)) + 1736|0);
   $31 = $1;
   $32 = $2;
   $33 = +HEAPF32[(196968)>>2];
   $34 = $gl;
   $35 = ((($34)) + 1714|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&1;
   _gfx_scale_integer($30,$31,$32,$33,$37);
   $38 = $gl;
   $39 = ((($38)) + 1736|0);
   $40 = ((($39)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $1 = $41;
   $42 = $gl;
   $43 = ((($42)) + 1736|0);
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $2 = $45;
  }
 } else {
  label = 7;
 }
 do {
  if ((label|0) == 7) {
   $46 = $gl;
   $47 = ((($46)) + 1714|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&1;
   if ($49) {
    $50 = $3;
    $51 = $50&1;
    if (!($51)) {
     $52 = +HEAPF32[(196968)>>2];
     $desired_aspect = $52;
     $53 = HEAP32[(336)>>2]|0;
     $54 = ($53|0)==(7);
     do {
      if ($54) {
       $custom = (259612);
       $55 = $custom;
       $56 = HEAP32[$55>>2]|0;
       $x = $56;
       $57 = $gl;
       $58 = ((($57)) + 1732|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = $custom;
       $61 = ((($60)) + 4|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($59) - ($62))|0;
       $64 = $custom;
       $65 = ((($64)) + 12|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($63) - ($66))|0;
       $y = $67;
       $68 = $custom;
       $69 = ((($68)) + 8|0);
       $70 = HEAP32[$69>>2]|0;
       $1 = $70;
       $71 = $custom;
       $72 = ((($71)) + 12|0);
       $73 = HEAP32[$72>>2]|0;
       $2 = $73;
      } else {
       $74 = $device_aspect;
       $75 = $desired_aspect;
       $76 = $74 - $75;
       $77 = (+Math_abs((+$76)));
       $78 = $77 < 9.9999997473787516E-5;
       if (!($78)) {
        $79 = $device_aspect;
        $80 = $desired_aspect;
        $81 = $79 > $80;
        if ($81) {
         $82 = $desired_aspect;
         $83 = $device_aspect;
         $84 = $82 / $83;
         $85 = $84 - 1.0;
         $86 = $85 / 2.0;
         $87 = $86 + 0.5;
         $delta = $87;
         $88 = $1;
         $89 = (+($88>>>0));
         $90 = $delta;
         $91 = 0.5 - $90;
         $92 = $89 * $91;
         $93 = (+_roundf($92));
         $94 = (~~(($93)));
         $x = $94;
         $95 = $1;
         $96 = (+($95>>>0));
         $97 = 2.0 * $96;
         $98 = $delta;
         $99 = $97 * $98;
         $100 = (+_roundf($99));
         $101 = (~~(($100))>>>0);
         $1 = $101;
         break;
        } else {
         $102 = $device_aspect;
         $103 = $desired_aspect;
         $104 = $102 / $103;
         $105 = $104 - 1.0;
         $106 = $105 / 2.0;
         $107 = $106 + 0.5;
         $delta = $107;
         $108 = $2;
         $109 = (+($108>>>0));
         $110 = $delta;
         $111 = 0.5 - $110;
         $112 = $109 * $111;
         $113 = (+_roundf($112));
         $114 = (~~(($113)));
         $y = $114;
         $115 = $2;
         $116 = (+($115>>>0));
         $117 = 2.0 * $116;
         $118 = $delta;
         $119 = $117 * $118;
         $120 = (+_roundf($119));
         $121 = (~~(($120))>>>0);
         $2 = $121;
         break;
        }
       }
      }
     } while(0);
     $122 = $x;
     $123 = $gl;
     $124 = ((($123)) + 1736|0);
     HEAP32[$124>>2] = $122;
     $125 = $y;
     $126 = $gl;
     $127 = ((($126)) + 1736|0);
     $128 = ((($127)) + 4|0);
     HEAP32[$128>>2] = $125;
     $129 = $1;
     $130 = $gl;
     $131 = ((($130)) + 1736|0);
     $132 = ((($131)) + 8|0);
     HEAP32[$132>>2] = $129;
     $133 = $2;
     $134 = $gl;
     $135 = ((($134)) + 1736|0);
     $136 = ((($135)) + 12|0);
     HEAP32[$136>>2] = $133;
     break;
    }
   }
   $137 = $gl;
   $138 = ((($137)) + 1736|0);
   $139 = ((($138)) + 4|0);
   HEAP32[$139>>2] = 0;
   $140 = $gl;
   $141 = ((($140)) + 1736|0);
   HEAP32[$141>>2] = 0;
   $142 = $1;
   $143 = $gl;
   $144 = ((($143)) + 1736|0);
   $145 = ((($144)) + 8|0);
   HEAP32[$145>>2] = $142;
   $146 = $2;
   $147 = $gl;
   $148 = ((($147)) + 1736|0);
   $149 = ((($148)) + 12|0);
   HEAP32[$149>>2] = $146;
  }
 } while(0);
 $150 = $gl;
 $151 = ((($150)) + 1736|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $gl;
 $154 = ((($153)) + 1736|0);
 $155 = ((($154)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $gl;
 $158 = ((($157)) + 1736|0);
 $159 = ((($158)) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $gl;
 $162 = ((($161)) + 1736|0);
 $163 = ((($162)) + 12|0);
 $164 = HEAP32[$163>>2]|0;
 _glViewport(($152|0),($156|0),($160|0),($164|0));
 $165 = $gl;
 $166 = $4;
 $167 = $166&1;
 _gl_set_projection($165,$ortho,$167);
 $168 = $3;
 $169 = $168&1;
 if ($169) {
  STACKTOP = sp;return;
 }
 $170 = $1;
 $171 = $gl;
 $172 = ((($171)) + 1760|0);
 HEAP32[$172>>2] = $170;
 $173 = $2;
 $174 = $gl;
 $175 = ((($174)) + 1764|0);
 HEAP32[$175>>2] = $173;
 STACKTOP = sp;return;
}
function _gl_shader_scale($data,$index,$scale) {
 $data = $data|0;
 $index = $index|0;
 $scale = $scale|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $index;
 $2 = $scale;
 $3 = $0;
 $gl = $3;
 $4 = $2;
 HEAP8[$4>>0] = 0;
 $5 = $gl;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $gl;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = $2;
 FUNCTION_TABLE_vii[$13 & 1023]($14,$15);
 STACKTOP = sp;return;
}
function _gl_compute_fbo_geometry($data,$width,$height,$vp_width,$vp_height) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $vp_width = $vp_width|0;
 $vp_height = $vp_height|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gl = 0, $i = 0, $last_height = 0, $last_max_height = 0, $last_max_width = 0, $last_width = 0, $max_size = 0;
 var $size_modified = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $max_size = sp + 12|0;
 $0 = $data;
 $1 = $width;
 $2 = $height;
 $3 = $vp_width;
 $4 = $vp_height;
 $5 = $0;
 $gl = $5;
 $6 = $1;
 $last_width = $6;
 $7 = $2;
 $last_height = $7;
 $8 = $gl;
 $9 = ((($8)) + 1832|0);
 $10 = HEAP32[$9>>2]|0;
 $last_max_width = $10;
 $11 = $gl;
 $12 = ((($11)) + 1836|0);
 $13 = HEAP32[$12>>2]|0;
 $last_max_height = $13;
 HEAP32[$max_size>>2] = 0;
 _glGetIntegerv(3379,($max_size|0));
 $size_modified = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = $gl;
  $16 = ((($15)) + 1636|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $gl;
  $21 = ((($20)) + 1124|0);
  $22 = (($21) + ($19<<5)|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  switch ($24|0) {
  case 0:  {
   $25 = $last_width;
   $26 = (+($25>>>0));
   $27 = $i;
   $28 = $gl;
   $29 = ((($28)) + 1124|0);
   $30 = (($29) + ($27<<5)|0);
   $31 = ((($30)) + 12|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $26 * $32;
   $34 = (~~(($33))>>>0);
   $35 = $i;
   $36 = $gl;
   $37 = ((($36)) + 740|0);
   $38 = (($37) + (($35*24)|0)|0);
   HEAP32[$38>>2] = $34;
   $39 = $last_max_width;
   $40 = (+($39>>>0));
   $41 = $i;
   $42 = $gl;
   $43 = ((($42)) + 1124|0);
   $44 = (($43) + ($41<<5)|0);
   $45 = ((($44)) + 12|0);
   $46 = +HEAPF32[$45>>2];
   $47 = $40 * $46;
   $48 = (~~(($47))>>>0);
   $49 = $i;
   $50 = $gl;
   $51 = ((($50)) + 740|0);
   $52 = (($51) + (($49*24)|0)|0);
   $53 = ((($52)) + 8|0);
   HEAP32[$53>>2] = $48;
   break;
  }
  case 1:  {
   $54 = $i;
   $55 = $gl;
   $56 = ((($55)) + 1124|0);
   $57 = (($56) + ($54<<5)|0);
   $58 = ((($57)) + 20|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $i;
   $61 = $gl;
   $62 = ((($61)) + 740|0);
   $63 = (($62) + (($60*24)|0)|0);
   $64 = ((($63)) + 8|0);
   HEAP32[$64>>2] = $59;
   $65 = $i;
   $66 = $gl;
   $67 = ((($66)) + 740|0);
   $68 = (($67) + (($65*24)|0)|0);
   HEAP32[$68>>2] = $59;
   break;
  }
  case 2:  {
   $69 = $i;
   $70 = $gl;
   $71 = ((($70)) + 1124|0);
   $72 = (($71) + ($69<<5)|0);
   $73 = ((($72)) + 12|0);
   $74 = +HEAPF32[$73>>2];
   $75 = $3;
   $76 = (+($75>>>0));
   $77 = $74 * $76;
   $78 = (~~(($77))>>>0);
   $79 = $i;
   $80 = $gl;
   $81 = ((($80)) + 740|0);
   $82 = (($81) + (($79*24)|0)|0);
   $83 = ((($82)) + 8|0);
   HEAP32[$83>>2] = $78;
   $84 = $i;
   $85 = $gl;
   $86 = ((($85)) + 740|0);
   $87 = (($86) + (($84*24)|0)|0);
   HEAP32[$87>>2] = $78;
   break;
  }
  default: {
  }
  }
  $88 = $i;
  $89 = $gl;
  $90 = ((($89)) + 1124|0);
  $91 = (($90) + ($88<<5)|0);
  $92 = ((($91)) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  switch ($93|0) {
  case 0:  {
   $94 = $last_height;
   $95 = (+($94>>>0));
   $96 = $i;
   $97 = $gl;
   $98 = ((($97)) + 1124|0);
   $99 = (($98) + ($96<<5)|0);
   $100 = ((($99)) + 16|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $95 * $101;
   $103 = (~~(($102))>>>0);
   $104 = $i;
   $105 = $gl;
   $106 = ((($105)) + 740|0);
   $107 = (($106) + (($104*24)|0)|0);
   $108 = ((($107)) + 4|0);
   HEAP32[$108>>2] = $103;
   $109 = $last_max_height;
   $110 = (+($109>>>0));
   $111 = $i;
   $112 = $gl;
   $113 = ((($112)) + 1124|0);
   $114 = (($113) + ($111<<5)|0);
   $115 = ((($114)) + 16|0);
   $116 = +HEAPF32[$115>>2];
   $117 = $110 * $116;
   $118 = (~~(($117))>>>0);
   $119 = $i;
   $120 = $gl;
   $121 = ((($120)) + 740|0);
   $122 = (($121) + (($119*24)|0)|0);
   $123 = ((($122)) + 12|0);
   HEAP32[$123>>2] = $118;
   break;
  }
  case 1:  {
   $124 = $i;
   $125 = $gl;
   $126 = ((($125)) + 1124|0);
   $127 = (($126) + ($124<<5)|0);
   $128 = ((($127)) + 24|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $i;
   $131 = $gl;
   $132 = ((($131)) + 740|0);
   $133 = (($132) + (($130*24)|0)|0);
   $134 = ((($133)) + 12|0);
   HEAP32[$134>>2] = $129;
   $135 = $i;
   $136 = $gl;
   $137 = ((($136)) + 740|0);
   $138 = (($137) + (($135*24)|0)|0);
   $139 = ((($138)) + 4|0);
   HEAP32[$139>>2] = $129;
   break;
  }
  case 2:  {
   $140 = $i;
   $141 = $gl;
   $142 = ((($141)) + 1124|0);
   $143 = (($142) + ($140<<5)|0);
   $144 = ((($143)) + 16|0);
   $145 = +HEAPF32[$144>>2];
   $146 = $4;
   $147 = (+($146>>>0));
   $148 = $145 * $147;
   $149 = (~~(($148))>>>0);
   $150 = $i;
   $151 = $gl;
   $152 = ((($151)) + 740|0);
   $153 = (($152) + (($150*24)|0)|0);
   $154 = ((($153)) + 12|0);
   HEAP32[$154>>2] = $149;
   $155 = $i;
   $156 = $gl;
   $157 = ((($156)) + 740|0);
   $158 = (($157) + (($155*24)|0)|0);
   $159 = ((($158)) + 4|0);
   HEAP32[$159>>2] = $149;
   break;
  }
  default: {
  }
  }
  $160 = $i;
  $161 = $gl;
  $162 = ((($161)) + 740|0);
  $163 = (($162) + (($160*24)|0)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = HEAP32[$max_size>>2]|0;
  $166 = ($164>>>0)>($165>>>0);
  if ($166) {
   $size_modified = 1;
   $167 = HEAP32[$max_size>>2]|0;
   $168 = $i;
   $169 = $gl;
   $170 = ((($169)) + 740|0);
   $171 = (($170) + (($168*24)|0)|0);
   HEAP32[$171>>2] = $167;
  }
  $172 = $i;
  $173 = $gl;
  $174 = ((($173)) + 740|0);
  $175 = (($174) + (($172*24)|0)|0);
  $176 = ((($175)) + 4|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = HEAP32[$max_size>>2]|0;
  $179 = ($177>>>0)>($178>>>0);
  if ($179) {
   $size_modified = 1;
   $180 = HEAP32[$max_size>>2]|0;
   $181 = $i;
   $182 = $gl;
   $183 = ((($182)) + 740|0);
   $184 = (($183) + (($181*24)|0)|0);
   $185 = ((($184)) + 4|0);
   HEAP32[$185>>2] = $180;
  }
  $186 = $i;
  $187 = $gl;
  $188 = ((($187)) + 740|0);
  $189 = (($188) + (($186*24)|0)|0);
  $190 = ((($189)) + 8|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = HEAP32[$max_size>>2]|0;
  $193 = ($191>>>0)>($192>>>0);
  if ($193) {
   $size_modified = 1;
   $194 = HEAP32[$max_size>>2]|0;
   $195 = $i;
   $196 = $gl;
   $197 = ((($196)) + 740|0);
   $198 = (($197) + (($195*24)|0)|0);
   $199 = ((($198)) + 8|0);
   HEAP32[$199>>2] = $194;
  }
  $200 = $i;
  $201 = $gl;
  $202 = ((($201)) + 740|0);
  $203 = (($202) + (($200*24)|0)|0);
  $204 = ((($203)) + 12|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = HEAP32[$max_size>>2]|0;
  $207 = ($205>>>0)>($206>>>0);
  if ($207) {
   $size_modified = 1;
   $208 = HEAP32[$max_size>>2]|0;
   $209 = $i;
   $210 = $gl;
   $211 = ((($210)) + 740|0);
   $212 = (($211) + (($209*24)|0)|0);
   $213 = ((($212)) + 12|0);
   HEAP32[$213>>2] = $208;
  }
  $214 = $size_modified;
  $215 = $214&1;
  if ($215) {
   $216 = HEAP32[(259664)>>2]|0;
   $217 = ($216|0)!=(0|0);
   $218 = HEAP32[(259664)>>2]|0;
   $219 = HEAP32[544648>>2]|0;
   $220 = $217 ? $218 : $219;
   $221 = HEAP32[$max_size>>2]|0;
   $222 = HEAP32[$max_size>>2]|0;
   HEAP32[$vararg_buffer>>2] = $221;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $222;
   (_fprintf($220,771920,$vararg_buffer)|0);
   $223 = HEAP32[(259664)>>2]|0;
   $224 = ($223|0)!=(0|0);
   $225 = HEAP32[(259664)>>2]|0;
   $226 = HEAP32[544648>>2]|0;
   $227 = $224 ? $225 : $226;
   (_fflush($227)|0);
  }
  $228 = $i;
  $229 = $gl;
  $230 = ((($229)) + 740|0);
  $231 = (($230) + (($228*24)|0)|0);
  $232 = HEAP32[$231>>2]|0;
  $last_width = $232;
  $233 = $i;
  $234 = $gl;
  $235 = ((($234)) + 740|0);
  $236 = (($235) + (($233*24)|0)|0);
  $237 = ((($236)) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $last_height = $238;
  $239 = $i;
  $240 = $gl;
  $241 = ((($240)) + 740|0);
  $242 = (($241) + (($239*24)|0)|0);
  $243 = ((($242)) + 8|0);
  $244 = HEAP32[$243>>2]|0;
  $last_max_width = $244;
  $245 = $i;
  $246 = $gl;
  $247 = ((($246)) + 740|0);
  $248 = (($247) + (($245*24)|0)|0);
  $249 = ((($248)) + 12|0);
  $250 = HEAP32[$249>>2]|0;
  $last_max_height = $250;
  $251 = $i;
  $252 = (($251) + 1)|0;
  $i = $252;
 }
 STACKTOP = sp;return;
}
function _next_pow21668($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = (($1) + -1)|0;
 $0 = $2;
 $3 = $0;
 $4 = $3 >>> 1;
 $5 = $0;
 $6 = $5 | $4;
 $0 = $6;
 $7 = $0;
 $8 = $7 >>> 2;
 $9 = $0;
 $10 = $9 | $8;
 $0 = $10;
 $11 = $0;
 $12 = $11 >>> 4;
 $13 = $0;
 $14 = $13 | $12;
 $0 = $14;
 $15 = $0;
 $16 = $15 >>> 8;
 $17 = $0;
 $18 = $17 | $16;
 $0 = $18;
 $19 = $0;
 $20 = $19 >>> 16;
 $21 = $0;
 $22 = $21 | $20;
 $0 = $22;
 $23 = $0;
 $24 = (($23) + 1)|0;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _gl_create_fbo_textures($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base_filt = 0, $filter_type = 0, $fp_fbo = 0, $gl = 0, $has_fp_fbo = 0, $i = 0, $smooth = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $wrap = 0, $wrap_enum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $smooth = sp + 42|0;
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 1636|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $gl;
 $6 = ((($5)) + 676|0);
 _glGenTextures(($4|0),($6|0));
 $7 = HEAP8[(324)>>0]|0;
 $8 = $7&1;
 $9 = $8 ? 9729 : 9728;
 $base_filt = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $gl;
  $12 = ((($11)) + 1636|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $gl;
  $17 = ((($16)) + 676|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  _glBindTexture(3553,($19|0));
  $20 = $base_filt;
  $filter_type = $20;
  HEAP8[$smooth>>0] = 0;
  $21 = $gl;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = $gl;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $i;
   $31 = (($30) + 2)|0;
   $32 = (FUNCTION_TABLE_iii[$29 & 511]($31,$smooth)|0);
   if ($32) {
    $33 = HEAP8[$smooth>>0]|0;
    $34 = $33&1;
    $35 = $34 ? 9729 : 9728;
    $filter_type = $35;
   }
  }
  $36 = $gl;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $40 = $gl;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 24|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $i;
   $46 = (($45) + 2)|0;
   $47 = (FUNCTION_TABLE_ii[$44 & 511]($46)|0);
   $48 = $47;
  } else {
   $48 = 0;
  }
  $wrap = $48;
  $49 = $wrap;
  $50 = (_gl_wrap_type_to_enum($49)|0);
  $wrap_enum = $50;
  $51 = $filter_type;
  _glTexParameteri(3553,10240,($51|0));
  $52 = $filter_type;
  _glTexParameteri(3553,10241,($52|0));
  $53 = $wrap_enum;
  _glTexParameteri(3553,10242,($53|0));
  $54 = $wrap_enum;
  _glTexParameteri(3553,10243,($54|0));
  $55 = $i;
  $56 = $gl;
  $57 = ((($56)) + 1124|0);
  $58 = (($57) + ($55<<5)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&1;
  if ($60) {
   $61 = $i;
   $62 = $gl;
   $63 = ((($62)) + 1124|0);
   $64 = (($63) + ($61<<5)|0);
   $65 = ((($64)) + 28|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&1;
   $69 = $67;
  } else {
   $69 = 0;
  }
  $68 = $69&1;
  $fp_fbo = $68;
  $70 = $fp_fbo;
  $71 = $70&1;
  if ($71) {
   $72 = $gl;
   $73 = (_gl_query_extension($72,771783)|0);
   $74 = $73&1;
   $has_fp_fbo = $74;
   $75 = $has_fp_fbo;
   $76 = $75&1;
   if (!($76)) {
    $77 = HEAP32[(259664)>>2]|0;
    $78 = ($77|0)!=(0|0);
    $79 = HEAP32[(259664)>>2]|0;
    $80 = HEAP32[544648>>2]|0;
    $81 = $78 ? $79 : $80;
    (_fprintf($81,771808,$vararg_buffer)|0);
    $82 = HEAP32[(259664)>>2]|0;
    $83 = ($82|0)!=(0|0);
    $84 = HEAP32[(259664)>>2]|0;
    $85 = HEAP32[544648>>2]|0;
    $86 = $83 ? $84 : $85;
    (_fflush($86)|0);
   }
   $87 = HEAP8[102648>>0]|0;
   $88 = $87&1;
   if ($88) {
    $89 = HEAP32[(259664)>>2]|0;
    $90 = ($89|0)!=(0|0);
    $91 = HEAP32[(259664)>>2]|0;
    $92 = HEAP32[544648>>2]|0;
    $93 = $90 ? $91 : $92;
    $94 = $i;
    HEAP32[$vararg_buffer1>>2] = $94;
    (_fprintf($93,771876,$vararg_buffer1)|0);
    $95 = HEAP32[(259664)>>2]|0;
    $96 = ($95|0)!=(0|0);
    $97 = HEAP32[(259664)>>2]|0;
    $98 = HEAP32[544648>>2]|0;
    $99 = $96 ? $97 : $98;
    (_fflush($99)|0);
   }
   $100 = $i;
   $101 = $gl;
   $102 = ((($101)) + 740|0);
   $103 = (($102) + (($100*24)|0)|0);
   $104 = ((($103)) + 16|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $i;
   $107 = $gl;
   $108 = ((($107)) + 740|0);
   $109 = (($108) + (($106*24)|0)|0);
   $110 = ((($109)) + 20|0);
   $111 = HEAP32[$110>>2]|0;
   _glTexImage2D(3553,0,6408,($105|0),($111|0),0,6408,5126,(0|0));
  } else {
   $112 = $i;
   $113 = $gl;
   $114 = ((($113)) + 740|0);
   $115 = (($114) + (($112*24)|0)|0);
   $116 = ((($115)) + 16|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $i;
   $119 = $gl;
   $120 = ((($119)) + 740|0);
   $121 = (($120) + (($118*24)|0)|0);
   $122 = ((($121)) + 20|0);
   $123 = HEAP32[$122>>2]|0;
   _glTexImage2D(3553,0,6408,($117|0),($123|0),0,6408,5121,(0|0));
  }
  $124 = $i;
  $125 = (($124) + 1)|0;
  $i = $125;
 }
 _glBindTexture(3553,0);
 STACKTOP = sp;return;
}
function _gl_create_fbo_targets($data) {
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, $i = 0, $status = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = $data;
 $2 = $1;
 $gl = $2;
 _glBindTexture(3553,0);
 $3 = $gl;
 $4 = ((($3)) + 1636|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $gl;
 $7 = ((($6)) + 612|0);
 _glGenFramebuffers(($5|0),($7|0));
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $gl;
  $10 = ((($9)) + 1636|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   label = 5;
   break;
  }
  $13 = $i;
  $14 = $gl;
  $15 = ((($14)) + 612|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  _glBindFramebuffer(36160,($17|0));
  $18 = $i;
  $19 = $gl;
  $20 = ((($19)) + 676|0);
  $21 = (($20) + ($18<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($22|0),0);
  $23 = (_glCheckFramebufferStatus(36160)|0);
  $status = $23;
  $24 = $status;
  $25 = ($24|0)!=(36053);
  if ($25) {
   label = 6;
   break;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 if ((label|0) == 5) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 6) {
  $28 = $gl;
  $29 = ((($28)) + 1636|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $gl;
  $32 = ((($31)) + 612|0);
  _glDeleteFramebuffers(($30|0),($32|0));
  $33 = HEAP32[(259664)>>2]|0;
  $34 = ($33|0)!=(0|0);
  $35 = HEAP32[(259664)>>2]|0;
  $36 = HEAP32[544648>>2]|0;
  $37 = $34 ? $35 : $36;
  (_fprintf($37,771688,$vararg_buffer)|0);
  $38 = HEAP32[(259664)>>2]|0;
  $39 = ($38|0)!=(0|0);
  $40 = HEAP32[(259664)>>2]|0;
  $41 = HEAP32[544648>>2]|0;
  $42 = $39 ? $40 : $41;
  (_fflush($42)|0);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _gl_wrap_type_to_enum($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 1: case 0:  {
  $0 = 33071;
  break;
 }
 case 2:  {
  $0 = 10497;
  break;
 }
 case 3:  {
  $0 = 33648;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _gl_query_extension($gl,$ext) {
 $gl = $gl|0;
 $ext = $ext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $str = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $gl;
 $1 = $ext;
 $ret = 0;
 $2 = $0;
 $3 = ((($2)) + 2584|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (_glGetString(7939)|0);
  $str = $6;
  $7 = $str;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $str;
   $10 = $1;
   $11 = (_strstr($9,$10)|0);
   $12 = ($11|0)!=(0|0);
   $14 = $12;
  } else {
   $14 = 0;
  }
  $13 = $14&1;
  $ret = $13;
 }
 $15 = HEAP8[102648>>0]|0;
 $16 = $15&1;
 if (!($16)) {
  $31 = $ret;
  $32 = $31&1;
  STACKTOP = sp;return ($32|0);
 }
 $17 = HEAP32[(259664)>>2]|0;
 $18 = ($17|0)!=(0|0);
 $19 = HEAP32[(259664)>>2]|0;
 $20 = HEAP32[544648>>2]|0;
 $21 = $18 ? $19 : $20;
 $22 = $1;
 $23 = $ret;
 $24 = $23&1;
 $25 = $24 ? 771623 : 771630;
 HEAP32[$vararg_buffer>>2] = $22;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $25;
 (_fprintf($21,771644,$vararg_buffer)|0);
 $26 = HEAP32[(259664)>>2]|0;
 $27 = ($26|0)!=(0|0);
 $28 = HEAP32[(259664)>>2]|0;
 $29 = HEAP32[544648>>2]|0;
 $30 = $27 ? $28 : $29;
 (_fflush($30)|0);
 $31 = $ret;
 $32 = $31&1;
 STACKTOP = sp;return ($32|0);
}
function _gl_init($video,$input,$input_data) {
 $video = $video|0;
 $input = $input|0;
 $input_data = $input_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $force_smooth = 0, $gl = 0, $hw_render = 0, $minimum = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $renderer = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr20 = 0, $vararg_ptr9 = 0, $vendor = 0, $version = 0, $win_height = 0, $win_width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer23 = sp + 48|0;
 $vararg_buffer21 = sp + 40|0;
 $vararg_buffer17 = sp + 32|0;
 $vararg_buffer14 = sp + 24|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $force_smooth = sp + 108|0;
 $1 = $video;
 $2 = $input;
 $3 = $input_data;
 $4 = (_calloc(1,2592)|0);
 $gl = $4;
 $5 = $gl;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 $7 = (_gl_get_context()|0);
 $8 = $gl;
 HEAP32[$8>>2] = $7;
 $9 = $gl;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $gl;
 if (!($11)) {
  _free($12);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 $13 = ((($12)) + 2476|0);
 $14 = $1;
 ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[$13+16>>2]=HEAP32[$14+16>>2]|0;
 $15 = HEAP8[102648>>0]|0;
 $16 = $15&1;
 if ($16) {
  $17 = HEAP32[(259664)>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = HEAP32[(259664)>>2]|0;
  $20 = HEAP32[544648>>2]|0;
  $21 = $18 ? $19 : $20;
  $22 = $gl;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 68|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer>>2] = $25;
  (_fprintf($21,771343,$vararg_buffer)|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  (_fflush($30)|0);
 }
 $31 = $gl;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $gl;
 $36 = ((($35)) + 1720|0);
 $37 = $gl;
 $38 = ((($37)) + 1724|0);
 FUNCTION_TABLE_vii[$34 & 1023]($36,$38);
 $39 = HEAP8[102648>>0]|0;
 $40 = $39&1;
 if ($40) {
  $41 = HEAP32[(259664)>>2]|0;
  $42 = ($41|0)!=(0|0);
  $43 = HEAP32[(259664)>>2]|0;
  $44 = HEAP32[544648>>2]|0;
  $45 = $42 ? $43 : $44;
  $46 = $gl;
  $47 = ((($46)) + 1720|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $gl;
  $50 = ((($49)) + 1724|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $48;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $51;
  (_fprintf($45,771376,$vararg_buffer6)|0);
  $52 = HEAP32[(259664)>>2]|0;
  $53 = ($52|0)!=(0|0);
  $54 = HEAP32[(259664)>>2]|0;
  $55 = HEAP32[544648>>2]|0;
  $56 = $53 ? $54 : $55;
  (_fflush($56)|0);
 }
 $57 = $gl;
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $1;
 $62 = ((($61)) + 9|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&1;
 $65 = HEAP32[(316)>>2]|0;
 $66 = $64 ? $65 : 0;
 FUNCTION_TABLE_vi[$60 & 1023]($66);
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $win_width = $68;
 $69 = $1;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $win_height = $71;
 $72 = $1;
 $73 = ((($72)) + 8|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&1;
 $76 = $win_width;
 $77 = ($76|0)==(0);
 $or$cond = $75 & $77;
 $78 = $win_height;
 $79 = ($78|0)==(0);
 $or$cond3 = $or$cond & $79;
 if ($or$cond3) {
  $80 = $gl;
  $81 = ((($80)) + 1720|0);
  $82 = HEAP32[$81>>2]|0;
  $win_width = $82;
  $83 = $gl;
  $84 = ((($83)) + 1724|0);
  $85 = HEAP32[$84>>2]|0;
  $win_height = $85;
 }
 $86 = $gl;
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 16|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $win_width;
 $91 = $win_height;
 $92 = $1;
 $93 = ((($92)) + 8|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&1;
 $96 = (FUNCTION_TABLE_iiii[$89 & 1023]($90,$91,$95)|0);
 if (!($96)) {
  $97 = $gl;
  _free($97);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 (_glGetError()|0);
 $98 = (_glGetString(7936)|0);
 $vendor = $98;
 $99 = (_glGetString(7937)|0);
 $renderer = $99;
 $100 = HEAP8[102648>>0]|0;
 $101 = $100&1;
 if ($101) {
  $102 = HEAP32[(259664)>>2]|0;
  $103 = ($102|0)!=(0|0);
  $104 = HEAP32[(259664)>>2]|0;
  $105 = HEAP32[544648>>2]|0;
  $106 = $103 ? $104 : $105;
  $107 = $vendor;
  $108 = $renderer;
  HEAP32[$vararg_buffer10>>2] = $107;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $108;
  (_fprintf($106,771423,$vararg_buffer10)|0);
  $109 = HEAP32[(259664)>>2]|0;
  $110 = ($109|0)!=(0|0);
  $111 = HEAP32[(259664)>>2]|0;
  $112 = HEAP32[544648>>2]|0;
  $113 = $110 ? $111 : $112;
  (_fflush($113)|0);
 }
 $114 = (_glGetString(7938)|0);
 $version = $114;
 $115 = HEAP8[102648>>0]|0;
 $116 = $115&1;
 if ($116) {
  $117 = HEAP32[(259664)>>2]|0;
  $118 = ($117|0)!=(0|0);
  $119 = HEAP32[(259664)>>2]|0;
  $120 = HEAP32[544648>>2]|0;
  $121 = $118 ? $119 : $120;
  $122 = $version;
  HEAP32[$vararg_buffer14>>2] = $122;
  (_fprintf($121,771467,$vararg_buffer14)|0);
  $123 = HEAP32[(259664)>>2]|0;
  $124 = ($123|0)!=(0|0);
  $125 = HEAP32[(259664)>>2]|0;
  $126 = HEAP32[544648>>2]|0;
  $127 = $124 ? $125 : $126;
  (_fflush($127)|0);
 }
 $128 = $gl;
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 52|0);
 $131 = HEAP32[$130>>2]|0;
 _rglgen_resolve_symbols($131);
 _glBlendFunc(770,771);
 $132 = $gl;
 $133 = (_resolve_extensions($132)|0);
 if (!($133)) {
  $134 = $gl;
  $135 = HEAP32[$134>>2]|0;
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  FUNCTION_TABLE_v[$137 & 511]();
  $138 = $gl;
  _free($138);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 $139 = $1;
 $140 = ((($139)) + 9|0);
 $141 = HEAP8[$140>>0]|0;
 $142 = $141&1;
 $143 = $gl;
 $144 = ((($143)) + 8|0);
 $145 = $142&1;
 HEAP8[$144>>0] = $145;
 $146 = $1;
 $147 = ((($146)) + 8|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&1;
 $150 = $gl;
 $151 = ((($150)) + 1713|0);
 $152 = $149&1;
 HEAP8[$151>>0] = $152;
 $153 = $gl;
 $154 = HEAP32[$153>>2]|0;
 $155 = ((($154)) + 20|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $gl;
 $158 = ((($157)) + 1728|0);
 $159 = $gl;
 $160 = ((($159)) + 1732|0);
 FUNCTION_TABLE_vii[$156 & 1023]($158,$160);
 $161 = HEAP8[102648>>0]|0;
 $162 = $161&1;
 if ($162) {
  $163 = HEAP32[(259664)>>2]|0;
  $164 = ($163|0)!=(0|0);
  $165 = HEAP32[(259664)>>2]|0;
  $166 = HEAP32[544648>>2]|0;
  $167 = $164 ? $165 : $166;
  $168 = $gl;
  $169 = ((($168)) + 1728|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $gl;
  $172 = ((($171)) + 1732|0);
  $173 = HEAP32[$172>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $170;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $173;
  (_fprintf($167,771498,$vararg_buffer17)|0);
  $174 = HEAP32[(259664)>>2]|0;
  $175 = ($174|0)!=(0|0);
  $176 = HEAP32[(259664)>>2]|0;
  $177 = HEAP32[544648>>2]|0;
  $178 = $175 ? $176 : $177;
  (_fflush($178)|0);
 }
 $179 = $gl;
 $180 = ((($179)) + 1720|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = ($181|0)!=(0);
 if ($182) {
  label = 23;
 } else {
  $183 = $gl;
  $184 = ((($183)) + 1724|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ($185|0)!=(0);
  if ($186) {
   label = 23;
  }
 }
 if ((label|0) == 23) {
  $187 = $gl;
  $188 = ((($187)) + 1728|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $gl;
  $191 = ((($190)) + 1720|0);
  HEAP32[$191>>2] = $189;
  $192 = $gl;
  $193 = ((($192)) + 1732|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $gl;
  $196 = ((($195)) + 1724|0);
  HEAP32[$196>>2] = $194;
 }
 $hw_render = (201640);
 $197 = $hw_render;
 $198 = ((($197)) + 18|0);
 $199 = HEAP8[$198>>0]|0;
 $200 = $199&1;
 $201 = $200 ? 270404 : 270436;
 $202 = $gl;
 $203 = ((($202)) + 2016|0);
 HEAP32[$203>>2] = $201;
 $204 = $gl;
 $205 = ((($204)) + 48|0);
 HEAP32[$205>>2] = 4;
 $206 = $hw_render;
 $207 = HEAP32[$206>>2]|0;
 $208 = ($207|0)==(2);
 $209 = $gl;
 $210 = ((($209)) + 1710|0);
 $211 = $208&1;
 HEAP8[$210>>0] = $211;
 $212 = $gl;
 $213 = ((($212)) + 1710|0);
 $214 = HEAP8[$213>>0]|0;
 $215 = $214&1;
 if ($215) {
  $216 = $gl;
  $217 = ((($216)) + 48|0);
  HEAP32[$217>>2] = 1;
 }
 $218 = $gl;
 $219 = ((($218)) + 2020|0);
 HEAP32[$219>>2] = 270468;
 $220 = $gl;
 $221 = HEAP32[$220>>2]|0;
 $222 = ((($221)) + 52|0);
 $223 = HEAP32[$222>>2]|0;
 _gl_glsl_set_get_proc_address($223);
 $224 = $gl;
 $225 = ((($224)) + 2584|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = $226&1;
 $228 = $hw_render;
 $229 = ((($228)) + 20|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = $hw_render;
 $232 = ((($231)) + 24|0);
 $233 = HEAP32[$232>>2]|0;
 _gl_glsl_set_context_type($227,$230,$233);
 $234 = $gl;
 $235 = (_gl_shader_init($234)|0);
 if (!($235)) {
  $236 = HEAP32[(259664)>>2]|0;
  $237 = ($236|0)!=(0|0);
  $238 = HEAP32[(259664)>>2]|0;
  $239 = HEAP32[544648>>2]|0;
  $240 = $237 ? $238 : $239;
  (_fprintf($240,771537,$vararg_buffer21)|0);
  $241 = HEAP32[(259664)>>2]|0;
  $242 = ($241|0)!=(0|0);
  $243 = HEAP32[(259664)>>2]|0;
  $244 = HEAP32[544648>>2]|0;
  $245 = $242 ? $243 : $244;
  (_fflush($245)|0);
  $246 = $gl;
  $247 = HEAP32[$246>>2]|0;
  $248 = ((($247)) + 4|0);
  $249 = HEAP32[$248>>2]|0;
  FUNCTION_TABLE_v[$249 & 511]();
  $250 = $gl;
  _free($250);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 $251 = $gl;
 $252 = ((($251)) + 4|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = ($253|0)!=(0|0);
 if ($254) {
  $255 = $gl;
  $256 = ((($255)) + 4|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ((($257)) + 40|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (FUNCTION_TABLE_i[$259 & 511]()|0);
  $minimum = $260;
  $261 = $minimum;
  $262 = (($261) + 1)|0;
  $263 = $gl;
  $264 = ((($263)) + 48|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ($262>>>0)>($265>>>0);
  if ($266) {
   $267 = $minimum;
   $268 = (($267) + 1)|0;
   $274 = $268;
  } else {
   $269 = $gl;
   $270 = ((($269)) + 48|0);
   $271 = HEAP32[$270>>2]|0;
   $274 = $271;
  }
  $272 = $gl;
  $273 = ((($272)) + 48|0);
  HEAP32[$273>>2] = $274;
 }
 $275 = HEAP8[102648>>0]|0;
 $276 = $275&1;
 if ($276) {
  $277 = HEAP32[(259664)>>2]|0;
  $278 = ($277|0)!=(0|0);
  $279 = HEAP32[(259664)>>2]|0;
  $280 = HEAP32[544648>>2]|0;
  $281 = $278 ? $279 : $280;
  $282 = $gl;
  $283 = ((($282)) + 48|0);
  $284 = HEAP32[$283>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $284;
  (_fprintf($281,769980,$vararg_buffer23)|0);
  $285 = HEAP32[(259664)>>2]|0;
  $286 = ($285|0)!=(0|0);
  $287 = HEAP32[(259664)>>2]|0;
  $288 = HEAP32[544648>>2]|0;
  $289 = $286 ? $287 : $288;
  (_fflush($289)|0);
 }
 $290 = HEAP8[102648>>0]|0;
 $291 = $290&1;
 if ($291) {
  $292 = HEAP32[(259664)>>2]|0;
  $293 = ($292|0)!=(0|0);
  $294 = HEAP32[(259664)>>2]|0;
  $295 = HEAP32[544648>>2]|0;
  $296 = $293 ? $294 : $295;
  $297 = $gl;
  $298 = ((($297)) + 4|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = ($299|0)!=(0|0);
  if ($300) {
   $301 = $gl;
   $302 = ((($301)) + 4|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = ((($303)) + 16|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = (FUNCTION_TABLE_i[$305 & 511]()|0);
   $307 = $306;
  } else {
   $307 = 0;
  }
  HEAP32[$vararg_buffer26>>2] = $307;
  (_fprintf($296,771585,$vararg_buffer26)|0);
  $308 = HEAP32[(259664)>>2]|0;
  $309 = ($308|0)!=(0|0);
  $310 = HEAP32[(259664)>>2]|0;
  $311 = HEAP32[544648>>2]|0;
  $312 = $309 ? $310 : $311;
  (_fflush($312)|0);
 }
 $313 = $1;
 $314 = ((($313)) + 12|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = $315<<8;
 $317 = $gl;
 $318 = ((($317)) + 1832|0);
 HEAP32[$318>>2] = $316;
 $319 = $1;
 $320 = ((($319)) + 12|0);
 $321 = HEAP32[$320>>2]|0;
 $322 = $321<<8;
 $323 = $gl;
 $324 = ((($323)) + 1836|0);
 HEAP32[$324>>2] = $322;
 $325 = $1;
 $326 = ((($325)) + 10|0);
 $327 = HEAP8[$326>>0]|0;
 $328 = $327&1;
 $329 = $gl;
 $330 = ((($329)) + 1714|0);
 $331 = $328&1;
 HEAP8[$330>>0] = $331;
 $332 = $gl;
 _gl_set_shader_viewport($332,0);
 $333 = $gl;
 _gl_set_shader_viewport($333,1);
 HEAP8[$force_smooth>>0] = 0;
 $334 = $gl;
 $335 = ((($334)) + 4|0);
 $336 = HEAP32[$335>>2]|0;
 $337 = ($336|0)!=(0|0);
 if ($337) {
  $338 = $gl;
  $339 = ((($338)) + 4|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = ((($340)) + 20|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = (FUNCTION_TABLE_iii[$342 & 511](1,$force_smooth)|0);
  if ($343) {
   $344 = HEAP8[$force_smooth>>0]|0;
   $345 = $344&1;
   $346 = $345 ? 9729 : 9728;
   $347 = $gl;
   $348 = ((($347)) + 468|0);
   HEAP32[$348>>2] = $346;
  } else {
   label = 42;
  }
 } else {
  label = 42;
 }
 if ((label|0) == 42) {
  $349 = $1;
  $350 = ((($349)) + 11|0);
  $351 = HEAP8[$350>>0]|0;
  $352 = $351&1;
  $353 = $352 ? 9729 : 9728;
  $354 = $gl;
  $355 = ((($354)) + 468|0);
  HEAP32[$355>>2] = $353;
 }
 $356 = $gl;
 $357 = ((($356)) + 4|0);
 $358 = HEAP32[$357>>2]|0;
 $359 = ($358|0)!=(0|0);
 if ($359) {
  $360 = $gl;
  $361 = ((($360)) + 4|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = ((($362)) + 24|0);
  $364 = HEAP32[$363>>2]|0;
  $365 = (FUNCTION_TABLE_ii[$364 & 511](1)|0);
  $366 = $365;
 } else {
  $366 = 0;
 }
 $367 = (_gl_wrap_type_to_enum($366)|0);
 $368 = $gl;
 $369 = ((($368)) + 2040|0);
 HEAP32[$369>>2] = $367;
 $370 = $gl;
 $371 = $1;
 $372 = ((($371)) + 16|0);
 $373 = HEAP8[$372>>0]|0;
 $374 = $373&1;
 _gl_set_texture_fmts($370,$374);
 _glDisable(2929);
 _glDisable(2884);
 _glDisable(3024);
 $375 = $gl;
 $376 = ((($375)) + 1840|0);
 ;HEAP32[$376>>2]=HEAP32[270532>>2]|0;HEAP32[$376+4>>2]=HEAP32[270532+4>>2]|0;HEAP32[$376+8>>2]=HEAP32[270532+8>>2]|0;HEAP32[$376+12>>2]=HEAP32[270532+12>>2]|0;HEAP32[$376+16>>2]=HEAP32[270532+16>>2]|0;HEAP32[$376+20>>2]=HEAP32[270532+20>>2]|0;HEAP32[$376+24>>2]=HEAP32[270532+24>>2]|0;HEAP32[$376+28>>2]=HEAP32[270532+28>>2]|0;
 $377 = $gl;
 $378 = ((($377)) + 2016|0);
 $379 = HEAP32[$378>>2]|0;
 $380 = $gl;
 $381 = ((($380)) + 2000|0);
 HEAP32[$381>>2] = $379;
 $382 = $gl;
 $383 = ((($382)) + 1840|0);
 $384 = $gl;
 $385 = ((($384)) + 2000|0);
 $386 = ((($385)) + 8|0);
 HEAP32[$386>>2] = $383;
 $387 = $gl;
 $388 = ((($387)) + 2020|0);
 $389 = HEAP32[$388>>2]|0;
 $390 = $gl;
 $391 = ((($390)) + 2000|0);
 $392 = ((($391)) + 4|0);
 HEAP32[$392>>2] = $389;
 $393 = $gl;
 $394 = ((($393)) + 2000|0);
 $395 = ((($394)) + 12|0);
 HEAP32[$395>>2] = 270532;
 $396 = $gl;
 $397 = ((($396)) + 1832|0);
 $398 = HEAP32[$397>>2]|0;
 $399 = $gl;
 $400 = ((($399)) + 1836|0);
 $401 = HEAP32[$400>>2]|0;
 $402 = Math_imul($398, $401)|0;
 $403 = (_calloc(4,$402)|0);
 $404 = $gl;
 $405 = ((($404)) + 472|0);
 HEAP32[$405>>2] = $403;
 $406 = $gl;
 $407 = ((($406)) + 1832|0);
 $408 = HEAP32[$407>>2]|0;
 $409 = $gl;
 $410 = ((($409)) + 1836|0);
 $411 = HEAP32[$410>>2]|0;
 $412 = Math_imul($408, $411)|0;
 $413 = (_calloc(4,$412)|0);
 $414 = $gl;
 $415 = ((($414)) + 476|0);
 HEAP32[$415>>2] = $413;
 $416 = $gl;
 $417 = ((($416)) + 476|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = ($418|0)!=(0|0);
 $420 = $gl;
 if (!($419)) {
  $421 = HEAP32[$420>>2]|0;
  $422 = ((($421)) + 4|0);
  $423 = HEAP32[$422>>2]|0;
  FUNCTION_TABLE_v[$423 & 511]();
  $424 = $gl;
  _free($424);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 $425 = $1;
 _gl_init_textures($420,$425);
 $426 = $gl;
 _gl_init_textures_data($426);
 $427 = $gl;
 $428 = $gl;
 $429 = ((($428)) + 1832|0);
 $430 = HEAP32[$429>>2]|0;
 $431 = $gl;
 $432 = ((($431)) + 1836|0);
 $433 = HEAP32[$432>>2]|0;
 _gl_init_fbo($427,$430,$433);
 $434 = $gl;
 $435 = ((($434)) + 1710|0);
 $436 = HEAP8[$435>>0]|0;
 $437 = $436&1;
 do {
  if ($437) {
   $438 = $gl;
   $439 = $gl;
   $440 = ((($439)) + 1832|0);
   $441 = HEAP32[$440>>2]|0;
   $442 = $gl;
   $443 = ((($442)) + 1836|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = (_gl_init_hw_render($438,$441,$444)|0);
   if ($445) {
    break;
   }
   $446 = $gl;
   $447 = HEAP32[$446>>2]|0;
   $448 = ((($447)) + 4|0);
   $449 = HEAP32[$448>>2]|0;
   FUNCTION_TABLE_v[$449 & 511]();
   $450 = $gl;
   _free($450);
   $0 = 0;
   $474 = $0;
   STACKTOP = sp;return ($474|0);
  }
 } while(0);
 $451 = $2;
 $452 = ($451|0)!=(0|0);
 $453 = $3;
 $454 = ($453|0)!=(0|0);
 $or$cond5 = $452 & $454;
 if ($or$cond5) {
  $455 = $gl;
  $456 = HEAP32[$455>>2]|0;
  $457 = ((($456)) + 48|0);
  $458 = HEAP32[$457>>2]|0;
  $459 = $2;
  $460 = $3;
  FUNCTION_TABLE_vii[$458 & 1023]($459,$460);
 }
 $461 = HEAP8[(16744)>>0]|0;
 $462 = $461&1;
 if ($462) {
  $463 = $gl;
  $464 = +HEAPF32[(16740)>>2];
  $465 = (_gl_font_init_first($463,(12641),$464)|0);
  $466 = $gl;
  $467 = ((($466)) + 2052|0);
  HEAP32[$467>>2] = $465;
 }
 $468 = (_gl_check_error()|0);
 $469 = $gl;
 if ($468) {
  $0 = $469;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 } else {
  $470 = HEAP32[$469>>2]|0;
  $471 = ((($470)) + 4|0);
  $472 = HEAP32[$471>>2]|0;
  FUNCTION_TABLE_v[$472 & 511]();
  $473 = $gl;
  _free($473);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 return (0)|0;
}
function _gl_get_context() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $api = 0, $api_name = 0;
 var $ctx = 0, $major = 0, $minor = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[(201660)>>2]|0;
 $major = $1;
 $2 = HEAP32[(201664)>>2]|0;
 $minor = $2;
 $api = 1;
 $api_name = 771171;
 $3 = HEAP8[(256)>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 if (!($4)) {
  $53 = $api;
  $54 = $major;
  $55 = $minor;
  $56 = (_gfx_ctx_init_first($53,$54,$55)|0);
  $0 = $56;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $5 = (_gfx_ctx_find_driver((256))|0);
 $ctx = $5;
 $6 = $ctx;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $42 = HEAP32[(259664)>>2]|0;
  $43 = ($42|0)!=(0|0);
  $44 = HEAP32[(259664)>>2]|0;
  $45 = HEAP32[544648>>2]|0;
  $46 = $43 ? $44 : $45;
  HEAP32[$vararg_buffer5>>2] = (256);
  (_fprintf($46,771293,$vararg_buffer5)|0);
  $47 = HEAP32[(259664)>>2]|0;
  $48 = ($47|0)!=(0|0);
  $49 = HEAP32[(259664)>>2]|0;
  $50 = HEAP32[544648>>2]|0;
  $51 = $48 ? $49 : $50;
  (_fflush($51)|0);
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $8 = $ctx;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $api;
 $12 = $major;
 $13 = $minor;
 $14 = (FUNCTION_TABLE_iiii[$10 & 1023]($11,$12,$13)|0);
 if (!($14)) {
  $15 = HEAP32[(259664)>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = HEAP32[544648>>2]|0;
  $19 = $16 ? $17 : $18;
  $20 = $api_name;
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = (256);
  (_fprintf($19,771181,$vararg_buffer)|0);
  $21 = HEAP32[(259664)>>2]|0;
  $22 = ($21|0)!=(0|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = HEAP32[544648>>2]|0;
  $25 = $22 ? $23 : $24;
  (_fflush($25)|0);
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $26 = $ctx;
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_i[$27 & 511]()|0);
 if ($28) {
  $52 = $ctx;
  $0 = $52;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 } else {
  $29 = HEAP32[(259664)>>2]|0;
  $30 = ($29|0)!=(0|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = HEAP32[544648>>2]|0;
  $33 = $30 ? $31 : $32;
  $34 = $ctx;
  $35 = ((($34)) + 68|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $36;
  (_fprintf($33,771240,$vararg_buffer2)|0);
  $37 = HEAP32[(259664)>>2]|0;
  $38 = ($37|0)!=(0|0);
  $39 = HEAP32[(259664)>>2]|0;
  $40 = HEAP32[544648>>2]|0;
  $41 = $38 ? $39 : $40;
  (_fflush($41)|0);
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _resolve_extensions($gl) {
 $gl = $gl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $gl;
 HEAP8[(188)>>0] = 0;
 $1 = $0;
 $2 = (_gl_query_extension($1,770991)|0);
 if (!($2)) {
  HEAP8[(188)>>0] = 1;
  $15 = HEAP32[(259664)>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = HEAP32[544648>>2]|0;
  $19 = $16 ? $17 : $18;
  (_fprintf($19,771053,$vararg_buffer1)|0);
  $20 = HEAP32[(259664)>>2]|0;
  $21 = ($20|0)!=(0|0);
  $22 = HEAP32[(259664)>>2]|0;
  $23 = HEAP32[544648>>2]|0;
  $24 = $21 ? $22 : $23;
  (_fflush($24)|0);
  STACKTOP = sp;return 1;
 }
 $3 = HEAP8[102648>>0]|0;
 $4 = $3&1;
 if (!($4)) {
  STACKTOP = sp;return 1;
 }
 $5 = HEAP32[(259664)>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = HEAP32[(259664)>>2]|0;
 $8 = HEAP32[544648>>2]|0;
 $9 = $6 ? $7 : $8;
 (_fprintf($9,771000,$vararg_buffer)|0);
 $10 = HEAP32[(259664)>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = HEAP32[(259664)>>2]|0;
 $13 = HEAP32[544648>>2]|0;
 $14 = $11 ? $12 : $13;
 (_fflush($14)|0);
 STACKTOP = sp;return 1;
}
function _gl_shader_init($data) {
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $backend = 0, $cond = 0, $gl = 0, $ret = 0, $shader_path = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 49|0;
 $1 = $data;
 $2 = $1;
 $gl = $2;
 $backend = 0;
 $3 = HEAP8[(4440)>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = HEAP8[(344)>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)!=(0);
  $9 = $7;
 } else {
  $9 = 0;
 }
 $8 = $9 ? (344) : 0;
 $shader_path = $8;
 $10 = $shader_path;
 $11 = $gl;
 $12 = ((($11)) + 2584|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 $15 = $14 ? 2 : 2;
 $16 = (_gfx_shader_parse_type($10,$15)|0);
 $type = $16;
 $17 = $type;
 $18 = ($17|0)==(3);
 if ($18) {
  $19 = HEAP8[102648>>0]|0;
  $20 = $19&1;
  if ($20) {
   $21 = HEAP32[(259664)>>2]|0;
   $22 = ($21|0)!=(0|0);
   $23 = HEAP32[(259664)>>2]|0;
   $24 = HEAP32[544648>>2]|0;
   $25 = $22 ? $23 : $24;
   (_fprintf($25,770740,$vararg_buffer)|0);
   $26 = HEAP32[(259664)>>2]|0;
   $27 = ($26|0)!=(0|0);
   $28 = HEAP32[(259664)>>2]|0;
   $29 = HEAP32[544648>>2]|0;
   $30 = $27 ? $28 : $29;
   (_fflush($30)|0);
  }
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $86 = $$pre_trunc&1;
  STACKTOP = sp;return ($86|0);
 }
 $31 = $type;
 $cond = ($31|0)==(2);
 if ($cond) {
  $32 = HEAP8[102648>>0]|0;
  $33 = $32&1;
  if ($33) {
   $34 = HEAP32[(259664)>>2]|0;
   $35 = ($34|0)!=(0|0);
   $36 = HEAP32[(259664)>>2]|0;
   $37 = HEAP32[544648>>2]|0;
   $38 = $35 ? $36 : $37;
   (_fprintf($38,770782,$vararg_buffer1)|0);
   $39 = HEAP32[(259664)>>2]|0;
   $40 = ($39|0)!=(0|0);
   $41 = HEAP32[(259664)>>2]|0;
   $42 = HEAP32[544648>>2]|0;
   $43 = $40 ? $41 : $42;
   (_fflush($43)|0);
  }
  $backend = 270828;
 }
 $44 = $backend;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  $46 = HEAP32[(259664)>>2]|0;
  $47 = ($46|0)!=(0|0);
  $48 = HEAP32[(259664)>>2]|0;
  $49 = HEAP32[544648>>2]|0;
  $50 = $47 ? $48 : $49;
  (_fprintf($50,770827,$vararg_buffer3)|0);
  $51 = HEAP32[(259664)>>2]|0;
  $52 = ($51|0)!=(0|0);
  $53 = HEAP32[(259664)>>2]|0;
  $54 = HEAP32[544648>>2]|0;
  $55 = $52 ? $53 : $54;
  (_fflush($55)|0);
  $$expand_i1_val8 = 1;
  HEAP8[$0>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $86 = $$pre_trunc&1;
  STACKTOP = sp;return ($86|0);
 }
 $56 = $backend;
 $57 = $gl;
 $58 = ((($57)) + 4|0);
 HEAP32[$58>>2] = $56;
 $59 = $gl;
 $60 = ((($59)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$61>>2]|0;
 $63 = $shader_path;
 $64 = (FUNCTION_TABLE_ii[$62 & 511]($63)|0);
 $65 = $64&1;
 $ret = $65;
 $66 = $ret;
 $67 = $66&1;
 if (!($67)) {
  $68 = HEAP32[(259664)>>2]|0;
  $69 = ($68|0)!=(0|0);
  $70 = HEAP32[(259664)>>2]|0;
  $71 = HEAP32[544648>>2]|0;
  $72 = $69 ? $70 : $71;
  (_fprintf($72,770917,$vararg_buffer5)|0);
  $73 = HEAP32[(259664)>>2]|0;
  $74 = ($73|0)!=(0|0);
  $75 = HEAP32[(259664)>>2]|0;
  $76 = HEAP32[544648>>2]|0;
  $77 = $74 ? $75 : $76;
  (_fflush($77)|0);
  $78 = $gl;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 511](0)|0);
  $83 = $82&1;
  $ret = $83;
 }
 $84 = $ret;
 $85 = $84&1;
 $$expand_i1_val10 = $85&1;
 HEAP8[$0>>0] = $$expand_i1_val10;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $86 = $$pre_trunc&1;
 STACKTOP = sp;return ($86|0);
}
function _gl_set_shader_viewport($data,$shader) {
 $data = $data|0;
 $shader = $shader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $shader;
 $2 = $0;
 $gl = $2;
 $3 = $gl;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $gl;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  FUNCTION_TABLE_vi[$11 & 1023]($12);
 }
 $13 = $gl;
 $14 = $gl;
 $15 = ((($14)) + 1728|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $gl;
 $18 = ((($17)) + 1732|0);
 $19 = HEAP32[$18>>2]|0;
 _gl_set_viewport($13,$16,$19,0,1);
 STACKTOP = sp;return;
}
function _gl_set_texture_fmts($data,$rgb32) {
 $data = $data|0;
 $rgb32 = $rgb32|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $2 = $rgb32&1;
 $1 = $2;
 $3 = $0;
 $gl = $3;
 $4 = $1;
 $5 = $4&1;
 $6 = $5 ? 32993 : 6407;
 $7 = $gl;
 $8 = ((($7)) + 2028|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = $9&1;
 $11 = $10 ? 32993 : 6407;
 $12 = $gl;
 $13 = ((($12)) + 2032|0);
 HEAP32[$13>>2] = $11;
 $14 = $1;
 $15 = $14&1;
 $16 = $15 ? 5121 : 33635;
 $17 = $gl;
 $18 = ((($17)) + 2036|0);
 HEAP32[$18>>2] = $16;
 $19 = $1;
 $20 = $19&1;
 $21 = $20 ? 4 : 2;
 $22 = $gl;
 $23 = ((($22)) + 2044|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP8[(188)>>0]|0;
 $25 = $24&1;
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $1;
 $27 = $26&1;
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $gl;
 $29 = ((($28)) + 2028|0);
 HEAP32[$29>>2] = 6408;
 $30 = $gl;
 $31 = ((($30)) + 2032|0);
 HEAP32[$31>>2] = 6408;
 STACKTOP = sp;return;
}
function _gl_init_textures($data,$video) {
 $data = $data|0;
 $video = $video|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gl = 0, $i = 0, $internal_fmt = 0, $support_argb = 0, $texture_fmt = 0, $texture_type = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $data;
 $1 = $video;
 $2 = $0;
 $gl = $2;
 $3 = $gl;
 $4 = ((($3)) + 1710|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if ($6) {
  $17 = 0;
 } else {
  $7 = (_check_eglimage_proc()|0);
  if ($7) {
   $8 = $gl;
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 56|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $1;
   $13 = (FUNCTION_TABLE_ii[$11 & 511]($12)|0);
   $17 = $13;
  } else {
   $17 = 0;
  }
 }
 $14 = $gl;
 $15 = ((($14)) + 2472|0);
 $16 = $17&1;
 HEAP8[$15>>0] = $16;
 $18 = $gl;
 $19 = ((($18)) + 2028|0);
 $20 = HEAP32[$19>>2]|0;
 $internal_fmt = $20;
 $21 = $gl;
 $22 = ((($21)) + 2032|0);
 $23 = HEAP32[$22>>2]|0;
 $texture_type = $23;
 $24 = $gl;
 $25 = ((($24)) + 2036|0);
 $26 = HEAP32[$25>>2]|0;
 $texture_fmt = $26;
 $27 = $gl;
 $28 = ((($27)) + 1710|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&1;
 do {
  if ($30) {
   $31 = $gl;
   $32 = ((($31)) + 2044|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(4);
   if ($34) {
    $35 = $gl;
    $36 = (_gl_query_extension($35,770638)|0);
    if ($36) {
     $40 = 1;
    } else {
     $37 = $gl;
     $38 = (_gl_query_extension($37,770653)|0);
     $40 = $38;
    }
    $39 = $40&1;
    $support_argb = $39;
    $41 = $support_argb;
    $42 = $41&1;
    if ($42) {
     $internal_fmt = 6408;
     $texture_type = 6408;
     $texture_fmt = 5121;
     break;
    } else {
     $43 = HEAP32[(259664)>>2]|0;
     $44 = ($43|0)!=(0|0);
     $45 = HEAP32[(259664)>>2]|0;
     $46 = HEAP32[544648>>2]|0;
     $47 = $44 ? $45 : $46;
     (_fprintf($47,770663,$vararg_buffer)|0);
     $48 = HEAP32[(259664)>>2]|0;
     $49 = ($48|0)!=(0|0);
     $50 = HEAP32[(259664)>>2]|0;
     $51 = HEAP32[544648>>2]|0;
     $52 = $49 ? $50 : $51;
     (_fflush($52)|0);
     $internal_fmt = 6407;
     $texture_type = 6407;
     $texture_fmt = 33635;
     break;
    }
   }
  }
 } while(0);
 $53 = $gl;
 $54 = ((($53)) + 48|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $gl;
 $57 = ((($56)) + 12|0);
 _glGenTextures(($55|0),($57|0));
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = $gl;
  $60 = ((($59)) + 48|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($58>>>0)<($61>>>0);
  if (!($62)) {
   break;
  }
  $63 = $i;
  $64 = $gl;
  $65 = ((($64)) + 12|0);
  $66 = (($65) + ($63<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  _glBindTexture(3553,($67|0));
  $68 = $gl;
  $69 = ((($68)) + 2040|0);
  $70 = HEAP32[$69>>2]|0;
  _glTexParameteri(3553,10242,($70|0));
  $71 = $gl;
  $72 = ((($71)) + 2040|0);
  $73 = HEAP32[$72>>2]|0;
  _glTexParameteri(3553,10243,($73|0));
  $74 = $gl;
  $75 = ((($74)) + 468|0);
  $76 = HEAP32[$75>>2]|0;
  _glTexParameteri(3553,10240,($76|0));
  $77 = $gl;
  $78 = ((($77)) + 468|0);
  $79 = HEAP32[$78>>2]|0;
  _glTexParameteri(3553,10241,($79|0));
  $80 = $gl;
  $81 = ((($80)) + 2472|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&1;
  if (!($83)) {
   $84 = $internal_fmt;
   $85 = $gl;
   $86 = ((($85)) + 1832|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $gl;
   $89 = ((($88)) + 1836|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $texture_type;
   $92 = $texture_fmt;
   $93 = $gl;
   $94 = ((($93)) + 472|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)!=(0|0);
   if ($96) {
    $97 = $gl;
    $98 = ((($97)) + 472|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $99;
   } else {
    $100 = 0;
   }
   _glTexImage2D(3553,0,($84|0),($87|0),($90|0),0,($91|0),($92|0),($100|0));
  }
  $101 = $i;
  $102 = (($101) + 1)|0;
  $i = $102;
 }
 $103 = $gl;
 $104 = ((($103)) + 44|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $gl;
 $107 = ((($106)) + 12|0);
 $108 = (($107) + ($105<<2)|0);
 $109 = HEAP32[$108>>2]|0;
 _glBindTexture(3553,($109|0));
 STACKTOP = sp;return;
}
function _check_eglimage_proc() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[295676>>2]|0;
 $1 = ($0|0)!=(0|0);
 return ($1|0);
}
function _gl_init_textures_data($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $gl = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $gl;
  $4 = ((($3)) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $gl;
  $8 = ((($7)) + 1832|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $i;
  $11 = $gl;
  $12 = ((($11)) + 1768|0);
  $13 = (($12) + ($10<<2)|0);
  HEAP32[$13>>2] = $9;
  $14 = $gl;
  $15 = ((($14)) + 1836|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $i;
  $18 = $gl;
  $19 = ((($18)) + 1800|0);
  $20 = (($19) + ($17<<2)|0);
  HEAP32[$20>>2] = $16;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 $i1 = 0;
 while(1) {
  $23 = $i1;
  $24 = $gl;
  $25 = ((($24)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $gl;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $i1;
  $32 = $gl;
  $33 = ((($32)) + 52|0);
  $34 = (($33) + (($31*52)|0)|0);
  HEAP32[$34>>2] = $30;
  $35 = $gl;
  $36 = ((($35)) + 1832|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (+($37>>>0));
  $39 = $i1;
  $40 = $gl;
  $41 = ((($40)) + 52|0);
  $42 = (($41) + (($39*52)|0)|0);
  $43 = ((($42)) + 4|0);
  HEAPF32[$43>>2] = $38;
  $44 = $gl;
  $45 = ((($44)) + 1832|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (+($46>>>0));
  $48 = $i1;
  $49 = $gl;
  $50 = ((($49)) + 52|0);
  $51 = (($50) + (($48*52)|0)|0);
  $52 = ((($51)) + 12|0);
  HEAPF32[$52>>2] = $47;
  $53 = $gl;
  $54 = ((($53)) + 1836|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (+($55>>>0));
  $57 = $i1;
  $58 = $gl;
  $59 = ((($58)) + 52|0);
  $60 = (($59) + (($57*52)|0)|0);
  $61 = ((($60)) + 4|0);
  $62 = ((($61)) + 4|0);
  HEAPF32[$62>>2] = $56;
  $63 = $gl;
  $64 = ((($63)) + 1836|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (+($65>>>0));
  $67 = $i1;
  $68 = $gl;
  $69 = ((($68)) + 52|0);
  $70 = (($69) + (($67*52)|0)|0);
  $71 = ((($70)) + 12|0);
  $72 = ((($71)) + 4|0);
  HEAPF32[$72>>2] = $66;
  $73 = $i1;
  $74 = $gl;
  $75 = ((($74)) + 52|0);
  $76 = (($75) + (($73*52)|0)|0);
  $77 = ((($76)) + 20|0);
  ;HEAP32[$77>>2]=HEAP32[270532>>2]|0;HEAP32[$77+4>>2]=HEAP32[270532+4>>2]|0;HEAP32[$77+8>>2]=HEAP32[270532+8>>2]|0;HEAP32[$77+12>>2]=HEAP32[270532+12>>2]|0;HEAP32[$77+16>>2]=HEAP32[270532+16>>2]|0;HEAP32[$77+20>>2]=HEAP32[270532+20>>2]|0;HEAP32[$77+24>>2]=HEAP32[270532+24>>2]|0;HEAP32[$77+28>>2]=HEAP32[270532+28>>2]|0;
  $78 = $i1;
  $79 = (($78) + 1)|0;
  $i1 = $79;
 }
 STACKTOP = sp;return;
}
function _gl_init_hw_render($gl,$width,$height) {
 $gl = $gl|0;
 $width = $width|0;
 $height = $height|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $depth = 0, $i = 0, $max_fbo_size = 0, $max_renderbuffer_size = 0, $status = 0, $stencil = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 54|0;
 $max_fbo_size = sp + 36|0;
 $max_renderbuffer_size = sp + 32|0;
 $1 = $gl;
 $2 = $width;
 $3 = $height;
 $4 = HEAP8[102648>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP32[(259664)>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = HEAP32[(259664)>>2]|0;
  $9 = HEAP32[544648>>2]|0;
  $10 = $7 ? $8 : $9;
  $11 = $2;
  $12 = $3;
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  (_fprintf($10,770415,$vararg_buffer)|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fflush($17)|0);
 }
 HEAP32[$max_fbo_size>>2] = 0;
 HEAP32[$max_renderbuffer_size>>2] = 0;
 _glGetIntegerv(3379,($max_fbo_size|0));
 _glGetIntegerv(34024,($max_renderbuffer_size|0));
 $18 = HEAP8[102648>>0]|0;
 $19 = $18&1;
 if ($19) {
  $20 = HEAP32[(259664)>>2]|0;
  $21 = ($20|0)!=(0|0);
  $22 = HEAP32[(259664)>>2]|0;
  $23 = HEAP32[544648>>2]|0;
  $24 = $21 ? $22 : $23;
  $25 = HEAP32[$max_fbo_size>>2]|0;
  $26 = HEAP32[$max_renderbuffer_size>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $25;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $26;
  (_fprintf($24,770467,$vararg_buffer2)|0);
  $27 = HEAP32[(259664)>>2]|0;
  $28 = ($27|0)!=(0|0);
  $29 = HEAP32[(259664)>>2]|0;
  $30 = HEAP32[544648>>2]|0;
  $31 = $28 ? $29 : $30;
  (_fflush($31)|0);
 }
 _glBindTexture(3553,0);
 $32 = $1;
 $33 = ((($32)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $1;
 $36 = ((($35)) + 1644|0);
 _glGenFramebuffers(($34|0),($36|0));
 $37 = HEAP8[(201656)>>0]|0;
 $38 = $37&1;
 $39 = $38&1;
 $depth = $39;
 $40 = HEAP8[(201657)>>0]|0;
 $41 = $40&1;
 $42 = $41&1;
 $stencil = $42;
 $43 = $stencil;
 $44 = $43&1;
 if ($44) {
  $45 = $1;
  $46 = (_gl_query_extension($45,770536)|0);
  if (!($46)) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $116 = $$pre_trunc&1;
   STACKTOP = sp;return ($116|0);
  }
 }
 $47 = $depth;
 $48 = $47&1;
 if ($48) {
  $49 = $1;
  $50 = ((($49)) + 48|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = ((($52)) + 1676|0);
  _glGenRenderbuffers(($51|0),($53|0));
  $54 = $1;
  $55 = ((($54)) + 1709|0);
  HEAP8[$55>>0] = 1;
 }
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = $1;
  $58 = ((($57)) + 48|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56>>>0)<($59>>>0);
  if (!($60)) {
   label = 19;
   break;
  }
  $61 = $i;
  $62 = $1;
  $63 = ((($62)) + 1644|0);
  $64 = (($63) + ($61<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  _glBindFramebuffer(36160,($65|0));
  $66 = $i;
  $67 = $1;
  $68 = ((($67)) + 12|0);
  $69 = (($68) + ($66<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  _glFramebufferTexture2D(36160,36064,3553,($70|0),0);
  $71 = $depth;
  $72 = $71&1;
  do {
   if ($72) {
    $73 = $stencil;
    $74 = $73&1;
    $75 = $i;
    $76 = $1;
    $77 = ((($76)) + 1676|0);
    $78 = (($77) + ($75<<2)|0);
    $79 = HEAP32[$78>>2]|0;
    _glBindRenderbuffer(36161,($79|0));
    $80 = $2;
    $81 = $3;
    if ($74) {
     _glRenderbufferStorage(36161,35056,($80|0),($81|0));
     _glBindRenderbuffer(36161,0);
     $82 = $i;
     $83 = $1;
     $84 = ((($83)) + 1676|0);
     $85 = (($84) + ($82<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     _glFramebufferRenderbuffer(36160,36096,36161,($86|0));
     $87 = $i;
     $88 = $1;
     $89 = ((($88)) + 1676|0);
     $90 = (($89) + ($87<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     _glFramebufferRenderbuffer(36160,36128,36161,($91|0));
     break;
    } else {
     _glRenderbufferStorage(36161,33189,($80|0),($81|0));
     _glBindRenderbuffer(36161,0);
     $92 = $i;
     $93 = $1;
     $94 = ((($93)) + 1676|0);
     $95 = (($94) + ($92<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     _glFramebufferRenderbuffer(36160,36096,36161,($96|0));
     break;
    }
   }
  } while(0);
  $97 = (_glCheckFramebufferStatus(36160)|0);
  $status = $97;
  $98 = $status;
  $99 = ($98|0)!=(36053);
  if ($99) {
   label = 17;
   break;
  }
  $112 = $i;
  $113 = (($112) + 1)|0;
  $i = $113;
 }
 if ((label|0) == 17) {
  $100 = HEAP32[(259664)>>2]|0;
  $101 = ($100|0)!=(0|0);
  $102 = HEAP32[(259664)>>2]|0;
  $103 = HEAP32[544648>>2]|0;
  $104 = $101 ? $102 : $103;
  $105 = $i;
  $106 = $status;
  HEAP32[$vararg_buffer6>>2] = $105;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $106;
  (_fprintf($104,770561,$vararg_buffer6)|0);
  $107 = HEAP32[(259664)>>2]|0;
  $108 = ($107|0)!=(0|0);
  $109 = HEAP32[(259664)>>2]|0;
  $110 = HEAP32[544648>>2]|0;
  $111 = $108 ? $109 : $110;
  (_fflush($111)|0);
  $$expand_i1_val11 = 0;
  HEAP8[$0>>0] = $$expand_i1_val11;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $116 = $$pre_trunc&1;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 19) {
  _glBindFramebuffer(36160,0);
  $114 = $1;
  $115 = ((($114)) + 1708|0);
  HEAP8[$115>>0] = 1;
  $$expand_i1_val13 = 1;
  HEAP8[$0>>0] = $$expand_i1_val13;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $116 = $$pre_trunc&1;
  STACKTOP = sp;return ($116|0);
 }
 return (0)|0;
}
function _gl_check_error() {
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 40|0;
 $1 = (_glGetError()|0);
 $error = $1;
 $2 = $error;
 switch ($2|0) {
 case 1280:  {
  $3 = HEAP32[(259664)>>2]|0;
  $4 = ($3|0)!=(0|0);
  $5 = HEAP32[(259664)>>2]|0;
  $6 = HEAP32[544648>>2]|0;
  $7 = $4 ? $5 : $6;
  (_fprintf($7,770202,$vararg_buffer)|0);
  $8 = HEAP32[(259664)>>2]|0;
  $9 = ($8|0)!=(0|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = HEAP32[544648>>2]|0;
  $12 = $9 ? $10 : $11;
  (_fflush($12)|0);
  break;
 }
 case 1281:  {
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fprintf($17,770242,$vararg_buffer1)|0);
  $18 = HEAP32[(259664)>>2]|0;
  $19 = ($18|0)!=(0|0);
  $20 = HEAP32[(259664)>>2]|0;
  $21 = HEAP32[544648>>2]|0;
  $22 = $19 ? $20 : $21;
  (_fflush($22)|0);
  break;
 }
 case 1282:  {
  $23 = HEAP32[(259664)>>2]|0;
  $24 = ($23|0)!=(0|0);
  $25 = HEAP32[(259664)>>2]|0;
  $26 = HEAP32[544648>>2]|0;
  $27 = $24 ? $25 : $26;
  (_fprintf($27,770283,$vararg_buffer3)|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = ($28|0)!=(0|0);
  $30 = HEAP32[(259664)>>2]|0;
  $31 = HEAP32[544648>>2]|0;
  $32 = $29 ? $30 : $31;
  (_fflush($32)|0);
  break;
 }
 case 1285:  {
  $33 = HEAP32[(259664)>>2]|0;
  $34 = ($33|0)!=(0|0);
  $35 = HEAP32[(259664)>>2]|0;
  $36 = HEAP32[544648>>2]|0;
  $37 = $34 ? $35 : $36;
  (_fprintf($37,770328,$vararg_buffer5)|0);
  $38 = HEAP32[(259664)>>2]|0;
  $39 = ($38|0)!=(0|0);
  $40 = HEAP32[(259664)>>2]|0;
  $41 = HEAP32[544648>>2]|0;
  $42 = $39 ? $40 : $41;
  (_fflush($42)|0);
  break;
 }
 case 0:  {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $53 = $$pre_trunc&1;
  STACKTOP = sp;return ($53|0);
  break;
 }
 default: {
  $43 = HEAP32[(259664)>>2]|0;
  $44 = ($43|0)!=(0|0);
  $45 = HEAP32[(259664)>>2]|0;
  $46 = HEAP32[544648>>2]|0;
  $47 = $44 ? $45 : $46;
  (_fprintf($47,770369,$vararg_buffer7)|0);
  $48 = HEAP32[(259664)>>2]|0;
  $49 = ($48|0)!=(0|0);
  $50 = HEAP32[(259664)>>2]|0;
  $51 = HEAP32[544648>>2]|0;
  $52 = $49 ? $50 : $51;
  (_fflush($52)|0);
 }
 }
 $$expand_i1_val10 = 0;
 HEAP8[$0>>0] = $$expand_i1_val10;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $53 = $$pre_trunc&1;
 STACKTOP = sp;return ($53|0);
}
function _gl_frame($data,$frame,$width,$height,$pitch,$msg) {
 $data = $data|0;
 $frame = $frame|0;
 $width = $width|0;
 $height = $height|0;
 $pitch = $pitch|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $gl = 0, $tex_info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tex_info = sp;
 $0 = $data;
 $1 = $frame;
 $2 = $width;
 $3 = $height;
 $4 = $pitch;
 $5 = $msg;
 $6 = $0;
 $gl = $6;
 $7 = $gl;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $gl;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 1023](1);
 }
 $16 = $gl;
 $17 = ((($16)) + 1640|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&1;
 if ($19) {
  $20 = $gl;
  $21 = $2;
  $22 = $3;
  $23 = $gl;
  $24 = ((($23)) + 1760|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $gl;
  $27 = ((($26)) + 1764|0);
  $28 = HEAP32[$27>>2]|0;
  _gl_compute_fbo_geometry($20,$21,$22,$25,$28);
  $29 = $gl;
  _gl_start_frame_fbo($29);
 }
 $30 = $gl;
 $31 = ((($30)) + 1711|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&1;
 if ($33) {
  $34 = $gl;
  $35 = ((($34)) + 1711|0);
  HEAP8[$35>>0] = 0;
  $36 = $gl;
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $gl;
  $41 = ((($40)) + 1728|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $gl;
  $44 = ((($43)) + 1732|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$39 & 1023]($42,$45);
  $46 = $gl;
  _gl_update_resize($46);
 }
 $47 = $1;
 $48 = ($47|0)!=(0|0);
 $49 = $gl;
 $50 = ((($49)) + 44|0);
 $51 = HEAP32[$50>>2]|0;
 if ($48) {
  $52 = (($51) + 1)|0;
  $53 = $gl;
  $54 = ((($53)) + 48|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52>>>0) % ($55>>>0))&-1;
  $57 = $gl;
  $58 = ((($57)) + 44|0);
  HEAP32[$58>>2] = $56;
  $59 = $gl;
  $60 = ((($59)) + 44|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $gl;
  $63 = ((($62)) + 12|0);
  $64 = (($63) + ($61<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  _glBindTexture(3553,($65|0));
  $66 = $gl;
  $67 = ((($66)) + 1708|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&1;
  if (!($69)) {
   $70 = $gl;
   $71 = $2;
   $72 = $3;
   $73 = $4;
   _gl_update_input_size($70,$71,$72,$73,1);
   $74 = $gl;
   $75 = $1;
   $76 = $2;
   $77 = $3;
   $78 = $4;
   _gl_copy_frame($74,$75,$76,$77,$78);
  }
 } else {
  $79 = $gl;
  $80 = ((($79)) + 12|0);
  $81 = (($80) + ($51<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  _glBindTexture(3553,($82|0));
 }
 $83 = $gl;
 $84 = ((($83)) + 1708|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&1;
 if ($86) {
  $87 = $gl;
  $88 = $2;
  $89 = $3;
  $90 = $4;
  _gl_update_input_size($87,$88,$89,$90,0);
  $91 = $gl;
  $92 = ((($91)) + 1640|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&1;
  if (!($94)) {
   _glBindFramebuffer(36160,0);
   $95 = $gl;
   $96 = $gl;
   $97 = ((($96)) + 1728|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $gl;
   $100 = ((($99)) + 1732|0);
   $101 = HEAP32[$100>>2]|0;
   _gl_set_viewport($95,$98,$101,0,1);
  }
  _glDisable(2929);
  _glDisable(2960);
  _glDisable(2884);
  _glDisable(3024);
  _glDisable(3042);
  _glBlendFunc(770,771);
  _glClearColor(0.0,0.0,0.0,1.0);
 }
 dest=$tex_info; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $102 = $gl;
 $103 = ((($102)) + 44|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $gl;
 $106 = ((($105)) + 12|0);
 $107 = (($106) + ($104<<2)|0);
 $108 = HEAP32[$107>>2]|0;
 HEAP32[$tex_info>>2] = $108;
 $109 = $2;
 $110 = (+($109>>>0));
 $111 = ((($tex_info)) + 4|0);
 HEAPF32[$111>>2] = $110;
 $112 = $3;
 $113 = (+($112>>>0));
 $114 = ((($tex_info)) + 4|0);
 $115 = ((($114)) + 4|0);
 HEAPF32[$115>>2] = $113;
 $116 = $gl;
 $117 = ((($116)) + 1832|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (+($118>>>0));
 $120 = ((($tex_info)) + 12|0);
 HEAPF32[$120>>2] = $119;
 $121 = $gl;
 $122 = ((($121)) + 1836|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (+($123>>>0));
 $125 = ((($tex_info)) + 12|0);
 $126 = ((($125)) + 4|0);
 HEAPF32[$126>>2] = $124;
 $127 = ((($tex_info)) + 20|0);
 $128 = $gl;
 $129 = ((($128)) + 1840|0);
 ;HEAP32[$127>>2]=HEAP32[$129>>2]|0;HEAP32[$127+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$127+8>>2]=HEAP32[$129+8>>2]|0;HEAP32[$127+12>>2]=HEAP32[$129+12>>2]|0;HEAP32[$127+16>>2]=HEAP32[$129+16>>2]|0;HEAP32[$127+20>>2]=HEAP32[$129+20>>2]|0;HEAP32[$127+24>>2]=HEAP32[$129+24>>2]|0;HEAP32[$127+28>>2]=HEAP32[$129+28>>2]|0;
 _glClear(16384);
 $130 = HEAP8[(314)>>0]|0;
 $131 = $130&1;
 if ($131) {
  $132 = $gl;
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($133)) + 44|0);
  $135 = HEAP32[$134>>2]|0;
  FUNCTION_TABLE_v[$135 & 511]();
  _glClear(16384);
 }
 $136 = $gl;
 $137 = ((($136)) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ($138|0)!=(0|0);
 if ($139) {
  $140 = $gl;
  $141 = ((($140)) + 4|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ((($142)) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $2;
  $146 = $3;
  $147 = $gl;
  $148 = ((($147)) + 1832|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $gl;
  $151 = ((($150)) + 1836|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $gl;
  $154 = ((($153)) + 1736|0);
  $155 = ((($154)) + 8|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $gl;
  $158 = ((($157)) + 1736|0);
  $159 = ((($158)) + 12|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = HEAP32[(259432)>>2]|0;
  $162 = $gl;
  $163 = ((($162)) + 52|0);
  FUNCTION_TABLE_viiiiiiiiiii[$144 & 127]($145,$146,$149,$152,$156,$160,$161,$tex_info,$163,0,0);
 }
 $164 = $gl;
 $165 = $gl;
 $166 = ((($165)) + 2000|0);
 $167 = $gl;
 $168 = ((($167)) + 1872|0);
 _gl_shader_set_coords($164,$166,$168);
 _glDrawArrays(5,0,4);
 $169 = $gl;
 $170 = ((($169)) + 1640|0);
 $171 = HEAP8[$170>>0]|0;
 $172 = $171&1;
 if ($172) {
  $173 = $gl;
  _gl_frame_fbo($173,$tex_info);
 }
 $174 = $gl;
 _gl_set_prev_texture($174,$tex_info);
 $175 = $gl;
 $176 = ((($175)) + 2576|0);
 $177 = HEAP8[$176>>0]|0;
 $178 = $177&1;
 if ($178) {
  $179 = $gl;
  _gl_draw_texture($179);
 }
 $180 = $5;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = $gl;
  $183 = ((($182)) + 2052|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = ($184|0)!=(0|0);
  if ($185) {
   $186 = $gl;
   $187 = ((($186)) + 2052|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ((($188)) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $gl;
   $192 = $5;
   FUNCTION_TABLE_viii[$190 & 1023]($191,$192,0);
  }
 }
 $193 = $gl;
 $194 = ((($193)) + 2496|0);
 $195 = HEAP8[$194>>0]|0;
 $196 = $195&1;
 if ($196) {
  $197 = $gl;
  _gl_render_overlay($197);
 }
 $198 = $gl;
 $199 = HEAP32[$198>>2]|0;
 $200 = ((($199)) + 28|0);
 $201 = HEAP32[$200>>2]|0;
 FUNCTION_TABLE_v[$201 & 511]();
 $202 = $gl;
 $203 = ((($202)) + 1708|0);
 $204 = HEAP8[$203>>0]|0;
 $205 = $204&1;
 if (!($205)) {
  $215 = $gl;
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 44|0);
  $218 = HEAP32[$217>>2]|0;
  FUNCTION_TABLE_v[$218 & 511]();
  $219 = HEAP32[(259432)>>2]|0;
  $220 = (($219) + 1)|0;
  HEAP32[(259432)>>2] = $220;
  STACKTOP = sp;return 1;
 }
 $206 = $gl;
 $207 = ((($206)) + 4|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ($208|0)!=(0|0);
 if ($209) {
  $210 = $gl;
  $211 = ((($210)) + 4|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ((($212)) + 12|0);
  $214 = HEAP32[$213>>2]|0;
  FUNCTION_TABLE_vi[$214 & 1023](0);
 }
 _glBindTexture(3553,0);
 $215 = $gl;
 $216 = HEAP32[$215>>2]|0;
 $217 = ((($216)) + 44|0);
 $218 = HEAP32[$217>>2]|0;
 FUNCTION_TABLE_v[$218 & 511]();
 $219 = HEAP32[(259432)>>2]|0;
 $220 = (($219) + 1)|0;
 HEAP32[(259432)>>2] = $220;
 STACKTOP = sp;return 1;
}
function _gl_start_frame_fbo($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $gl;
 $6 = ((($5)) + 12|0);
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 _glBindTexture(3553,($8|0));
 $9 = $gl;
 $10 = ((($9)) + 612|0);
 $11 = HEAP32[$10>>2]|0;
 _glBindFramebuffer(36160,($11|0));
 $12 = $gl;
 $13 = $gl;
 $14 = ((($13)) + 740|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $gl;
 $17 = ((($16)) + 740|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 _gl_set_viewport($12,$15,$19,1,0);
 $20 = $gl;
 $21 = ((($20)) + 2000|0);
 HEAP32[$21>>2] = 270404;
 STACKTOP = sp;return;
}
function _gl_update_resize($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 1640|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 $6 = $gl;
 if ($5) {
  _gl_check_fbo_dimensions($6);
  $13 = $gl;
  _gl_start_frame_fbo($13);
  STACKTOP = sp;return;
 } else {
  $7 = $gl;
  $8 = ((($7)) + 1728|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $gl;
  $11 = ((($10)) + 1732|0);
  $12 = HEAP32[$11>>2]|0;
  _gl_set_viewport($6,$9,$12,0,1);
  STACKTOP = sp;return;
 }
}
function _gl_check_fbo_dimensions($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gl = 0, $i = 0, $img_height = 0, $img_width = 0, $max = 0, $pow2_size = 0, $status = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $gl;
  $4 = ((($3)) + 1636|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $gl;
  $9 = ((($8)) + 740|0);
  $10 = (($9) + (($7*24)|0)|0);
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $i;
  $14 = $gl;
  $15 = ((($14)) + 740|0);
  $16 = (($15) + (($13*24)|0)|0);
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($12>>>0)>($18>>>0);
  if ($19) {
   label = 5;
  } else {
   $20 = $i;
   $21 = $gl;
   $22 = ((($21)) + 740|0);
   $23 = (($22) + (($20*24)|0)|0);
   $24 = ((($23)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $i;
   $27 = $gl;
   $28 = ((($27)) + 740|0);
   $29 = (($28) + (($26*24)|0)|0);
   $30 = ((($29)) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($25>>>0)>($31>>>0);
   if ($32) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $33 = $i;
   $34 = $gl;
   $35 = ((($34)) + 740|0);
   $36 = (($35) + (($33*24)|0)|0);
   $37 = ((($36)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $img_width = $38;
   $39 = $i;
   $40 = $gl;
   $41 = ((($40)) + 740|0);
   $42 = (($41) + (($39*24)|0)|0);
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $img_height = $44;
   $45 = $img_width;
   $46 = $img_height;
   $47 = ($45>>>0)>($46>>>0);
   $48 = $img_width;
   $49 = $img_height;
   $50 = $47 ? $48 : $49;
   $max = $50;
   $51 = $max;
   $52 = (_next_pow21668($51)|0);
   $pow2_size = $52;
   $53 = $pow2_size;
   $54 = $i;
   $55 = $gl;
   $56 = ((($55)) + 740|0);
   $57 = (($56) + (($54*24)|0)|0);
   $58 = ((($57)) + 20|0);
   HEAP32[$58>>2] = $53;
   $59 = $i;
   $60 = $gl;
   $61 = ((($60)) + 740|0);
   $62 = (($61) + (($59*24)|0)|0);
   $63 = ((($62)) + 16|0);
   HEAP32[$63>>2] = $53;
   $64 = $i;
   $65 = $gl;
   $66 = ((($65)) + 612|0);
   $67 = (($66) + ($64<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   _glBindFramebuffer(36160,($68|0));
   $69 = $i;
   $70 = $gl;
   $71 = ((($70)) + 676|0);
   $72 = (($71) + ($69<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   _glBindTexture(3553,($73|0));
   $74 = $i;
   $75 = $gl;
   $76 = ((($75)) + 740|0);
   $77 = (($76) + (($74*24)|0)|0);
   $78 = ((($77)) + 16|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $i;
   $81 = $gl;
   $82 = ((($81)) + 740|0);
   $83 = (($82) + (($80*24)|0)|0);
   $84 = ((($83)) + 20|0);
   $85 = HEAP32[$84>>2]|0;
   _glTexImage2D(3553,0,32993,($79|0),($85|0),0,32993,5121,(0|0));
   $86 = $i;
   $87 = $gl;
   $88 = ((($87)) + 676|0);
   $89 = (($88) + ($86<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   _glFramebufferTexture2D(36160,36064,3553,($90|0),0);
   $91 = (_glCheckFramebufferStatus(36160)|0);
   $status = $91;
   $92 = $status;
   $93 = ($92|0)!=(36053);
   if ($93) {
    $94 = HEAP32[(259664)>>2]|0;
    $95 = ($94|0)!=(0|0);
    $96 = HEAP32[(259664)>>2]|0;
    $97 = HEAP32[544648>>2]|0;
    $98 = $95 ? $96 : $97;
    (_fprintf($98,770105,$vararg_buffer)|0);
    $99 = HEAP32[(259664)>>2]|0;
    $100 = ($99|0)!=(0|0);
    $101 = HEAP32[(259664)>>2]|0;
    $102 = HEAP32[544648>>2]|0;
    $103 = $100 ? $101 : $102;
    (_fflush($103)|0);
   }
   $104 = HEAP8[102648>>0]|0;
   $105 = $104&1;
   if ($105) {
    $106 = HEAP32[(259664)>>2]|0;
    $107 = ($106|0)!=(0|0);
    $108 = HEAP32[(259664)>>2]|0;
    $109 = HEAP32[544648>>2]|0;
    $110 = $107 ? $108 : $109;
    $111 = $i;
    $112 = $i;
    $113 = $gl;
    $114 = ((($113)) + 740|0);
    $115 = (($114) + (($112*24)|0)|0);
    $116 = ((($115)) + 16|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $i;
    $119 = $gl;
    $120 = ((($119)) + 740|0);
    $121 = (($120) + (($118*24)|0)|0);
    $122 = ((($121)) + 20|0);
    $123 = HEAP32[$122>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $111;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $117;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = $123;
    (_fprintf($110,770156,$vararg_buffer1)|0);
    $124 = HEAP32[(259664)>>2]|0;
    $125 = ($124|0)!=(0|0);
    $126 = HEAP32[(259664)>>2]|0;
    $127 = HEAP32[544648>>2]|0;
    $128 = $125 ? $126 : $127;
    (_fflush($128)|0);
   }
  }
  $129 = $i;
  $130 = (($129) + 1)|0;
  $i = $130;
 }
 STACKTOP = sp;return;
}
function _gl_update_input_size($data,$width,$height,$pitch,$clear) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $pitch = $pitch|0;
 $clear = $clear|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gl = 0, $xamt = 0.0, $xamt1 = 0.0, $yamt = 0.0, $yamt2 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $width;
 $2 = $height;
 $3 = $pitch;
 $5 = $clear&1;
 $4 = $5;
 $6 = $0;
 $gl = $6;
 $7 = $1;
 $8 = $gl;
 $9 = ((($8)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $gl;
 $12 = ((($11)) + 1768|0);
 $13 = (($12) + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($7|0)!=($14|0);
 if ($15) {
  label = 3;
 } else {
  $16 = $2;
  $17 = $gl;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $gl;
  $21 = ((($20)) + 1800|0);
  $22 = (($21) + ($19<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($16|0)!=($23|0);
  if ($24) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $25 = $gl;
  $26 = ((($25)) + 472|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $1;
   $30 = $gl;
   $31 = ((($30)) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $gl;
   $34 = ((($33)) + 1768|0);
   $35 = (($34) + ($32<<2)|0);
   HEAP32[$35>>2] = $29;
   $36 = $2;
   $37 = $gl;
   $38 = ((($37)) + 44|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $gl;
   $41 = ((($40)) + 1800|0);
   $42 = (($41) + ($39<<2)|0);
   HEAP32[$42>>2] = $36;
   $43 = $4;
   $44 = $43&1;
   if ($44) {
    $45 = $1;
    $46 = $45<<2;
    $47 = (_get_alignment($46)|0);
    _glPixelStorei(3317,($47|0));
    $48 = $gl;
    $49 = ((($48)) + 1832|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $gl;
    $52 = ((($51)) + 1836|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $gl;
    $55 = ((($54)) + 2032|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $gl;
    $58 = ((($57)) + 2036|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $gl;
    $61 = ((($60)) + 472|0);
    $62 = HEAP32[$61>>2]|0;
    _glTexSubImage2D(3553,0,0,0,($50|0),($53|0),($56|0),($59|0),($62|0));
   }
   $63 = $1;
   $64 = (+($63>>>0));
   $65 = $gl;
   $66 = ((($65)) + 1832|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (+($67>>>0));
   $69 = $64 / $68;
   $xamt = $69;
   $70 = $2;
   $71 = (+($70>>>0));
   $72 = $gl;
   $73 = ((($72)) + 1836|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $76 = $71 / $75;
   $yamt = $76;
   $77 = $gl;
   $78 = ((($77)) + 1840|0);
   $79 = $xamt;
   $80 = $yamt;
   _set_texture_coords($78,$79,$80);
   STACKTOP = sp;return;
  }
 }
 $81 = $1;
 $82 = $gl;
 $83 = ((($82)) + 44|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $gl;
 $86 = ((($85)) + 48|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($84) + ($87))|0;
 $89 = (($88) - 1)|0;
 $90 = $gl;
 $91 = ((($90)) + 48|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($89>>>0) % ($92>>>0))&-1;
 $94 = $gl;
 $95 = ((($94)) + 1768|0);
 $96 = (($95) + ($93<<2)|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($81|0)!=($97|0);
 if (!($98)) {
  $99 = $2;
  $100 = $gl;
  $101 = ((($100)) + 44|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $gl;
  $104 = ((($103)) + 48|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($102) + ($105))|0;
  $107 = (($106) - 1)|0;
  $108 = $gl;
  $109 = ((($108)) + 48|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($107>>>0) % ($110>>>0))&-1;
  $112 = $gl;
  $113 = ((($112)) + 1800|0);
  $114 = (($113) + ($111<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($99|0)!=($115|0);
  if (!($116)) {
   STACKTOP = sp;return;
  }
 }
 $117 = $1;
 $118 = (+($117>>>0));
 $119 = $gl;
 $120 = ((($119)) + 1832|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (+($121>>>0));
 $123 = $118 / $122;
 $xamt1 = $123;
 $124 = $2;
 $125 = (+($124>>>0));
 $126 = $gl;
 $127 = ((($126)) + 1836|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (+($128>>>0));
 $130 = $125 / $129;
 $yamt2 = $130;
 $131 = $gl;
 $132 = ((($131)) + 1840|0);
 $133 = $xamt1;
 $134 = $yamt2;
 _set_texture_coords($132,$133,$134);
 STACKTOP = sp;return;
}
function _get_alignment($pitch) {
 $pitch = $pitch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pitch;
 $2 = $1;
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $0 = 1;
  } else {
   $5 = $1;
   $6 = $5 & 2;
   $7 = ($6|0)!=(0);
   if ($7) {
    $0 = 2;
    break;
   }
   $8 = $1;
   $9 = $8 & 4;
   $10 = ($9|0)!=(0);
   if ($10) {
    $0 = 4;
    break;
   } else {
    $0 = 8;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _set_texture_coords($coords,$xamt,$yamt) {
 $coords = $coords|0;
 $xamt = +$xamt;
 $yamt = +$yamt;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $coords;
 $1 = $xamt;
 $2 = $yamt;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 HEAPF32[$5>>2] = $3;
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 24|0);
 HEAPF32[$8>>2] = $6;
 $9 = $2;
 $10 = $0;
 $11 = ((($10)) + 20|0);
 HEAPF32[$11>>2] = $9;
 $12 = $2;
 $13 = $0;
 $14 = ((($13)) + 28|0);
 HEAPF32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _gl_copy_frame($data,$frame,$width,$height,$pitch) {
 $data = $data|0;
 $frame = $frame|0;
 $width = $width|0;
 $height = $height|0;
 $pitch = $pitch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dst = 0, $gl = 0, $h = 0, $img = 0, $line_bytes = 0, $new_egl = 0, $pitch_width = 0, $src = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $img = sp + 24|0;
 $0 = $data;
 $1 = $frame;
 $2 = $width;
 $3 = $height;
 $4 = $pitch;
 $5 = $0;
 $gl = $5;
 $6 = $gl;
 $7 = ((($6)) + 2472|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 if ($9) {
  HEAP32[$img>>2] = 0;
  $10 = $gl;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = $2;
  $16 = $3;
  $17 = $4;
  $18 = $gl;
  $19 = ((($18)) + 2044|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(4);
  $22 = $gl;
  $23 = ((($22)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_iiiiiiii[$13 & 127]($14,$15,$16,$17,$21,$24,$img)|0);
  $26 = $25&1;
  $new_egl = $26;
  $27 = HEAP32[$img>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = HEAP32[(259664)>>2]|0;
   $30 = ($29|0)!=(0|0);
   $31 = HEAP32[(259664)>>2]|0;
   $32 = HEAP32[544648>>2]|0;
   $33 = $30 ? $31 : $32;
   (_fprintf($33,770049,$vararg_buffer)|0);
   $34 = HEAP32[(259664)>>2]|0;
   $35 = ($34|0)!=(0|0);
   $36 = HEAP32[(259664)>>2]|0;
   $37 = HEAP32[544648>>2]|0;
   $38 = $35 ? $36 : $37;
   (_fflush($38)|0);
   STACKTOP = sp;return;
  }
  $39 = $new_egl;
  $40 = $39&1;
  if (!($40)) {
   STACKTOP = sp;return;
  }
  $41 = HEAP32[295676>>2]|0;
  $42 = HEAP32[$img>>2]|0;
  FUNCTION_TABLE_vii[$41 & 1023](3553,$42);
  STACKTOP = sp;return;
 }
 $43 = $2;
 $44 = $gl;
 $45 = ((($44)) + 2044|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = Math_imul($43, $46)|0;
 $48 = (_get_alignment($47)|0);
 _glPixelStorei(3317,($48|0));
 $49 = $gl;
 $50 = ((($49)) + 2044|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(4);
 if ($52) {
  $53 = HEAP8[(188)>>0]|0;
  $54 = $53&1;
  if ($54) {
   $55 = $gl;
   $56 = $gl;
   $57 = ((($56)) + 476|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $1;
   $60 = $2;
   $61 = $3;
   $62 = $4;
   _gl_convert_frame_argb8888_abgr8888($55,$58,$59,$60,$61,$62);
   $63 = $2;
   $64 = $3;
   $65 = $gl;
   $66 = ((($65)) + 2032|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $gl;
   $69 = ((($68)) + 2036|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $gl;
   $72 = ((($71)) + 476|0);
   $73 = HEAP32[$72>>2]|0;
   _glTexSubImage2D(3553,0,0,0,($63|0),($64|0),($67|0),($70|0),($73|0));
   STACKTOP = sp;return;
  }
 }
 $74 = $4;
 $75 = $gl;
 $76 = ((($75)) + 2044|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($74>>>0) / ($77>>>0))&-1;
 $pitch_width = $78;
 $79 = $2;
 $80 = $pitch_width;
 $81 = ($79|0)==($80|0);
 $82 = $2;
 if ($81) {
  $83 = $3;
  $84 = $gl;
  $85 = ((($84)) + 2032|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $gl;
  $88 = ((($87)) + 2036|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $1;
  _glTexSubImage2D(3553,0,0,0,($82|0),($83|0),($86|0),($89|0),($90|0));
  STACKTOP = sp;return;
 }
 $91 = $gl;
 $92 = ((($91)) + 2044|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = Math_imul($82, $93)|0;
 $line_bytes = $94;
 $95 = $gl;
 $96 = ((($95)) + 476|0);
 $97 = HEAP32[$96>>2]|0;
 $dst = $97;
 $98 = $1;
 $src = $98;
 $h = 0;
 while(1) {
  $99 = $h;
  $100 = $3;
  $101 = ($99>>>0)<($100>>>0);
  if (!($101)) {
   break;
  }
  $102 = $dst;
  $103 = $src;
  $104 = $line_bytes;
  _memcpy(($102|0),($103|0),($104|0))|0;
  $105 = $h;
  $106 = (($105) + 1)|0;
  $h = $106;
  $107 = $4;
  $108 = $src;
  $109 = (($108) + ($107)|0);
  $src = $109;
  $110 = $line_bytes;
  $111 = $dst;
  $112 = (($111) + ($110)|0);
  $dst = $112;
 }
 $113 = $2;
 $114 = $3;
 $115 = $gl;
 $116 = ((($115)) + 2032|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $gl;
 $119 = ((($118)) + 2036|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $gl;
 $122 = ((($121)) + 476|0);
 $123 = HEAP32[$122>>2]|0;
 _glTexSubImage2D(3553,0,0,0,($113|0),($114|0),($117|0),($120|0),($123|0));
 STACKTOP = sp;return;
}
function _gl_convert_frame_argb8888_abgr8888($data,$output,$input,$width,$height,$in_pitch) {
 $data = $data|0;
 $output = $output|0;
 $input = $input|0;
 $width = $width|0;
 $height = $height|0;
 $in_pitch = $in_pitch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $output;
 $2 = $input;
 $3 = $width;
 $4 = $height;
 $5 = $in_pitch;
 $6 = $0;
 $gl = $6;
 $7 = $3;
 $8 = $gl;
 $9 = ((($8)) + 480|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)!=($10|0);
 if ($11) {
  label = 3;
 } else {
  $12 = $4;
  $13 = $gl;
  $14 = ((($13)) + 480|0);
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($12|0)!=($16|0);
  if ($17) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $18 = $3;
  $19 = $gl;
  $20 = ((($19)) + 480|0);
  HEAP32[$20>>2] = $18;
  $21 = $4;
  $22 = $gl;
  $23 = ((($22)) + 480|0);
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $21;
  $25 = $3;
  $26 = $gl;
  $27 = ((($26)) + 480|0);
  $28 = ((($27)) + 12|0);
  HEAP32[$28>>2] = $25;
  $29 = $4;
  $30 = $gl;
  $31 = ((($30)) + 480|0);
  $32 = ((($31)) + 16|0);
  HEAP32[$32>>2] = $29;
  $33 = $gl;
  $34 = ((($33)) + 480|0);
  $35 = ((($34)) + 24|0);
  HEAP32[$35>>2] = 0;
  $36 = $gl;
  $37 = ((($36)) + 480|0);
  $38 = ((($37)) + 28|0);
  HEAP32[$38>>2] = 1;
  $39 = $gl;
  $40 = ((($39)) + 480|0);
  $41 = ((($40)) + 32|0);
  HEAP32[$41>>2] = 1;
  $42 = $gl;
  $43 = ((($42)) + 480|0);
  (_scaler_ctx_gen_filter($43)|0);
 }
 $44 = $5;
 $45 = $gl;
 $46 = ((($45)) + 480|0);
 $47 = ((($46)) + 8|0);
 HEAP32[$47>>2] = $44;
 $48 = $3;
 $49 = $48<<2;
 $50 = $gl;
 $51 = ((($50)) + 480|0);
 $52 = ((($51)) + 20|0);
 HEAP32[$52>>2] = $49;
 $53 = $gl;
 $54 = ((($53)) + 480|0);
 $55 = $1;
 $56 = $2;
 _scaler_ctx_scale($54,$55,$56);
 STACKTOP = sp;return;
}
function _gl_frame_fbo($data,$tex_info) {
 $data = $data|0;
 $tex_info = $tex_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fbo_info = 0, $fbo_tex_coords = 0, $fbo_tex_info = 0, $fbo_tex_info_cnt = 0, $gl = 0, $i = 0, $prev_rect = 0, $rect = 0, $xamt = 0.0, $xamt1 = 0.0, $yamt = 0.0, $yamt2 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 928|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fbo_tex_coords = sp + 872|0;
 $fbo_tex_info = sp + 24|0;
 $0 = $data;
 $1 = $tex_info;
 $2 = $0;
 $gl = $2;
 ;HEAP32[$fbo_tex_coords>>2]=0|0;HEAP32[$fbo_tex_coords+4>>2]=0|0;HEAP32[$fbo_tex_coords+8>>2]=0|0;HEAP32[$fbo_tex_coords+12>>2]=0|0;HEAP32[$fbo_tex_coords+16>>2]=0|0;HEAP32[$fbo_tex_coords+20>>2]=0|0;HEAP32[$fbo_tex_coords+24>>2]=0|0;HEAP32[$fbo_tex_coords+28>>2]=0|0;
 $3 = $gl;
 $4 = ((($3)) + 2000|0);
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = $fbo_tex_coords;
 $fbo_tex_info_cnt = 0;
 $i = 1;
 while(1) {
  $6 = $i;
  $7 = $gl;
  $8 = ((($7)) + 1636|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = (($11) - 1)|0;
  $13 = $gl;
  $14 = ((($13)) + 740|0);
  $15 = (($14) + (($12*24)|0)|0);
  $prev_rect = $15;
  $16 = $i;
  $17 = $gl;
  $18 = ((($17)) + 740|0);
  $19 = (($18) + (($16*24)|0)|0);
  $rect = $19;
  $20 = $i;
  $21 = (($20) - 1)|0;
  $22 = (($fbo_tex_info) + (($21*52)|0)|0);
  $fbo_info = $22;
  $23 = $prev_rect;
  $24 = HEAP32[$23>>2]|0;
  $25 = (+($24>>>0));
  $26 = $prev_rect;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($28>>>0));
  $30 = $25 / $29;
  $xamt = $30;
  $31 = $prev_rect;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (+($33>>>0));
  $35 = $prev_rect;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (+($37>>>0));
  $39 = $34 / $38;
  $yamt = $39;
  $40 = $xamt;
  $41 = $yamt;
  _set_texture_coords($fbo_tex_coords,$40,$41);
  $42 = $i;
  $43 = (($42) - 1)|0;
  $44 = $gl;
  $45 = ((($44)) + 676|0);
  $46 = (($45) + ($43<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $fbo_info;
  HEAP32[$48>>2] = $47;
  $49 = $prev_rect;
  $50 = HEAP32[$49>>2]|0;
  $51 = (+($50>>>0));
  $52 = $fbo_info;
  $53 = ((($52)) + 4|0);
  HEAPF32[$53>>2] = $51;
  $54 = $prev_rect;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (+($56>>>0));
  $58 = $fbo_info;
  $59 = ((($58)) + 4|0);
  $60 = ((($59)) + 4|0);
  HEAPF32[$60>>2] = $57;
  $61 = $prev_rect;
  $62 = ((($61)) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (+($63>>>0));
  $65 = $fbo_info;
  $66 = ((($65)) + 12|0);
  HEAPF32[$66>>2] = $64;
  $67 = $prev_rect;
  $68 = ((($67)) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (+($69>>>0));
  $71 = $fbo_info;
  $72 = ((($71)) + 12|0);
  $73 = ((($72)) + 4|0);
  HEAPF32[$73>>2] = $70;
  $74 = $fbo_info;
  $75 = ((($74)) + 20|0);
  ;HEAP32[$75>>2]=HEAP32[$fbo_tex_coords>>2]|0;HEAP32[$75+4>>2]=HEAP32[$fbo_tex_coords+4>>2]|0;HEAP32[$75+8>>2]=HEAP32[$fbo_tex_coords+8>>2]|0;HEAP32[$75+12>>2]=HEAP32[$fbo_tex_coords+12>>2]|0;HEAP32[$75+16>>2]=HEAP32[$fbo_tex_coords+16>>2]|0;HEAP32[$75+20>>2]=HEAP32[$fbo_tex_coords+20>>2]|0;HEAP32[$75+24>>2]=HEAP32[$fbo_tex_coords+24>>2]|0;HEAP32[$75+28>>2]=HEAP32[$fbo_tex_coords+28>>2]|0;
  $76 = $i;
  $77 = $gl;
  $78 = ((($77)) + 612|0);
  $79 = (($78) + ($76<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  _glBindFramebuffer(36160,($80|0));
  $81 = $gl;
  $82 = ((($81)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)!=(0|0);
  if ($84) {
   $85 = $gl;
   $86 = ((($85)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($87)) + 12|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $i;
   $91 = (($90) + 1)|0;
   FUNCTION_TABLE_vi[$89 & 1023]($91);
  }
  $92 = $i;
  $93 = (($92) - 1)|0;
  $94 = $gl;
  $95 = ((($94)) + 676|0);
  $96 = (($95) + ($93<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  _glBindTexture(3553,($97|0));
  _glClear(16384);
  $98 = $gl;
  $99 = $rect;
  $100 = HEAP32[$99>>2]|0;
  $101 = $rect;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  _gl_set_viewport($98,$100,$103,1,0);
  $104 = $gl;
  $105 = ((($104)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)!=(0|0);
  if ($107) {
   $108 = $gl;
   $109 = ((($108)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ((($110)) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $prev_rect;
   $114 = HEAP32[$113>>2]|0;
   $115 = $prev_rect;
   $116 = ((($115)) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $prev_rect;
   $119 = ((($118)) + 16|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $prev_rect;
   $122 = ((($121)) + 20|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $gl;
   $125 = ((($124)) + 1736|0);
   $126 = ((($125)) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $gl;
   $129 = ((($128)) + 1736|0);
   $130 = ((($129)) + 12|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = HEAP32[(259432)>>2]|0;
   $133 = $1;
   $134 = $gl;
   $135 = ((($134)) + 52|0);
   $136 = $fbo_tex_info_cnt;
   FUNCTION_TABLE_viiiiiiiiiii[$112 & 127]($114,$117,$120,$123,$127,$131,$132,$133,$135,$fbo_tex_info,$136);
  }
  $137 = $gl;
  $138 = $gl;
  $139 = ((($138)) + 2000|0);
  $140 = $gl;
  $141 = ((($140)) + 1872|0);
  _gl_shader_set_coords($137,$139,$141);
  _glDrawArrays(5,0,4);
  $142 = $fbo_tex_info_cnt;
  $143 = (($142) + 1)|0;
  $fbo_tex_info_cnt = $143;
  $144 = $i;
  $145 = (($144) + 1)|0;
  $i = $145;
 }
 $146 = $gl;
 $147 = ((($146)) + 1636|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($148) - 1)|0;
 $150 = $gl;
 $151 = ((($150)) + 740|0);
 $152 = (($151) + (($149*24)|0)|0);
 $prev_rect = $152;
 $153 = $prev_rect;
 $154 = HEAP32[$153>>2]|0;
 $155 = (+($154>>>0));
 $156 = $prev_rect;
 $157 = ((($156)) + 16|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (+($158>>>0));
 $160 = $155 / $159;
 $xamt1 = $160;
 $161 = $prev_rect;
 $162 = ((($161)) + 4|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (+($163>>>0));
 $165 = $prev_rect;
 $166 = ((($165)) + 20|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (+($167>>>0));
 $169 = $164 / $168;
 $yamt2 = $169;
 $170 = $xamt1;
 $171 = $yamt2;
 _set_texture_coords($fbo_tex_coords,$170,$171);
 _glBindFramebuffer(36160,0);
 $172 = $gl;
 $173 = ((($172)) + 4|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ($174|0)!=(0|0);
 if ($175) {
  $176 = $gl;
  $177 = ((($176)) + 4|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($178)) + 12|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = $gl;
  $182 = ((($181)) + 1636|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($183) + 1)|0;
  FUNCTION_TABLE_vi[$180 & 1023]($184);
 }
 $185 = $gl;
 $186 = ((($185)) + 1636|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = (($187) - 1)|0;
 $189 = $gl;
 $190 = ((($189)) + 676|0);
 $191 = (($190) + ($188<<2)|0);
 $192 = HEAP32[$191>>2]|0;
 _glBindTexture(3553,($192|0));
 _glClear(16384);
 $193 = $gl;
 $194 = $gl;
 $195 = ((($194)) + 1728|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = $gl;
 $198 = ((($197)) + 1732|0);
 $199 = HEAP32[$198>>2]|0;
 _gl_set_viewport($193,$196,$199,0,1);
 $200 = $gl;
 $201 = ((($200)) + 4|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ($202|0)!=(0|0);
 if (!($203)) {
  $233 = $gl;
  $234 = ((($233)) + 2016|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $gl;
  $237 = ((($236)) + 2000|0);
  HEAP32[$237>>2] = $235;
  $238 = $gl;
  $239 = $gl;
  $240 = ((($239)) + 2000|0);
  $241 = $gl;
  $242 = ((($241)) + 1872|0);
  _gl_shader_set_coords($238,$240,$242);
  _glDrawArrays(5,0,4);
  $243 = $gl;
  $244 = ((($243)) + 1840|0);
  $245 = $gl;
  $246 = ((($245)) + 2000|0);
  $247 = ((($246)) + 8|0);
  HEAP32[$247>>2] = $244;
  STACKTOP = sp;return;
 }
 $204 = $gl;
 $205 = ((($204)) + 4|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ((($206)) + 8|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = $prev_rect;
 $210 = HEAP32[$209>>2]|0;
 $211 = $prev_rect;
 $212 = ((($211)) + 4|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = $prev_rect;
 $215 = ((($214)) + 16|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = $prev_rect;
 $218 = ((($217)) + 20|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = $gl;
 $221 = ((($220)) + 1736|0);
 $222 = ((($221)) + 8|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = $gl;
 $225 = ((($224)) + 1736|0);
 $226 = ((($225)) + 12|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = HEAP32[(259432)>>2]|0;
 $229 = $1;
 $230 = $gl;
 $231 = ((($230)) + 52|0);
 $232 = $fbo_tex_info_cnt;
 FUNCTION_TABLE_viiiiiiiiiii[$208 & 127]($210,$213,$216,$219,$223,$227,$228,$229,$231,$fbo_tex_info,$232);
 $233 = $gl;
 $234 = ((($233)) + 2016|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = $gl;
 $237 = ((($236)) + 2000|0);
 HEAP32[$237>>2] = $235;
 $238 = $gl;
 $239 = $gl;
 $240 = ((($239)) + 2000|0);
 $241 = $gl;
 $242 = ((($241)) + 1872|0);
 _gl_shader_set_coords($238,$240,$242);
 _glDrawArrays(5,0,4);
 $243 = $gl;
 $244 = ((($243)) + 1840|0);
 $245 = $gl;
 $246 = ((($245)) + 2000|0);
 $247 = ((($246)) + 8|0);
 HEAP32[$247>>2] = $244;
 STACKTOP = sp;return;
}
function _gl_set_prev_texture($data,$tex_info) {
 $data = $data|0;
 $tex_info = $tex_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $tex_info;
 $2 = $0;
 $gl = $2;
 $3 = $gl;
 $4 = ((($3)) + 52|0);
 $5 = ((($4)) + 52|0);
 $6 = $gl;
 $7 = ((($6)) + 52|0);
 $8 = $gl;
 $9 = ((($8)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - 1)|0;
 $12 = ($11*52)|0;
 _memmove(($5|0),($7|0),($12|0))|0;
 $13 = $gl;
 $14 = ((($13)) + 52|0);
 $15 = $1;
 dest=$14; src=$15; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _gl_draw_texture($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $color = 0;
 var $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $color = sp;
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 2572|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 HEAPF32[$color>>2] = 1.0;
 $6 = ((($color)) + 4|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = ((($6)) + 4|0);
 HEAPF32[$7>>2] = 1.0;
 $8 = ((($7)) + 4|0);
 $9 = $gl;
 $10 = ((($9)) + 2580|0);
 $11 = +HEAPF32[$10>>2];
 HEAPF32[$8>>2] = $11;
 $12 = ((($8)) + 4|0);
 HEAPF32[$12>>2] = 1.0;
 $13 = ((($12)) + 4|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = ((($13)) + 4|0);
 HEAPF32[$14>>2] = 1.0;
 $15 = ((($14)) + 4|0);
 $16 = $gl;
 $17 = ((($16)) + 2580|0);
 $18 = +HEAPF32[$17>>2];
 HEAPF32[$15>>2] = $18;
 $19 = ((($15)) + 4|0);
 HEAPF32[$19>>2] = 1.0;
 $20 = ((($19)) + 4|0);
 HEAPF32[$20>>2] = 1.0;
 $21 = ((($20)) + 4|0);
 HEAPF32[$21>>2] = 1.0;
 $22 = ((($21)) + 4|0);
 $23 = $gl;
 $24 = ((($23)) + 2580|0);
 $25 = +HEAPF32[$24>>2];
 HEAPF32[$22>>2] = $25;
 $26 = ((($22)) + 4|0);
 HEAPF32[$26>>2] = 1.0;
 $27 = ((($26)) + 4|0);
 HEAPF32[$27>>2] = 1.0;
 $28 = ((($27)) + 4|0);
 HEAPF32[$28>>2] = 1.0;
 $29 = ((($28)) + 4|0);
 $30 = $gl;
 $31 = ((($30)) + 2580|0);
 $32 = +HEAPF32[$31>>2];
 HEAPF32[$29>>2] = $32;
 $33 = $gl;
 $34 = ((($33)) + 2000|0);
 HEAP32[$34>>2] = 270436;
 $35 = $gl;
 $36 = ((($35)) + 2000|0);
 $37 = ((($36)) + 8|0);
 HEAP32[$37>>2] = 270532;
 $38 = $gl;
 $39 = ((($38)) + 2000|0);
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = $color;
 $41 = $gl;
 $42 = ((($41)) + 2572|0);
 $43 = HEAP32[$42>>2]|0;
 _glBindTexture(3553,($43|0));
 $44 = $gl;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $gl;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  FUNCTION_TABLE_vi[$52 & 1023](15);
 }
 $53 = $gl;
 $54 = $gl;
 $55 = ((($54)) + 2000|0);
 $56 = $gl;
 $57 = ((($56)) + 1936|0);
 _gl_shader_set_coords($53,$55,$57);
 _glEnable(3042);
 $58 = $gl;
 $59 = ((($58)) + 2577|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&1;
 if ($61) {
  $62 = $gl;
  $63 = ((($62)) + 1728|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $gl;
  $66 = ((($65)) + 1732|0);
  $67 = HEAP32[$66>>2]|0;
  _glViewport(0,0,($64|0),($67|0));
  _glDrawArrays(5,0,4);
  $68 = $gl;
  $69 = ((($68)) + 1736|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $gl;
  $72 = ((($71)) + 1736|0);
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $gl;
  $76 = ((($75)) + 1736|0);
  $77 = ((($76)) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $gl;
  $80 = ((($79)) + 1736|0);
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  _glViewport(($70|0),($74|0),($78|0),($82|0));
 } else {
  _glDrawArrays(5,0,4);
 }
 _glDisable(3042);
 $83 = $gl;
 $84 = ((($83)) + 2016|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $gl;
 $87 = ((($86)) + 2000|0);
 HEAP32[$87>>2] = $85;
 $88 = $gl;
 $89 = ((($88)) + 1840|0);
 $90 = $gl;
 $91 = ((($90)) + 2000|0);
 $92 = ((($91)) + 8|0);
 HEAP32[$92>>2] = $89;
 $93 = $gl;
 $94 = ((($93)) + 2020|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $gl;
 $97 = ((($96)) + 2000|0);
 $98 = ((($97)) + 4|0);
 HEAP32[$98>>2] = $95;
 STACKTOP = sp;return;
}
function _gl_render_overlay($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $gl = 0;
 var $white_color_mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $white_color_mod = sp;
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 2500|0);
 $4 = HEAP32[$3>>2]|0;
 _glBindTexture(3553,($4|0));
 HEAPF32[$white_color_mod>>2] = 1.0;
 $5 = ((($white_color_mod)) + 4|0);
 HEAPF32[$5>>2] = 1.0;
 $6 = ((($5)) + 4|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = ((($6)) + 4|0);
 $8 = $gl;
 $9 = ((($8)) + 2568|0);
 $10 = +HEAPF32[$9>>2];
 HEAPF32[$7>>2] = $10;
 $11 = ((($7)) + 4|0);
 HEAPF32[$11>>2] = 1.0;
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = 1.0;
 $13 = ((($12)) + 4|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = ((($13)) + 4|0);
 $15 = $gl;
 $16 = ((($15)) + 2568|0);
 $17 = +HEAPF32[$16>>2];
 HEAPF32[$14>>2] = $17;
 $18 = ((($14)) + 4|0);
 HEAPF32[$18>>2] = 1.0;
 $19 = ((($18)) + 4|0);
 HEAPF32[$19>>2] = 1.0;
 $20 = ((($19)) + 4|0);
 HEAPF32[$20>>2] = 1.0;
 $21 = ((($20)) + 4|0);
 $22 = $gl;
 $23 = ((($22)) + 2568|0);
 $24 = +HEAPF32[$23>>2];
 HEAPF32[$21>>2] = $24;
 $25 = ((($21)) + 4|0);
 HEAPF32[$25>>2] = 1.0;
 $26 = ((($25)) + 4|0);
 HEAPF32[$26>>2] = 1.0;
 $27 = ((($26)) + 4|0);
 HEAPF32[$27>>2] = 1.0;
 $28 = ((($27)) + 4|0);
 $29 = $gl;
 $30 = ((($29)) + 2568|0);
 $31 = +HEAPF32[$30>>2];
 HEAPF32[$28>>2] = $31;
 $32 = $gl;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $gl;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 1023](15);
 }
 _glEnable(3042);
 $41 = $gl;
 $42 = ((($41)) + 2536|0);
 $43 = $gl;
 $44 = ((($43)) + 2000|0);
 HEAP32[$44>>2] = $42;
 $45 = $gl;
 $46 = ((($45)) + 2504|0);
 $47 = $gl;
 $48 = ((($47)) + 2000|0);
 $49 = ((($48)) + 8|0);
 HEAP32[$49>>2] = $46;
 $50 = $gl;
 $51 = ((($50)) + 2000|0);
 $52 = ((($51)) + 4|0);
 HEAP32[$52>>2] = $white_color_mod;
 $53 = $gl;
 $54 = $gl;
 $55 = ((($54)) + 2000|0);
 $56 = $gl;
 $57 = ((($56)) + 1936|0);
 _gl_shader_set_coords($53,$55,$57);
 $58 = $gl;
 $59 = ((($58)) + 2497|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&1;
 if ($61) {
  $62 = $gl;
  $63 = ((($62)) + 1728|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $gl;
  $66 = ((($65)) + 1732|0);
  $67 = HEAP32[$66>>2]|0;
  _glViewport(0,0,($64|0),($67|0));
  _glDrawArrays(5,0,4);
  $68 = $gl;
  $69 = ((($68)) + 1736|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $gl;
  $72 = ((($71)) + 1736|0);
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $gl;
  $76 = ((($75)) + 1736|0);
  $77 = ((($76)) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $gl;
  $80 = ((($79)) + 1736|0);
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  _glViewport(($70|0),($74|0),($78|0),($82|0));
  _glDisable(3042);
  $83 = $gl;
  $84 = ((($83)) + 2016|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $gl;
  $87 = ((($86)) + 2000|0);
  HEAP32[$87>>2] = $85;
  $88 = $gl;
  $89 = ((($88)) + 1840|0);
  $90 = $gl;
  $91 = ((($90)) + 2000|0);
  $92 = ((($91)) + 8|0);
  HEAP32[$92>>2] = $89;
  $93 = $gl;
  $94 = ((($93)) + 2020|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $gl;
  $97 = ((($96)) + 2000|0);
  $98 = ((($97)) + 4|0);
  HEAP32[$98>>2] = $95;
  STACKTOP = sp;return;
 } else {
  _glDrawArrays(5,0,4);
  _glDisable(3042);
  $83 = $gl;
  $84 = ((($83)) + 2016|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $gl;
  $87 = ((($86)) + 2000|0);
  HEAP32[$87>>2] = $85;
  $88 = $gl;
  $89 = ((($88)) + 1840|0);
  $90 = $gl;
  $91 = ((($90)) + 2000|0);
  $92 = ((($91)) + 8|0);
  HEAP32[$92>>2] = $89;
  $93 = $gl;
  $94 = ((($93)) + 2020|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $gl;
  $97 = ((($96)) + 2000|0);
  $98 = ((($97)) + 4|0);
  HEAP32[$98>>2] = $95;
  STACKTOP = sp;return;
 }
}
function _gl_set_nonblock_state($data,$state) {
 $data = $data|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $data;
 $2 = $state&1;
 $1 = $2;
 $3 = HEAP8[102648>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = HEAP32[(259664)>>2]|0;
  $6 = ($5|0)!=(0|0);
  $7 = HEAP32[(259664)>>2]|0;
  $8 = HEAP32[544648>>2]|0;
  $9 = $6 ? $7 : $8;
  $10 = $1;
  $11 = $10&1;
  $12 = $11 ? 770015 : 770019;
  HEAP32[$vararg_buffer>>2] = $12;
  (_fprintf($9,770022,$vararg_buffer)|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = HEAP32[(259664)>>2]|0;
  $16 = HEAP32[544648>>2]|0;
  $17 = $14 ? $15 : $16;
  (_fflush($17)|0);
 }
 $18 = $0;
 $gl = $18;
 $19 = $gl;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $1;
 $24 = $23&1;
 $25 = HEAP32[(316)>>2]|0;
 $26 = $24 ? 0 : $25;
 FUNCTION_TABLE_vi[$22 & 1023]($26);
 STACKTOP = sp;return;
}
function _gl_alive($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, $quit = 0, $resize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $quit = sp + 9|0;
 $resize = sp + 8|0;
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $gl;
 $7 = ((($6)) + 1728|0);
 $8 = $gl;
 $9 = ((($8)) + 1732|0);
 $10 = HEAP32[(259432)>>2]|0;
 FUNCTION_TABLE_viiiii[$5 & 511]($quit,$resize,$7,$9,$10);
 $11 = HEAP8[$quit>>0]|0;
 $12 = $11&1;
 if ($12) {
  $13 = $gl;
  $14 = ((($13)) + 1712|0);
  HEAP8[$14>>0] = 1;
 } else {
  $15 = HEAP8[$resize>>0]|0;
  $16 = $15&1;
  if ($16) {
   $17 = $gl;
   $18 = ((($17)) + 1711|0);
   HEAP8[$18>>0] = 1;
  }
 }
 $19 = $gl;
 $20 = ((($19)) + 1712|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&1;
 $23 = $22 ^ 1;
 STACKTOP = sp;return ($23|0);
}
function _gl_focus($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_i[$5 & 511]()|0);
 STACKTOP = sp;return ($6|0);
}
function _gl_set_shader($data,$type,$path) {
 $data = $data|0;
 $type = $type|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $gl = 0, $ret = 0, $textures = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 41|0;
 $1 = $data;
 $2 = $type;
 $3 = $path;
 $4 = $1;
 $gl = $4;
 $5 = $2;
 $6 = ($5|0)==(3);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $127 = $$pre_trunc&1;
  STACKTOP = sp;return ($127|0);
 }
 $7 = $gl;
 _gl_shader_deinit($7);
 $8 = $2;
 $cond = ($8|0)==(2);
 $9 = $gl;
 $10 = ((($9)) + 4|0);
 if ($cond) {
  HEAP32[$10>>2] = 270828;
 } else {
  HEAP32[$10>>2] = 0;
 }
 $11 = $gl;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = HEAP32[(259664)>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = HEAP32[(259664)>>2]|0;
  $18 = HEAP32[544648>>2]|0;
  $19 = $16 ? $17 : $18;
  $20 = $3;
  HEAP32[$vararg_buffer>>2] = $20;
  (_fprintf($19,769832,$vararg_buffer)|0);
  $21 = HEAP32[(259664)>>2]|0;
  $22 = ($21|0)!=(0|0);
  $23 = HEAP32[(259664)>>2]|0;
  $24 = HEAP32[544648>>2]|0;
  $25 = $22 ? $23 : $24;
  (_fflush($25)|0);
  $$expand_i1_val7 = 0;
  HEAP8[$0>>0] = $$expand_i1_val7;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $127 = $$pre_trunc&1;
  STACKTOP = sp;return ($127|0);
 }
 $26 = $gl;
 _gl_deinit_fbo($26);
 $27 = $gl;
 $28 = ((($27)) + 44|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $gl;
 $31 = ((($30)) + 12|0);
 $32 = (($31) + ($29<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 _glBindTexture(3553,($33|0));
 $34 = $gl;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = (FUNCTION_TABLE_ii[$37 & 511]($38)|0);
 if (!($39)) {
  $40 = HEAP32[(259664)>>2]|0;
  $41 = ($40|0)!=(0|0);
  $42 = HEAP32[(259664)>>2]|0;
  $43 = HEAP32[544648>>2]|0;
  $44 = $41 ? $42 : $43;
  (_fprintf($44,769898,$vararg_buffer1)|0);
  $45 = HEAP32[(259664)>>2]|0;
  $46 = ($45|0)!=(0|0);
  $47 = HEAP32[(259664)>>2]|0;
  $48 = HEAP32[544648>>2]|0;
  $49 = $46 ? $47 : $48;
  (_fflush($49)|0);
  $50 = $gl;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  $54 = (FUNCTION_TABLE_ii[$53 & 511](0)|0);
  $55 = $54&1;
  $ret = $55;
  $56 = $ret;
  $57 = $56&1;
  if (!($57)) {
   $58 = $gl;
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  $$expand_i1_val9 = 0;
  HEAP8[$0>>0] = $$expand_i1_val9;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $127 = $$pre_trunc&1;
  STACKTOP = sp;return ($127|0);
 }
 $60 = $gl;
 _gl_update_tex_filter_frame($60);
 $61 = $gl;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  $65 = $gl;
  $66 = ((($65)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($67)) + 40|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_i[$69 & 511]()|0);
  $71 = (($70) + 1)|0;
  $textures = $71;
  $72 = $textures;
  $73 = $gl;
  $74 = ((($73)) + 48|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($72>>>0)>($75>>>0);
  if ($76) {
   $77 = $gl;
   _gl_deinit_hw_render($77);
   $78 = $gl;
   $79 = ((($78)) + 48|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $gl;
   $82 = ((($81)) + 12|0);
   _glDeleteTextures(($80|0),($82|0));
   $83 = $textures;
   $84 = $gl;
   $85 = ((($84)) + 48|0);
   HEAP32[$85>>2] = $83;
   $86 = HEAP8[102648>>0]|0;
   $87 = $86&1;
   if ($87) {
    $88 = HEAP32[(259664)>>2]|0;
    $89 = ($88|0)!=(0|0);
    $90 = HEAP32[(259664)>>2]|0;
    $91 = HEAP32[544648>>2]|0;
    $92 = $89 ? $90 : $91;
    $93 = $gl;
    $94 = ((($93)) + 48|0);
    $95 = HEAP32[$94>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $95;
    (_fprintf($92,769980,$vararg_buffer3)|0);
    $96 = HEAP32[(259664)>>2]|0;
    $97 = ($96|0)!=(0|0);
    $98 = HEAP32[(259664)>>2]|0;
    $99 = HEAP32[544648>>2]|0;
    $100 = $97 ? $98 : $99;
    (_fflush($100)|0);
   }
   $101 = $gl;
   $102 = ((($101)) + 44|0);
   HEAP32[$102>>2] = 0;
   $103 = $gl;
   $104 = $gl;
   $105 = ((($104)) + 2476|0);
   _gl_init_textures($103,$105);
   $106 = $gl;
   _gl_init_textures_data($106);
   $107 = $gl;
   $108 = ((($107)) + 1710|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&1;
   if ($110) {
    $111 = $gl;
    $112 = $gl;
    $113 = ((($112)) + 1832|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $gl;
    $116 = ((($115)) + 1836|0);
    $117 = HEAP32[$116>>2]|0;
    (_gl_init_hw_render($111,$114,$117)|0);
   }
  }
 }
 $118 = $gl;
 $119 = $gl;
 $120 = ((($119)) + 1832|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $gl;
 $123 = ((($122)) + 1836|0);
 $124 = HEAP32[$123>>2]|0;
 _gl_init_fbo($118,$121,$124);
 $125 = $gl;
 _gl_set_shader_viewport($125,0);
 $126 = $gl;
 _gl_set_shader_viewport($126,1);
 $$expand_i1_val11 = 1;
 HEAP8[$0>>0] = $$expand_i1_val11;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $127 = $$pre_trunc&1;
 STACKTOP = sp;return ($127|0);
}
function _gl_shader_deinit($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $gl;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_v[$10 & 511]();
 }
 $11 = $gl;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _gl_update_tex_filter_frame($gl) {
 $gl = $gl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $i = 0, $new_filt = 0, $smooth = 0, $wrap_mode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $smooth = sp + 16|0;
 $0 = $gl;
 HEAP8[$smooth>>0] = 0;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iii[$9 & 511](1,$smooth)|0);
  if (!($10)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $11 = HEAP8[(324)>>0]|0;
  $12 = $11&1;
  $13 = $12&1;
  HEAP8[$smooth>>0] = $13;
 }
 $14 = $0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_ii[$22 & 511](1)|0);
  $24 = $23;
 } else {
  $24 = 0;
 }
 $25 = (_gl_wrap_type_to_enum($24)|0);
 $wrap_mode = $25;
 $26 = HEAP8[$smooth>>0]|0;
 $27 = $26&1;
 $28 = $0;
 $29 = ((($28)) + 2476|0);
 $30 = ((($29)) + 11|0);
 $31 = $27&1;
 HEAP8[$30>>0] = $31;
 $32 = HEAP8[$smooth>>0]|0;
 $33 = $32&1;
 $34 = $33 ? 9729 : 9728;
 $new_filt = $34;
 $35 = $new_filt;
 $36 = $0;
 $37 = ((($36)) + 468|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($35|0)==($38|0);
 if ($39) {
  $40 = $wrap_mode;
  $41 = $0;
  $42 = ((($41)) + 2040|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($40|0)==($43|0);
  if ($44) {
   STACKTOP = sp;return;
  }
 }
 $45 = $new_filt;
 $46 = $0;
 $47 = ((($46)) + 468|0);
 HEAP32[$47>>2] = $45;
 $48 = $wrap_mode;
 $49 = $0;
 $50 = ((($49)) + 2040|0);
 HEAP32[$50>>2] = $48;
 $i = 0;
 while(1) {
  $51 = $i;
  $52 = $0;
  $53 = ((($52)) + 48|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51>>>0)<($54>>>0);
  if (!($55)) {
   break;
  }
  $56 = $i;
  $57 = $0;
  $58 = ((($57)) + 12|0);
  $59 = (($58) + ($56<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $i;
   $63 = $0;
   $64 = ((($63)) + 12|0);
   $65 = (($64) + ($62<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   _glBindTexture(3553,($66|0));
   $67 = $0;
   $68 = ((($67)) + 2040|0);
   $69 = HEAP32[$68>>2]|0;
   _glTexParameteri(3553,10242,($69|0));
   $70 = $0;
   $71 = ((($70)) + 2040|0);
   $72 = HEAP32[$71>>2]|0;
   _glTexParameteri(3553,10243,($72|0));
   $73 = $0;
   $74 = ((($73)) + 468|0);
   $75 = HEAP32[$74>>2]|0;
   _glTexParameteri(3553,10240,($75|0));
   $76 = $0;
   $77 = ((($76)) + 468|0);
   $78 = HEAP32[$77>>2]|0;
   _glTexParameteri(3553,10241,($78|0));
  }
  $79 = $i;
  $80 = (($79) + 1)|0;
  $i = $80;
 }
 $81 = $0;
 $82 = ((($81)) + 44|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $0;
 $85 = ((($84)) + 12|0);
 $86 = (($85) + ($83<<2)|0);
 $87 = HEAP32[$86>>2]|0;
 _glBindTexture(3553,($87|0));
 STACKTOP = sp;return;
}
function _gl_deinit_hw_render($gl) {
 $gl = $gl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gl;
 $1 = $0;
 $2 = ((($1)) + 1708|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 48|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $0;
  $9 = ((($8)) + 1644|0);
  _glDeleteFramebuffers(($7|0),($9|0));
 }
 $10 = $0;
 $11 = ((($10)) + 1709|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 if (!($13)) {
  $19 = $0;
  $20 = ((($19)) + 1708|0);
  HEAP8[$20>>0] = 0;
  STACKTOP = sp;return;
 }
 $14 = $0;
 $15 = ((($14)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = ((($17)) + 1676|0);
 _glDeleteRenderbuffers(($16|0),($18|0));
 $19 = $0;
 $20 = ((($19)) + 1708|0);
 HEAP8[$20>>0] = 0;
 STACKTOP = sp;return;
}
function _gl_free($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 2052|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $gl;
  $7 = ((($6)) + 2052|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $gl;
  FUNCTION_TABLE_vi[$10 & 1023]($11);
 }
 $12 = $gl;
 _gl_shader_deinit($12);
 $13 = $gl;
 $14 = ((($13)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $gl;
 $17 = ((($16)) + 12|0);
 _glDeleteTextures(($15|0),($17|0));
 $18 = $gl;
 $19 = ((($18)) + 2572|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $gl;
  $23 = ((($22)) + 2572|0);
  _glDeleteTextures(1,($23|0));
 }
 $24 = $gl;
 $25 = ((($24)) + 2500|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $gl;
  $29 = ((($28)) + 2500|0);
  _glDeleteTextures(1,($29|0));
 }
 $30 = $gl;
 $31 = ((($30)) + 480|0);
 _scaler_ctx_gen_reset($31);
 $32 = $gl;
 _gl_deinit_fbo($32);
 $33 = $gl;
 _gl_deinit_hw_render($33);
 $34 = $gl;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_v[$37 & 511]();
 $38 = $gl;
 $39 = ((($38)) + 472|0);
 $40 = HEAP32[$39>>2]|0;
 _free($40);
 $41 = $gl;
 $42 = ((($41)) + 476|0);
 $43 = HEAP32[$42>>2]|0;
 _free($43);
 $44 = $gl;
 _free($44);
 STACKTOP = sp;return;
}
function _gl_start() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, $video_info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $video_info = sp + 4|0;
 ;HEAP32[$video_info>>2]=0|0;HEAP32[$video_info+4>>2]=0|0;HEAP32[$video_info+8>>2]=0|0;HEAP32[$video_info+12>>2]=0|0;HEAP32[$video_info+16>>2]=0|0;
 $0 = HEAP8[(312)>>0]|0;
 $1 = $0&1;
 $2 = ((($video_info)) + 9|0);
 $3 = $1&1;
 HEAP8[$2>>0] = $3;
 $4 = ((($video_info)) + 10|0);
 HEAP8[$4>>0] = 0;
 $5 = HEAP8[(324)>>0]|0;
 $6 = $5&1;
 $7 = ((($video_info)) + 11|0);
 $8 = $6&1;
 HEAP8[$7>>0] = $8;
 $9 = ((($video_info)) + 12|0);
 HEAP32[$9>>2] = 2;
 $10 = ((($video_info)) + 8|0);
 HEAP8[$10>>0] = 1;
 $11 = HEAP32[(336)>>2]|0;
 $12 = ($11|0)==(7);
 if ($12) {
  $13 = HEAP32[(259620)>>2]|0;
  HEAP32[$video_info>>2] = $13;
  $14 = HEAP32[(259624)>>2]|0;
  $15 = ((($video_info)) + 4|0);
  HEAP32[$15>>2] = $14;
 }
 $16 = (_gl_init($video_info,0,0)|0);
 HEAP32[(24)>>2] = $16;
 $17 = HEAP32[(24)>>2]|0;
 $gl = $17;
 $18 = $gl;
 _gl_get_poke_interface($18,(216));
 $19 = $gl;
 $20 = +HEAPF32[(16740)>>2];
 $21 = (_gl_font_init_first($19,(12641),$20)|0);
 $22 = $gl;
 $23 = ((($22)) + 2052|0);
 HEAP32[$23>>2] = $21;
 STACKTOP = sp;return;
}
function _gl_restart() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $data = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(24)>>2]|0;
 $gl = $0;
 $1 = $gl;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[(24)>>2]|0;
 $data = $3;
 HEAP32[(24)>>2] = 0;
 $4 = $data;
 _gl_free($4);
 _gl_start();
 STACKTOP = sp;return;
}
function _gl_set_rotation($data,$rotation) {
 $data = $data|0;
 $rotation = $rotation|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gl = 0, $ortho = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ortho = sp;
 $0 = $data;
 $1 = $rotation;
 $2 = $0;
 $gl = $2;
 ;HEAP32[$ortho>>2]=HEAP32[270648>>2]|0;HEAP32[$ortho+4>>2]=HEAP32[270648+4>>2]|0;HEAP32[$ortho+8>>2]=HEAP32[270648+8>>2]|0;HEAP32[$ortho+12>>2]=HEAP32[270648+12>>2]|0;HEAP32[$ortho+16>>2]=HEAP32[270648+16>>2]|0;HEAP32[$ortho+20>>2]=HEAP32[270648+20>>2]|0;
 $3 = $1;
 $4 = ($3*90)|0;
 $5 = $gl;
 $6 = ((($5)) + 1716|0);
 HEAP32[$6>>2] = $4;
 $7 = $gl;
 _gl_set_projection($7,$ortho,1);
 STACKTOP = sp;return;
}
function _gl_viewport_info($data,$vp) {
 $data = $data|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, $top_dist = 0, $top_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $vp;
 $2 = $0;
 $gl = $2;
 $3 = $1;
 $4 = $gl;
 $5 = ((($4)) + 1736|0);
 ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[$5+20>>2]|0;
 $6 = $gl;
 $7 = ((($6)) + 1728|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = $8;
 $11 = $gl;
 $12 = ((($11)) + 1732|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 20|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21))|0;
 $top_y = $22;
 $23 = $gl;
 $24 = ((($23)) + 1732|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $top_y;
 $27 = (($25) - ($26))|0;
 $top_dist = $27;
 $28 = $top_dist;
 $29 = $1;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = $28;
 STACKTOP = sp;return;
}
function _gl_read_viewport($data,$buffer) {
 $data = $data|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0;
 var $i = 0, $num_pixels = 0, $pixels = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $buffer;
 $2 = $0;
 $gl = $2;
 $3 = $gl;
 $4 = ((($3)) + 1708|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if ($6) {
  label = 3;
 } else {
  $7 = $gl;
  $8 = ((($7)) + 1640|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&1;
  if ($10) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _glBindFramebuffer(36160,0);
 }
 $11 = $gl;
 $12 = ((($11)) + 1736|0);
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14*3)|0;
 $16 = (_get_alignment($15)|0);
 _glPixelStorei(3333,($16|0));
 $17 = $gl;
 $18 = ((($17)) + 1736|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $gl;
 $21 = ((($20)) + 1736|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $gl;
 $25 = ((($24)) + 1736|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $gl;
 $29 = ((($28)) + 1736|0);
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $1;
 _glReadPixels(($19|0),($23|0),($27|0),($31|0),6407,5121,($32|0));
 $33 = $1;
 $pixels = $33;
 $34 = $gl;
 $35 = ((($34)) + 1736|0);
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $gl;
 $39 = ((($38)) + 1736|0);
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = Math_imul($37, $41)|0;
 $num_pixels = $42;
 $i = 0;
 while(1) {
  $43 = $i;
  $44 = $num_pixels;
  $45 = ($43>>>0)<=($44>>>0);
  if (!($45)) {
   break;
  }
  $46 = $pixels;
  $47 = ((($46)) + 2|0);
  $48 = HEAP8[$47>>0]|0;
  $tmp = $48;
  $49 = $pixels;
  $50 = HEAP8[$49>>0]|0;
  $51 = $pixels;
  $52 = ((($51)) + 2|0);
  HEAP8[$52>>0] = $50;
  $53 = $tmp;
  $54 = $pixels;
  HEAP8[$54>>0] = $53;
  $55 = $pixels;
  $56 = ((($55)) + 3|0);
  $pixels = $56;
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 STACKTOP = sp;return 1;
}
function _gl_get_overlay_interface($data,$iface) {
 $data = $data|0;
 $iface = $iface|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $iface;
 $2 = $1;
 HEAP32[$2>>2] = 270564;
 STACKTOP = sp;return;
}
function _gl_overlay_enable($data,$state) {
 $data = $data|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $2 = $state&1;
 $1 = $2;
 $3 = $0;
 $gl = $3;
 $4 = $1;
 $5 = $4&1;
 $6 = $gl;
 $7 = ((($6)) + 2496|0);
 $8 = $5&1;
 HEAP8[$7>>0] = $8;
 $9 = $gl;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $gl;
 $15 = ((($14)) + 1713|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&1;
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $gl;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 64|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = $22&1;
 FUNCTION_TABLE_vi[$21 & 1023]($23);
 STACKTOP = sp;return;
}
function _gl_overlay_load($data,$image,$width,$height) {
 $data = $data|0;
 $image = $image|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $image;
 $2 = $width;
 $3 = $height;
 $4 = $0;
 $gl = $4;
 $5 = $gl;
 $6 = ((($5)) + 2500|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $gl;
  $10 = ((($9)) + 2500|0);
  _glGenTextures(1,($10|0));
 }
 $11 = $gl;
 $12 = ((($11)) + 2500|0);
 $13 = HEAP32[$12>>2]|0;
 _glBindTexture(3553,($13|0));
 _glTexParameteri(3553,10242,33071);
 _glTexParameteri(3553,10243,33071);
 _glTexParameteri(3553,10240,9729);
 _glTexParameteri(3553,10241,9729);
 $14 = $2;
 $15 = $14<<2;
 $16 = (_get_alignment($15)|0);
 _glPixelStorei(3317,($16|0));
 $17 = HEAP8[(188)>>0]|0;
 $18 = $17&1;
 $19 = $18 ? 6408 : 32993;
 $20 = $2;
 $21 = $3;
 $22 = HEAP8[(188)>>0]|0;
 $23 = $22&1;
 $24 = $23 ? 6408 : 32993;
 $25 = $1;
 _glTexImage2D(3553,0,($19|0),($20|0),($21|0),0,($24|0),5121,($25|0));
 $26 = $gl;
 _gl_overlay_tex_geom($26,0.0,0.0,1.0,1.0);
 $27 = $gl;
 _gl_overlay_vertex_geom($27,0.0,0.0,1.0,1.0);
 STACKTOP = sp;return 1;
}
function _gl_overlay_tex_geom($data,$x,$y,$w,$h) {
 $data = $data|0;
 $x = +$x;
 $y = +$y;
 $w = +$w;
 $h = +$h;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $x;
 $2 = $y;
 $3 = $w;
 $4 = $h;
 $5 = $0;
 $gl = $5;
 $6 = $1;
 $7 = $gl;
 $8 = ((($7)) + 2504|0);
 HEAPF32[$8>>2] = $6;
 $9 = $2;
 $10 = $gl;
 $11 = ((($10)) + 2504|0);
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $9;
 $13 = $1;
 $14 = $3;
 $15 = $13 + $14;
 $16 = $gl;
 $17 = ((($16)) + 2504|0);
 $18 = ((($17)) + 8|0);
 HEAPF32[$18>>2] = $15;
 $19 = $2;
 $20 = $gl;
 $21 = ((($20)) + 2504|0);
 $22 = ((($21)) + 12|0);
 HEAPF32[$22>>2] = $19;
 $23 = $1;
 $24 = $gl;
 $25 = ((($24)) + 2504|0);
 $26 = ((($25)) + 16|0);
 HEAPF32[$26>>2] = $23;
 $27 = $2;
 $28 = $4;
 $29 = $27 + $28;
 $30 = $gl;
 $31 = ((($30)) + 2504|0);
 $32 = ((($31)) + 20|0);
 HEAPF32[$32>>2] = $29;
 $33 = $1;
 $34 = $3;
 $35 = $33 + $34;
 $36 = $gl;
 $37 = ((($36)) + 2504|0);
 $38 = ((($37)) + 24|0);
 HEAPF32[$38>>2] = $35;
 $39 = $2;
 $40 = $4;
 $41 = $39 + $40;
 $42 = $gl;
 $43 = ((($42)) + 2504|0);
 $44 = ((($43)) + 28|0);
 HEAPF32[$44>>2] = $41;
 STACKTOP = sp;return;
}
function _gl_overlay_vertex_geom($data,$x,$y,$w,$h) {
 $data = $data|0;
 $x = +$x;
 $y = +$y;
 $w = +$w;
 $h = +$h;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $x;
 $2 = $y;
 $3 = $w;
 $4 = $h;
 $5 = $0;
 $gl = $5;
 $6 = $2;
 $7 = 1.0 - $6;
 $2 = $7;
 $8 = $4;
 $9 = -$8;
 $4 = $9;
 $10 = $1;
 $11 = $gl;
 $12 = ((($11)) + 2536|0);
 HEAPF32[$12>>2] = $10;
 $13 = $2;
 $14 = $gl;
 $15 = ((($14)) + 2536|0);
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $1;
 $18 = $3;
 $19 = $17 + $18;
 $20 = $gl;
 $21 = ((($20)) + 2536|0);
 $22 = ((($21)) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $2;
 $24 = $gl;
 $25 = ((($24)) + 2536|0);
 $26 = ((($25)) + 12|0);
 HEAPF32[$26>>2] = $23;
 $27 = $1;
 $28 = $gl;
 $29 = ((($28)) + 2536|0);
 $30 = ((($29)) + 16|0);
 HEAPF32[$30>>2] = $27;
 $31 = $2;
 $32 = $4;
 $33 = $31 + $32;
 $34 = $gl;
 $35 = ((($34)) + 2536|0);
 $36 = ((($35)) + 20|0);
 HEAPF32[$36>>2] = $33;
 $37 = $1;
 $38 = $3;
 $39 = $37 + $38;
 $40 = $gl;
 $41 = ((($40)) + 2536|0);
 $42 = ((($41)) + 24|0);
 HEAPF32[$42>>2] = $39;
 $43 = $2;
 $44 = $4;
 $45 = $43 + $44;
 $46 = $gl;
 $47 = ((($46)) + 2536|0);
 $48 = ((($47)) + 28|0);
 HEAPF32[$48>>2] = $45;
 STACKTOP = sp;return;
}
function _gl_overlay_full_screen($data,$enable) {
 $data = $data|0;
 $enable = $enable|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $2 = $enable&1;
 $1 = $2;
 $3 = $0;
 $gl = $3;
 $4 = $1;
 $5 = $4&1;
 $6 = $gl;
 $7 = ((($6)) + 2497|0);
 $8 = $5&1;
 HEAP8[$7>>0] = $8;
 STACKTOP = sp;return;
}
function _gl_overlay_set_alpha($data,$mod) {
 $data = $data|0;
 $mod = +$mod;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $mod;
 $2 = $0;
 $gl = $2;
 $3 = $1;
 $4 = $gl;
 $5 = ((($4)) + 2568|0);
 HEAPF32[$5>>2] = $3;
 STACKTOP = sp;return;
}
function _gl_get_poke_interface($data,$iface) {
 $data = $data|0;
 $iface = $iface|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $iface;
 $2 = $1;
 HEAP32[$2>>2] = 270588;
 STACKTOP = sp;return;
}
function _gl_get_current_framebuffer($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = $gl;
 $7 = ((($6)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5>>>0) % ($8>>>0))&-1;
 $10 = $gl;
 $11 = ((($10)) + 1644|0);
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _gl_get_proc_address($data,$sym) {
 $data = $data|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $sym;
 $2 = $0;
 $gl = $2;
 $3 = $gl;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (FUNCTION_TABLE_ii[$6 & 511]($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _gl_set_aspect_ratio($data,$aspect_ratio_idx) {
 $data = $data|0;
 $aspect_ratio_idx = $aspect_ratio_idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $aspect_ratio_idx;
 $2 = $0;
 $gl = $2;
 $3 = $1;
 switch ($3|0) {
 case 5:  {
  $4 = HEAP32[(196928)>>2]|0;
  $5 = HEAP32[(196932)>>2]|0;
  _gfx_set_square_pixel_viewport($4,$5);
  break;
 }
 case 6:  {
  _gfx_set_core_viewport();
  break;
 }
 case 4:  {
  _gfx_set_config_viewport();
  break;
 }
 default: {
 }
 }
 $6 = $1;
 $7 = (265240 + (($6*68)|0)|0);
 $8 = ((($7)) + 64|0);
 $9 = +HEAPF32[$8>>2];
 HEAPF32[(196968)>>2] = $9;
 $10 = $gl;
 $11 = ((($10)) + 1714|0);
 HEAP8[$11>>0] = 1;
 $12 = $gl;
 $13 = ((($12)) + 1711|0);
 HEAP8[$13>>0] = 1;
 STACKTOP = sp;return;
}
function _gl_apply_state_changes($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 1711|0);
 HEAP8[$3>>0] = 1;
 STACKTOP = sp;return;
}
function _gl_set_texture_frame($data,$frame,$rgb32,$width,$height,$alpha) {
 $data = $data|0;
 $frame = $frame|0;
 $rgb32 = $rgb32|0;
 $width = $width|0;
 $height = $height|0;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base_size = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $frame;
 $6 = $rgb32&1;
 $2 = $6;
 $3 = $width;
 $4 = $height;
 $5 = $alpha;
 $7 = $0;
 $gl = $7;
 $8 = $gl;
 $9 = ((($8)) + 2572|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 $12 = $gl;
 $13 = ((($12)) + 2572|0);
 if ($11) {
  $17 = HEAP32[$13>>2]|0;
  _glBindTexture(3553,($17|0));
 } else {
  _glGenTextures(1,($13|0));
  $14 = $gl;
  $15 = ((($14)) + 2572|0);
  $16 = HEAP32[$15>>2]|0;
  _glBindTexture(3553,($16|0));
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10241,9729);
 }
 $18 = $5;
 $19 = $gl;
 $20 = ((($19)) + 2580|0);
 HEAPF32[$20>>2] = $18;
 $21 = $2;
 $22 = $21&1;
 $23 = $22 ? 4 : 2;
 $base_size = $23;
 $24 = $3;
 $25 = $base_size;
 $26 = Math_imul($24, $25)|0;
 $27 = (_get_alignment($26)|0);
 _glPixelStorei(3317,($27|0));
 $28 = $2;
 $29 = $28&1;
 if ($29) {
  $30 = HEAP8[(188)>>0]|0;
  $31 = $30&1;
  $32 = $31 ? 6408 : 32993;
  $33 = $3;
  $34 = $4;
  $35 = HEAP8[(188)>>0]|0;
  $36 = $35&1;
  $37 = $36 ? 6408 : 32993;
  $38 = $1;
  _glTexImage2D(3553,0,($32|0),($33|0),($34|0),0,($37|0),5121,($38|0));
  $42 = $gl;
  $43 = ((($42)) + 44|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $gl;
  $46 = ((($45)) + 12|0);
  $47 = (($46) + ($44<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  _glBindTexture(3553,($48|0));
  STACKTOP = sp;return;
 } else {
  $39 = $3;
  $40 = $4;
  $41 = $1;
  _glTexImage2D(3553,0,6408,($39|0),($40|0),0,6408,32819,($41|0));
  $42 = $gl;
  $43 = ((($42)) + 44|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $gl;
  $46 = ((($45)) + 12|0);
  $47 = (($46) + ($44<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  _glBindTexture(3553,($48|0));
  STACKTOP = sp;return;
 }
}
function _gl_set_texture_enable($data,$state,$full_screen) {
 $data = $data|0;
 $state = $state|0;
 $full_screen = $full_screen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $3 = $state&1;
 $1 = $3;
 $4 = $full_screen&1;
 $2 = $4;
 $5 = $0;
 $gl = $5;
 $6 = $1;
 $7 = $6&1;
 $8 = $gl;
 $9 = ((($8)) + 2576|0);
 $10 = $7&1;
 HEAP8[$9>>0] = $10;
 $11 = $2;
 $12 = $11&1;
 $13 = $gl;
 $14 = ((($13)) + 2577|0);
 $15 = $12&1;
 HEAP8[$14>>0] = $15;
 STACKTOP = sp;return;
}
function _gl_set_osd_msg($data,$msg,$userdata) {
 $data = $data|0;
 $msg = $msg|0;
 $userdata = $userdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, $params = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $msg;
 $2 = $userdata;
 $3 = $0;
 $gl = $3;
 $4 = $2;
 $params = $4;
 $5 = $gl;
 $6 = ((($5)) + 2052|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $gl;
 $10 = ((($9)) + 2052|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $gl;
 $15 = $1;
 $16 = $params;
 FUNCTION_TABLE_viii[$13 & 1023]($14,$15,$16);
 STACKTOP = sp;return;
}
function _gl_show_mouse($data,$state) {
 $data = $data|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $2 = $state&1;
 $1 = $2;
 $3 = $0;
 $gl = $3;
 $4 = $gl;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $gl;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = $13&1;
 FUNCTION_TABLE_vi[$12 & 1023]($14);
 STACKTOP = sp;return;
}
function _matrix_identity($mat) {
 $mat = $mat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mat;
 $1 = $0;
 dest=$1; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(4);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $4<<2;
  $6 = $i;
  $7 = (($5) + ($6))|0;
  $8 = $0;
  $9 = (($8) + ($7<<2)|0);
  HEAPF32[$9>>2] = 1.0;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 STACKTOP = sp;return;
}
function _matrix_rotate_z($mat,$rad) {
 $mat = $mat|0;
 $rad = +$rad;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $cosine = 0.0;
 var $sine = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mat;
 $1 = $rad;
 $2 = $1;
 $3 = (+Math_cos((+$2)));
 $cosine = $3;
 $4 = $1;
 $5 = (+Math_sin((+$4)));
 $sine = $5;
 $6 = $0;
 _matrix_identity($6);
 $7 = $cosine;
 $8 = $0;
 HEAPF32[$8>>2] = $7;
 $9 = $cosine;
 $10 = $0;
 $11 = ((($10)) + 20|0);
 HEAPF32[$11>>2] = $9;
 $12 = $sine;
 $13 = -$12;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 HEAPF32[$15>>2] = $13;
 $16 = $sine;
 $17 = $0;
 $18 = ((($17)) + 4|0);
 HEAPF32[$18>>2] = $16;
 STACKTOP = sp;return;
}
function _matrix_ortho($mat,$left,$right,$bottom,$top,$znear,$zfar) {
 $mat = $mat|0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $znear = +$znear;
 $zfar = +$zfar;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $tx = 0.0, $ty = 0.0;
 var $tz = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mat;
 $1 = $left;
 $2 = $right;
 $3 = $bottom;
 $4 = $top;
 $5 = $znear;
 $6 = $zfar;
 $7 = $0;
 _matrix_identity($7);
 $8 = $2;
 $9 = $1;
 $10 = $8 + $9;
 $11 = -$10;
 $12 = $2;
 $13 = $1;
 $14 = $12 - $13;
 $15 = $11 / $14;
 $tx = $15;
 $16 = $4;
 $17 = $3;
 $18 = $16 + $17;
 $19 = -$18;
 $20 = $4;
 $21 = $3;
 $22 = $20 - $21;
 $23 = $19 / $22;
 $ty = $23;
 $24 = $6;
 $25 = $5;
 $26 = $24 + $25;
 $27 = -$26;
 $28 = $6;
 $29 = $5;
 $30 = $28 - $29;
 $31 = $27 / $30;
 $tz = $31;
 $32 = $2;
 $33 = $1;
 $34 = $32 - $33;
 $35 = 2.0 / $34;
 $36 = $0;
 HEAPF32[$36>>2] = $35;
 $37 = $4;
 $38 = $3;
 $39 = $37 - $38;
 $40 = 2.0 / $39;
 $41 = $0;
 $42 = ((($41)) + 20|0);
 HEAPF32[$42>>2] = $40;
 $43 = $6;
 $44 = $5;
 $45 = $43 - $44;
 $46 = -2.0 / $45;
 $47 = $0;
 $48 = ((($47)) + 40|0);
 HEAPF32[$48>>2] = $46;
 $49 = $tx;
 $50 = $0;
 $51 = ((($50)) + 48|0);
 HEAPF32[$51>>2] = $49;
 $52 = $ty;
 $53 = $0;
 $54 = ((($53)) + 52|0);
 HEAPF32[$54>>2] = $52;
 $55 = $tz;
 $56 = $0;
 $57 = ((($56)) + 56|0);
 HEAPF32[$57>>2] = $55;
 STACKTOP = sp;return;
}
function _matrix_multiply($out,$a,$b) {
 $out = $out|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0;
 var $dot = 0.0, $k = 0, $mat = 0, $r = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mat = sp + 16|0;
 $0 = $out;
 $1 = $a;
 $2 = $b;
 $r = 0;
 while(1) {
  $3 = $r;
  $4 = ($3>>>0)<(4);
  if (!($4)) {
   break;
  }
  $c = 0;
  while(1) {
   $5 = $c;
   $6 = ($5>>>0)<(4);
   if (!($6)) {
    break;
   }
   $dot = 0.0;
   $k = 0;
   while(1) {
    $7 = $k;
    $8 = ($7>>>0)<(4);
    if (!($8)) {
     break;
    }
    $9 = $k;
    $10 = $9<<2;
    $11 = $r;
    $12 = (($10) + ($11))|0;
    $13 = $1;
    $14 = (($13) + ($12<<2)|0);
    $15 = +HEAPF32[$14>>2];
    $16 = $c;
    $17 = $16<<2;
    $18 = $k;
    $19 = (($17) + ($18))|0;
    $20 = $2;
    $21 = (($20) + ($19<<2)|0);
    $22 = +HEAPF32[$21>>2];
    $23 = $15 * $22;
    $24 = $dot;
    $25 = $24 + $23;
    $dot = $25;
    $26 = $k;
    $27 = (($26) + 1)|0;
    $k = $27;
   }
   $28 = $dot;
   $29 = $c;
   $30 = $29<<2;
   $31 = $r;
   $32 = (($30) + ($31))|0;
   $33 = (($mat) + ($32<<2)|0);
   HEAPF32[$33>>2] = $28;
   $34 = $c;
   $35 = (($34) + 1)|0;
   $c = $35;
  }
  $36 = $r;
  $37 = (($36) + 1)|0;
  $r = $37;
 }
 $38 = $0;
 dest=$38; src=$mat; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _gl_font_init_first($data,$font_path,$font_size) {
 $data = $data|0;
 $font_path = $font_path|0;
 $font_size = +$font_size;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $font_path;
 $3 = $font_size;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4>>>0)<(1);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $i;
  $7 = (270628 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = $2;
  $12 = $3;
  $13 = (FUNCTION_TABLE_iiid[$9 & 63]($10,$11,$12)|0);
  $14 = $i;
  if ($13) {
   label = 4;
   break;
  }
  $17 = (($14) + 1)|0;
  $i = $17;
 }
 if ((label|0) == 4) {
  $15 = (270628 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $0 = $16;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _gl_deinit_font($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $gl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $gl = $1;
 $2 = $gl;
 $3 = ((($2)) + 2048|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $gl;
 $7 = ((($6)) + 2056|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $gl;
 $12 = ((($11)) + 2048|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_vi[$10 & 1023]($13);
 $14 = $gl;
 $15 = ((($14)) + 2060|0);
 _glDeleteTextures(1,($15|0));
 $16 = $gl;
 $17 = ((($16)) + 2076|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $gl;
 $21 = ((($20)) + 2076|0);
 $22 = HEAP32[$21>>2]|0;
 _free($22);
 STACKTOP = sp;return;
}
function _gl_init_font($data,$font_path,$font_size) {
 $data = $data|0;
 $font_path = $font_path|0;
 $font_size = +$font_size;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $gl = 0, $i = 0, $i1 = 0, $j = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = $data;
 $2 = $font_path;
 $3 = $font_size;
 $4 = HEAP8[(16744)>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $97 = $$pre_trunc&1;
  STACKTOP = sp;return ($97|0);
 }
 $6 = $1;
 $gl = $6;
 $7 = $gl;
 $8 = ((($7)) + 2056|0);
 $9 = $gl;
 $10 = ((($9)) + 2048|0);
 $11 = (_font_renderer_create_default($8,$10)|0);
 if (!($11)) {
  $26 = HEAP32[(259664)>>2]|0;
  $27 = ($26|0)!=(0|0);
  $28 = HEAP32[(259664)>>2]|0;
  $29 = HEAP32[544648>>2]|0;
  $30 = $27 ? $28 : $29;
  (_fprintf($30,772019,$vararg_buffer)|0);
  $31 = HEAP32[(259664)>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = HEAP32[(259664)>>2]|0;
  $34 = HEAP32[544648>>2]|0;
  $35 = $32 ? $33 : $34;
  (_fflush($35)|0);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $97 = $$pre_trunc&1;
  STACKTOP = sp;return ($97|0);
 }
 $12 = $gl;
 $13 = ((($12)) + 2060|0);
 _glGenTextures(1,($13|0));
 $14 = $gl;
 $15 = ((($14)) + 2060|0);
 $16 = HEAP32[$15>>2]|0;
 _glBindTexture(3553,($16|0));
 _glTexParameteri(3553,10242,33071);
 _glTexParameteri(3553,10243,33071);
 _glTexParameteri(3553,10240,9729);
 _glTexParameteri(3553,10241,9729);
 $17 = $gl;
 $18 = ((($17)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $gl;
 $21 = ((($20)) + 12|0);
 $22 = (($21) + ($19<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 _glBindTexture(3553,($23|0));
 $24 = $gl;
 $25 = ((($24)) + 2064|0);
 _glGetIntegerv(3379,($25|0));
 $i = 0;
 while(1) {
  $36 = $i;
  $37 = ($36>>>0)<(4);
  if (!($37)) {
   break;
  }
  $38 = +HEAPF32[(16756)>>2];
  $39 = $i;
  $40 = $39<<2;
  $41 = (($40) + 0)|0;
  $42 = $gl;
  $43 = ((($42)) + 2344|0);
  $44 = (($43) + ($41<<2)|0);
  HEAPF32[$44>>2] = $38;
  $45 = +HEAPF32[(16760)>>2];
  $46 = $i;
  $47 = $46<<2;
  $48 = (($47) + 1)|0;
  $49 = $gl;
  $50 = ((($49)) + 2344|0);
  $51 = (($50) + ($48<<2)|0);
  HEAPF32[$51>>2] = $45;
  $52 = +HEAPF32[(16764)>>2];
  $53 = $i;
  $54 = $53<<2;
  $55 = (($54) + 2)|0;
  $56 = $gl;
  $57 = ((($56)) + 2344|0);
  $58 = (($57) + ($55<<2)|0);
  HEAPF32[$58>>2] = $52;
  $59 = $i;
  $60 = $59<<2;
  $61 = (($60) + 3)|0;
  $62 = $gl;
  $63 = ((($62)) + 2344|0);
  $64 = (($63) + ($61<<2)|0);
  HEAPF32[$64>>2] = 1.0;
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 $i1 = 0;
 while(1) {
  $67 = $i1;
  $68 = ($67>>>0)<(4);
  if (!($68)) {
   break;
  }
  $j = 0;
  while(1) {
   $69 = $j;
   $70 = ($69>>>0)<(3);
   $71 = $i1;
   $72 = $71<<2;
   if (!($70)) {
    break;
   }
   $73 = $j;
   $74 = (($72) + ($73))|0;
   $75 = $gl;
   $76 = ((($75)) + 2344|0);
   $77 = (($76) + ($74<<2)|0);
   $78 = +HEAPF32[$77>>2];
   $79 = $78;
   $80 = 0.29999999999999999 * $79;
   $81 = $80;
   $82 = $i1;
   $83 = $82<<2;
   $84 = $j;
   $85 = (($83) + ($84))|0;
   $86 = $gl;
   $87 = ((($86)) + 2408|0);
   $88 = (($87) + ($85<<2)|0);
   HEAPF32[$88>>2] = $81;
   $89 = $j;
   $90 = (($89) + 1)|0;
   $j = $90;
  }
  $91 = (($72) + 3)|0;
  $92 = $gl;
  $93 = ((($92)) + 2408|0);
  $94 = (($93) + ($91<<2)|0);
  HEAPF32[$94>>2] = 1.0;
  $95 = $i1;
  $96 = (($95) + 1)|0;
  $i1 = $96;
 }
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $97 = $$pre_trunc&1;
 STACKTOP = sp;return ($97|0);
}
function _gl_render_msg($data,$msg,$parms) {
 $data = $data|0;
 $msg = $msg|0;
 $parms = $parms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $gl = 0, $params = 0, $scale = 0.0, $x = 0.0, $y = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $msg;
 $2 = $parms;
 $3 = $0;
 $gl = $3;
 $4 = $2;
 $params = $4;
 $5 = $params;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $params;
  $8 = +HEAPF32[$7>>2];
  $x = $8;
  $9 = $params;
  $10 = ((($9)) + 4|0);
  $11 = +HEAPF32[$10>>2];
  $y = $11;
  $12 = $params;
  $13 = ((($12)) + 8|0);
  $14 = +HEAPF32[$13>>2];
  $scale = $14;
  $30 = $0;
  $31 = $1;
  $32 = $scale;
  $33 = $x;
  $34 = $y;
  _setup_font($30,$31,$32,$33,$34);
  STACKTOP = sp;return;
 }
 $15 = +HEAPF32[(16748)>>2];
 $x = $15;
 $16 = +HEAPF32[(16752)>>2];
 $y = $16;
 $17 = HEAP8[(16745)>>0]|0;
 $18 = $17&1;
 if ($18) {
  $19 = $gl;
  $20 = ((($19)) + 1736|0);
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (+($22>>>0));
  $24 = $gl;
  $25 = ((($24)) + 1720|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($26>>>0));
  $28 = $23 / $27;
  $29 = $28;
 } else {
  $29 = 1.0;
 }
 $scale = $29;
 $30 = $0;
 $31 = $1;
 $32 = $scale;
 $33 = $x;
 $34 = $y;
 _setup_font($30,$31,$32,$33,$34);
 STACKTOP = sp;return;
}
function _setup_font($data,$msg,$scale,$pos_x,$pos_y) {
 $data = $data|0;
 $msg = $msg|0;
 $scale = +$scale;
 $pos_x = +$pos_x;
 $pos_y = +$pos_y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $font_tex_coords = 0, $font_vertex = 0, $font_vertex_dark = 0, $geom = 0, $gl = 0, $head = 0, $ortho = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $font_vertex = sp + 120|0;
 $font_vertex_dark = sp + 88|0;
 $font_tex_coords = sp + 56|0;
 $out = sp + 52|0;
 $geom = sp + 24|0;
 $ortho = sp;
 $0 = $data;
 $1 = $msg;
 $2 = $scale;
 $3 = $pos_x;
 $4 = $pos_y;
 $5 = $0;
 $gl = $5;
 $6 = $gl;
 $7 = ((($6)) + 2048|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $gl;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $gl;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 1023](15);
 }
 $19 = $gl;
 $20 = $gl;
 $21 = ((($20)) + 1728|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $gl;
 $24 = ((($23)) + 1732|0);
 $25 = HEAP32[$24>>2]|0;
 _gl_set_viewport($19,$22,$25,0,0);
 _glEnable(3042);
 $26 = $gl;
 $27 = ((($26)) + 2060|0);
 $28 = HEAP32[$27>>2]|0;
 _glBindTexture(3553,($28|0));
 $29 = $gl;
 $30 = ((($29)) + 2000|0);
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = $font_tex_coords;
 $32 = $gl;
 $33 = ((($32)) + 2080|0);
 $34 = $1;
 $35 = (_strcmp($33,$34)|0);
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $gl;
  $38 = ((($37)) + 2056|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $gl;
  $43 = ((($42)) + 2048|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $1;
  FUNCTION_TABLE_viii[$41 & 1023]($44,$45,$out);
  $46 = HEAP32[$out>>2]|0;
  $head = $46;
  $47 = $head;
  _calculate_msg_geometry($47,$geom);
  $48 = $gl;
  _adjust_power_of_two($48,$geom);
  $49 = $gl;
  $50 = $head;
  _blit_fonts($49,$50,$geom);
  $51 = $gl;
  $52 = ((($51)) + 2056|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $gl;
  $57 = ((($56)) + 2048|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$55 & 1023]($58,$out);
  $59 = $gl;
  $60 = ((($59)) + 2080|0);
  $61 = $1;
  (_strlcpy_rarch__($60,$61,256)|0);
  $62 = ((($geom)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $gl;
  $65 = ((($64)) + 2336|0);
  HEAP32[$65>>2] = $63;
  $66 = ((($geom)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $gl;
  $69 = ((($68)) + 2340|0);
  HEAP32[$69>>2] = $67;
 }
 $70 = $gl;
 $71 = $2;
 $72 = $3;
 $73 = $4;
 _calculate_font_coords($70,$font_vertex,$font_vertex_dark,$font_tex_coords,$71,$72,$73);
 $74 = $gl;
 $75 = ((($74)) + 2000|0);
 HEAP32[$75>>2] = $font_vertex_dark;
 $76 = $gl;
 $77 = ((($76)) + 2408|0);
 $78 = $gl;
 $79 = ((($78)) + 2000|0);
 $80 = ((($79)) + 4|0);
 HEAP32[$80>>2] = $77;
 $81 = $gl;
 $82 = $gl;
 $83 = ((($82)) + 2000|0);
 $84 = $gl;
 $85 = ((($84)) + 1872|0);
 _gl_shader_set_coords($81,$83,$85);
 _glDrawArrays(5,0,4);
 $86 = $gl;
 $87 = ((($86)) + 2000|0);
 HEAP32[$87>>2] = $font_vertex;
 $88 = $gl;
 $89 = ((($88)) + 2344|0);
 $90 = $gl;
 $91 = ((($90)) + 2000|0);
 $92 = ((($91)) + 4|0);
 HEAP32[$92>>2] = $89;
 $93 = $gl;
 $94 = $gl;
 $95 = ((($94)) + 2000|0);
 $96 = $gl;
 $97 = ((($96)) + 1872|0);
 _gl_shader_set_coords($93,$95,$97);
 _glDrawArrays(5,0,4);
 $98 = $gl;
 $99 = ((($98)) + 2016|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $gl;
 $102 = ((($101)) + 2000|0);
 HEAP32[$102>>2] = $100;
 $103 = $gl;
 $104 = ((($103)) + 1840|0);
 $105 = $gl;
 $106 = ((($105)) + 2000|0);
 $107 = ((($106)) + 8|0);
 HEAP32[$107>>2] = $104;
 $108 = $gl;
 $109 = ((($108)) + 2020|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $gl;
 $112 = ((($111)) + 2000|0);
 $113 = ((($112)) + 4|0);
 HEAP32[$113>>2] = $110;
 $114 = $gl;
 $115 = ((($114)) + 44|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $gl;
 $118 = ((($117)) + 12|0);
 $119 = (($118) + ($116<<2)|0);
 $120 = HEAP32[$119>>2]|0;
 _glBindTexture(3553,($120|0));
 _glDisable(3042);
 ;HEAP32[$ortho>>2]=HEAP32[270648>>2]|0;HEAP32[$ortho+4>>2]=HEAP32[270648+4>>2]|0;HEAP32[$ortho+8>>2]=HEAP32[270648+8>>2]|0;HEAP32[$ortho+12>>2]=HEAP32[270648+12>>2]|0;HEAP32[$ortho+16>>2]=HEAP32[270648+16>>2]|0;HEAP32[$ortho+20>>2]=HEAP32[270648+20>>2]|0;
 $121 = $gl;
 _gl_set_projection($121,$ortho,1);
 STACKTOP = sp;return;
}
function _calculate_msg_geometry($head,$rect) {
 $head = $head|0;
 $rect = $rect|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $bottom = 0, $left = 0, $right = 0;
 var $top = 0, $x_max = 0, $x_min = 0, $y_max = 0, $y_min = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $head;
 $1 = $rect;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $x_min = $4;
 $5 = $0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10))|0;
 $x_max = $11;
 $12 = $0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $y_min = $14;
 $15 = $0;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20))|0;
 $y_max = $21;
 while(1) {
  $22 = $0;
  $23 = ((($22)) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  $0 = $24;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $26 = $0;
  $27 = ((($26)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  $left = $28;
  $29 = $0;
  $30 = ((($29)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($31) + ($34))|0;
  $right = $35;
  $36 = $0;
  $37 = ((($36)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $bottom = $38;
  $39 = $0;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $0;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($41) + ($44))|0;
  $top = $45;
  $46 = $left;
  $47 = $x_min;
  $48 = ($46|0)<($47|0);
  if ($48) {
   $49 = $left;
   $x_min = $49;
  }
  $50 = $right;
  $51 = $x_max;
  $52 = ($50|0)>($51|0);
  if ($52) {
   $53 = $right;
   $x_max = $53;
  }
  $54 = $bottom;
  $55 = $y_min;
  $56 = ($54|0)<($55|0);
  if ($56) {
   $57 = $bottom;
   $y_min = $57;
  }
  $58 = $top;
  $59 = $y_max;
  $60 = ($58|0)>($59|0);
  if (!($60)) {
   continue;
  }
  $61 = $top;
  $y_max = $61;
 }
 $62 = $x_min;
 $63 = $1;
 HEAP32[$63>>2] = $62;
 $64 = $y_min;
 $65 = $1;
 $66 = ((($65)) + 4|0);
 HEAP32[$66>>2] = $64;
 $67 = $x_max;
 $68 = $x_min;
 $69 = (($67) - ($68))|0;
 $70 = $1;
 $71 = ((($70)) + 8|0);
 HEAP32[$71>>2] = $69;
 $72 = $y_max;
 $73 = $y_min;
 $74 = (($72) - ($73))|0;
 $75 = $1;
 $76 = ((($75)) + 12|0);
 HEAP32[$76>>2] = $74;
 STACKTOP = sp;return;
}
function _adjust_power_of_two($gl,$geom) {
 $gl = $gl|0;
 $geom = $geom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gl;
 $1 = $geom;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_next_pow21730($4)|0);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_next_pow21730($10)|0);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 HEAP32[$13>>2] = $11;
 $14 = $1;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = ((($17)) + 2064|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)>($19|0);
 if ($20) {
  $21 = $0;
  $22 = ((($21)) + 2064|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = ((($24)) + 16|0);
  HEAP32[$25>>2] = $23;
 }
 $26 = $1;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = ((($29)) + 2064|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)>($31|0);
 if ($32) {
  $33 = $0;
  $34 = ((($33)) + 2064|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  $37 = ((($36)) + 20|0);
  HEAP32[$37>>2] = $35;
 }
 $38 = $1;
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $0;
 $42 = ((($41)) + 2068|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($40|0)>($43|0);
 if (!($44)) {
  $45 = $1;
  $46 = ((($45)) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $0;
  $49 = ((($48)) + 2072|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)>($50|0);
  if (!($51)) {
   STACKTOP = sp;return;
  }
 }
 $52 = $0;
 $53 = ((($52)) + 2076|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $1;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $1;
 $59 = ((($58)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = Math_imul($57, $60)|0;
 $62 = $61<<2;
 $63 = (_realloc($54,$62)|0);
 $64 = $0;
 $65 = ((($64)) + 2076|0);
 HEAP32[$65>>2] = $63;
 $66 = $1;
 $67 = ((($66)) + 16|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $1;
 $70 = ((($69)) + 20|0);
 $71 = HEAP32[$70>>2]|0;
 _glTexImage2D(3553,0,6408,($68|0),($71|0),0,6408,5121,(0|0));
 $72 = $1;
 $73 = ((($72)) + 16|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $0;
 $76 = ((($75)) + 2068|0);
 HEAP32[$76>>2] = $74;
 $77 = $1;
 $78 = ((($77)) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $0;
 $81 = ((($80)) + 2072|0);
 HEAP32[$81>>2] = $79;
 STACKTOP = sp;return;
}
function _next_pow21730($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = (($1) + -1)|0;
 $0 = $2;
 $3 = $0;
 $4 = $3 >>> 1;
 $5 = $0;
 $6 = $5 | $4;
 $0 = $6;
 $7 = $0;
 $8 = $7 >>> 2;
 $9 = $0;
 $10 = $9 | $8;
 $0 = $10;
 $11 = $0;
 $12 = $11 >>> 4;
 $13 = $0;
 $14 = $13 | $12;
 $0 = $14;
 $15 = $0;
 $16 = $15 >>> 8;
 $17 = $0;
 $18 = $17 | $16;
 $0 = $18;
 $19 = $0;
 $20 = $19 >>> 16;
 $21 = $0;
 $22 = $21 | $20;
 $0 = $22;
 $23 = $0;
 $24 = (($23) + 1)|0;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _blit_fonts($gl,$head,$geom) {
 $gl = $gl|0;
 $head = $head|0;
 $geom = $geom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gl;
 $1 = $head;
 $2 = $geom;
 $3 = $0;
 $4 = ((($3)) + 2076|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 2068|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = ((($9)) + 2072|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($8, $11)|0;
 $13 = $12<<2;
 _memset(($5|0),0,($13|0))|0;
 while(1) {
  $14 = $1;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $1;
  $17 = $2;
  $18 = $0;
  $19 = ((($18)) + 2076|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = ((($21)) + 2068|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  $25 = ((($24)) + 2072|0);
  $26 = HEAP32[$25>>2]|0;
  _copy_glyph($16,$17,$20,$23,$26);
  $27 = $1;
  $28 = ((($27)) + 48|0);
  $29 = HEAP32[$28>>2]|0;
  $1 = $29;
 }
 _glPixelStorei(3317,8);
 $30 = $0;
 $31 = ((($30)) + 2068|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $0;
 $34 = ((($33)) + 2072|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = ((($36)) + 2076|0);
 $38 = HEAP32[$37>>2]|0;
 _glTexSubImage2D(3553,0,0,0,($32|0),($35|0),6408,5121,($38|0));
 STACKTOP = sp;return;
}
function _copy_glyph($head,$geom,$buffer,$width,$height) {
 $head = $head|0;
 $geom = $geom|0;
 $buffer = $buffer|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $dst = 0, $font_height = 0, $font_width = 0, $h = 0, $src = 0;
 var $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $head;
 $1 = $geom;
 $2 = $buffer;
 $3 = $width;
 $4 = $height;
 $5 = $0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $x = $10;
 $11 = $0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13) - ($16))|0;
 $y = $17;
 $18 = $4;
 $19 = $0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) - ($21))|0;
 $23 = $y;
 $24 = (($22) - ($23))|0;
 $25 = (($24) - 1)|0;
 $y = $25;
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 $src = $27;
 $28 = $0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $x;
 $32 = ($31|0)<(0);
 $33 = $x;
 $34 = $32 ? $33 : 0;
 $35 = (($30) + ($34))|0;
 $font_width = $35;
 $36 = $0;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $y;
 $40 = ($39|0)<(0);
 $41 = $y;
 $42 = $40 ? $41 : 0;
 $43 = (($38) + ($42))|0;
 $font_height = $43;
 $44 = $x;
 $45 = ($44|0)<(0);
 if ($45) {
  $46 = $x;
  $47 = (0 - ($46))|0;
  $48 = $src;
  $49 = (($48) + ($47)|0);
  $src = $49;
  $x = 0;
 }
 $50 = $y;
 $51 = ($50|0)<(0);
 if ($51) {
  $52 = $y;
  $53 = (0 - ($52))|0;
  $54 = $0;
  $55 = ((($54)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = Math_imul($53, $56)|0;
  $58 = $src;
  $59 = (($58) + ($57)|0);
  $src = $59;
  $y = 0;
 }
 $60 = $x;
 $61 = $font_width;
 $62 = (($60) + ($61))|0;
 $63 = $3;
 $64 = ($62|0)>($63|0);
 if ($64) {
  $65 = $3;
  $66 = $x;
  $67 = (($65) - ($66))|0;
  $font_width = $67;
 }
 $68 = $y;
 $69 = $font_height;
 $70 = (($68) + ($69))|0;
 $71 = $4;
 $72 = ($70|0)>($71|0);
 if ($72) {
  $73 = $4;
  $74 = $y;
  $75 = (($73) - ($74))|0;
  $font_height = $75;
 }
 $76 = $2;
 $77 = $y;
 $78 = $3;
 $79 = Math_imul($77, $78)|0;
 $80 = (($76) + ($79<<2)|0);
 $81 = $x;
 $82 = (($80) + ($81<<2)|0);
 $dst = $82;
 $h = 0;
 while(1) {
  $83 = $h;
  $84 = $font_height;
  $85 = ($83|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $dst;
  $d = $86;
  $w = 0;
  while(1) {
   $87 = $w;
   $88 = $font_width;
   $89 = ($87|0)<($88|0);
   if (!($89)) {
    break;
   }
   $90 = $d;
   $91 = ((($90)) + 1|0);
   $d = $91;
   HEAP8[$90>>0] = -1;
   $92 = $d;
   $93 = ((($92)) + 1|0);
   $d = $93;
   HEAP8[$92>>0] = -1;
   $94 = $d;
   $95 = ((($94)) + 1|0);
   $d = $95;
   HEAP8[$94>>0] = -1;
   $96 = $w;
   $97 = $src;
   $98 = (($97) + ($96)|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $d;
   $101 = ((($100)) + 1|0);
   $d = $101;
   HEAP8[$100>>0] = $99;
   $102 = $w;
   $103 = (($102) + 1)|0;
   $w = $103;
  }
  $104 = $h;
  $105 = (($104) + 1)|0;
  $h = $105;
  $106 = $3;
  $107 = $dst;
  $108 = (($107) + ($106<<2)|0);
  $dst = $108;
  $109 = $0;
  $110 = ((($109)) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $src;
  $113 = (($112) + ($111)|0);
  $src = $113;
 }
 STACKTOP = sp;return;
}
function _calculate_font_coords($gl,$font_vertex,$font_vertex_dark,$font_tex_coords,$scale,$pos_x,$pos_y) {
 $gl = $gl|0;
 $font_vertex = $font_vertex|0;
 $font_vertex_dark = $font_vertex_dark|0;
 $font_tex_coords = $font_tex_coords|0;
 $scale = +$scale;
 $pos_x = +$pos_x;
 $pos_y = +$pos_y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $hx = 0.0, $hy = 0.0, $i = 0, $lx = 0.0, $ly = 0.0, $scale_factor = 0.0, $shift_x = 0.0, $shift_y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gl;
 $1 = $font_vertex;
 $2 = $font_vertex_dark;
 $3 = $font_tex_coords;
 $4 = $scale;
 $5 = $pos_x;
 $6 = $pos_y;
 $7 = $4;
 $scale_factor = $7;
 $8 = $5;
 $lx = $8;
 $9 = $0;
 $10 = ((($9)) + 2336|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 $13 = $scale_factor;
 $14 = $12 * $13;
 $15 = $0;
 $16 = ((($15)) + 1736|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (+($18>>>0));
 $20 = $14 / $19;
 $21 = $lx;
 $22 = $20 + $21;
 $hx = $22;
 $23 = $6;
 $ly = $23;
 $24 = $0;
 $25 = ((($24)) + 2340|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (+($26|0));
 $28 = $scale_factor;
 $29 = $27 * $28;
 $30 = $0;
 $31 = ((($30)) + 1736|0);
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (+($33>>>0));
 $35 = $29 / $34;
 $36 = $ly;
 $37 = $35 + $36;
 $hy = $37;
 $38 = $lx;
 $39 = $1;
 HEAPF32[$39>>2] = $38;
 $40 = $hx;
 $41 = $1;
 $42 = ((($41)) + 8|0);
 HEAPF32[$42>>2] = $40;
 $43 = $lx;
 $44 = $1;
 $45 = ((($44)) + 16|0);
 HEAPF32[$45>>2] = $43;
 $46 = $hx;
 $47 = $1;
 $48 = ((($47)) + 24|0);
 HEAPF32[$48>>2] = $46;
 $49 = $hy;
 $50 = $1;
 $51 = ((($50)) + 4|0);
 HEAPF32[$51>>2] = $49;
 $52 = $hy;
 $53 = $1;
 $54 = ((($53)) + 12|0);
 HEAPF32[$54>>2] = $52;
 $55 = $ly;
 $56 = $1;
 $57 = ((($56)) + 20|0);
 HEAPF32[$57>>2] = $55;
 $58 = $ly;
 $59 = $1;
 $60 = ((($59)) + 28|0);
 HEAPF32[$60>>2] = $58;
 $61 = $0;
 $62 = ((($61)) + 1736|0);
 $63 = ((($62)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (+($64>>>0));
 $66 = 2.0 / $65;
 $shift_x = $66;
 $67 = $0;
 $68 = ((($67)) + 1736|0);
 $69 = ((($68)) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (+($70>>>0));
 $72 = 2.0 / $71;
 $shift_y = $72;
 $i = 0;
 while(1) {
  $73 = $i;
  $74 = ($73>>>0)<(4);
  if (!($74)) {
   break;
  }
  $75 = $i;
  $76 = $75<<1;
  $77 = (($76) + 0)|0;
  $78 = $1;
  $79 = (($78) + ($77<<2)|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $shift_x;
  $82 = $80 - $81;
  $83 = $i;
  $84 = $83<<1;
  $85 = (($84) + 0)|0;
  $86 = $2;
  $87 = (($86) + ($85<<2)|0);
  HEAPF32[$87>>2] = $82;
  $88 = $i;
  $89 = $88<<1;
  $90 = (($89) + 1)|0;
  $91 = $1;
  $92 = (($91) + ($90<<2)|0);
  $93 = +HEAPF32[$92>>2];
  $94 = $shift_y;
  $95 = $93 - $94;
  $96 = $i;
  $97 = $96<<1;
  $98 = (($97) + 1)|0;
  $99 = $2;
  $100 = (($99) + ($98<<2)|0);
  HEAPF32[$100>>2] = $95;
  $101 = $i;
  $102 = (($101) + 1)|0;
  $i = $102;
 }
 $lx = 0.0;
 $103 = $0;
 $104 = ((($103)) + 2336|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (+($105|0));
 $107 = $0;
 $108 = ((($107)) + 2068|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (+($109|0));
 $111 = $106 / $110;
 $hx = $111;
 $112 = $0;
 $113 = ((($112)) + 2340|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (+($114|0));
 $116 = $0;
 $117 = ((($116)) + 2072|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (+($118|0));
 $120 = $115 / $119;
 $121 = 1.0 - $120;
 $ly = $121;
 $hy = 1.0;
 $122 = $lx;
 $123 = $3;
 HEAPF32[$123>>2] = $122;
 $124 = $hx;
 $125 = $3;
 $126 = ((($125)) + 8|0);
 HEAPF32[$126>>2] = $124;
 $127 = $lx;
 $128 = $3;
 $129 = ((($128)) + 16|0);
 HEAPF32[$129>>2] = $127;
 $130 = $hx;
 $131 = $3;
 $132 = ((($131)) + 24|0);
 HEAPF32[$132>>2] = $130;
 $133 = $ly;
 $134 = $3;
 $135 = ((($134)) + 4|0);
 HEAPF32[$135>>2] = $133;
 $136 = $ly;
 $137 = $3;
 $138 = ((($137)) + 12|0);
 HEAPF32[$138>>2] = $136;
 $139 = $hy;
 $140 = $3;
 $141 = ((($140)) + 20|0);
 HEAPF32[$141>>2] = $139;
 $142 = $hy;
 $143 = $3;
 $144 = ((($143)) + 28|0);
 HEAPF32[$144>>2] = $142;
 STACKTOP = sp;return;
}
function _gfx_ctx_find_driver($ident) {
 $ident = $ident|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ident;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(1);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $i;
  $5 = (270672 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = (_strcmp($8,$9)|0);
  $11 = ($10|0)==(0);
  $12 = $i;
  if ($11) {
   label = 4;
   break;
  }
  $15 = (($12) + 1)|0;
  $i = $15;
 }
 if ((label|0) == 4) {
  $13 = (270672 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _gfx_ctx_init_first($api,$major,$minor) {
 $api = $api|0;
 $major = $major|0;
 $minor = $minor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $api;
 $2 = $major;
 $3 = $minor;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4>>>0)<(1);
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = $i;
  $7 = (270672 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = $2;
  $13 = $3;
  $14 = (FUNCTION_TABLE_iiii[$10 & 1023]($11,$12,$13)|0);
  if ($14) {
   $15 = $i;
   $16 = (270672 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_i[$18 & 511]()|0);
   if ($19) {
    label = 5;
    break;
   }
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 if ((label|0) == 5) {
  $20 = $i;
  $21 = (270672 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $0 = $22;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _gfx_ctx_init() {
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $height = 0, $num_config = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr5 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $width = sp + 32|0;
 $height = sp + 28|0;
 $num_config = sp + 24|0;
 $1 = HEAP8[102648>>0]|0;
 $2 = $1&1;
 if ($2) {
  $3 = HEAP32[(259664)>>2]|0;
  $4 = ($3|0)!=(0|0);
  $5 = HEAP32[(259664)>>2]|0;
  $6 = HEAP32[544648>>2]|0;
  $7 = $4 ? $5 : $6;
  (_fprintf($7,772096,$vararg_buffer)|0);
  $8 = HEAP32[(259664)>>2]|0;
  $9 = ($8|0)!=(0|0);
  $10 = HEAP32[(259664)>>2]|0;
  $11 = HEAP32[544648>>2]|0;
  $12 = $9 ? $10 : $11;
  (_fflush($12)|0);
 }
 $13 = HEAP8[772069>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = HEAP8[102648>>0]|0;
  $16 = $15&1;
  if ($16) {
   $17 = HEAP32[(259664)>>2]|0;
   $18 = ($17|0)!=(0|0);
   $19 = HEAP32[(259664)>>2]|0;
   $20 = HEAP32[544648>>2]|0;
   $21 = $18 ? $19 : $20;
   (_fprintf($21,772142,$vararg_buffer1)|0);
   $22 = HEAP32[(259664)>>2]|0;
   $23 = ($22|0)!=(0|0);
   $24 = HEAP32[(259664)>>2]|0;
   $25 = HEAP32[544648>>2]|0;
   $26 = $23 ? $24 : $25;
   (_fflush($26)|0);
  }
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $72 = $$pre_trunc&1;
  STACKTOP = sp;return ($72|0);
 }
 $27 = (_eglGetDisplay(0)|0);
 HEAP32[270804>>2] = $27;
 $28 = HEAP32[270804>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = HEAP32[270804>>2]|0;
  $31 = (_eglInitialize(($30|0),(0|0),(0|0))|0);
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = HEAP32[270804>>2]|0;
   $34 = (_eglChooseConfig(($33|0),(270748|0),(270808|0),1,($num_config|0))|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = HEAP32[270804>>2]|0;
    $37 = HEAP32[270808>>2]|0;
    $38 = (_eglCreateContext(($36|0),($37|0),(0|0),(270792|0))|0);
    HEAP32[270812>>2] = $38;
    $39 = HEAP32[270812>>2]|0;
    $40 = ($39|0)!=(0|0);
    if ($40) {
     $41 = HEAP32[270804>>2]|0;
     $42 = HEAP32[270808>>2]|0;
     $43 = (_eglCreateWindowSurface(($41|0),($42|0),0,(0|0))|0);
     HEAP32[270816>>2] = $43;
     $44 = HEAP32[270816>>2]|0;
     $45 = ($44|0)!=(0|0);
     if ($45) {
      $46 = HEAP32[270804>>2]|0;
      $47 = HEAP32[270816>>2]|0;
      $48 = HEAP32[270816>>2]|0;
      $49 = HEAP32[270812>>2]|0;
      $50 = (_eglMakeCurrent(($46|0),($47|0),($48|0),($49|0))|0);
      $51 = ($50|0)!=(0);
      if ($51) {
       $52 = HEAP32[270804>>2]|0;
       $53 = HEAP32[270816>>2]|0;
       (_eglQuerySurface(($52|0),($53|0),12375,($width|0))|0);
       $54 = HEAP32[270804>>2]|0;
       $55 = HEAP32[270816>>2]|0;
       (_eglQuerySurface(($54|0),($55|0),12374,($height|0))|0);
       $56 = HEAP32[$width>>2]|0;
       HEAP32[270820>>2] = $56;
       $57 = HEAP32[$height>>2]|0;
       HEAP32[270824>>2] = $57;
       $58 = HEAP8[102648>>0]|0;
       $59 = $58&1;
       if ($59) {
        $60 = HEAP32[(259664)>>2]|0;
        $61 = ($60|0)!=(0|0);
        $62 = HEAP32[(259664)>>2]|0;
        $63 = HEAP32[544648>>2]|0;
        $64 = $61 ? $62 : $63;
        $65 = HEAP32[$width>>2]|0;
        $66 = HEAP32[$height>>2]|0;
        HEAP32[$vararg_buffer3>>2] = $65;
        $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
        HEAP32[$vararg_ptr5>>2] = $66;
        (_fprintf($64,772207,$vararg_buffer3)|0);
        $67 = HEAP32[(259664)>>2]|0;
        $68 = ($67|0)!=(0|0);
        $69 = HEAP32[(259664)>>2]|0;
        $70 = HEAP32[544648>>2]|0;
        $71 = $68 ? $69 : $70;
        (_fflush($71)|0);
       }
       $$expand_i1_val7 = 1;
       HEAP8[$0>>0] = $$expand_i1_val7;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $72 = $$pre_trunc&1;
       STACKTOP = sp;return ($72|0);
      }
     }
    }
   }
  }
 }
 _gfx_ctx_destroy();
 $$expand_i1_val9 = 0;
 HEAP8[$0>>0] = $$expand_i1_val9;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $72 = $$pre_trunc&1;
 STACKTOP = sp;return ($72|0);
}
function _gfx_ctx_destroy() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[270804>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[270804>>2]|0;
  (_eglMakeCurrent(($2|0),(0|0),(0|0),(0|0))|0);
  $3 = HEAP32[270812>>2]|0;
  $4 = ($3|0)!=(0|0);
  if ($4) {
   $5 = HEAP32[270804>>2]|0;
   $6 = HEAP32[270812>>2]|0;
   (_eglDestroyContext(($5|0),($6|0))|0);
  }
  $7 = HEAP32[270816>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = HEAP32[270804>>2]|0;
   $10 = HEAP32[270816>>2]|0;
   (_eglDestroySurface(($9|0),($10|0))|0);
  }
  $11 = HEAP32[270804>>2]|0;
  (_eglTerminate(($11|0))|0);
 }
 HEAP32[270812>>2] = 0;
 HEAP32[270816>>2] = 0;
 HEAP32[270804>>2] = 0;
 HEAP32[270808>>2] = 0;
 HEAP8[772069>>0] = 0;
 return;
}
function _gfx_ctx_bind_api($api,$major,$minor) {
 $api = $api|0;
 $major = $major|0;
 $minor = $minor|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $api;
 $2 = $major;
 $3 = $minor;
 $4 = $1;
 $cond = ($4|0)==(1);
 if ($cond) {
  $5 = (_eglBindAPI(12448)|0);
  $6 = ($5|0)!=(0);
  $$expand_i1_val = $6&1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function _gfx_ctx_swap_interval($interval) {
 $interval = $interval|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $interval;
 STACKTOP = sp;return;
}
function _gfx_ctx_set_video_mode($width,$height,$fullscreen) {
 $width = $width|0;
 $height = $height|0;
 $fullscreen = $fullscreen|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 9|0;
 $1 = $width;
 $2 = $height;
 $4 = $fullscreen&1;
 $3 = $4;
 $5 = HEAP8[772069>>0]|0;
 $6 = $5&1;
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  HEAP8[772069>>0] = 1;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function _gfx_ctx_get_video_size($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 $2 = HEAP32[270820>>2]|0;
 $3 = $0;
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[270824>>2]|0;
 $5 = $1;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _gfx_ctx_translate_aspect($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 $2 = $0;
 $3 = (+($2>>>0));
 $4 = $1;
 $5 = (+($4>>>0));
 $6 = $3 / $5;
 STACKTOP = sp;return (+$6);
}
function _gfx_ctx_update_window_title() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 8|0;
 $0 = (_gfx_get_fps($buf,128,0)|0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = HEAP8[102648>>0]|0;
 $2 = $1&1;
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[(259664)>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = HEAP32[(259664)>>2]|0;
 $6 = HEAP32[544648>>2]|0;
 $7 = $4 ? $5 : $6;
 HEAP32[$vararg_buffer>>2] = $buf;
 (_fprintf($7,772081,$vararg_buffer)|0);
 $8 = HEAP32[(259664)>>2]|0;
 $9 = ($8|0)!=(0|0);
 $10 = HEAP32[(259664)>>2]|0;
 $11 = HEAP32[544648>>2]|0;
 $12 = $9 ? $10 : $11;
 (_fflush($12)|0);
 STACKTOP = sp;return;
}
function _gfx_ctx_check_window($quit,$resize,$width,$height,$frame_count) {
 $quit = $quit|0;
 $resize = $resize|0;
 $width = $width|0;
 $height = $height|0;
 $frame_count = $frame_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $isFullscreen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iWidth = sp + 8|0;
 $iHeight = sp + 4|0;
 $isFullscreen = sp;
 $0 = $quit;
 $1 = $resize;
 $2 = $width;
 $3 = $height;
 $4 = $frame_count;
 _emscripten_get_canvas_size(($iWidth|0),($iHeight|0),($isFullscreen|0));
 $5 = HEAP32[$iWidth>>2]|0;
 $6 = $2;
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$iHeight>>2]|0;
 $8 = $3;
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[270820>>2]|0;
 $12 = ($10|0)!=($11|0);
 if ($12) {
  label = 3;
 } else {
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[270824>>2]|0;
  $16 = ($14|0)!=($15|0);
  if ($16) {
   label = 3;
  } else {
   $18 = $1;
   HEAP8[$18>>0] = 0;
  }
 }
 if ((label|0) == 3) {
  $17 = $1;
  HEAP8[$17>>0] = 1;
 }
 $19 = HEAP32[$iWidth>>2]|0;
 HEAP32[270820>>2] = $19;
 $20 = HEAP32[$iHeight>>2]|0;
 HEAP32[270824>>2] = $20;
 $21 = $0;
 HEAP8[$21>>0] = 0;
 STACKTOP = sp;return;
}
function _gfx_ctx_set_resize($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 STACKTOP = sp;return;
}
function _gfx_ctx_has_focus() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[772069>>0]|0;
 $1 = $0&1;
 return ($1|0);
}
function _gfx_ctx_swap_buffers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gfx_ctx_input_driver($input,$input_data) {
 $input = $input|0;
 $input_data = $input_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rwebinput = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $input;
 $1 = $input_data;
 $2 = $0;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[269476>>2]|0;
 $4 = (FUNCTION_TABLE_i[$3 & 511]()|0);
 $rwebinput = $4;
 $5 = $rwebinput;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 HEAP32[$7>>2] = 269476;
 $8 = $rwebinput;
 $9 = $1;
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function _gfx_ctx_get_proc_address($symbol) {
 $symbol = $symbol|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $symbol;
 $1 = $0;
 $2 = (_eglGetProcAddress(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function _gfx_ctx_init_egl_image_buffer($video) {
 $video = $video|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $video;
 STACKTOP = sp;return 0;
}
function _gfx_ctx_write_egl_image($frame,$width,$height,$pitch,$rgb32,$index,$image_handle) {
 $frame = $frame|0;
 $width = $width|0;
 $height = $height|0;
 $pitch = $pitch|0;
 $rgb32 = $rgb32|0;
 $index = $index|0;
 $image_handle = $image_handle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $frame;
 $1 = $width;
 $2 = $height;
 $3 = $pitch;
 $7 = $rgb32&1;
 $4 = $7;
 $5 = $index;
 $6 = $image_handle;
 STACKTOP = sp;return 0;
}
function _gl_glsl_set_get_proc_address($proc) {
 $proc = $proc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = $0;
 HEAP32[270876>>2] = $1;
 STACKTOP = sp;return;
}
function _gl_glsl_set_context_type($core_profile,$major,$minor) {
 $core_profile = $core_profile|0;
 $major = $major|0;
 $minor = $minor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $core_profile&1;
 $0 = $3;
 $1 = $major;
 $2 = $minor;
 $4 = $0;
 $5 = $4&1;
 $6 = $5&1;
 HEAP8[772255>>0] = $6;
 $7 = $1;
 HEAP32[270880>>2] = $7;
 $8 = $2;
 HEAP32[270884>>2] = $8;
 STACKTOP = sp;return;
}
function _gl_glsl_init($path) {
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $conf = 0, $i = 0, $i1 = 0, $info = 0, $ret = 0, $stock_fragment = 0, $stock_vertex = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 81|0;
 $info = sp + 48|0;
 $1 = $path;
 $2 = (_calloc(1,109528)|0);
 HEAP32[270888>>2] = $2;
 $3 = HEAP32[270888>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $217 = $$pre_trunc&1;
  STACKTOP = sp;return ($217|0);
 }
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = (_path_get_extension($7)|0);
  $9 = (_strcmp($8,774918)|0);
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    $11 = HEAP32[270888>>2]|0;
    $12 = ((($11)) + 76|0);
    $13 = $1;
    (_strlcpy_rarch__($12,$13,4096)|0);
    $14 = HEAP32[270888>>2]|0;
    $15 = ((($14)) + 72|0);
    HEAP32[$15>>2] = 1;
    $16 = HEAP32[270888>>2]|0;
    $17 = ((($16)) + 4|0);
    HEAP8[$17>>0] = 1;
    $ret = 1;
   } else {
    $18 = $1;
    $19 = (_path_get_extension($18)|0);
    $20 = (_strcmp($19,774923)|0);
    $21 = ($20|0)==(0);
    $22 = $1;
    if (!($21)) {
     $33 = HEAP32[270888>>2]|0;
     $34 = (_gfx_shader_read_xml($22,$33)|0);
     $35 = $34&1;
     $ret = $35;
     break;
    }
    $23 = (_config_file_new($22)|0);
    $conf = $23;
    $24 = $conf;
    $25 = ($24|0)!=(0|0);
    if ($25) {
     $26 = $conf;
     $27 = HEAP32[270888>>2]|0;
     $28 = (_gfx_shader_read_conf_cgp($26,$27)|0);
     $29 = $28&1;
     $ret = $29;
     $30 = HEAP32[270888>>2]|0;
     $31 = ((($30)) + 4|0);
     HEAP8[$31>>0] = 1;
     $32 = $conf;
     _config_file_free($32);
     break;
    } else {
     $ret = 0;
     break;
    }
   }
  } while(0);
  $36 = $ret;
  $37 = $36&1;
  if (!($37)) {
   $38 = HEAP32[(259664)>>2]|0;
   $39 = ($38|0)!=(0|0);
   $40 = HEAP32[(259664)>>2]|0;
   $41 = HEAP32[544648>>2]|0;
   $42 = $39 ? $40 : $41;
   (_fprintf($42,774929,$vararg_buffer)|0);
   $43 = HEAP32[(259664)>>2]|0;
   $44 = ($43|0)!=(0|0);
   $45 = HEAP32[(259664)>>2]|0;
   $46 = HEAP32[544648>>2]|0;
   $47 = $44 ? $45 : $46;
   (_fflush($47)|0);
   $$expand_i1_val12 = 0;
   HEAP8[$0>>0] = $$expand_i1_val12;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $217 = $$pre_trunc&1;
   STACKTOP = sp;return ($217|0);
  }
 } else {
  $48 = HEAP32[(259664)>>2]|0;
  $49 = ($48|0)!=(0|0);
  $50 = HEAP32[(259664)>>2]|0;
  $51 = HEAP32[544648>>2]|0;
  $52 = $49 ? $50 : $51;
  (_fprintf($52,774986,$vararg_buffer1)|0);
  $53 = HEAP32[(259664)>>2]|0;
  $54 = ($53|0)!=(0|0);
  $55 = HEAP32[(259664)>>2]|0;
  $56 = HEAP32[544648>>2]|0;
  $57 = $54 ? $55 : $56;
  (_fflush($57)|0);
  $58 = HEAP32[270888>>2]|0;
  $59 = ((($58)) + 72|0);
  HEAP32[$59>>2] = 1;
  $60 = HEAP8[772255>>0]|0;
  $61 = $60&1;
  $62 = HEAP32[270892>>2]|0;
  $63 = HEAP32[270896>>2]|0;
  $64 = $61 ? $62 : $63;
  $65 = (___strdup($64)|0);
  $66 = HEAP32[270888>>2]|0;
  $67 = ((($66)) + 76|0);
  $68 = ((($67)) + 4096|0);
  HEAP32[$68>>2] = $65;
  $69 = HEAP8[772255>>0]|0;
  $70 = $69&1;
  $71 = HEAP32[270900>>2]|0;
  $72 = HEAP32[270904>>2]|0;
  $73 = $70 ? $71 : $72;
  $74 = (___strdup($73)|0);
  $75 = HEAP32[270888>>2]|0;
  $76 = ((($75)) + 76|0);
  $77 = ((($76)) + 4096|0);
  $78 = ((($77)) + 4|0);
  HEAP32[$78>>2] = $74;
  $79 = HEAP32[270888>>2]|0;
  $80 = ((($79)) + 4|0);
  HEAP8[$80>>0] = 1;
 }
 $81 = HEAP32[270888>>2]|0;
 $82 = $1;
 _gfx_shader_resolve_relative($81,$82);
 $83 = HEAP32[270888>>2]|0;
 $84 = ((($83)) + 4|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&1;
 $87 = HEAP32[270896>>2]|0;
 $88 = HEAP32[270908>>2]|0;
 $89 = $86 ? $87 : $88;
 $stock_vertex = $89;
 $90 = HEAP32[270888>>2]|0;
 $91 = ((($90)) + 4|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&1;
 $94 = HEAP32[270904>>2]|0;
 $95 = HEAP32[270912>>2]|0;
 $96 = $93 ? $94 : $95;
 $stock_fragment = $96;
 $97 = HEAP8[772255>>0]|0;
 $98 = $97&1;
 if ($98) {
  $99 = HEAP32[270892>>2]|0;
  $stock_vertex = $99;
  $100 = HEAP32[270900>>2]|0;
  $stock_fragment = $100;
 }
 $101 = HEAP32[270888>>2]|0;
 $102 = ((($101)) + 4|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&1;
 do {
  if ($104) {
   $115 = $stock_vertex;
   $116 = $stock_fragment;
   $117 = (_compile_program($115,$116,0)|0);
   HEAP32[270924>>2] = $117;
   $118 = ($117|0)!=(0);
   if (!($118)) {
    $119 = HEAP32[(259664)>>2]|0;
    $120 = ($119|0)!=(0|0);
    $121 = HEAP32[(259664)>>2]|0;
    $122 = HEAP32[544648>>2]|0;
    $123 = $120 ? $121 : $122;
    (_fprintf($123,775137,$vararg_buffer5)|0);
    $124 = HEAP32[(259664)>>2]|0;
    $125 = ($124|0)!=(0|0);
    $126 = HEAP32[(259664)>>2]|0;
    $127 = HEAP32[544648>>2]|0;
    $128 = $125 ? $126 : $127;
    (_fflush($128)|0);
    break;
   }
   $129 = (_compile_programs((270928))|0);
   if ($129) {
    $130 = (_load_luts()|0);
    if (!($130)) {
     $131 = HEAP32[(259664)>>2]|0;
     $132 = ($131|0)!=(0|0);
     $133 = HEAP32[(259664)>>2]|0;
     $134 = HEAP32[544648>>2]|0;
     $135 = $132 ? $133 : $134;
     (_fprintf($135,775198,$vararg_buffer7)|0);
     $136 = HEAP32[(259664)>>2]|0;
     $137 = ($136|0)!=(0|0);
     $138 = HEAP32[(259664)>>2]|0;
     $139 = HEAP32[544648>>2]|0;
     $140 = $137 ? $138 : $139;
     (_fflush($140)|0);
     break;
    }
    $i = 0;
    while(1) {
     $141 = $i;
     $142 = HEAP32[270888>>2]|0;
     $143 = ((($142)) + 72|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($141>>>0)<=($144>>>0);
     if (!($145)) {
      break;
     }
     $146 = $i;
     $147 = $i;
     $148 = (270924 + ($147<<2)|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = $i;
     $151 = (271020 + (($150*460)|0)|0);
     _find_uniforms($146,$149,$151);
     $152 = $i;
     $153 = (($152) + 1)|0;
     $i = $153;
    }
    $154 = HEAP32[270888>>2]|0;
    $155 = ((($154)) + 99792|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)!=(0);
    if ($157) {
     ;HEAP32[$info>>2]=0|0;HEAP32[$info+4>>2]=0|0;HEAP32[$info+8>>2]=0|0;
     $158 = HEAP32[265140>>2]|0;
     $159 = (FUNCTION_TABLE_ii[$158 & 511](2)|0);
     HEAP32[$info>>2] = $159;
     $160 = HEAP32[270888>>2]|0;
     $161 = ((($160)) + 99796|0);
     $162 = ((($info)) + 4|0);
     HEAP32[$162>>2] = $161;
     $163 = HEAP32[270888>>2]|0;
     $164 = ((($163)) + 99792|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ((($info)) + 8|0);
     HEAP32[$166>>2] = $165;
     $167 = (_state_tracker_init($info)|0);
     HEAP32[278380>>2] = $167;
     $168 = HEAP32[278380>>2]|0;
     $169 = ($168|0)!=(0|0);
     if (!($169)) {
      $170 = HEAP32[(259664)>>2]|0;
      $171 = ($170|0)!=(0|0);
      $172 = HEAP32[(259664)>>2]|0;
      $173 = HEAP32[544648>>2]|0;
      $174 = $171 ? $172 : $173;
      (_fprintf($174,775247,$vararg_buffer9)|0);
      $175 = HEAP32[(259664)>>2]|0;
      $176 = ($175|0)!=(0|0);
      $177 = HEAP32[(259664)>>2]|0;
      $178 = HEAP32[544648>>2]|0;
      $179 = $176 ? $177 : $178;
      (_fflush($179)|0);
     }
    }
    HEAP8[772256>>0] = 1;
    $180 = HEAP32[270924>>2]|0;
    $181 = HEAP32[270888>>2]|0;
    $182 = ((($181)) + 72|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (($183) + 1)|0;
    $185 = (270924 + ($184<<2)|0);
    HEAP32[$185>>2] = $180;
    $186 = HEAP32[270888>>2]|0;
    $187 = ((($186)) + 72|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (($188) + 1)|0;
    $190 = (271020 + (($189*460)|0)|0);
    _memcpy(($190|0),(271020|0),460)|0;
    $191 = HEAP32[270888>>2]|0;
    $192 = ((($191)) + 4|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193&1;
    if ($194) {
     $195 = HEAP8[772255>>0]|0;
     $196 = $195&1;
     $197 = HEAP32[278384>>2]|0;
     $198 = HEAP32[278388>>2]|0;
     $199 = $196 ? $197 : $198;
     $200 = HEAP8[772255>>0]|0;
     $201 = $200&1;
     $202 = HEAP32[278392>>2]|0;
     $203 = HEAP32[278396>>2]|0;
     $204 = $201 ? $202 : $203;
     $205 = (_compile_program($199,$204,15)|0);
     HEAP32[(270984)>>2] = $205;
     $206 = HEAP32[(270984)>>2]|0;
     _find_uniforms(0,$206,(277920));
    } else {
     $207 = HEAP32[270924>>2]|0;
     HEAP32[(270984)>>2] = $207;
     _memcpy(((277920)|0),(271020|0),460)|0;
    }
    _gl_glsl_reset_attrib();
    $i1 = 0;
    while(1) {
     $208 = $i1;
     $209 = ($208>>>0)<(16);
     if (!($209)) {
      break;
     }
     $210 = $i1;
     $211 = (278516 + (($210*1040)|0)|0);
     _glGenBuffers(1,($211|0));
     $212 = $i1;
     $213 = (278516 + (($212*1040)|0)|0);
     $214 = ((($213)) + 520|0);
     _glGenBuffers(1,($214|0));
     $215 = $i1;
     $216 = (($215) + 1)|0;
     $i1 = $216;
    }
    $$expand_i1_val14 = 1;
    HEAP8[$0>>0] = $$expand_i1_val14;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $217 = $$pre_trunc&1;
    STACKTOP = sp;return ($217|0);
   }
  } else {
   $105 = HEAP32[(259664)>>2]|0;
   $106 = ($105|0)!=(0|0);
   $107 = HEAP32[(259664)>>2]|0;
   $108 = HEAP32[544648>>2]|0;
   $109 = $106 ? $107 : $108;
   (_fprintf($109,775046,$vararg_buffer3)|0);
   $110 = HEAP32[(259664)>>2]|0;
   $111 = ($110|0)!=(0|0);
   $112 = HEAP32[(259664)>>2]|0;
   $113 = HEAP32[544648>>2]|0;
   $114 = $111 ? $112 : $113;
   (_fflush($114)|0);
  }
 } while(0);
 _gl_glsl_deinit();
 $$expand_i1_val16 = 0;
 HEAP8[$0>>0] = $$expand_i1_val16;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $217 = $$pre_trunc&1;
 STACKTOP = sp;return ($217|0);
}
function _compile_program($vertex,$fragment,$i) {
 $vertex = $vertex|0;
 $fragment = $fragment|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $location = 0, $or$cond = 0, $prog = 0, $shader = 0, $shader1 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $vertex;
 $2 = $fragment;
 $3 = $i;
 $4 = (_glCreateProgram()|0);
 $prog = $4;
 $5 = $prog;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $0 = 0;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 do {
  if ($8) {
   $9 = HEAP8[102648>>0]|0;
   $10 = $9&1;
   if ($10) {
    $11 = HEAP32[(259664)>>2]|0;
    $12 = ($11|0)!=(0|0);
    $13 = HEAP32[(259664)>>2]|0;
    $14 = HEAP32[544648>>2]|0;
    $15 = $12 ? $13 : $14;
    (_fprintf($15,774604,$vararg_buffer)|0);
    $16 = HEAP32[(259664)>>2]|0;
    $17 = ($16|0)!=(0|0);
    $18 = HEAP32[(259664)>>2]|0;
    $19 = HEAP32[544648>>2]|0;
    $20 = $17 ? $18 : $19;
    (_fflush($20)|0);
   }
   $21 = (_glCreateShader(35633)|0);
   $shader = $21;
   $22 = $shader;
   $23 = $1;
   $24 = (_compile_shader($22,774642,$23)|0);
   if ($24) {
    $36 = $prog;
    $37 = $shader;
    _glAttachShader(($36|0),($37|0));
    break;
   }
   $25 = HEAP32[(259664)>>2]|0;
   $26 = ($25|0)!=(0|0);
   $27 = HEAP32[(259664)>>2]|0;
   $28 = HEAP32[544648>>2]|0;
   $29 = $26 ? $27 : $28;
   $30 = $3;
   HEAP32[$vararg_buffer2>>2] = $30;
   (_fprintf($29,774658,$vararg_buffer2)|0);
   $31 = HEAP32[(259664)>>2]|0;
   $32 = ($31|0)!=(0|0);
   $33 = HEAP32[(259664)>>2]|0;
   $34 = HEAP32[544648>>2]|0;
   $35 = $32 ? $33 : $34;
   (_fflush($35)|0);
   $0 = 0;
   $103 = $0;
   STACKTOP = sp;return ($103|0);
  }
 } while(0);
 $38 = $2;
 $39 = ($38|0)!=(0|0);
 do {
  if ($39) {
   $40 = HEAP8[102648>>0]|0;
   $41 = $40&1;
   if ($41) {
    $42 = HEAP32[(259664)>>2]|0;
    $43 = ($42|0)!=(0|0);
    $44 = HEAP32[(259664)>>2]|0;
    $45 = HEAP32[544648>>2]|0;
    $46 = $43 ? $44 : $45;
    (_fprintf($46,774716,$vararg_buffer4)|0);
    $47 = HEAP32[(259664)>>2]|0;
    $48 = ($47|0)!=(0|0);
    $49 = HEAP32[(259664)>>2]|0;
    $50 = HEAP32[544648>>2]|0;
    $51 = $48 ? $49 : $50;
    (_fflush($51)|0);
   }
   $52 = (_glCreateShader(35632)|0);
   $shader1 = $52;
   $53 = $shader1;
   $54 = $2;
   $55 = (_compile_shader($53,774756,$54)|0);
   if ($55) {
    $67 = $prog;
    $68 = $shader1;
    _glAttachShader(($67|0),($68|0));
    break;
   }
   $56 = HEAP32[(259664)>>2]|0;
   $57 = ($56|0)!=(0|0);
   $58 = HEAP32[(259664)>>2]|0;
   $59 = HEAP32[544648>>2]|0;
   $60 = $57 ? $58 : $59;
   $61 = $3;
   HEAP32[$vararg_buffer6>>2] = $61;
   (_fprintf($60,774774,$vararg_buffer6)|0);
   $62 = HEAP32[(259664)>>2]|0;
   $63 = ($62|0)!=(0|0);
   $64 = HEAP32[(259664)>>2]|0;
   $65 = HEAP32[544648>>2]|0;
   $66 = $63 ? $64 : $65;
   (_fflush($66)|0);
   $0 = 0;
   $103 = $0;
   STACKTOP = sp;return ($103|0);
  }
 } while(0);
 $69 = $1;
 $70 = ($69|0)!=(0|0);
 $71 = $2;
 $72 = ($71|0)!=(0|0);
 $or$cond = $70 | $72;
 do {
  if ($or$cond) {
   $73 = HEAP8[102648>>0]|0;
   $74 = $73&1;
   if ($74) {
    $75 = HEAP32[(259664)>>2]|0;
    $76 = ($75|0)!=(0|0);
    $77 = HEAP32[(259664)>>2]|0;
    $78 = HEAP32[544648>>2]|0;
    $79 = $76 ? $77 : $78;
    (_fprintf($79,774834,$vararg_buffer9)|0);
    $80 = HEAP32[(259664)>>2]|0;
    $81 = ($80|0)!=(0|0);
    $82 = HEAP32[(259664)>>2]|0;
    $83 = HEAP32[544648>>2]|0;
    $84 = $81 ? $82 : $83;
    (_fflush($84)|0);
   }
   $85 = $prog;
   $86 = (_link_program($85)|0);
   if ($86) {
    $98 = $prog;
    _glUseProgram(($98|0));
    $99 = $prog;
    $100 = (_get_uniform($99,774116)|0);
    $location = $100;
    $101 = $location;
    _glUniform1i(($101|0),0);
    _glUseProgram(0);
    break;
   }
   $87 = HEAP32[(259664)>>2]|0;
   $88 = ($87|0)!=(0|0);
   $89 = HEAP32[(259664)>>2]|0;
   $90 = HEAP32[544648>>2]|0;
   $91 = $88 ? $89 : $90;
   $92 = $3;
   HEAP32[$vararg_buffer11>>2] = $92;
   (_fprintf($91,774868,$vararg_buffer11)|0);
   $93 = HEAP32[(259664)>>2]|0;
   $94 = ($93|0)!=(0|0);
   $95 = HEAP32[(259664)>>2]|0;
   $96 = HEAP32[544648>>2]|0;
   $97 = $94 ? $95 : $96;
   (_fflush($97)|0);
   $0 = 0;
   $103 = $0;
   STACKTOP = sp;return ($103|0);
  }
 } while(0);
 $102 = $prog;
 $0 = $102;
 $103 = $0;
 STACKTOP = sp;return ($103|0);
}
function _compile_shader($shader,$define,$program) {
 $shader = $shader|0;
 $define = $define|0;
 $program = $program|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gl_ver = 0;
 var $source = 0, $status = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $version = 0, $version_no = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $version = sp + 48|0;
 $source = sp + 16|0;
 $status = sp + 12|0;
 $0 = $shader;
 $1 = $define;
 $2 = $program;
 dest=$version; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $3 = HEAP8[772255>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = $2;
  $6 = (_strstr($5,774541)|0);
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   $version_no = 0;
   $8 = HEAP32[270880>>2]|0;
   $9 = ($8*100)|0;
   $10 = HEAP32[270884>>2]|0;
   $11 = ($10*10)|0;
   $12 = (($9) + ($11))|0;
   $gl_ver = $12;
   $13 = $gl_ver;
   switch ($13|0) {
   case 300:  {
    $version_no = 130;
    break;
   }
   case 310:  {
    $version_no = 140;
    break;
   }
   case 320:  {
    $version_no = 150;
    break;
   }
   default: {
    $14 = $gl_ver;
    $version_no = $14;
   }
   }
   $15 = $version_no;
   HEAP32[$vararg_buffer>>2] = $15;
   (_snprintf($version,32,774550,$vararg_buffer)|0);
   $16 = HEAP8[102648>>0]|0;
   $17 = $16&1;
   if ($17) {
    $18 = HEAP32[(259664)>>2]|0;
    $19 = ($18|0)!=(0|0);
    $20 = HEAP32[(259664)>>2]|0;
    $21 = HEAP32[544648>>2]|0;
    $22 = $19 ? $20 : $21;
    $23 = $version_no;
    HEAP32[$vararg_buffer1>>2] = $23;
    (_fprintf($22,774563,$vararg_buffer1)|0);
    $24 = HEAP32[(259664)>>2]|0;
    $25 = ($24|0)!=(0|0);
    $26 = HEAP32[(259664)>>2]|0;
    $27 = HEAP32[544648>>2]|0;
    $28 = $25 ? $26 : $27;
    (_fflush($28)|0);
   }
  }
 }
 HEAP32[$source>>2] = $version;
 $29 = ((($source)) + 4|0);
 $30 = $1;
 HEAP32[$29>>2] = $30;
 $31 = ((($29)) + 4|0);
 $32 = $2;
 HEAP32[$31>>2] = $32;
 $33 = $0;
 _glShaderSource(($33|0),3,($source|0),(0|0));
 $34 = $0;
 _glCompileShader(($34|0));
 $35 = $0;
 _glGetShaderiv(($35|0),35713,($status|0));
 $36 = $0;
 _print_shader_log($36);
 $37 = HEAP32[$status>>2]|0;
 $38 = ($37|0)==(1);
 STACKTOP = sp;return ($38|0);
}
function _print_shader_log($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info_len = 0, $info_log = 0, $max_len = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $info_len = sp + 12|0;
 $max_len = sp + 8|0;
 $0 = $obj;
 HEAP32[$info_len>>2] = 0;
 $1 = $0;
 _glGetShaderiv(($1|0),35716,($max_len|0));
 $2 = HEAP32[$max_len>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$max_len>>2]|0;
 $5 = (_malloc($4)|0);
 $info_log = $5;
 $6 = $info_log;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = HEAP32[$max_len>>2]|0;
 $10 = $info_log;
 _glGetShaderInfoLog(($8|0),($9|0),($info_len|0),($10|0));
 $11 = HEAP32[$info_len>>2]|0;
 $12 = ($11|0)>(0);
 if ($12) {
  $13 = HEAP8[102648>>0]|0;
  $14 = $13&1;
  if ($14) {
   $15 = HEAP32[(259664)>>2]|0;
   $16 = ($15|0)!=(0|0);
   $17 = HEAP32[(259664)>>2]|0;
   $18 = HEAP32[544648>>2]|0;
   $19 = $16 ? $17 : $18;
   $20 = $info_log;
   HEAP32[$vararg_buffer>>2] = $20;
   (_fprintf($19,774514,$vararg_buffer)|0);
   $21 = HEAP32[(259664)>>2]|0;
   $22 = ($21|0)!=(0|0);
   $23 = HEAP32[(259664)>>2]|0;
   $24 = HEAP32[544648>>2]|0;
   $25 = $22 ? $23 : $24;
   (_fflush($25)|0);
  }
 }
 $26 = $info_log;
 _free($26);
 STACKTOP = sp;return;
}
function _link_program($prog) {
 $prog = $prog|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $status = sp;
 $1 = $prog;
 $2 = $1;
 _glLinkProgram(($2|0));
 $3 = $1;
 _glGetProgramiv(($3|0),35714,($status|0));
 $4 = $1;
 _print_linker_log($4);
 $5 = HEAP32[$status>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = $1;
  _glUseProgram(($7|0));
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $8 = $$pre_trunc&1;
  STACKTOP = sp;return ($8|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $8 = $$pre_trunc&1;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _print_linker_log($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info_len = 0, $info_log = 0, $max_len = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $info_len = sp + 12|0;
 $max_len = sp + 8|0;
 $0 = $obj;
 HEAP32[$info_len>>2] = 0;
 $1 = $0;
 _glGetProgramiv(($1|0),35716,($max_len|0));
 $2 = HEAP32[$max_len>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$max_len>>2]|0;
 $5 = (_malloc($4)|0);
 $info_log = $5;
 $6 = $info_log;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = HEAP32[$max_len>>2]|0;
 $10 = $info_log;
 _glGetProgramInfoLog(($8|0),($9|0),($info_len|0),($10|0));
 $11 = HEAP32[$info_len>>2]|0;
 $12 = ($11|0)>(0);
 if ($12) {
  $13 = HEAP8[102648>>0]|0;
  $14 = $13&1;
  if ($14) {
   $15 = HEAP32[(259664)>>2]|0;
   $16 = ($15|0)!=(0|0);
   $17 = HEAP32[(259664)>>2]|0;
   $18 = HEAP32[544648>>2]|0;
   $19 = $16 ? $17 : $18;
   $20 = $info_log;
   HEAP32[$vararg_buffer>>2] = $20;
   (_fprintf($19,774487,$vararg_buffer)|0);
   $21 = HEAP32[(259664)>>2]|0;
   $22 = ($21|0)!=(0|0);
   $23 = HEAP32[(259664)>>2]|0;
   $24 = HEAP32[544648>>2]|0;
   $25 = $22 ? $23 : $24;
   (_fflush($25)|0);
  }
 }
 $26 = $info_log;
 _free($26);
 STACKTOP = sp;return;
}
function _get_uniform($prog,$base) {
 $prog = $prog|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i = 0, $loc = 0, $loc1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 40|0;
 $1 = $prog;
 $2 = $base;
 $3 = HEAP32[270888>>2]|0;
 $4 = ((($3)) + 5|0);
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_snprintf($buf,64,774111,$vararg_buffer)|0);
 $6 = $1;
 $7 = (_glGetUniformLocation(($6|0),($buf|0))|0);
 $loc = $7;
 $8 = $loc;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $loc;
  $0 = $10;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11>>>0)<(2);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $i;
  $14 = (270916 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  HEAP32[$vararg_buffer2>>2] = $15;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $16;
  (_snprintf($buf,64,774111,$vararg_buffer2)|0);
  $17 = $1;
  $18 = (_glGetUniformLocation(($17|0),($buf|0))|0);
  $loc1 = $18;
  $19 = $loc1;
  $20 = ($19|0)>=(0);
  if ($20) {
   label = 6;
   break;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 if ((label|0) == 6) {
  $21 = $loc1;
  $0 = $21;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _compile_programs($gl_prog) {
 $gl_prog = $gl_prog|0;
 var $$expand_i1_val = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $fragment = 0, $i = 0, $pass = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vertex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = $gl_prog;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[270888>>2]|0;
  $4 = ((($3)) + 72|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   label = 9;
   break;
  }
  $7 = $i;
  $8 = HEAP32[270888>>2]|0;
  $9 = ((($8)) + 76|0);
  $10 = (($9) + (($7*4148)|0)|0);
  $pass = $10;
  $11 = $pass;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $pass;
   $16 = $pass;
   $17 = (_load_source_path($15,$16)|0);
   if (!($17)) {
    label = 5;
    break;
   }
  }
  $29 = $pass;
  HEAP8[$29>>0] = 0;
  $30 = $pass;
  $31 = ((($30)) + 4096|0);
  $32 = HEAP32[$31>>2]|0;
  $vertex = $32;
  $33 = $pass;
  $34 = ((($33)) + 4096|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $fragment = $36;
  $37 = $vertex;
  $38 = $fragment;
  $39 = $i;
  $40 = (_compile_program($37,$38,$39)|0);
  $41 = $i;
  $42 = $1;
  $43 = (($42) + ($41<<2)|0);
  HEAP32[$43>>2] = $40;
  $44 = $i;
  $45 = $1;
  $46 = (($45) + ($44<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0);
  if (!($48)) {
   label = 7;
   break;
  }
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 if ((label|0) == 5) {
  $18 = HEAP32[(259664)>>2]|0;
  $19 = ($18|0)!=(0|0);
  $20 = HEAP32[(259664)>>2]|0;
  $21 = HEAP32[544648>>2]|0;
  $22 = $19 ? $20 : $21;
  $23 = $pass;
  HEAP32[$vararg_buffer>>2] = $23;
  (_fprintf($22,774378,$vararg_buffer)|0);
  $24 = HEAP32[(259664)>>2]|0;
  $25 = ($24|0)!=(0|0);
  $26 = HEAP32[(259664)>>2]|0;
  $27 = HEAP32[544648>>2]|0;
  $28 = $25 ? $26 : $27;
  (_fflush($28)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 7) {
  $49 = HEAP32[(259664)>>2]|0;
  $50 = ($49|0)!=(0|0);
  $51 = HEAP32[(259664)>>2]|0;
  $52 = HEAP32[544648>>2]|0;
  $53 = $50 ? $51 : $52;
  $54 = $i;
  HEAP32[$vararg_buffer1>>2] = $54;
  (_fprintf($53,774432,$vararg_buffer1)|0);
  $55 = HEAP32[(259664)>>2]|0;
  $56 = ($55|0)!=(0|0);
  $57 = HEAP32[(259664)>>2]|0;
  $58 = HEAP32[544648>>2]|0;
  $59 = $56 ? $57 : $58;
  (_fflush($59)|0);
  $$expand_i1_val5 = 0;
  HEAP8[$0>>0] = $$expand_i1_val5;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 9) {
  $$expand_i1_val7 = 1;
  HEAP8[$0>>0] = $$expand_i1_val7;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _load_source_path($pass,$path) {
 $pass = $pass|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $pass;
 $2 = $path;
 $3 = $2;
 $4 = $1;
 $5 = ((($4)) + 4096|0);
 $6 = (_read_file($3,$5)|0);
 $7 = ($6|0)<=(0);
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $25 = $$pre_trunc&1;
  STACKTOP = sp;return ($25|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4096|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (___strdup($10)|0);
 $12 = $1;
 $13 = ((($12)) + 4096|0);
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $11;
 $15 = $1;
 $16 = ((($15)) + 4096|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 4096|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  $24 = $23;
 } else {
  $24 = 0;
 }
 $$expand_i1_val2 = $24&1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $25 = $$pre_trunc&1;
 STACKTOP = sp;return ($25|0);
}
function _load_luts() {
 var $$expand_i1_val = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $filter = 0, $i = 0, $img = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $img = sp + 16|0;
 $1 = HEAP32[270888>>2]|0;
 $2 = ((($1)) + 66444|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $76 = $$pre_trunc&1;
  STACKTOP = sp;return ($76|0);
 }
 _glGenTextures(1,(270988|0));
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = HEAP32[270888>>2]|0;
  $7 = ((($6)) + 66444|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   label = 10;
   break;
  }
  $10 = HEAP8[102648>>0]|0;
  $11 = $10&1;
  if ($11) {
   $12 = HEAP32[(259664)>>2]|0;
   $13 = ($12|0)!=(0|0);
   $14 = HEAP32[(259664)>>2]|0;
   $15 = HEAP32[544648>>2]|0;
   $16 = $13 ? $14 : $15;
   $17 = $i;
   $18 = HEAP32[270888>>2]|0;
   $19 = ((($18)) + 66448|0);
   $20 = (($19) + (($17*4168)|0)|0);
   $21 = ((($20)) + 64|0);
   HEAP32[$vararg_buffer>>2] = $21;
   (_fprintf($16,774267,$vararg_buffer)|0);
   $22 = HEAP32[(259664)>>2]|0;
   $23 = ($22|0)!=(0|0);
   $24 = HEAP32[(259664)>>2]|0;
   $25 = HEAP32[544648>>2]|0;
   $26 = $23 ? $24 : $25;
   (_fflush($26)|0);
  }
  ;HEAP32[$img>>2]=0|0;HEAP32[$img+4>>2]=0|0;HEAP32[$img+8>>2]=0|0;
  $27 = $i;
  $28 = HEAP32[270888>>2]|0;
  $29 = ((($28)) + 66448|0);
  $30 = (($29) + (($27*4168)|0)|0);
  $31 = ((($30)) + 64|0);
  $32 = (_texture_image_load($31,$img)|0);
  if (!($32)) {
   label = 8;
   break;
  }
  $48 = $i;
  $49 = (270988 + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  _glBindTexture(3553,($50|0));
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
  $51 = $i;
  $52 = HEAP32[270888>>2]|0;
  $53 = ((($52)) + 66448|0);
  $54 = (($53) + (($51*4168)|0)|0);
  $55 = ((($54)) + 4160|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(2);
  $58 = $57 ? 9728 : 9729;
  $filter = $58;
  $59 = $filter;
  _glTexParameteri(3553,10240,($59|0));
  $60 = $filter;
  _glTexParameteri(3553,10241,($60|0));
  _glPixelStorei(3317,4);
  $61 = HEAP8[(188)>>0]|0;
  $62 = $61&1;
  $63 = $62 ? 6408 : 32993;
  $64 = HEAP32[$img>>2]|0;
  $65 = ((($img)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP8[(188)>>0]|0;
  $68 = $67&1;
  $69 = $68 ? 6408 : 32993;
  $70 = ((($img)) + 8|0);
  $71 = HEAP32[$70>>2]|0;
  _glTexImage2D(3553,0,($63|0),($64|0),($66|0),0,($69|0),5121,($71|0));
  _glBindTexture(3553,0);
  $72 = ((($img)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  _free($73);
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 if ((label|0) == 8) {
  $33 = HEAP32[(259664)>>2]|0;
  $34 = ($33|0)!=(0|0);
  $35 = HEAP32[(259664)>>2]|0;
  $36 = HEAP32[544648>>2]|0;
  $37 = $34 ? $35 : $36;
  $38 = $i;
  $39 = HEAP32[270888>>2]|0;
  $40 = ((($39)) + 66448|0);
  $41 = (($40) + (($38*4168)|0)|0);
  $42 = ((($41)) + 64|0);
  HEAP32[$vararg_buffer1>>2] = $42;
  (_fprintf($37,774316,$vararg_buffer1)|0);
  $43 = HEAP32[(259664)>>2]|0;
  $44 = ($43|0)!=(0|0);
  $45 = HEAP32[(259664)>>2]|0;
  $46 = HEAP32[544648>>2]|0;
  $47 = $44 ? $45 : $46;
  (_fflush($47)|0);
  $$expand_i1_val5 = 0;
  HEAP8[$0>>0] = $$expand_i1_val5;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $76 = $$pre_trunc&1;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 10) {
  $$expand_i1_val7 = 1;
  HEAP8[$0>>0] = $$expand_i1_val7;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $76 = $$pre_trunc&1;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _find_uniforms($pass,$prog,$uni) {
 $pass = $pass|0;
 $prog = $prog|0;
 $uni = $uni|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frame_base = 0;
 var $i = 0, $i1 = 0, $i2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $frame_base = sp + 56|0;
 $0 = $pass;
 $1 = $prog;
 $2 = $uni;
 $3 = $1;
 _glUseProgram(($3|0));
 $4 = $1;
 $5 = (_get_uniform($4,774155)|0);
 $6 = $2;
 HEAP32[$6>>2] = $5;
 $7 = $1;
 $8 = (_get_attrib($7,774146)|0);
 $9 = $2;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = (_get_attrib($11,774165)|0);
 $13 = $2;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = $12;
 $15 = $1;
 $16 = (_get_attrib($15,774177)|0);
 $17 = $2;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = $1;
 $20 = (_get_attrib($19,774183)|0);
 $21 = $2;
 $22 = ((($21)) + 16|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = (_get_uniform($23,774136)|0);
 $25 = $2;
 $26 = ((($25)) + 20|0);
 HEAP32[$26>>2] = $24;
 $27 = $1;
 $28 = (_get_uniform($27,774195)|0);
 $29 = $2;
 $30 = ((($29)) + 24|0);
 HEAP32[$30>>2] = $28;
 $31 = $1;
 $32 = (_get_uniform($31,774124)|0);
 $33 = $2;
 $34 = ((($33)) + 28|0);
 HEAP32[$34>>2] = $32;
 $35 = $1;
 $36 = (_get_uniform($35,774206)|0);
 $37 = $2;
 $38 = ((($37)) + 32|0);
 HEAP32[$38>>2] = $36;
 $39 = $1;
 $40 = (_get_uniform($39,774217)|0);
 $41 = $2;
 $42 = ((($41)) + 40|0);
 HEAP32[$42>>2] = $40;
 $i = 0;
 while(1) {
  $43 = $i;
  $44 = HEAP32[270888>>2]|0;
  $45 = ((($44)) + 66444|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $1;
  $49 = $i;
  $50 = HEAP32[270888>>2]|0;
  $51 = ((($50)) + 66448|0);
  $52 = (($51) + (($49*4168)|0)|0);
  $53 = (_glGetUniformLocation(($48|0),($52|0))|0);
  $54 = $i;
  $55 = $2;
  $56 = ((($55)) + 44|0);
  $57 = (($56) + ($54<<2)|0);
  HEAP32[$57>>2] = $53;
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 $60 = $2;
 $61 = ((($60)) + 76|0);
 _clear_uniforms_frame($61);
 $62 = $1;
 $63 = $2;
 $64 = ((($63)) + 76|0);
 _find_uniforms_frame($62,$64,774232);
 $65 = $0;
 $66 = ($65>>>0)>(1);
 if ($66) {
  $67 = $0;
  HEAP32[$vararg_buffer>>2] = $67;
  (_snprintf($frame_base,64,774237,$vararg_buffer)|0);
  $68 = $1;
  $69 = $2;
  $70 = ((($69)) + 76|0);
  _find_uniforms_frame($68,$70,$frame_base);
 }
 $i1 = 0;
 while(1) {
  $71 = $i1;
  $72 = ($71>>>0)<(16);
  if (!($72)) {
   break;
  }
  $73 = $i1;
  $74 = (($73) + 1)|0;
  HEAP32[$vararg_buffer1>>2] = $74;
  (_snprintf($frame_base,64,774248,$vararg_buffer1)|0);
  $75 = $i1;
  $76 = $2;
  $77 = ((($76)) + 92|0);
  $78 = (($77) + ($75<<4)|0);
  _clear_uniforms_frame($78);
  $79 = $1;
  $80 = $i1;
  $81 = $2;
  $82 = ((($81)) + 92|0);
  $83 = (($82) + ($80<<4)|0);
  _find_uniforms_frame($79,$83,$frame_base);
  $84 = $i1;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = $0;
   $87 = $i1;
   $88 = (($87) + 1)|0;
   $89 = ($86>>>0)>($88>>>0);
   if ($89) {
    $90 = $0;
    $91 = $i1;
    $92 = (($90) - ($91))|0;
    HEAP32[$vararg_buffer4>>2] = $92;
    (_snprintf($frame_base,64,774237,$vararg_buffer4)|0);
    $93 = $1;
    $94 = $i1;
    $95 = $2;
    $96 = ((($95)) + 92|0);
    $97 = (($96) + ($94<<4)|0);
    _find_uniforms_frame($93,$97,$frame_base);
   }
  }
  $98 = $i1;
  $99 = (($98) + 1)|0;
  $i1 = $99;
 }
 $100 = $2;
 $101 = ((($100)) + 348|0);
 _clear_uniforms_frame($101);
 $102 = $1;
 $103 = $2;
 $104 = ((($103)) + 348|0);
 _find_uniforms_frame($102,$104,774255);
 $i2 = 1;
 while(1) {
  $105 = $i2;
  $106 = ($105>>>0)<(7);
  if (!($106)) {
   break;
  }
  $107 = $i2;
  HEAP32[$vararg_buffer7>>2] = $107;
  (_snprintf($frame_base,64,774260,$vararg_buffer7)|0);
  $108 = $i2;
  $109 = $2;
  $110 = ((($109)) + 348|0);
  $111 = (($110) + ($108<<4)|0);
  _clear_uniforms_frame($111);
  $112 = $1;
  $113 = $i2;
  $114 = $2;
  $115 = ((($114)) + 348|0);
  $116 = (($115) + ($113<<4)|0);
  _find_uniforms_frame($112,$116,$frame_base);
  $117 = $i2;
  $118 = (($117) + 1)|0;
  $i2 = $118;
 }
 _glUseProgram(0);
 STACKTOP = sp;return;
}
function _get_attrib($prog,$base) {
 $prog = $prog|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i = 0, $loc = 0, $loc1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 40|0;
 $1 = $prog;
 $2 = $base;
 $3 = HEAP32[270888>>2]|0;
 $4 = ((($3)) + 5|0);
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_snprintf($buf,64,774111,$vararg_buffer)|0);
 $6 = $1;
 $7 = (_glGetUniformLocation(($6|0),($buf|0))|0);
 $loc = $7;
 $8 = $loc;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $loc;
  $0 = $10;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11>>>0)<(2);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $i;
  $14 = (270916 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  HEAP32[$vararg_buffer2>>2] = $15;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $16;
  (_snprintf($buf,64,774111,$vararg_buffer2)|0);
  $17 = $1;
  $18 = (_glGetAttribLocation(($17|0),($buf|0))|0);
  $loc1 = $18;
  $19 = $loc1;
  $20 = ($19|0)>=(0);
  if ($20) {
   label = 6;
   break;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 if ((label|0) == 6) {
  $21 = $loc1;
  $0 = $21;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _clear_uniforms_frame($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $frame;
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = -1;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = -1;
 $6 = $0;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = -1;
 STACKTOP = sp;return;
}
function _find_uniforms_frame($prog,$frame,$base) {
 $prog = $prog|0;
 $frame = $frame|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $input_size = 0, $tex_coord = 0, $texture = 0;
 var $texture_size = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $texture = sp + 240|0;
 $texture_size = sp + 176|0;
 $input_size = sp + 112|0;
 $tex_coord = sp + 48|0;
 $0 = $prog;
 $1 = $frame;
 $2 = $base;
 $3 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 774116;
 (_snprintf($texture,64,774111,$vararg_buffer)|0);
 $4 = $2;
 HEAP32[$vararg_buffer2>>2] = $4;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = 774124;
 (_snprintf($texture_size,64,774111,$vararg_buffer2)|0);
 $5 = $2;
 HEAP32[$vararg_buffer6>>2] = $5;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = 774136;
 (_snprintf($input_size,64,774111,$vararg_buffer6)|0);
 $6 = $2;
 HEAP32[$vararg_buffer10>>2] = $6;
 $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = 774146;
 (_snprintf($tex_coord,64,774111,$vararg_buffer10)|0);
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $0;
  $11 = (_get_uniform($10,$texture)|0);
  $12 = $1;
  HEAP32[$12>>2] = $11;
 }
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = $0;
  $18 = (_get_uniform($17,$texture_size)|0);
  $19 = $1;
  $20 = ((($19)) + 8|0);
  HEAP32[$20>>2] = $18;
 }
 $21 = $1;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<(0);
 if ($24) {
  $25 = $0;
  $26 = (_get_uniform($25,$input_size)|0);
  $27 = $1;
  $28 = ((($27)) + 4|0);
  HEAP32[$28>>2] = $26;
 }
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)<(0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $0;
 $34 = (_get_attrib($33,$tex_coord)|0);
 $35 = $1;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = $34;
 STACKTOP = sp;return;
}
function _gl_glsl_reset_attrib() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[278400>>2]|0;
  $2 = ($0>>>0)<($1>>>0);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = (278404 + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  _glDisableVertexAttribArray(($5|0));
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 HEAP32[278400>>2] = 0;
 STACKTOP = sp;return;
}
function _gl_glsl_deinit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _glUseProgram(0);
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0>>>0)<(16);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (270924 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  do {
   if (!($5)) {
    $6 = $i;
    $7 = ($6|0)!=(0);
    if ($7) {
     $8 = $i;
     $9 = (270924 + ($8<<2)|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = HEAP32[270924>>2]|0;
     $12 = ($10|0)==($11|0);
     if ($12) {
      break;
     }
    }
    $13 = $i;
    $14 = (270924 + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    _gl_glsl_delete_shader($15);
   }
  } while(0);
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = HEAP32[270888>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[270888>>2]|0;
  $21 = ((($20)) + 66444|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = HEAP32[270888>>2]|0;
   $25 = ((($24)) + 66444|0);
   $26 = HEAP32[$25>>2]|0;
   _glDeleteTextures(($26|0),(270988|0));
  }
 }
 dest=270924; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset((271020|0),0,7360)|0;
 HEAP8[772256>>0] = 0;
 HEAP32[295156>>2] = 0;
 _gl_glsl_free_shader();
 $27 = HEAP32[278380>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = HEAP32[278380>>2]|0;
  _state_tracker_free($29);
 }
 HEAP32[278380>>2] = 0;
 _gl_glsl_reset_attrib();
 $i1 = 0;
 while(1) {
  $30 = $i1;
  $31 = ($30>>>0)<(16);
  if (!($31)) {
   break;
  }
  $32 = $i1;
  $33 = (278516 + (($32*1040)|0)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $i1;
   $37 = (278516 + (($36*1040)|0)|0);
   _glDeleteBuffers(1,($37|0));
  }
  $38 = $i1;
  $39 = (278516 + (($38*1040)|0)|0);
  $40 = ((($39)) + 520|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $i1;
   $44 = (278516 + (($43*1040)|0)|0);
   $45 = ((($44)) + 520|0);
   _glDeleteBuffers(1,($45|0));
  }
  $46 = $i1;
  $47 = (($46) + 1)|0;
  $i1 = $47;
 }
 _memset((278516|0),0,16640)|0;
 STACKTOP = sp;return;
}
function _gl_glsl_delete_shader($prog) {
 $prog = $prog|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, $shaders = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 16|0;
 $shaders = sp + 8|0;
 $0 = $prog;
 ;HEAP32[$shaders>>2]=0|0;HEAP32[$shaders+4>>2]=0|0;
 $1 = $0;
 _glGetAttachedShaders(($1|0),2,($count|0),($shaders|0));
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[$count>>2]|0;
  $4 = ($2|0)<($3|0);
  $5 = $0;
  if (!($4)) {
   break;
  }
  $6 = $i;
  $7 = (($shaders) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  _glDetachShader(($5|0),($8|0));
  $9 = $i;
  $10 = (($shaders) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  _glDeleteShader(($11|0));
  $12 = $i;
  $13 = (($12) + 1)|0;
  $i = $13;
 }
 _glDeleteProgram(($5|0));
 STACKTOP = sp;return;
}
function _gl_glsl_free_shader() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[270888>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[270888>>2]|0;
  $4 = ((($3)) + 72|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = HEAP32[270888>>2]|0;
  $9 = ((($8)) + 76|0);
  $10 = (($9) + (($7*4148)|0)|0);
  $11 = ((($10)) + 4096|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
  $13 = $i;
  $14 = HEAP32[270888>>2]|0;
  $15 = ((($14)) + 76|0);
  $16 = (($15) + (($13*4148)|0)|0);
  $17 = ((($16)) + 4096|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 $22 = HEAP32[270888>>2]|0;
 $23 = ((($22)) + 109012|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 $25 = HEAP32[270888>>2]|0;
 _free($25);
 HEAP32[270888>>2] = 0;
 STACKTOP = sp;return;
}
function _gl_glsl_set_params($width,$height,$tex_width,$tex_height,$out_width,$out_height,$frame_count,$info,$prev_info,$fbo_info,$fbo_info_cnt) {
 $width = $width|0;
 $height = $height|0;
 $tex_width = $tex_width|0;
 $tex_height = $tex_height|0;
 $out_width = $out_width|0;
 $out_height = $out_height|0;
 $frame_count = $frame_count|0;
 $info = $info|0;
 $prev_info = $prev_info|0;
 $fbo_info = $fbo_info|0;
 $fbo_info_cnt = $fbo_info_cnt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $attr = 0, $attribs = 0, $attribs_size = 0, $base_tex = 0, $buffer = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $i4 = 0, $input_size = 0, $location = 0, $modulo = 0, $or$cond = 0, $output_size = 0, $size = 0, $texture_size = 0, $texunit = 0;
 var $uni = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 472|0;
 $attribs = sp + 80|0;
 $input_size = sp + 56|0;
 $output_size = sp + 48|0;
 $texture_size = sp + 40|0;
 $0 = $width;
 $1 = $height;
 $2 = $tex_width;
 $3 = $tex_height;
 $4 = $out_width;
 $5 = $out_height;
 $6 = $frame_count;
 $7 = $info;
 $8 = $prev_info;
 $9 = $fbo_info;
 $10 = $fbo_info_cnt;
 $11 = HEAP8[772256>>0]|0;
 $12 = $11&1;
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[295156>>2]|0;
 $14 = (270924 + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $size = 0;
 $attribs_size = 0;
 $attr = $attribs;
 $17 = HEAP32[295156>>2]|0;
 $18 = (271020 + (($17*460)|0)|0);
 $uni = $18;
 $19 = $0;
 $20 = (+($19>>>0));
 HEAPF32[$input_size>>2] = $20;
 $21 = ((($input_size)) + 4|0);
 $22 = $1;
 $23 = (+($22>>>0));
 HEAPF32[$21>>2] = $23;
 $24 = $4;
 $25 = (+($24>>>0));
 HEAPF32[$output_size>>2] = $25;
 $26 = ((($output_size)) + 4|0);
 $27 = $5;
 $28 = (+($27>>>0));
 HEAPF32[$26>>2] = $28;
 $29 = $2;
 $30 = (+($29>>>0));
 HEAPF32[$texture_size>>2] = $30;
 $31 = ((($texture_size)) + 4|0);
 $32 = $3;
 $33 = (+($32>>>0));
 HEAPF32[$31>>2] = $33;
 $34 = $uni;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)>=(0);
 if ($37) {
  $38 = $uni;
  $39 = ((($38)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  _glUniform2fv(($40|0),1,($input_size|0));
 }
 $41 = $uni;
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)>=(0);
 if ($44) {
  $45 = $uni;
  $46 = ((($45)) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  _glUniform2fv(($47|0),1,($output_size|0));
 }
 $48 = $uni;
 $49 = ((($48)) + 28|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)>=(0);
 if ($51) {
  $52 = $uni;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  _glUniform2fv(($54|0),1,($texture_size|0));
 }
 $55 = $uni;
 $56 = ((($55)) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)>=(0);
 $59 = HEAP32[295156>>2]|0;
 $60 = ($59|0)!=(0);
 $or$cond = $58 & $60;
 if ($or$cond) {
  $61 = HEAP32[295156>>2]|0;
  $62 = (($61) - 1)|0;
  $63 = HEAP32[270888>>2]|0;
  $64 = ((($63)) + 76|0);
  $65 = (($64) + (($62*4148)|0)|0);
  $66 = ((($65)) + 4144|0);
  $67 = HEAP32[$66>>2]|0;
  $modulo = $67;
  $68 = $modulo;
  $69 = ($68|0)!=(0);
  if ($69) {
   $70 = $modulo;
   $71 = $6;
   $72 = (($71>>>0) % ($70>>>0))&-1;
   $6 = $72;
  }
  $73 = $uni;
  $74 = ((($73)) + 32|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $6;
  _glUniform1i(($75|0),($76|0));
 }
 $77 = $uni;
 $78 = ((($77)) + 40|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)>=(0);
 if ($80) {
  $81 = $uni;
  $82 = ((($81)) + 40|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP8[(251168)>>0]|0;
  $85 = $84&1;
  $86 = $85 ? -1 : 1;
  _glUniform1i(($83|0),($86|0));
 }
 $i = 0;
 while(1) {
  $87 = $i;
  $88 = HEAP32[270888>>2]|0;
  $89 = ((($88)) + 66444|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($87>>>0)<($90>>>0);
  if (!($91)) {
   break;
  }
  $92 = $i;
  $93 = $uni;
  $94 = ((($93)) + 44|0);
  $95 = (($94) + ($92<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)>=(0);
  if ($97) {
   $98 = $i;
   $99 = (33984 + ($98))|0;
   $100 = (($99) + 1)|0;
   _glActiveTexture(($100|0));
   $101 = $i;
   $102 = (270988 + ($101<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   _glBindTexture(3553,($103|0));
   $104 = $i;
   $105 = $uni;
   $106 = ((($105)) + 44|0);
   $107 = (($106) + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $i;
   $110 = (($109) + 1)|0;
   _glUniform1i(($108|0),($110|0));
  }
  $111 = $i;
  $112 = (($111) + 1)|0;
  $i = $112;
 }
 $113 = HEAP32[270888>>2]|0;
 $114 = ((($113)) + 66444|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = (($115) + 1)|0;
 $texunit = $116;
 $117 = HEAP32[295156>>2]|0;
 $118 = ($117>>>0)>(1);
 L32: do {
  if ($118) {
   $119 = $uni;
   $120 = ((($119)) + 76|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)>=(0);
   if ($122) {
    $123 = $texunit;
    $124 = (33984 + ($123))|0;
    _glActiveTexture(($124|0));
    $125 = $uni;
    $126 = ((($125)) + 76|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $texunit;
    _glUniform1i(($127|0),($128|0));
    $129 = $7;
    $130 = HEAP32[$129>>2]|0;
    _glBindTexture(3553,($130|0));
   }
   $131 = $texunit;
   $132 = (($131) + 1)|0;
   $texunit = $132;
   $133 = $uni;
   $134 = ((($133)) + 76|0);
   $135 = ((($134)) + 8|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($136|0)>=(0);
   if ($137) {
    $138 = $uni;
    $139 = ((($138)) + 76|0);
    $140 = ((($139)) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $7;
    $143 = ((($142)) + 12|0);
    _glUniform2fv(($141|0),1,($143|0));
   }
   $144 = $uni;
   $145 = ((($144)) + 76|0);
   $146 = ((($145)) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147|0)>=(0);
   if ($148) {
    $149 = $uni;
    $150 = ((($149)) + 76|0);
    $151 = ((($150)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $7;
    $154 = ((($153)) + 4|0);
    _glUniform2fv(($152|0),1,($154|0));
   }
   $155 = $uni;
   $156 = ((($155)) + 76|0);
   $157 = ((($156)) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)>=(0);
   if ($159) {
    $160 = $uni;
    $161 = ((($160)) + 76|0);
    $162 = ((($161)) + 12|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = $attr;
    HEAP32[$164>>2] = $163;
    $165 = $attr;
    $166 = ((($165)) + 4|0);
    HEAP32[$166>>2] = 2;
    $167 = $size;
    $168 = $167<<2;
    $169 = $attr;
    $170 = ((($169)) + 8|0);
    HEAP32[$170>>2] = $168;
    $171 = $attribs_size;
    $172 = (($171) + 1)|0;
    $attribs_size = $172;
    $173 = $attr;
    $174 = ((($173)) + 12|0);
    $attr = $174;
    $175 = $size;
    $176 = (($buffer) + ($175<<2)|0);
    $177 = $7;
    $178 = ((($177)) + 20|0);
    ;HEAP32[$176>>2]=HEAP32[$178>>2]|0;HEAP32[$176+4>>2]=HEAP32[$178+4>>2]|0;HEAP32[$176+8>>2]=HEAP32[$178+8>>2]|0;HEAP32[$176+12>>2]=HEAP32[$178+12>>2]|0;HEAP32[$176+16>>2]=HEAP32[$178+16>>2]|0;HEAP32[$176+20>>2]=HEAP32[$178+20>>2]|0;HEAP32[$176+24>>2]=HEAP32[$178+24>>2]|0;HEAP32[$176+28>>2]=HEAP32[$178+28>>2]|0;
    $179 = $size;
    $180 = (($179) + 8)|0;
    $size = $180;
   }
   $181 = $10;
   $182 = ($181>>>0)>(0);
   if ($182) {
    $183 = $texunit;
    $184 = (33984 + ($183))|0;
    $185 = $10;
    $186 = (($184) + ($185))|0;
    $187 = (($186) - 1)|0;
    _glActiveTexture(($187|0));
    $188 = $10;
    $189 = (($188) - 1)|0;
    $190 = $9;
    $191 = (($190) + (($189*52)|0)|0);
    $192 = HEAP32[$191>>2]|0;
    _glBindTexture(3553,($192|0));
   }
   $i1 = 0;
   while(1) {
    $193 = $i1;
    $194 = $10;
    $195 = ($193>>>0)<($194>>>0);
    if (!($195)) {
     break L32;
    }
    $196 = $i1;
    $197 = $uni;
    $198 = ((($197)) + 92|0);
    $199 = (($198) + ($196<<4)|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = ($200|0)!=(0);
    if ($201) {
     $202 = $i1;
     $203 = $uni;
     $204 = ((($203)) + 92|0);
     $205 = (($204) + ($202<<4)|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = $texunit;
     _glUniform1i(($206|0),($207|0));
    }
    $208 = $texunit;
    $209 = (($208) + 1)|0;
    $texunit = $209;
    $210 = $i1;
    $211 = $uni;
    $212 = ((($211)) + 92|0);
    $213 = (($212) + ($210<<4)|0);
    $214 = ((($213)) + 8|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ($215|0)>=(0);
    if ($216) {
     $217 = $i1;
     $218 = $uni;
     $219 = ((($218)) + 92|0);
     $220 = (($219) + ($217<<4)|0);
     $221 = ((($220)) + 8|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = $i1;
     $224 = $9;
     $225 = (($224) + (($223*52)|0)|0);
     $226 = ((($225)) + 12|0);
     _glUniform2fv(($222|0),1,($226|0));
    }
    $227 = $i1;
    $228 = $uni;
    $229 = ((($228)) + 92|0);
    $230 = (($229) + ($227<<4)|0);
    $231 = ((($230)) + 4|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = ($232|0)>=(0);
    if ($233) {
     $234 = $i1;
     $235 = $uni;
     $236 = ((($235)) + 92|0);
     $237 = (($236) + ($234<<4)|0);
     $238 = ((($237)) + 4|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $i1;
     $241 = $9;
     $242 = (($241) + (($240*52)|0)|0);
     $243 = ((($242)) + 4|0);
     _glUniform2fv(($239|0),1,($243|0));
    }
    $244 = $i1;
    $245 = $uni;
    $246 = ((($245)) + 92|0);
    $247 = (($246) + ($244<<4)|0);
    $248 = ((($247)) + 12|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ($249|0)>=(0);
    if ($250) {
     $251 = $i1;
     $252 = $uni;
     $253 = ((($252)) + 92|0);
     $254 = (($253) + ($251<<4)|0);
     $255 = ((($254)) + 12|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = $attr;
     HEAP32[$257>>2] = $256;
     $258 = $attr;
     $259 = ((($258)) + 4|0);
     HEAP32[$259>>2] = 2;
     $260 = $size;
     $261 = $260<<2;
     $262 = $attr;
     $263 = ((($262)) + 8|0);
     HEAP32[$263>>2] = $261;
     $264 = $attribs_size;
     $265 = (($264) + 1)|0;
     $attribs_size = $265;
     $266 = $attr;
     $267 = ((($266)) + 12|0);
     $attr = $267;
     $268 = $size;
     $269 = (($buffer) + ($268<<2)|0);
     $270 = $i1;
     $271 = $9;
     $272 = (($271) + (($270*52)|0)|0);
     $273 = ((($272)) + 20|0);
     ;HEAP32[$269>>2]=HEAP32[$273>>2]|0;HEAP32[$269+4>>2]=HEAP32[$273+4>>2]|0;HEAP32[$269+8>>2]=HEAP32[$273+8>>2]|0;HEAP32[$269+12>>2]=HEAP32[$273+12>>2]|0;HEAP32[$269+16>>2]=HEAP32[$273+16>>2]|0;HEAP32[$269+20>>2]=HEAP32[$273+20>>2]|0;HEAP32[$269+24>>2]=HEAP32[$273+24>>2]|0;HEAP32[$269+28>>2]=HEAP32[$273+28>>2]|0;
     $274 = $size;
     $275 = (($274) + 8)|0;
     $size = $275;
    }
    $276 = $i1;
    $277 = (($276) + 1)|0;
    $i1 = $277;
   }
  } else {
   $278 = $texunit;
   $279 = (33984 + ($278))|0;
   _glActiveTexture(($279|0));
   _glBindTexture(3553,0);
   $280 = $texunit;
   $281 = (($280) + 1)|0;
   $base_tex = $281;
   $i2 = 0;
   while(1) {
    $282 = $i2;
    $283 = HEAP32[270888>>2]|0;
    $284 = ((($283)) + 72|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = ($282>>>0)<($285>>>0);
    if (!($286)) {
     break L32;
    }
    $287 = $base_tex;
    $288 = (33984 + ($287))|0;
    $289 = $i2;
    $290 = (($288) + ($289))|0;
    _glActiveTexture(($290|0));
    _glBindTexture(3553,0);
    $291 = $i2;
    $292 = (($291) + 1)|0;
    $i2 = $292;
   }
  }
 } while(0);
 $i3 = 0;
 while(1) {
  $293 = $i3;
  $294 = ($293>>>0)<(7);
  if (!($294)) {
   break;
  }
  $295 = $i3;
  $296 = $uni;
  $297 = ((($296)) + 348|0);
  $298 = (($297) + ($295<<4)|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = ($299|0)>=(0);
  if ($300) {
   $301 = $texunit;
   $302 = (33984 + ($301))|0;
   _glActiveTexture(($302|0));
   $303 = $i3;
   $304 = $8;
   $305 = (($304) + (($303*52)|0)|0);
   $306 = HEAP32[$305>>2]|0;
   _glBindTexture(3553,($306|0));
   $307 = $i3;
   $308 = $uni;
   $309 = ((($308)) + 348|0);
   $310 = (($309) + ($307<<4)|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = $texunit;
   $313 = (($312) + 1)|0;
   $texunit = $313;
   _glUniform1i(($311|0),($312|0));
  }
  $314 = $texunit;
  $315 = (($314) + 1)|0;
  $texunit = $315;
  $316 = $i3;
  $317 = $uni;
  $318 = ((($317)) + 348|0);
  $319 = (($318) + ($316<<4)|0);
  $320 = ((($319)) + 8|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = ($321|0)>=(0);
  if ($322) {
   $323 = $i3;
   $324 = $uni;
   $325 = ((($324)) + 348|0);
   $326 = (($325) + ($323<<4)|0);
   $327 = ((($326)) + 8|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = $i3;
   $330 = $8;
   $331 = (($330) + (($329*52)|0)|0);
   $332 = ((($331)) + 12|0);
   _glUniform2fv(($328|0),1,($332|0));
  }
  $333 = $i3;
  $334 = $uni;
  $335 = ((($334)) + 348|0);
  $336 = (($335) + ($333<<4)|0);
  $337 = ((($336)) + 4|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = ($338|0)>=(0);
  if ($339) {
   $340 = $i3;
   $341 = $uni;
   $342 = ((($341)) + 348|0);
   $343 = (($342) + ($340<<4)|0);
   $344 = ((($343)) + 4|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = $i3;
   $347 = $8;
   $348 = (($347) + (($346*52)|0)|0);
   $349 = ((($348)) + 4|0);
   _glUniform2fv(($345|0),1,($349|0));
  }
  $350 = $i3;
  $351 = $uni;
  $352 = ((($351)) + 348|0);
  $353 = (($352) + ($350<<4)|0);
  $354 = ((($353)) + 12|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = ($355|0)>=(0);
  if ($356) {
   $357 = $i3;
   $358 = $uni;
   $359 = ((($358)) + 348|0);
   $360 = (($359) + ($357<<4)|0);
   $361 = ((($360)) + 12|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = $attr;
   HEAP32[$363>>2] = $362;
   $364 = $attr;
   $365 = ((($364)) + 4|0);
   HEAP32[$365>>2] = 2;
   $366 = $size;
   $367 = $366<<2;
   $368 = $attr;
   $369 = ((($368)) + 8|0);
   HEAP32[$369>>2] = $367;
   $370 = $attribs_size;
   $371 = (($370) + 1)|0;
   $attribs_size = $371;
   $372 = $attr;
   $373 = ((($372)) + 12|0);
   $attr = $373;
   $374 = $size;
   $375 = (($buffer) + ($374<<2)|0);
   $376 = $i3;
   $377 = $8;
   $378 = (($377) + (($376*52)|0)|0);
   $379 = ((($378)) + 20|0);
   ;HEAP32[$375>>2]=HEAP32[$379>>2]|0;HEAP32[$375+4>>2]=HEAP32[$379+4>>2]|0;HEAP32[$375+8>>2]=HEAP32[$379+8>>2]|0;HEAP32[$375+12>>2]=HEAP32[$379+12>>2]|0;HEAP32[$375+16>>2]=HEAP32[$379+16>>2]|0;HEAP32[$375+20>>2]=HEAP32[$379+20>>2]|0;HEAP32[$375+24>>2]=HEAP32[$379+24>>2]|0;HEAP32[$375+28>>2]=HEAP32[$379+28>>2]|0;
   $380 = $size;
   $381 = (($380) + 8)|0;
   $size = $381;
  }
  $382 = $i3;
  $383 = (($382) + 1)|0;
  $i3 = $383;
 }
 $384 = $size;
 $385 = ($384|0)!=(0);
 if ($385) {
  $386 = HEAP32[295156>>2]|0;
  $387 = (278516 + (($386*1040)|0)|0);
  $388 = ((($387)) + 520|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = HEAP32[295156>>2]|0;
  $391 = (278516 + (($390*1040)|0)|0);
  $392 = ((($391)) + 524|0);
  $393 = HEAP32[295156>>2]|0;
  $394 = (278516 + (($393*1040)|0)|0);
  $395 = ((($394)) + 1036|0);
  $396 = $size;
  $397 = $attribs_size;
  _gl_glsl_set_attribs($389,$392,$395,$buffer,$396,$attribs,$397);
 }
 _glActiveTexture(33984);
 $398 = HEAP32[278380>>2]|0;
 $399 = ($398|0)!=(0|0);
 if (!($399)) {
  STACKTOP = sp;return;
 }
 $400 = HEAP32[295156>>2]|0;
 $401 = ($400|0)==(1);
 if ($401) {
  $402 = HEAP32[278380>>2]|0;
  $403 = $6;
  $404 = (_state_get_uniform($402,295160,64,$403)|0);
  HEAP32[295672>>2] = $404;
 }
 $i4 = 0;
 while(1) {
  $405 = $i4;
  $406 = HEAP32[295672>>2]|0;
  $407 = ($405>>>0)<($406>>>0);
  if (!($407)) {
   break;
  }
  $408 = HEAP32[295156>>2]|0;
  $409 = (270924 + ($408<<2)|0);
  $410 = HEAP32[$409>>2]|0;
  $411 = $i4;
  $412 = (295160 + ($411<<3)|0);
  $413 = HEAP32[$412>>2]|0;
  $414 = (_glGetUniformLocation(($410|0),($413|0))|0);
  $location = $414;
  $415 = $location;
  $416 = $i4;
  $417 = (295160 + ($416<<3)|0);
  $418 = ((($417)) + 4|0);
  $419 = +HEAPF32[$418>>2];
  _glUniform1f(($415|0),(+$419));
  $420 = $i4;
  $421 = (($420) + 1)|0;
  $i4 = $421;
 }
 STACKTOP = sp;return;
}
function _gl_glsl_set_attribs($vbo,$buffer,$buffer_elems,$data,$elems,$attrs,$num_attrs) {
 $vbo = $vbo|0;
 $buffer = $buffer|0;
 $buffer_elems = $buffer_elems|0;
 $data = $data|0;
 $elems = $elems|0;
 $attrs = $attrs|0;
 $num_attrs = $num_attrs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $loc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vbo;
 $1 = $buffer;
 $2 = $buffer_elems;
 $3 = $data;
 $4 = $elems;
 $5 = $attrs;
 $6 = $num_attrs;
 $7 = $0;
 _glBindBuffer(34962,($7|0));
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 _gl_glsl_set_vbo($8,$9,$10,$11);
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $6;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $5;
  $17 = (($16) + (($15*12)|0)|0);
  $18 = HEAP32[$17>>2]|0;
  $loc = $18;
  $19 = $loc;
  _glEnableVertexAttribArray(($19|0));
  $20 = $loc;
  $21 = HEAP32[278400>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[278400>>2] = $22;
  $23 = (278404 + ($21<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = $loc;
  $25 = $i;
  $26 = $5;
  $27 = (($26) + (($25*12)|0)|0);
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $i;
  $31 = $5;
  $32 = (($31) + (($30*12)|0)|0);
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34;
  _glVertexAttribPointer(($24|0),($29|0),5126,0,0,($35|0));
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 _glBindBuffer(34962,0);
 STACKTOP = sp;return;
}
function _gl_glsl_set_vbo($buffer,$buffer_elems,$data,$elems) {
 $buffer = $buffer|0;
 $buffer_elems = $buffer_elems|0;
 $data = $data|0;
 $elems = $elems|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $buffer_elems;
 $2 = $data;
 $3 = $elems;
 $4 = $3;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)!=($6|0);
 if (!($7)) {
  $8 = $2;
  $9 = $0;
  $10 = $3;
  $11 = $10<<2;
  $12 = (_memcmp($8,$9,$11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   STACKTOP = sp;return;
  }
 }
 $14 = $0;
 $15 = $2;
 $16 = $3;
 $17 = $16<<2;
 _memcpy(($14|0),($15|0),($17|0))|0;
 $18 = $3;
 $19 = $18<<2;
 $20 = $2;
 _glBufferData(34962,($19|0),($20|0),35044);
 $21 = $3;
 $22 = $1;
 HEAP32[$22>>2] = $21;
 STACKTOP = sp;return;
}
function _gl_glsl_use($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = HEAP8[772256>>0]|0;
 $2 = $1&1;
 if (!($2)) {
  STACKTOP = sp;return;
 }
 _gl_glsl_reset_attrib();
 $3 = $0;
 HEAP32[295156>>2] = $3;
 $4 = $0;
 $5 = (270924 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _glUseProgram(($6|0));
 STACKTOP = sp;return;
}
function _gl_glsl_num() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[270888>>2]|0;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _gl_glsl_filter_type($index,$smooth) {
 $index = $index|0;
 $smooth = $smooth|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $index;
 $2 = $smooth;
 $3 = HEAP8[772256>>0]|0;
 $4 = $3&1;
 $5 = $1;
 $6 = ($5|0)!=(0);
 $or$cond = $4 & $6;
 do {
  if ($or$cond) {
   $7 = $1;
   $8 = (($7) - 1)|0;
   $9 = HEAP32[270888>>2]|0;
   $10 = ((($9)) + 76|0);
   $11 = (($10) + (($8*4148)|0)|0);
   $12 = ((($11)) + 4136|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    break;
   } else {
    $15 = $1;
    $16 = (($15) - 1)|0;
    $17 = HEAP32[270888>>2]|0;
    $18 = ((($17)) + 76|0);
    $19 = (($18) + (($16*4148)|0)|0);
    $20 = ((($19)) + 4136|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(1);
    $23 = $2;
    $24 = $22&1;
    HEAP8[$23>>0] = $24;
    $$expand_i1_val3 = 1;
    HEAP8[$0>>0] = $$expand_i1_val3;
    break;
   }
  } else {
   $$expand_i1_val5 = 0;
   HEAP8[$0>>0] = $$expand_i1_val5;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $25 = $$pre_trunc&1;
 STACKTOP = sp;return ($25|0);
}
function _gl_glsl_wrap_type($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $index;
 $2 = HEAP8[772256>>0]|0;
 $3 = $2&1;
 $4 = $1;
 $5 = ($4|0)!=(0);
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = (($6) - 1)|0;
  $8 = HEAP32[270888>>2]|0;
  $9 = ((($8)) + 76|0);
  $10 = (($9) + (($7*4148)|0)|0);
  $11 = ((($10)) + 4140|0);
  $12 = HEAP32[$11>>2]|0;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _gl_glsl_shader_scale($index,$scale) {
 $index = $index|0;
 $scale = $scale|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $scale;
 $2 = HEAP8[772256>>0]|0;
 $3 = $2&1;
 $4 = $0;
 $5 = ($4|0)!=(0);
 $or$cond = $3 & $5;
 $6 = $1;
 if ($or$cond) {
  $7 = $0;
  $8 = (($7) - 1)|0;
  $9 = HEAP32[270888>>2]|0;
  $10 = ((($9)) + 76|0);
  $11 = (($10) + (($8*4148)|0)|0);
  $12 = ((($11)) + 4104|0);
  ;HEAP32[$6>>2]=HEAP32[$12>>2]|0;HEAP32[$6+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$12+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$12+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$12+20>>2]|0;HEAP32[$6+24>>2]=HEAP32[$12+24>>2]|0;HEAP32[$6+28>>2]=HEAP32[$12+28>>2]|0;
  STACKTOP = sp;return;
 } else {
  HEAP8[$6>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _gl_glsl_set_coords($coords) {
 $coords = $coords|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $attr = 0, $attribs = 0, $attribs_size = 0, $buffer = 0, $size = 0, $uni = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 588|0;
 $buffer = sp + 72|0;
 $attribs = sp + 16|0;
 $1 = $coords;
 $2 = HEAP8[772256>>0]|0;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP32[270888>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&1;
  if ($7) {
   $size = 0;
   $attribs_size = 0;
   $attr = $attribs;
   $8 = HEAP32[295156>>2]|0;
   $9 = (271020 + (($8*460)|0)|0);
   $uni = $9;
   $10 = $uni;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)>=(0);
   if ($13) {
    $14 = $uni;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $attr;
    HEAP32[$17>>2] = $16;
    $18 = $attr;
    $19 = ((($18)) + 4|0);
    HEAP32[$19>>2] = 2;
    $20 = $size;
    $21 = $20<<2;
    $22 = $attr;
    $23 = ((($22)) + 8|0);
    HEAP32[$23>>2] = $21;
    $24 = $attribs_size;
    $25 = (($24) + 1)|0;
    $attribs_size = $25;
    $26 = $attr;
    $27 = ((($26)) + 12|0);
    $attr = $27;
    $28 = $size;
    $29 = (($buffer) + ($28<<2)|0);
    $30 = $1;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    ;HEAP32[$29>>2]=HEAP32[$32>>2]|0;HEAP32[$29+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$29+12>>2]=HEAP32[$32+12>>2]|0;HEAP32[$29+16>>2]=HEAP32[$32+16>>2]|0;HEAP32[$29+20>>2]=HEAP32[$32+20>>2]|0;HEAP32[$29+24>>2]=HEAP32[$32+24>>2]|0;HEAP32[$29+28>>2]=HEAP32[$32+28>>2]|0;
    $33 = $size;
    $34 = (($33) + 8)|0;
    $size = $34;
   }
   $35 = $uni;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)>=(0);
   if ($38) {
    $39 = $uni;
    $40 = ((($39)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $attr;
    HEAP32[$42>>2] = $41;
    $43 = $attr;
    $44 = ((($43)) + 4|0);
    HEAP32[$44>>2] = 2;
    $45 = $size;
    $46 = $45<<2;
    $47 = $attr;
    $48 = ((($47)) + 8|0);
    HEAP32[$48>>2] = $46;
    $49 = $attribs_size;
    $50 = (($49) + 1)|0;
    $attribs_size = $50;
    $51 = $attr;
    $52 = ((($51)) + 12|0);
    $attr = $52;
    $53 = $size;
    $54 = (($buffer) + ($53<<2)|0);
    $55 = $1;
    $56 = HEAP32[$55>>2]|0;
    ;HEAP32[$54>>2]=HEAP32[$56>>2]|0;HEAP32[$54+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$54+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$54+12>>2]=HEAP32[$56+12>>2]|0;HEAP32[$54+16>>2]=HEAP32[$56+16>>2]|0;HEAP32[$54+20>>2]=HEAP32[$56+20>>2]|0;HEAP32[$54+24>>2]=HEAP32[$56+24>>2]|0;HEAP32[$54+28>>2]=HEAP32[$56+28>>2]|0;
    $57 = $size;
    $58 = (($57) + 8)|0;
    $size = $58;
   }
   $59 = $uni;
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)>=(0);
   if ($62) {
    $63 = $uni;
    $64 = ((($63)) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $attr;
    HEAP32[$66>>2] = $65;
    $67 = $attr;
    $68 = ((($67)) + 4|0);
    HEAP32[$68>>2] = 4;
    $69 = $size;
    $70 = $69<<2;
    $71 = $attr;
    $72 = ((($71)) + 8|0);
    HEAP32[$72>>2] = $70;
    $73 = $attribs_size;
    $74 = (($73) + 1)|0;
    $attribs_size = $74;
    $75 = $attr;
    $76 = ((($75)) + 12|0);
    $attr = $76;
    $77 = $size;
    $78 = (($buffer) + ($77<<2)|0);
    $79 = $1;
    $80 = ((($79)) + 4|0);
    $81 = HEAP32[$80>>2]|0;
    dest=$78; src=$81; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $82 = $size;
    $83 = (($82) + 16)|0;
    $size = $83;
   }
   $84 = $uni;
   $85 = ((($84)) + 16|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)>=(0);
   if ($87) {
    $88 = $uni;
    $89 = ((($88)) + 16|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $attr;
    HEAP32[$91>>2] = $90;
    $92 = $attr;
    $93 = ((($92)) + 4|0);
    HEAP32[$93>>2] = 2;
    $94 = $size;
    $95 = $94<<2;
    $96 = $attr;
    $97 = ((($96)) + 8|0);
    HEAP32[$97>>2] = $95;
    $98 = $attribs_size;
    $99 = (($98) + 1)|0;
    $attribs_size = $99;
    $100 = $attr;
    $101 = ((($100)) + 12|0);
    $attr = $101;
    $102 = $size;
    $103 = (($buffer) + ($102<<2)|0);
    $104 = $1;
    $105 = ((($104)) + 12|0);
    $106 = HEAP32[$105>>2]|0;
    ;HEAP32[$103>>2]=HEAP32[$106>>2]|0;HEAP32[$103+4>>2]=HEAP32[$106+4>>2]|0;HEAP32[$103+8>>2]=HEAP32[$106+8>>2]|0;HEAP32[$103+12>>2]=HEAP32[$106+12>>2]|0;HEAP32[$103+16>>2]=HEAP32[$106+16>>2]|0;HEAP32[$103+20>>2]=HEAP32[$106+20>>2]|0;HEAP32[$103+24>>2]=HEAP32[$106+24>>2]|0;HEAP32[$103+28>>2]=HEAP32[$106+28>>2]|0;
    $107 = $size;
    $108 = (($107) + 8)|0;
    $size = $108;
   }
   $109 = $size;
   $110 = ($109|0)!=(0);
   if ($110) {
    $111 = HEAP32[295156>>2]|0;
    $112 = (278516 + (($111*1040)|0)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = HEAP32[295156>>2]|0;
    $115 = (278516 + (($114*1040)|0)|0);
    $116 = ((($115)) + 4|0);
    $117 = HEAP32[295156>>2]|0;
    $118 = (278516 + (($117*1040)|0)|0);
    $119 = ((($118)) + 516|0);
    $120 = $size;
    $121 = $attribs_size;
    _gl_glsl_set_attribs($113,$116,$119,$buffer,$120,$attribs,$121);
   }
   $$expand_i1_val2 = 1;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $122 = $$pre_trunc&1;
   STACKTOP = sp;return ($122|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $122 = $$pre_trunc&1;
 STACKTOP = sp;return ($122|0);
}
function _gl_glsl_set_mvp($mat) {
 $mat = $mat|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $loc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $mat;
 $2 = HEAP8[772256>>0]|0;
 $3 = $2&1;
 if ($3) {
  $4 = HEAP32[270888>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&1;
  if ($7) {
   $8 = HEAP32[295156>>2]|0;
   $9 = (271020 + (($8*460)|0)|0);
   $10 = HEAP32[$9>>2]|0;
   $loc = $10;
   $11 = $loc;
   $12 = ($11|0)>=(0);
   if ($12) {
    $13 = $loc;
    $14 = $1;
    _glUniformMatrix4fv(($13|0),1,0,($14|0));
   }
   $$expand_i1_val2 = 1;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $15 = $$pre_trunc&1;
   STACKTOP = sp;return ($15|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $15 = $$pre_trunc&1;
 STACKTOP = sp;return ($15|0);
}
function _gl_glsl_get_prev_textures() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $max_prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP8[772256>>0]|0;
 $2 = $1&1;
 if (!($2)) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $max_prev = 0;
 $i = 1;
 while(1) {
  $3 = $i;
  $4 = HEAP32[270888>>2]|0;
  $5 = ((($4)) + 72|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<=($6>>>0);
  if (!($7)) {
   break;
  }
  $j = 0;
  while(1) {
   $8 = $j;
   $9 = ($8>>>0)<(7);
   if (!($9)) {
    break;
   }
   $10 = $j;
   $11 = $i;
   $12 = (271020 + (($11*460)|0)|0);
   $13 = ((($12)) + 348|0);
   $14 = (($13) + ($10<<4)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>=(0);
   if ($16) {
    $17 = $j;
    $18 = (($17) + 1)|0;
    $19 = $max_prev;
    $20 = ($18>>>0)>($19>>>0);
    $21 = $j;
    $22 = (($21) + 1)|0;
    $23 = $max_prev;
    $24 = $20 ? $22 : $23;
    $max_prev = $24;
   }
   $25 = $j;
   $26 = (($25) + 1)|0;
   $j = $26;
  }
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $29 = $max_prev;
 $0 = $29;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _rglgen_resolve_symbols_custom($proc,$map) {
 $proc = $proc|0;
 $map = $map|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $func = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $func = sp;
 $0 = $proc;
 $1 = $map;
 while(1) {
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_ii[$5 & 511]($7)|0);
  HEAP32[$func>>2] = $8;
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  ;HEAP8[$11>>0]=HEAP8[$func>>0]|0;HEAP8[$11+1>>0]=HEAP8[$func+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$func+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$func+3>>0]|0;
  $12 = $1;
  $13 = ((($12)) + 8|0);
  $1 = $13;
 }
 STACKTOP = sp;return;
}
function _rglgen_resolve_symbols($proc) {
 $proc = $proc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = $0;
 _rglgen_resolve_symbols_custom($1,295788);
 STACKTOP = sp;return;
}
function _rpng_load_image_argb($path,$data,$width,$height) {
 $path = $path|0;
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 var $$expand_i1_val = 0, $$expand_i1_val62 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chunk = 0, $file = 0, $file_len = 0, $has_idat = 0, $has_iend = 0, $has_ihdr = 0;
 var $has_plte = 0, $header = 0, $idat_buf = 0, $ihdr = 0, $inflate_buf = 0, $inflate_buf_size = 0, $palette = 0, $pos = 0, $ret = 0, $stream = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer58 = sp + 160|0;
 $vararg_buffer55 = sp + 152|0;
 $vararg_buffer52 = sp + 144|0;
 $vararg_buffer49 = sp + 136|0;
 $vararg_buffer46 = sp + 128|0;
 $vararg_buffer43 = sp + 120|0;
 $vararg_buffer40 = sp + 112|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 1325|0;
 $inflate_buf_size = sp + 1280|0;
 $stream = sp + 1232|0;
 $idat_buf = sp + 1224|0;
 $ihdr = sp + 1208|0;
 $palette = sp + 184|0;
 $header = sp + 1312|0;
 $chunk = sp + 164|0;
 $1 = $path;
 $2 = $data;
 $3 = $width;
 $4 = $height;
 $5 = $2;
 HEAP32[$5>>2] = 0;
 $6 = $3;
 HEAP32[$6>>2] = 0;
 $7 = $4;
 HEAP32[$7>>2] = 0;
 $ret = 1;
 $8 = $1;
 $9 = (_fopen($8,840413)|0);
 $file = $9;
 $10 = $file;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $170 = $$pre_trunc&1;
  STACKTOP = sp;return ($170|0);
 }
 $12 = $file;
 (_fseek($12,0,2)|0);
 $13 = $file;
 $14 = (_ftell($13)|0);
 $file_len = $14;
 $15 = $file;
 _rewind($15);
 $has_ihdr = 0;
 $has_idat = 0;
 $has_iend = 0;
 $has_plte = 0;
 $inflate_buf = 0;
 HEAP32[$inflate_buf_size>>2] = 0;
 dest=$stream; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$idat_buf>>2]=0|0;HEAP32[$idat_buf+4>>2]=0|0;
 ;HEAP32[$ihdr>>2]=0|0;HEAP32[$ihdr+4>>2]=0|0;HEAP32[$ihdr+8>>2]=0|0;HEAP32[$ihdr+12>>2]=0|0;
 _memset(($palette|0),0,1024)|0;
 $16 = $file;
 $17 = (_fread($header,1,8,$16)|0);
 $18 = ($17|0)!=(8);
 L5: do {
  if ($18) {
   $19 = HEAP32[544648>>2]|0;
   HEAP32[$vararg_buffer>>2] = 603;
   (_fprintf($19,775874,$vararg_buffer)|0);
   $ret = 0;
  } else {
   $20 = (_memcmp($header,775901,8)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = HEAP32[544648>>2]|0;
    HEAP32[$vararg_buffer1>>2] = 606;
    (_fprintf($22,775874,$vararg_buffer1)|0);
    $ret = 0;
    break;
   }
   $23 = $file;
   $24 = (_ftell($23)|0);
   $pos = $24;
   L11: while(1) {
    $25 = $pos;
    $26 = $file_len;
    $27 = ($25|0)<($26|0);
    $28 = $pos;
    $29 = ($28|0)>=(0);
    $30 = $27 ? $29 : 0;
    if (!($30)) {
     label = 47;
     break;
    }
    ;HEAP32[$chunk>>2]=0|0;HEAP32[$chunk+4>>2]=0|0;HEAP32[$chunk+8>>2]=0|0;
    $31 = $file;
    $32 = (_read_chunk_header($31,$chunk)|0);
    if (!($32)) {
     label = 10;
     break;
    }
    $34 = (_png_chunk_type($chunk)|0);
    switch ($34|0) {
    case 1:  {
     label = 14;
     break L11;
     break;
    }
    case 5:  {
     $84 = $has_ihdr;
     $85 = $84&1;
     if (!($85)) {
      label = 42;
      break L11;
     }
     $86 = $has_idat;
     $87 = $86&1;
     if (!($87)) {
      label = 42;
      break L11;
     }
     $89 = $file;
     $90 = (_fseek($89,4,1)|0);
     $91 = ($90|0)<(0);
     if ($91) {
      label = 44;
      break L11;
     }
     $has_iend = 1;
     break;
    }
    case 2:  {
     $42 = $has_ihdr;
     $43 = $42&1;
     if ($43) {
      label = 18;
      break L11;
     }
     $44 = $has_idat;
     $45 = $44&1;
     if ($45) {
      label = 18;
      break L11;
     }
     $46 = $has_iend;
     $47 = $46&1;
     if ($47) {
      label = 18;
      break L11;
     }
     $49 = $file;
     $50 = (_png_parse_ihdr($49,$chunk,$ihdr)|0);
     if (!($50)) {
      label = 20;
      break L11;
     }
     $has_ihdr = 1;
     break;
    }
    case 4:  {
     $52 = $has_ihdr;
     $53 = $52&1;
     if (!($53)) {
      label = 26;
      break L11;
     }
     $54 = $has_plte;
     $55 = $54&1;
     if ($55) {
      label = 26;
      break L11;
     }
     $56 = $has_iend;
     $57 = $56&1;
     if ($57) {
      label = 26;
      break L11;
     }
     $58 = $has_idat;
     $59 = $58&1;
     if ($59) {
      label = 26;
      break L11;
     }
     $61 = HEAP32[$chunk>>2]|0;
     $62 = (($61>>>0) % 3)&-1;
     $63 = ($62|0)!=(0);
     if ($63) {
      label = 28;
      break L11;
     }
     $65 = $file;
     $66 = HEAP32[$chunk>>2]|0;
     $67 = (($66>>>0) / 3)&-1;
     $68 = (_png_read_plte($65,$palette,$67)|0);
     if (!($68)) {
      label = 30;
      break L11;
     }
     $has_plte = 1;
     break;
    }
    case 3:  {
     $70 = $has_ihdr;
     $71 = $70&1;
     if (!($71)) {
      label = 36;
      break L11;
     }
     $72 = $has_iend;
     $73 = $72&1;
     if ($73) {
      label = 36;
      break L11;
     }
     $74 = ((($ihdr)) + 9|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = ($76|0)==(3);
     if ($77) {
      $78 = $has_plte;
      $79 = $78&1;
      if (!($79)) {
       label = 36;
       break L11;
      }
     }
     $81 = $file;
     $82 = (_png_append_idat($81,$chunk,$idat_buf)|0);
     if (!($82)) {
      label = 38;
      break L11;
     }
     $has_idat = 1;
     break;
    }
    default: {
     $35 = $file;
     $36 = HEAP32[$chunk>>2]|0;
     $37 = (($36) + 4)|0;
     $38 = (_fseek($35,$37,1)|0);
     $39 = ($38|0)<(0);
     if ($39) {
      label = 13;
      break L11;
     }
    }
    }
    $93 = $file;
    $94 = (_ftell($93)|0);
    $pos = $94;
   }
   switch (label|0) {
    case 10: {
     $33 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer4>>2] = 613;
     (_fprintf($33,775874,$vararg_buffer4)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 13: {
     $40 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer7>>2] = 620;
     (_fprintf($40,775874,$vararg_buffer7)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 14: {
     $41 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer10>>2] = 624;
     (_fprintf($41,775874,$vararg_buffer10)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 18: {
     $48 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer13>>2] = 628;
     (_fprintf($48,775874,$vararg_buffer13)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 20: {
     $51 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer16>>2] = 631;
     (_fprintf($51,775874,$vararg_buffer16)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 26: {
     $60 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer19>>2] = 638;
     (_fprintf($60,775874,$vararg_buffer19)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 28: {
     $64 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer22>>2] = 641;
     (_fprintf($64,775874,$vararg_buffer22)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 30: {
     $69 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer25>>2] = 644;
     (_fprintf($69,775874,$vararg_buffer25)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 36: {
     $80 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer28>>2] = 651;
     (_fprintf($80,775874,$vararg_buffer28)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 38: {
     $83 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer31>>2] = 654;
     (_fprintf($83,775874,$vararg_buffer31)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 42: {
     $88 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer34>>2] = 661;
     (_fprintf($88,775874,$vararg_buffer34)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 44: {
     $92 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer37>>2] = 664;
     (_fprintf($92,775874,$vararg_buffer37)|0);
     $ret = 0;
     break L5;
     break;
    }
    case 47: {
     $95 = $has_ihdr;
     $96 = $95&1;
     if ($96) {
      $97 = $has_idat;
      $98 = $97&1;
      if ($98) {
       $99 = $has_iend;
       $100 = $99&1;
       if ($100) {
        $102 = (_mz_inflateInit($stream)|0);
        $103 = ($102|0)!=(0);
        if ($103) {
         $104 = HEAP32[544648>>2]|0;
         HEAP32[$vararg_buffer43>>2] = 675;
         (_fprintf($104,775874,$vararg_buffer43)|0);
         $ret = 0;
         break L5;
        }
        $105 = HEAP32[$ihdr>>2]|0;
        $106 = ((($ihdr)) + 4|0);
        $107 = HEAP32[$106>>2]|0;
        _png_pass_geom($ihdr,$105,$107,0,0,$inflate_buf_size);
        $108 = ((($ihdr)) + 12|0);
        $109 = HEAP8[$108>>0]|0;
        $110 = $109&255;
        $111 = ($110|0)==(1);
        if ($111) {
         $112 = HEAP32[$inflate_buf_size>>2]|0;
         $113 = $112<<1;
         HEAP32[$inflate_buf_size>>2] = $113;
        }
        $114 = HEAP32[$inflate_buf_size>>2]|0;
        $115 = (_malloc($114)|0);
        $inflate_buf = $115;
        $116 = $inflate_buf;
        $117 = ($116|0)!=(0|0);
        if (!($117)) {
         $118 = HEAP32[544648>>2]|0;
         HEAP32[$vararg_buffer46>>2] = 683;
         (_fprintf($118,775874,$vararg_buffer46)|0);
         $ret = 0;
         break L5;
        }
        $119 = HEAP32[$idat_buf>>2]|0;
        HEAP32[$stream>>2] = $119;
        $120 = ((($idat_buf)) + 4|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ((($stream)) + 4|0);
        HEAP32[$122>>2] = $121;
        $123 = HEAP32[$inflate_buf_size>>2]|0;
        $124 = ((($stream)) + 16|0);
        HEAP32[$124>>2] = $123;
        $125 = $inflate_buf;
        $126 = ((($stream)) + 12|0);
        HEAP32[$126>>2] = $125;
        $127 = (_mz_inflate($stream,4)|0);
        $128 = ($127|0)!=(1);
        (_mz_inflateEnd($stream)|0);
        if ($128) {
         $129 = HEAP32[544648>>2]|0;
         HEAP32[$vararg_buffer49>>2] = 693;
         (_fprintf($129,775874,$vararg_buffer49)|0);
         $ret = 0;
         break L5;
        }
        $130 = HEAP32[$ihdr>>2]|0;
        $131 = $3;
        HEAP32[$131>>2] = $130;
        $132 = ((($ihdr)) + 4|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = $4;
        HEAP32[$134>>2] = $133;
        $135 = HEAP32[$ihdr>>2]|0;
        $136 = ((($ihdr)) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = Math_imul($135, $137)|0;
        $139 = $138<<2;
        $140 = (_malloc($139)|0);
        $141 = $2;
        HEAP32[$141>>2] = $140;
        $142 = $2;
        $143 = HEAP32[$142>>2]|0;
        $144 = ($143|0)!=(0|0);
        if (!($144)) {
         $145 = HEAP32[544648>>2]|0;
         HEAP32[$vararg_buffer52>>2] = 701;
         (_fprintf($145,775874,$vararg_buffer52)|0);
         $ret = 0;
         break L5;
        }
        $146 = ((($ihdr)) + 12|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148|0)==(1);
        $150 = $2;
        $151 = HEAP32[$150>>2]|0;
        $152 = $inflate_buf;
        $153 = ((($stream)) + 20|0);
        $154 = HEAP32[$153>>2]|0;
        if ($149) {
         $155 = (_png_reverse_filter_adam7($151,$ihdr,$152,$154,$palette)|0);
         if ($155) {
          break L5;
         }
         $156 = HEAP32[544648>>2]|0;
         HEAP32[$vararg_buffer55>>2] = 706;
         (_fprintf($156,775874,$vararg_buffer55)|0);
         $ret = 0;
         break L5;
        } else {
         $157 = (_png_reverse_filter($151,$ihdr,$152,$154,$palette)|0);
         if ($157) {
          break L5;
         }
         $158 = HEAP32[544648>>2]|0;
         HEAP32[$vararg_buffer58>>2] = 709;
         (_fprintf($158,775874,$vararg_buffer58)|0);
         $ret = 0;
         break L5;
        }
       }
      }
     }
     $101 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer40>>2] = 672;
     (_fprintf($101,775874,$vararg_buffer40)|0);
     $ret = 0;
     break L5;
     break;
    }
   }
  }
 } while(0);
 $159 = $file;
 $160 = ($159|0)!=(0|0);
 if ($160) {
  $161 = $file;
  (_fclose($161)|0);
 }
 $162 = $ret;
 $163 = $162&1;
 if (!($163)) {
  $164 = $2;
  $165 = HEAP32[$164>>2]|0;
  _free($165);
 }
 $166 = HEAP32[$idat_buf>>2]|0;
 _free($166);
 $167 = $inflate_buf;
 _free($167);
 $168 = $ret;
 $169 = $168&1;
 $$expand_i1_val62 = $169&1;
 HEAP8[$0>>0] = $$expand_i1_val62;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $170 = $$pre_trunc&1;
 STACKTOP = sp;return ($170|0);
}
function _read_chunk_header($file,$chunk) {
 $file = $file|0;
 $chunk = $chunk|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dword = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $dword = sp + 8|0;
 $1 = $file;
 $2 = $chunk;
 ;HEAP8[$dword>>0]=0|0;HEAP8[$dword+1>>0]=0|0;HEAP8[$dword+2>>0]=0|0;HEAP8[$dword+3>>0]=0|0;
 $3 = $1;
 $4 = (_fread($dword,1,4,$3)|0);
 $5 = ($4|0)!=(4);
 do {
  if ($5) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $6 = (_dword_be($dword)|0);
   $7 = $2;
   HEAP32[$7>>2] = $6;
   $8 = $2;
   $9 = ((($8)) + 4|0);
   $10 = $1;
   $11 = (_fread($9,1,4,$10)|0);
   $12 = ($11|0)!=(4);
   if ($12) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   } else {
    $$expand_i1_val4 = 1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $13 = $$pre_trunc&1;
 STACKTOP = sp;return ($13|0);
}
function _png_chunk_type($chunk) {
 $chunk = $chunk|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $chunk;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(4);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = $i;
  $7 = (296020 + ($6<<3)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_memcmp($5,$8,4)|0);
  $10 = ($9|0)==(0);
  $11 = $i;
  if ($10) {
   label = 4;
   break;
  }
  $15 = (($11) + 1)|0;
  $i = $15;
 }
 if ((label|0) == 4) {
  $12 = (296020 + ($11<<3)|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _png_parse_ihdr($file,$chunk,$ihdr) {
 $file = $file|0;
 $chunk = $chunk|0;
 $ihdr = $ihdr|0;
 var $$expand_i1_val = 0, $$expand_i1_val20 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $correct_bpp = 0, $correct_bpp1 = 0, $i = 0, $i2 = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 75|0;
 $1 = $file;
 $2 = $chunk;
 $3 = $ihdr;
 $ret = 1;
 $4 = $1;
 $5 = $2;
 $6 = (_png_read_chunk($4,$5)|0);
 if (!($6)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $142 = $$pre_trunc&1;
  STACKTOP = sp;return ($142|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(13);
 L5: do {
  if ($9) {
   $10 = HEAP32[544648>>2]|0;
   HEAP32[$vararg_buffer>>2] = 154;
   (_fprintf($10,775874,$vararg_buffer)|0);
   $ret = 0;
  } else {
   $11 = $2;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_dword_be($13)|0);
   $15 = $3;
   HEAP32[$15>>2] = $14;
   $16 = $2;
   $17 = ((($16)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 4|0);
   $20 = (_dword_be($19)|0);
   $21 = $3;
   $22 = ((($21)) + 4|0);
   HEAP32[$22>>2] = $20;
   $23 = $2;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 8|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $3;
   $29 = ((($28)) + 8|0);
   HEAP8[$29>>0] = $27;
   $30 = $2;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 9|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $3;
   $36 = ((($35)) + 9|0);
   HEAP8[$36>>0] = $34;
   $37 = $2;
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 10|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $3;
   $43 = ((($42)) + 10|0);
   HEAP8[$43>>0] = $41;
   $44 = $2;
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 11|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $3;
   $50 = ((($49)) + 11|0);
   HEAP8[$50>>0] = $48;
   $51 = $2;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $3;
   $57 = ((($56)) + 12|0);
   HEAP8[$57>>0] = $55;
   $58 = $3;
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0);
   if (!($60)) {
    $61 = $3;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0);
    if (!($64)) {
     $66 = $3;
     $67 = ((($66)) + 9|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68&255;
     $70 = ($69|0)==(2);
     do {
      if ($70) {
       label = 11;
      } else {
       $71 = $3;
       $72 = ((($71)) + 9|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = $73&255;
       $75 = ($74|0)==(4);
       if ($75) {
        label = 11;
       } else {
        $76 = $3;
        $77 = ((($76)) + 9|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = $78&255;
        $80 = ($79|0)==(6);
        if ($80) {
         label = 11;
        } else {
         $92 = $3;
         $93 = ((($92)) + 9|0);
         $94 = HEAP8[$93>>0]|0;
         $95 = $94&255;
         $96 = ($95|0)==(0);
         if ($96) {
          $correct_bpp = 0;
          $i = 0;
          while(1) {
           $97 = $i;
           $98 = ($97>>>0)<(5);
           if (!($98)) {
            break;
           }
           $99 = $i;
           $100 = (296052 + ($99<<2)|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = $3;
           $103 = ((($102)) + 8|0);
           $104 = HEAP8[$103>>0]|0;
           $105 = $104&255;
           $106 = ($101|0)==($105|0);
           if ($106) {
            label = 18;
            break;
           }
           $107 = $i;
           $108 = (($107) + 1)|0;
           $i = $108;
          }
          if ((label|0) == 18) {
           $correct_bpp = 1;
          }
          $109 = $correct_bpp;
          $110 = $109&1;
          if ($110) {
           break;
          }
          $111 = HEAP32[544648>>2]|0;
          HEAP32[$vararg_buffer7>>2] = 186;
          (_fprintf($111,775874,$vararg_buffer7)|0);
          $ret = 0;
          break L5;
         }
         $112 = $3;
         $113 = ((($112)) + 9|0);
         $114 = HEAP8[$113>>0]|0;
         $115 = $114&255;
         $116 = ($115|0)==(3);
         if (!($116)) {
          $132 = HEAP32[544648>>2]|0;
          HEAP32[$vararg_buffer13>>2] = 205;
          (_fprintf($132,775874,$vararg_buffer13)|0);
          $ret = 0;
          break L5;
         }
         $correct_bpp1 = 0;
         $i2 = 0;
         while(1) {
          $117 = $i2;
          $118 = ($117>>>0)<(4);
          if (!($118)) {
           break;
          }
          $119 = $i2;
          $120 = (296072 + ($119<<2)|0);
          $121 = HEAP32[$120>>2]|0;
          $122 = $3;
          $123 = ((($122)) + 8|0);
          $124 = HEAP8[$123>>0]|0;
          $125 = $124&255;
          $126 = ($121|0)==($125|0);
          if ($126) {
           label = 26;
           break;
          }
          $127 = $i2;
          $128 = (($127) + 1)|0;
          $i2 = $128;
         }
         if ((label|0) == 26) {
          $correct_bpp1 = 1;
         }
         $129 = $correct_bpp1;
         $130 = $129&1;
         if (!($130)) {
          $131 = HEAP32[544648>>2]|0;
          HEAP32[$vararg_buffer10>>2] = 202;
          (_fprintf($131,775874,$vararg_buffer10)|0);
          $ret = 0;
          break L5;
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 11) {
      $81 = $3;
      $82 = ((($81)) + 8|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = $83&255;
      $85 = ($84|0)!=(8);
      if ($85) {
       $86 = $3;
       $87 = ((($86)) + 8|0);
       $88 = HEAP8[$87>>0]|0;
       $89 = $88&255;
       $90 = ($89|0)!=(16);
       if ($90) {
        $91 = HEAP32[544648>>2]|0;
        HEAP32[$vararg_buffer4>>2] = 170;
        (_fprintf($91,775874,$vararg_buffer4)|0);
        $ret = 0;
        break;
       }
      }
     }
     $133 = $3;
     $134 = ((($133)) + 10|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $137 = ($136|0)!=(0);
     if (!($137)) {
      break;
     }
     $138 = HEAP32[544648>>2]|0;
     HEAP32[$vararg_buffer16>>2] = 217;
     (_fprintf($138,775874,$vararg_buffer16)|0);
     $ret = 0;
     break;
    }
   }
   $65 = HEAP32[544648>>2]|0;
   HEAP32[$vararg_buffer1>>2] = 165;
   (_fprintf($65,775874,$vararg_buffer1)|0);
   $ret = 0;
  }
 } while(0);
 $139 = $2;
 _png_free_chunk($139);
 $140 = $ret;
 $141 = $140&1;
 $$expand_i1_val20 = $141&1;
 HEAP8[$0>>0] = $$expand_i1_val20;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $142 = $$pre_trunc&1;
 STACKTOP = sp;return ($142|0);
}
function _png_read_plte($file,$buffer,$entries) {
 $file = $file|0;
 $buffer = $buffer|0;
 $entries = $entries|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf = 0, $g = 0, $i = 0, $r = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 800|0;
 $buf = sp + 32|0;
 $1 = $file;
 $2 = $buffer;
 $3 = $entries;
 $4 = $3;
 $5 = ($4>>>0)>(256);
 do {
  if ($5) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $6 = $3;
   $7 = $1;
   $8 = (_fread($buf,3,$6,$7)|0);
   $9 = $3;
   $10 = ($8|0)!=($9|0);
   if ($10) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
   $i = 0;
   while(1) {
    $11 = $i;
    $12 = $3;
    $13 = ($11>>>0)<($12>>>0);
    if (!($13)) {
     break;
    }
    $14 = $i;
    $15 = ($14*3)|0;
    $16 = (($15) + 0)|0;
    $17 = (($buf) + ($16)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $r = $19;
    $20 = $i;
    $21 = ($20*3)|0;
    $22 = (($21) + 1)|0;
    $23 = (($buf) + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $g = $25;
    $26 = $i;
    $27 = ($26*3)|0;
    $28 = (($27) + 2)|0;
    $29 = (($buf) + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $b = $31;
    $32 = $r;
    $33 = $32 << 16;
    $34 = $g;
    $35 = $34 << 8;
    $36 = $33 | $35;
    $37 = $b;
    $38 = $37 << 0;
    $39 = $36 | $38;
    $40 = $39 | -16777216;
    $41 = $i;
    $42 = $2;
    $43 = (($42) + ($41<<2)|0);
    HEAP32[$43>>2] = $40;
    $44 = $i;
    $45 = (($44) + 1)|0;
    $i = $45;
   }
   $46 = $1;
   $47 = (_fseek($46,4,1)|0);
   $48 = ($47|0)<(0);
   if ($48) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   } else {
    $$expand_i1_val6 = 1;
    HEAP8[$0>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $49 = $$pre_trunc&1;
 STACKTOP = sp;return ($49|0);
}
function _png_append_idat($file,$chunk,$buf) {
 $file = $file|0;
 $chunk = $chunk|0;
 $buf = $buf|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $file;
 $2 = $chunk;
 $3 = $buf;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + ($10))|0;
 $12 = (_realloc($5,$11)|0);
 $new_buffer = $12;
 $13 = $new_buffer;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $15 = $new_buffer;
   $16 = $3;
   HEAP32[$16>>2] = $15;
   $17 = $3;
   $18 = HEAP32[$17>>2]|0;
   $19 = $3;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) + ($21)|0);
   $23 = $2;
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (_fread($22,1,$24,$25)|0);
   $27 = $2;
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26|0)!=($28|0);
   if ($29) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
   $30 = $1;
   $31 = (_fseek($30,4,1)|0);
   $32 = ($31|0)<(0);
   if ($32) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   } else {
    $33 = $2;
    $34 = HEAP32[$33>>2]|0;
    $35 = $3;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($34))|0;
    HEAP32[$36>>2] = $38;
    $$expand_i1_val6 = 1;
    HEAP8[$0>>0] = $$expand_i1_val6;
    break;
   }
  } else {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $39 = $$pre_trunc&1;
 STACKTOP = sp;return ($39|0);
}
function _png_pass_geom($ihdr,$width,$height,$bpp_out,$pitch_out,$pass_size) {
 $ihdr = $ihdr|0;
 $width = $width|0;
 $height = $height|0;
 $bpp_out = $bpp_out|0;
 $pitch_out = $pitch_out|0;
 $pass_size = $pass_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bpp = 0, $pitch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ihdr;
 $1 = $width;
 $2 = $height;
 $3 = $bpp_out;
 $4 = $pitch_out;
 $5 = $pass_size;
 $6 = $0;
 $7 = ((($6)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 switch ($9|0) {
 case 0:  {
  $10 = $0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($13) + 7)|0;
  $15 = (($14|0) / 8)&-1;
  $bpp = $15;
  $16 = $0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = Math_imul($17, $21)|0;
  $23 = (($22) + 7)|0;
  $24 = (($23>>>0) / 8)&-1;
  $pitch = $24;
  break;
 }
 case 2:  {
  $25 = $0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28*3)|0;
  $30 = (($29) + 7)|0;
  $31 = (($30|0) / 8)&-1;
  $bpp = $31;
  $32 = $0;
  $33 = HEAP32[$32>>2]|0;
  $34 = $0;
  $35 = ((($34)) + 8|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = Math_imul($33, $37)|0;
  $39 = ($38*3)|0;
  $40 = (($39) + 7)|0;
  $41 = (($40>>>0) / 8)&-1;
  $pitch = $41;
  break;
 }
 case 3:  {
  $42 = $0;
  $43 = ((($42)) + 8|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = (($45) + 7)|0;
  $47 = (($46|0) / 8)&-1;
  $bpp = $47;
  $48 = $0;
  $49 = HEAP32[$48>>2]|0;
  $50 = $0;
  $51 = ((($50)) + 8|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = Math_imul($49, $53)|0;
  $55 = (($54) + 7)|0;
  $56 = (($55>>>0) / 8)&-1;
  $pitch = $56;
  break;
 }
 case 4:  {
  $57 = $0;
  $58 = ((($57)) + 8|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $60<<1;
  $62 = (($61) + 7)|0;
  $63 = (($62|0) / 8)&-1;
  $bpp = $63;
  $64 = $0;
  $65 = HEAP32[$64>>2]|0;
  $66 = $0;
  $67 = ((($66)) + 8|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = Math_imul($65, $69)|0;
  $71 = $70<<1;
  $72 = (($71) + 7)|0;
  $73 = (($72>>>0) / 8)&-1;
  $pitch = $73;
  break;
 }
 case 6:  {
  $74 = $0;
  $75 = ((($74)) + 8|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $77<<2;
  $79 = (($78) + 7)|0;
  $80 = (($79|0) / 8)&-1;
  $bpp = $80;
  $81 = $0;
  $82 = HEAP32[$81>>2]|0;
  $83 = $0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = Math_imul($82, $86)|0;
  $88 = $87<<2;
  $89 = (($88) + 7)|0;
  $90 = (($89>>>0) / 8)&-1;
  $pitch = $90;
  break;
 }
 default: {
  $bpp = 0;
  $pitch = 0;
 }
 }
 $91 = $5;
 $92 = ($91|0)!=(0|0);
 if ($92) {
  $93 = $pitch;
  $94 = (($93) + 1)|0;
  $95 = $0;
  $96 = ((($95)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = Math_imul($94, $97)|0;
  $99 = $5;
  HEAP32[$99>>2] = $98;
 }
 $100 = $3;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  $102 = $bpp;
  $103 = $3;
  HEAP32[$103>>2] = $102;
 }
 $104 = $4;
 $105 = ($104|0)!=(0|0);
 if (!($105)) {
  STACKTOP = sp;return;
 }
 $106 = $pitch;
 $107 = $4;
 HEAP32[$107>>2] = $106;
 STACKTOP = sp;return;
}
function _png_reverse_filter_adam7($data,$ihdr,$inflate_buf,$inflate_buf_size,$palette) {
 $data = $data|0;
 $ihdr = $ihdr|0;
 $inflate_buf = $inflate_buf|0;
 $inflate_buf_size = $inflate_buf_size|0;
 $palette = $palette|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $pass = 0, $pass_height = 0, $pass_size = 0, $pass_width = 0, $tmp_data = 0, $tmp_ihdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 60|0;
 $tmp_ihdr = sp + 8|0;
 $pass_size = sp;
 $1 = $data;
 $2 = $ihdr;
 $3 = $inflate_buf;
 $4 = $inflate_buf_size;
 $5 = $palette;
 $pass = 0;
 while(1) {
  $6 = $pass;
  $7 = ($6>>>0)<(7);
  if (!($7)) {
   label = 13;
   break;
  }
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = $pass;
  $11 = (296088 + ($10<<4)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<=($12>>>0);
  if (!($13)) {
   $14 = $2;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $pass;
   $18 = (296088 + ($17<<4)|0);
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($16>>>0)<=($20>>>0);
   if (!($21)) {
    $22 = $2;
    $23 = HEAP32[$22>>2]|0;
    $24 = $pass;
    $25 = (296088 + ($24<<4)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) - ($26))|0;
    $28 = $pass;
    $29 = (296088 + ($28<<4)|0);
    $30 = ((($29)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($27) + ($31))|0;
    $33 = (($32) - 1)|0;
    $34 = $pass;
    $35 = (296088 + ($34<<4)|0);
    $36 = ((($35)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($33>>>0) / ($37>>>0))&-1;
    $pass_width = $38;
    $39 = $2;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $pass;
    $43 = (296088 + ($42<<4)|0);
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($41) - ($45))|0;
    $47 = $pass;
    $48 = (296088 + ($47<<4)|0);
    $49 = ((($48)) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($46) + ($50))|0;
    $52 = (($51) - 1)|0;
    $53 = $pass;
    $54 = (296088 + ($53<<4)|0);
    $55 = ((($54)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($52>>>0) / ($56>>>0))&-1;
    $pass_height = $57;
    $58 = $pass_width;
    $59 = $pass_height;
    $60 = Math_imul($58, $59)|0;
    $61 = $60<<2;
    $62 = (_malloc($61)|0);
    $tmp_data = $62;
    $63 = $tmp_data;
    $64 = ($63|0)!=(0|0);
    if (!($64)) {
     label = 6;
     break;
    }
    $65 = $2;
    ;HEAP32[$tmp_ihdr>>2]=HEAP32[$65>>2]|0;HEAP32[$tmp_ihdr+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$tmp_ihdr+8>>2]=HEAP32[$65+8>>2]|0;HEAP32[$tmp_ihdr+12>>2]=HEAP32[$65+12>>2]|0;
    $66 = $pass_width;
    HEAP32[$tmp_ihdr>>2] = $66;
    $67 = $pass_height;
    $68 = ((($tmp_ihdr)) + 4|0);
    HEAP32[$68>>2] = $67;
    $69 = $pass_width;
    $70 = $pass_height;
    _png_pass_geom($tmp_ihdr,$69,$70,0,0,$pass_size);
    $71 = HEAP32[$pass_size>>2]|0;
    $72 = $4;
    $73 = ($71>>>0)>($72>>>0);
    $74 = $tmp_data;
    if ($73) {
     label = 8;
     break;
    }
    $75 = $3;
    $76 = HEAP32[$pass_size>>2]|0;
    $77 = $5;
    $78 = (_png_reverse_filter($74,$tmp_ihdr,$75,$76,$77)|0);
    if (!($78)) {
     label = 10;
     break;
    }
    $80 = HEAP32[$pass_size>>2]|0;
    $81 = $3;
    $82 = (($81) + ($80)|0);
    $3 = $82;
    $83 = HEAP32[$pass_size>>2]|0;
    $84 = $4;
    $85 = (($84) - ($83))|0;
    $4 = $85;
    $86 = $1;
    $87 = $2;
    $88 = $tmp_data;
    $89 = $pass_width;
    $90 = $pass_height;
    $91 = $pass;
    $92 = (296088 + ($91<<4)|0);
    _deinterlace_pass($86,$87,$88,$89,$90,$92);
    $93 = $tmp_data;
    _free($93);
   }
  }
  $94 = $pass;
  $95 = (($94) + 1)|0;
  $pass = $95;
 }
 if ((label|0) == 6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $96 = $$pre_trunc&1;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 8) {
  _free($74);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $96 = $$pre_trunc&1;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 10) {
  $79 = $tmp_data;
  _free($79);
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $96 = $$pre_trunc&1;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 13) {
  $$expand_i1_val6 = 1;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $96 = $$pre_trunc&1;
  STACKTOP = sp;return ($96|0);
 }
 return (0)|0;
}
function _png_reverse_filter($data,$ihdr,$inflate_buf,$inflate_buf_size,$palette) {
 $data = $data|0;
 $ihdr = $ihdr|0;
 $inflate_buf = $inflate_buf|0;
 $inflate_buf_size = $inflate_buf_size|0;
 $palette = $palette|0;
 var $$expand_i1_val = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0, $avg5 = 0, $bpp = 0, $decoded_scanline = 0, $filter = 0, $h = 0, $i = 0;
 var $i1 = 0, $i2 = 0, $i3 = 0, $i4 = 0, $i6 = 0, $i7 = 0, $or$cond = 0, $pass_size = 0, $pitch = 0, $prev_scanline = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 91|0;
 $bpp = sp + 64|0;
 $pitch = sp + 60|0;
 $pass_size = sp + 56|0;
 $1 = $data;
 $2 = $ihdr;
 $3 = $inflate_buf;
 $4 = $inflate_buf_size;
 $5 = $palette;
 $ret = 1;
 $6 = $2;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 _png_pass_geom($6,$8,$11,$bpp,$pitch,$pass_size);
 $12 = $4;
 $13 = HEAP32[$pass_size>>2]|0;
 $14 = ($12>>>0)<($13>>>0);
 if ($14) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $289 = $$pre_trunc&1;
  STACKTOP = sp;return ($289|0);
 }
 $15 = HEAP32[$pitch>>2]|0;
 $16 = (_calloc(1,$15)|0);
 $prev_scanline = $16;
 $17 = HEAP32[$pitch>>2]|0;
 $18 = (_calloc(1,$17)|0);
 $decoded_scanline = $18;
 $19 = $decoded_scanline;
 $20 = ($19|0)!=(0|0);
 $21 = $decoded_scanline;
 $22 = ($21|0)!=(0|0);
 $or$cond = $20 & $22;
 L5: do {
  if ($or$cond) {
   $h = 0;
   L7: while(1) {
    $24 = $h;
    $25 = $2;
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($24>>>0)<($27>>>0);
    if (!($28)) {
     break L5;
    }
    $29 = $3;
    $30 = ((($29)) + 1|0);
    $3 = $30;
    $31 = HEAP8[$29>>0]|0;
    $32 = $31&255;
    $filter = $32;
    $33 = $filter;
    L10: do {
     switch ($33|0) {
     case 0:  {
      $34 = $decoded_scanline;
      $35 = $3;
      $36 = HEAP32[$pitch>>2]|0;
      _memcpy(($34|0),($35|0),($36|0))|0;
      break;
     }
     case 1:  {
      $i = 0;
      while(1) {
       $37 = $i;
       $38 = HEAP32[$bpp>>2]|0;
       $39 = ($37>>>0)<($38>>>0);
       if (!($39)) {
        break;
       }
       $40 = $i;
       $41 = $3;
       $42 = (($41) + ($40)|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = $i;
       $45 = $decoded_scanline;
       $46 = (($45) + ($44)|0);
       HEAP8[$46>>0] = $43;
       $47 = $i;
       $48 = (($47) + 1)|0;
       $i = $48;
      }
      $49 = HEAP32[$bpp>>2]|0;
      $i1 = $49;
      while(1) {
       $50 = $i1;
       $51 = HEAP32[$pitch>>2]|0;
       $52 = ($50>>>0)<($51>>>0);
       if (!($52)) {
        break L10;
       }
       $53 = $i1;
       $54 = HEAP32[$bpp>>2]|0;
       $55 = (($53) - ($54))|0;
       $56 = $decoded_scanline;
       $57 = (($56) + ($55)|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = $58&255;
       $60 = $i1;
       $61 = $3;
       $62 = (($61) + ($60)|0);
       $63 = HEAP8[$62>>0]|0;
       $64 = $63&255;
       $65 = (($59) + ($64))|0;
       $66 = $65&255;
       $67 = $i1;
       $68 = $decoded_scanline;
       $69 = (($68) + ($67)|0);
       HEAP8[$69>>0] = $66;
       $70 = $i1;
       $71 = (($70) + 1)|0;
       $i1 = $71;
      }
      break;
     }
     case 2:  {
      $i2 = 0;
      while(1) {
       $72 = $i2;
       $73 = HEAP32[$pitch>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if (!($74)) {
        break L10;
       }
       $75 = $i2;
       $76 = $prev_scanline;
       $77 = (($76) + ($75)|0);
       $78 = HEAP8[$77>>0]|0;
       $79 = $78&255;
       $80 = $i2;
       $81 = $3;
       $82 = (($81) + ($80)|0);
       $83 = HEAP8[$82>>0]|0;
       $84 = $83&255;
       $85 = (($79) + ($84))|0;
       $86 = $85&255;
       $87 = $i2;
       $88 = $decoded_scanline;
       $89 = (($88) + ($87)|0);
       HEAP8[$89>>0] = $86;
       $90 = $i2;
       $91 = (($90) + 1)|0;
       $i2 = $91;
      }
      break;
     }
     case 3:  {
      $i3 = 0;
      while(1) {
       $92 = $i3;
       $93 = HEAP32[$bpp>>2]|0;
       $94 = ($92>>>0)<($93>>>0);
       if (!($94)) {
        break;
       }
       $95 = $i3;
       $96 = $prev_scanline;
       $97 = (($96) + ($95)|0);
       $98 = HEAP8[$97>>0]|0;
       $99 = $98&255;
       $100 = $99 >> 1;
       $101 = $100&255;
       $avg = $101;
       $102 = $avg;
       $103 = $102&255;
       $104 = $i3;
       $105 = $3;
       $106 = (($105) + ($104)|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = $107&255;
       $109 = (($103) + ($108))|0;
       $110 = $109&255;
       $111 = $i3;
       $112 = $decoded_scanline;
       $113 = (($112) + ($111)|0);
       HEAP8[$113>>0] = $110;
       $114 = $i3;
       $115 = (($114) + 1)|0;
       $i3 = $115;
      }
      $116 = HEAP32[$bpp>>2]|0;
      $i4 = $116;
      while(1) {
       $117 = $i4;
       $118 = HEAP32[$pitch>>2]|0;
       $119 = ($117>>>0)<($118>>>0);
       if (!($119)) {
        break L10;
       }
       $120 = $i4;
       $121 = HEAP32[$bpp>>2]|0;
       $122 = (($120) - ($121))|0;
       $123 = $decoded_scanline;
       $124 = (($123) + ($122)|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = $125&255;
       $127 = $i4;
       $128 = $prev_scanline;
       $129 = (($128) + ($127)|0);
       $130 = HEAP8[$129>>0]|0;
       $131 = $130&255;
       $132 = (($126) + ($131))|0;
       $133 = $132 >> 1;
       $134 = $133&255;
       $avg5 = $134;
       $135 = $avg5;
       $136 = $135&255;
       $137 = $i4;
       $138 = $3;
       $139 = (($138) + ($137)|0);
       $140 = HEAP8[$139>>0]|0;
       $141 = $140&255;
       $142 = (($136) + ($141))|0;
       $143 = $142&255;
       $144 = $i4;
       $145 = $decoded_scanline;
       $146 = (($145) + ($144)|0);
       HEAP8[$146>>0] = $143;
       $147 = $i4;
       $148 = (($147) + 1)|0;
       $i4 = $148;
      }
      break;
     }
     case 4:  {
      $i6 = 0;
      while(1) {
       $149 = $i6;
       $150 = HEAP32[$bpp>>2]|0;
       $151 = ($149>>>0)<($150>>>0);
       if (!($151)) {
        break;
       }
       $152 = $i6;
       $153 = $prev_scanline;
       $154 = (($153) + ($152)|0);
       $155 = HEAP8[$154>>0]|0;
       $156 = $155&255;
       $157 = (_paeth(0,$156,0)|0);
       $158 = $i6;
       $159 = $3;
       $160 = (($159) + ($158)|0);
       $161 = HEAP8[$160>>0]|0;
       $162 = $161&255;
       $163 = (($157) + ($162))|0;
       $164 = $163&255;
       $165 = $i6;
       $166 = $decoded_scanline;
       $167 = (($166) + ($165)|0);
       HEAP8[$167>>0] = $164;
       $168 = $i6;
       $169 = (($168) + 1)|0;
       $i6 = $169;
      }
      $170 = HEAP32[$bpp>>2]|0;
      $i7 = $170;
      while(1) {
       $171 = $i7;
       $172 = HEAP32[$pitch>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if (!($173)) {
        break L10;
       }
       $174 = $i7;
       $175 = HEAP32[$bpp>>2]|0;
       $176 = (($174) - ($175))|0;
       $177 = $decoded_scanline;
       $178 = (($177) + ($176)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = $i7;
       $182 = $prev_scanline;
       $183 = (($182) + ($181)|0);
       $184 = HEAP8[$183>>0]|0;
       $185 = $184&255;
       $186 = $i7;
       $187 = HEAP32[$bpp>>2]|0;
       $188 = (($186) - ($187))|0;
       $189 = $prev_scanline;
       $190 = (($189) + ($188)|0);
       $191 = HEAP8[$190>>0]|0;
       $192 = $191&255;
       $193 = (_paeth($180,$185,$192)|0);
       $194 = $i7;
       $195 = $3;
       $196 = (($195) + ($194)|0);
       $197 = HEAP8[$196>>0]|0;
       $198 = $197&255;
       $199 = (($193) + ($198))|0;
       $200 = $199&255;
       $201 = $i7;
       $202 = $decoded_scanline;
       $203 = (($202) + ($201)|0);
       HEAP8[$203>>0] = $200;
       $204 = $i7;
       $205 = (($204) + 1)|0;
       $i7 = $205;
      }
      break;
     }
     default: {
      break L7;
     }
     }
    } while(0);
    $207 = $2;
    $208 = ((($207)) + 9|0);
    $209 = HEAP8[$208>>0]|0;
    $210 = $209&255;
    $211 = ($210|0)==(0);
    do {
     if ($211) {
      $212 = $1;
      $213 = $decoded_scanline;
      $214 = $2;
      $215 = HEAP32[$214>>2]|0;
      $216 = $2;
      $217 = ((($216)) + 8|0);
      $218 = HEAP8[$217>>0]|0;
      $219 = $218&255;
      _copy_line_bw($212,$213,$215,$219);
     } else {
      $220 = $2;
      $221 = ((($220)) + 9|0);
      $222 = HEAP8[$221>>0]|0;
      $223 = $222&255;
      $224 = ($223|0)==(2);
      if ($224) {
       $225 = $1;
       $226 = $decoded_scanline;
       $227 = $2;
       $228 = HEAP32[$227>>2]|0;
       $229 = $2;
       $230 = ((($229)) + 8|0);
       $231 = HEAP8[$230>>0]|0;
       $232 = $231&255;
       _copy_line_rgb($225,$226,$228,$232);
       break;
      }
      $233 = $2;
      $234 = ((($233)) + 9|0);
      $235 = HEAP8[$234>>0]|0;
      $236 = $235&255;
      $237 = ($236|0)==(3);
      if ($237) {
       $238 = $1;
       $239 = $decoded_scanline;
       $240 = $2;
       $241 = HEAP32[$240>>2]|0;
       $242 = $2;
       $243 = ((($242)) + 8|0);
       $244 = HEAP8[$243>>0]|0;
       $245 = $244&255;
       $246 = $5;
       _copy_line_plt($238,$239,$241,$245,$246);
       break;
      }
      $247 = $2;
      $248 = ((($247)) + 9|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = $249&255;
      $251 = ($250|0)==(4);
      if ($251) {
       $252 = $1;
       $253 = $decoded_scanline;
       $254 = $2;
       $255 = HEAP32[$254>>2]|0;
       $256 = $2;
       $257 = ((($256)) + 8|0);
       $258 = HEAP8[$257>>0]|0;
       $259 = $258&255;
       _copy_line_gray_alpha($252,$253,$255,$259);
       break;
      }
      $260 = $2;
      $261 = ((($260)) + 9|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $264 = ($263|0)==(6);
      if ($264) {
       $265 = $1;
       $266 = $decoded_scanline;
       $267 = $2;
       $268 = HEAP32[$267>>2]|0;
       $269 = $2;
       $270 = ((($269)) + 8|0);
       $271 = HEAP8[$270>>0]|0;
       $272 = $271&255;
       _copy_line_rgba($265,$266,$268,$272);
      }
     }
    } while(0);
    $273 = $prev_scanline;
    $274 = $decoded_scanline;
    $275 = HEAP32[$pitch>>2]|0;
    _memcpy(($273|0),($274|0),($275|0))|0;
    $276 = $h;
    $277 = (($276) + 1)|0;
    $h = $277;
    $278 = HEAP32[$pitch>>2]|0;
    $279 = $3;
    $280 = (($279) + ($278)|0);
    $3 = $280;
    $281 = $2;
    $282 = HEAP32[$281>>2]|0;
    $283 = $1;
    $284 = (($283) + ($282<<2)|0);
    $1 = $284;
   }
   $206 = HEAP32[544648>>2]|0;
   HEAP32[$vararg_buffer2>>2] = 439;
   (_fprintf($206,775874,$vararg_buffer2)|0);
   $ret = 0;
  } else {
   $23 = HEAP32[544648>>2]|0;
   HEAP32[$vararg_buffer>>2] = 394;
   (_fprintf($23,775874,$vararg_buffer)|0);
   $ret = 0;
  }
 } while(0);
 $285 = $decoded_scanline;
 _free($285);
 $286 = $prev_scanline;
 _free($286);
 $287 = $ret;
 $288 = $287&1;
 $$expand_i1_val6 = $288&1;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $289 = $$pre_trunc&1;
 STACKTOP = sp;return ($289|0);
}
function _dword_be($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $4 | $9;
 $11 = $0;
 $12 = ((($11)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = $10 | $15;
 $17 = $0;
 $18 = ((($17)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 0;
 $22 = $16 | $21;
 STACKTOP = sp;return ($22|0);
}
function _png_read_chunk($file,$chunk) {
 $file = $file|0;
 $chunk = $chunk|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $file;
 $2 = $chunk;
 $3 = $2;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 4)|0;
 $9 = (_calloc(1,$8)|0);
 $10 = $2;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $31 = $$pre_trunc&1;
  STACKTOP = sp;return ($31|0);
 }
 $16 = $2;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 4)|0;
 $22 = $1;
 $23 = (_fread($18,1,$21,$22)|0);
 $24 = $2;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 4)|0;
 $27 = ($23|0)!=($26|0);
 if ($27) {
  $28 = $2;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  _free($30);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $31 = $$pre_trunc&1;
  STACKTOP = sp;return ($31|0);
 } else {
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $31 = $$pre_trunc&1;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _png_free_chunk($chunk) {
 $chunk = $chunk|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $chunk;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $0;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function _deinterlace_pass($data,$ihdr,$input,$pass_width,$pass_height,$pass) {
 $data = $data|0;
 $ihdr = $ihdr|0;
 $input = $input|0;
 $pass_width = $pass_width|0;
 $pass_height = $pass_height|0;
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $out = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $ihdr;
 $2 = $input;
 $3 = $pass_width;
 $4 = $pass_height;
 $5 = $pass;
 $6 = $5;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = $5;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + ($13))|0;
 $15 = $0;
 $16 = (($15) + ($14<<2)|0);
 $0 = $16;
 $y = 0;
 while(1) {
  $17 = $y;
  $18 = $4;
  $19 = ($17>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $0;
  $out = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $3;
   $23 = ($21>>>0)<($22>>>0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $2;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $out;
   HEAP32[$28>>2] = $27;
   $29 = $x;
   $30 = (($29) + 1)|0;
   $x = $30;
   $31 = $5;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $out;
   $35 = (($34) + ($33<<2)|0);
   $out = $35;
  }
  $36 = $y;
  $37 = (($36) + 1)|0;
  $y = $37;
  $38 = $1;
  $39 = HEAP32[$38>>2]|0;
  $40 = $5;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = Math_imul($39, $42)|0;
  $44 = $0;
  $45 = (($44) + ($43<<2)|0);
  $0 = $45;
  $46 = $3;
  $47 = $2;
  $48 = (($47) + ($46<<2)|0);
  $2 = $48;
 }
 STACKTOP = sp;return;
}
function _paeth($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $1;
 $5 = $2;
 $6 = (($4) + ($5))|0;
 $7 = $3;
 $8 = (($6) - ($7))|0;
 $p = $8;
 $9 = $p;
 $10 = $1;
 $11 = (($9) - ($10))|0;
 $12 = (Math_abs(($11|0))|0);
 $pa = $12;
 $13 = $p;
 $14 = $2;
 $15 = (($13) - ($14))|0;
 $16 = (Math_abs(($15|0))|0);
 $pb = $16;
 $17 = $p;
 $18 = $3;
 $19 = (($17) - ($18))|0;
 $20 = (Math_abs(($19|0))|0);
 $pc = $20;
 $21 = $pa;
 $22 = $pb;
 $23 = ($21|0)<=($22|0);
 if ($23) {
  $24 = $pa;
  $25 = $pc;
  $26 = ($24|0)<=($25|0);
  if ($26) {
   $27 = $1;
   $0 = $27;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $28 = $pb;
 $29 = $pc;
 $30 = ($28|0)<=($29|0);
 if ($30) {
  $31 = $2;
  $0 = $31;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $32 = $3;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _copy_line_bw($data,$decoded,$width,$depth) {
 $data = $data|0;
 $decoded = $decoded|0;
 $width = $width|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $bit = 0, $byte = 0, $i = 0, $i1 = 0, $mask = 0, $mul = 0, $val = 0, $val2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $decoded;
 $2 = $width;
 $3 = $depth;
 $4 = $3;
 $5 = ($4|0)==(16);
 if ($5) {
  $i = 0;
  while(1) {
   $6 = $i;
   $7 = $2;
   $8 = ($6>>>0)<($7>>>0);
   if (!($8)) {
    break;
   }
   $9 = $i;
   $10 = $9 << 1;
   $11 = $1;
   $12 = (($11) + ($10)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $val = $14;
   $15 = $val;
   $16 = ($15*65793)|0;
   $17 = $16 | -16777216;
   $18 = $i;
   $19 = $0;
   $20 = (($19) + ($18<<2)|0);
   HEAP32[$20>>2] = $17;
   $21 = $i;
   $22 = (($21) + 1)|0;
   $i = $22;
  }
  STACKTOP = sp;return;
 } else {
  $23 = $3;
  $24 = (296200 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $mul = $25;
  $26 = $3;
  $27 = 1 << $26;
  $28 = (($27) - 1)|0;
  $mask = $28;
  $i1 = 0;
  $bit = 0;
  while(1) {
   $29 = $i1;
   $30 = $2;
   $31 = ($29>>>0)<($30>>>0);
   if (!($31)) {
    break;
   }
   $32 = $bit;
   $33 = $32 >>> 3;
   $byte = $33;
   $34 = $byte;
   $35 = $1;
   $36 = (($35) + ($34)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $3;
   $40 = (8 - ($39))|0;
   $41 = $bit;
   $42 = $41 & 7;
   $43 = (($40) - ($42))|0;
   $44 = $38 >> $43;
   $val2 = $44;
   $45 = $mask;
   $46 = $val2;
   $47 = $46 & $45;
   $val2 = $47;
   $48 = $mul;
   $49 = $val2;
   $50 = Math_imul($49, $48)|0;
   $val2 = $50;
   $51 = $val2;
   $52 = ($51*65793)|0;
   $53 = $52 | -16777216;
   $54 = $i1;
   $55 = $0;
   $56 = (($55) + ($54<<2)|0);
   HEAP32[$56>>2] = $53;
   $57 = $i1;
   $58 = (($57) + 1)|0;
   $i1 = $58;
   $59 = $3;
   $60 = $bit;
   $61 = (($60) + ($59))|0;
   $bit = $61;
  }
  STACKTOP = sp;return;
 }
}
function _copy_line_rgb($data,$decoded,$width,$bpp) {
 $data = $data|0;
 $decoded = $decoded|0;
 $width = $width|0;
 $bpp = $bpp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, $g = 0, $i = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $decoded;
 $2 = $width;
 $3 = $bpp;
 $4 = $3;
 $5 = (($4>>>0) / 8)&-1;
 $3 = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $r = $11;
  $12 = $3;
  $13 = $1;
  $14 = (($13) + ($12)|0);
  $1 = $14;
  $15 = $1;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $g = $17;
  $18 = $3;
  $19 = $1;
  $20 = (($19) + ($18)|0);
  $1 = $20;
  $21 = $1;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $b = $23;
  $24 = $3;
  $25 = $1;
  $26 = (($25) + ($24)|0);
  $1 = $26;
  $27 = $r;
  $28 = $27 << 16;
  $29 = -16777216 | $28;
  $30 = $g;
  $31 = $30 << 8;
  $32 = $29 | $31;
  $33 = $b;
  $34 = $33 << 0;
  $35 = $32 | $34;
  $36 = $i;
  $37 = $0;
  $38 = (($37) + ($36<<2)|0);
  HEAP32[$38>>2] = $35;
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 STACKTOP = sp;return;
}
function _copy_line_plt($data,$decoded,$width,$depth,$palette) {
 $data = $data|0;
 $decoded = $decoded|0;
 $width = $width|0;
 $depth = $depth|0;
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit = 0;
 var $byte = 0, $i = 0, $mask = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $decoded;
 $2 = $width;
 $3 = $depth;
 $4 = $palette;
 $5 = $3;
 $6 = 1 << $5;
 $7 = (($6) - 1)|0;
 $mask = $7;
 $i = 0;
 $bit = 0;
 while(1) {
  $8 = $i;
  $9 = $2;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $bit;
  $12 = $11 >>> 3;
  $byte = $12;
  $13 = $byte;
  $14 = $1;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $3;
  $19 = (8 - ($18))|0;
  $20 = $bit;
  $21 = $20 & 7;
  $22 = (($19) - ($21))|0;
  $23 = $17 >> $22;
  $val = $23;
  $24 = $mask;
  $25 = $val;
  $26 = $25 & $24;
  $val = $26;
  $27 = $val;
  $28 = $4;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $i;
  $32 = $0;
  $33 = (($32) + ($31<<2)|0);
  HEAP32[$33>>2] = $30;
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
  $36 = $3;
  $37 = $bit;
  $38 = (($37) + ($36))|0;
  $bit = $38;
 }
 STACKTOP = sp;return;
}
function _copy_line_gray_alpha($data,$decoded,$width,$bpp) {
 $data = $data|0;
 $decoded = $decoded|0;
 $width = $width|0;
 $bpp = $bpp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alpha = 0, $gray = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $decoded;
 $2 = $width;
 $3 = $bpp;
 $4 = $3;
 $5 = (($4>>>0) / 8)&-1;
 $3 = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $gray = $11;
  $12 = $3;
  $13 = $1;
  $14 = (($13) + ($12)|0);
  $1 = $14;
  $15 = $1;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $alpha = $17;
  $18 = $3;
  $19 = $1;
  $20 = (($19) + ($18)|0);
  $1 = $20;
  $21 = $gray;
  $22 = ($21*65793)|0;
  $23 = $alpha;
  $24 = $23 << 24;
  $25 = $22 | $24;
  $26 = $i;
  $27 = $0;
  $28 = (($27) + ($26<<2)|0);
  HEAP32[$28>>2] = $25;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 STACKTOP = sp;return;
}
function _copy_line_rgba($data,$decoded,$width,$bpp) {
 $data = $data|0;
 $decoded = $decoded|0;
 $width = $width|0;
 $bpp = $bpp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $g = 0, $i = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $decoded;
 $2 = $width;
 $3 = $bpp;
 $4 = $3;
 $5 = (($4>>>0) / 8)&-1;
 $3 = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $r = $11;
  $12 = $3;
  $13 = $1;
  $14 = (($13) + ($12)|0);
  $1 = $14;
  $15 = $1;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $g = $17;
  $18 = $3;
  $19 = $1;
  $20 = (($19) + ($18)|0);
  $1 = $20;
  $21 = $1;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $b = $23;
  $24 = $3;
  $25 = $1;
  $26 = (($25) + ($24)|0);
  $1 = $26;
  $27 = $1;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $a = $29;
  $30 = $3;
  $31 = $1;
  $32 = (($31) + ($30)|0);
  $1 = $32;
  $33 = $a;
  $34 = $33 << 24;
  $35 = $r;
  $36 = $35 << 16;
  $37 = $34 | $36;
  $38 = $g;
  $39 = $38 << 8;
  $40 = $37 | $39;
  $41 = $b;
  $42 = $41 << 0;
  $43 = $40 | $42;
  $44 = $i;
  $45 = $0;
  $46 = (($45) + ($44<<2)|0);
  HEAP32[$46>>2] = $43;
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 STACKTOP = sp;return;
}
function _zlib_extract_first_rom($zip_path,$zip_path_size,$valid_exts) {
 $zip_path = $zip_path|0;
 $zip_path_size = $zip_path_size|0;
 $valid_exts = $valid_exts|0;
 var $$expand_i1_val = 0, $$expand_i1_val29 = 0, $$expand_i1_val31 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cdata = 0, $cmode = 0, $comment_len = 0, $commentlength = 0, $crc32 = 0, $csize = 0, $data = 0, $directory = 0, $ext = 0, $extralength = 0, $filename = 0, $footer = 0, $list = 0, $namelength = 0, $new_path = 0, $offset = 0, $offsetEL = 0, $offsetNL = 0, $ret = 0, $signature = 0;
 var $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $zip_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 8369|0;
 $data = sp + 144|0;
 $filename = sp + 4272|0;
 $new_path = sp + 176|0;
 $1 = $zip_path;
 $2 = $zip_path_size;
 $3 = $valid_exts;
 $footer = 0;
 $directory = 0;
 $ret = 1;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $6 = HEAP32[(259664)>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = HEAP32[(259664)>>2]|0;
  $9 = HEAP32[544648>>2]|0;
  $10 = $7 ? $8 : $9;
  (_fprintf($10,775929,$vararg_buffer)|0);
  $11 = HEAP32[(259664)>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = HEAP32[(259664)>>2]|0;
  $14 = HEAP32[544648>>2]|0;
  $15 = $12 ? $13 : $14;
  (_fflush($15)|0);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $235 = $$pre_trunc&1;
  STACKTOP = sp;return ($235|0);
 }
 $16 = $3;
 $17 = (_string_split($16,776046)|0);
 $list = $17;
 $18 = $list;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $$expand_i1_val29 = 0;
  HEAP8[$0>>0] = $$expand_i1_val29;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $235 = $$pre_trunc&1;
  STACKTOP = sp;return ($235|0);
 }
 HEAP32[$data>>2] = 0;
 $20 = $1;
 $21 = (_read_file($20,$data)|0);
 $zip_size = $21;
 $22 = $zip_size;
 $23 = ($22|0)<(22);
 L9: do {
  if ($23) {
   $24 = HEAP32[(259664)>>2]|0;
   $25 = ($24|0)!=(0|0);
   $26 = HEAP32[(259664)>>2]|0;
   $27 = HEAP32[544648>>2]|0;
   $28 = $25 ? $26 : $27;
   HEAP32[$vararg_buffer1>>2] = 107;
   (_fprintf($28,776048,$vararg_buffer1)|0);
   $29 = HEAP32[(259664)>>2]|0;
   $30 = ($29|0)!=(0|0);
   $31 = HEAP32[(259664)>>2]|0;
   $32 = HEAP32[544648>>2]|0;
   $33 = $30 ? $31 : $32;
   (_fflush($33)|0);
   $ret = 0;
  } else {
   $34 = HEAP32[$data>>2]|0;
   $35 = $zip_size;
   $36 = (($34) + ($35)|0);
   $37 = ((($36)) + -22|0);
   $footer = $37;
   while(1) {
    $38 = $footer;
    $39 = HEAP32[$data>>2]|0;
    $40 = ((($39)) + 22|0);
    $41 = ($38>>>0)<=($40>>>0);
    if ($41) {
     label = 9;
     break;
    }
    $52 = $footer;
    $53 = (_read_le($52,4)|0);
    $54 = ($53|0)==(101010256);
    if ($54) {
     $55 = $footer;
     $56 = ((($55)) + 20|0);
     $57 = (_read_le($56,2)|0);
     $comment_len = $57;
     $58 = $footer;
     $59 = ((($58)) + 22|0);
     $60 = $comment_len;
     $61 = (($59) + ($60)|0);
     $62 = HEAP32[$data>>2]|0;
     $63 = $zip_size;
     $64 = (($62) + ($63)|0);
     $65 = ($61|0)==($64|0);
     if ($65) {
      break;
     }
    }
    $66 = $footer;
    $67 = ((($66)) + -1|0);
    $footer = $67;
   }
   if ((label|0) == 9) {
    $42 = HEAP32[(259664)>>2]|0;
    $43 = ($42|0)!=(0|0);
    $44 = HEAP32[(259664)>>2]|0;
    $45 = HEAP32[544648>>2]|0;
    $46 = $43 ? $44 : $45;
    HEAP32[$vararg_buffer3>>2] = 113;
    (_fprintf($46,776048,$vararg_buffer3)|0);
    $47 = HEAP32[(259664)>>2]|0;
    $48 = ($47|0)!=(0|0);
    $49 = HEAP32[(259664)>>2]|0;
    $50 = HEAP32[544648>>2]|0;
    $51 = $48 ? $49 : $50;
    (_fflush($51)|0);
    $ret = 0;
    break;
   }
   $68 = HEAP32[$data>>2]|0;
   $69 = $footer;
   $70 = ((($69)) + 16|0);
   $71 = (_read_le($70,4)|0);
   $72 = (($68) + ($71)|0);
   $directory = $72;
   while(1) {
    $73 = $directory;
    $74 = (_read_le($73,4)|0);
    $signature = $74;
    $75 = $signature;
    $76 = ($75|0)!=(33639248);
    if ($76) {
     label = 29;
     break;
    }
    $77 = $directory;
    $78 = ((($77)) + 10|0);
    $79 = (_read_le($78,2)|0);
    $cmode = $79;
    $80 = $directory;
    $81 = ((($80)) + 16|0);
    $82 = (_read_le($81,4)|0);
    $crc32 = $82;
    $83 = $directory;
    $84 = ((($83)) + 20|0);
    $85 = (_read_le($84,4)|0);
    $csize = $85;
    $86 = $directory;
    $87 = ((($86)) + 24|0);
    $88 = (_read_le($87,4)|0);
    $size = $88;
    $89 = $directory;
    $90 = ((($89)) + 28|0);
    $91 = (_read_le($90,2)|0);
    $namelength = $91;
    $92 = $directory;
    $93 = ((($92)) + 30|0);
    $94 = (_read_le($93,2)|0);
    $extralength = $94;
    $95 = $directory;
    $96 = ((($95)) + 32|0);
    $97 = (_read_le($96,2)|0);
    $commentlength = $97;
    _memset(($filename|0),0,4096)|0;
    $98 = $namelength;
    $99 = ($98>>>0)>=(4096);
    if ($99) {
     label = 16;
     break;
    }
    $110 = $directory;
    $111 = ((($110)) + 46|0);
    $112 = $namelength;
    _memcpy(($filename|0),($111|0),($112|0))|0;
    $113 = $directory;
    $114 = ((($113)) + 42|0);
    $115 = (_read_le($114,4)|0);
    $offset = $115;
    $116 = HEAP32[$data>>2]|0;
    $117 = $offset;
    $118 = (($116) + ($117)|0);
    $119 = ((($118)) + 26|0);
    $120 = (_read_le($119,2)|0);
    $offsetNL = $120;
    $121 = HEAP32[$data>>2]|0;
    $122 = $offset;
    $123 = (($121) + ($122)|0);
    $124 = ((($123)) + 28|0);
    $125 = (_read_le($124,2)|0);
    $offsetEL = $125;
    $126 = HEAP32[$data>>2]|0;
    $127 = $offset;
    $128 = (($126) + ($127)|0);
    $129 = ((($128)) + 30|0);
    $130 = $offsetNL;
    $131 = (($129) + ($130)|0);
    $132 = $offsetEL;
    $133 = (($131) + ($132)|0);
    $cdata = $133;
    $134 = HEAP8[102648>>0]|0;
    $135 = $134&1;
    if ($135) {
     $136 = HEAP32[(259664)>>2]|0;
     $137 = ($136|0)!=(0|0);
     $138 = HEAP32[(259664)>>2]|0;
     $139 = HEAP32[544648>>2]|0;
     $140 = $137 ? $138 : $139;
     $141 = $offset;
     $142 = (($141) + 30)|0;
     $143 = $offsetNL;
     $144 = (($142) + ($143))|0;
     $145 = $offsetEL;
     $146 = (($144) + ($145))|0;
     $147 = $csize;
     $148 = $size;
     HEAP32[$vararg_buffer9>>2] = $146;
     $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
     HEAP32[$vararg_ptr12>>2] = $147;
     $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
     HEAP32[$vararg_ptr13>>2] = $148;
     (_fprintf($140,776105,$vararg_buffer9)|0);
     $149 = HEAP32[(259664)>>2]|0;
     $150 = ($149|0)!=(0|0);
     $151 = HEAP32[(259664)>>2]|0;
     $152 = HEAP32[544648>>2]|0;
     $153 = $150 ? $151 : $152;
     (_fflush($153)|0);
    }
    $154 = (_path_get_extension($filename)|0);
    $ext = $154;
    $155 = $ext;
    $156 = ($155|0)!=(0|0);
    if ($156) {
     $157 = $list;
     $158 = $ext;
     $159 = (_string_list_find_elem($157,$158)|0);
     if ($159) {
      label = 21;
      break;
     }
    }
    $203 = $namelength;
    $204 = (46 + ($203))|0;
    $205 = $extralength;
    $206 = (($204) + ($205))|0;
    $207 = $commentlength;
    $208 = (($206) + ($207))|0;
    $209 = $directory;
    $210 = (($209) + ($208)|0);
    $directory = $210;
   }
   if ((label|0) == 16) {
    $100 = HEAP32[(259664)>>2]|0;
    $101 = ($100|0)!=(0|0);
    $102 = HEAP32[(259664)>>2]|0;
    $103 = HEAP32[544648>>2]|0;
    $104 = $101 ? $102 : $103;
    HEAP32[$vararg_buffer6>>2] = 141;
    (_fprintf($104,776048,$vararg_buffer6)|0);
    $105 = HEAP32[(259664)>>2]|0;
    $106 = ($105|0)!=(0|0);
    $107 = HEAP32[(259664)>>2]|0;
    $108 = HEAP32[544648>>2]|0;
    $109 = $106 ? $107 : $108;
    (_fflush($109)|0);
    $ret = 0;
    break;
   }
   else if ((label|0) == 21) {
    $160 = $1;
    $161 = (_path_basename($filename)|0);
    _fill_pathname_resolve_relative($new_path,$160,$161,4096);
    $162 = $cmode;
    switch ($162|0) {
    case 0:  {
     $163 = $cdata;
     $164 = $size;
     $165 = (_write_file($new_path,$163,$164)|0);
     if ($165) {
      break L9;
     }
     $166 = HEAP32[(259664)>>2]|0;
     $167 = ($166|0)!=(0|0);
     $168 = HEAP32[(259664)>>2]|0;
     $169 = HEAP32[544648>>2]|0;
     $170 = $167 ? $168 : $169;
     HEAP32[$vararg_buffer14>>2] = 165;
     (_fprintf($170,776048,$vararg_buffer14)|0);
     $171 = HEAP32[(259664)>>2]|0;
     $172 = ($171|0)!=(0|0);
     $173 = HEAP32[(259664)>>2]|0;
     $174 = HEAP32[544648>>2]|0;
     $175 = $172 ? $173 : $174;
     (_fflush($175)|0);
     $ret = 0;
     break L9;
     break;
    }
    case 8:  {
     $176 = $cdata;
     $177 = $csize;
     $178 = $size;
     $179 = $crc32;
     $180 = (_inflate_data_to_file($new_path,$176,$177,$178,$179)|0);
     if ($180) {
      $181 = $1;
      $182 = $2;
      (_strlcpy_rarch__($181,$new_path,$182)|0);
      break L9;
     } else {
      $183 = HEAP32[(259664)>>2]|0;
      $184 = ($183|0)!=(0|0);
      $185 = HEAP32[(259664)>>2]|0;
      $186 = HEAP32[544648>>2]|0;
      $187 = $184 ? $185 : $186;
      HEAP32[$vararg_buffer17>>2] = 175;
      (_fprintf($187,776048,$vararg_buffer17)|0);
      $188 = HEAP32[(259664)>>2]|0;
      $189 = ($188|0)!=(0|0);
      $190 = HEAP32[(259664)>>2]|0;
      $191 = HEAP32[544648>>2]|0;
      $192 = $189 ? $190 : $191;
      (_fflush($192)|0);
      $ret = 0;
      break L9;
     }
     break;
    }
    default: {
     $193 = HEAP32[(259664)>>2]|0;
     $194 = ($193|0)!=(0|0);
     $195 = HEAP32[(259664)>>2]|0;
     $196 = HEAP32[544648>>2]|0;
     $197 = $194 ? $195 : $196;
     HEAP32[$vararg_buffer20>>2] = 178;
     (_fprintf($197,776048,$vararg_buffer20)|0);
     $198 = HEAP32[(259664)>>2]|0;
     $199 = ($198|0)!=(0|0);
     $200 = HEAP32[(259664)>>2]|0;
     $201 = HEAP32[544648>>2]|0;
     $202 = $199 ? $200 : $201;
     (_fflush($202)|0);
     $ret = 0;
     break L9;
    }
    }
   }
   else if ((label|0) == 29) {
    $211 = HEAP32[(259664)>>2]|0;
    $212 = ($211|0)!=(0|0);
    $213 = HEAP32[(259664)>>2]|0;
    $214 = HEAP32[544648>>2]|0;
    $215 = $212 ? $213 : $214;
    (_fprintf($215,776150,$vararg_buffer23)|0);
    $216 = HEAP32[(259664)>>2]|0;
    $217 = ($216|0)!=(0|0);
    $218 = HEAP32[(259664)>>2]|0;
    $219 = HEAP32[544648>>2]|0;
    $220 = $217 ? $218 : $219;
    (_fflush($220)|0);
    $221 = HEAP32[(259664)>>2]|0;
    $222 = ($221|0)!=(0|0);
    $223 = HEAP32[(259664)>>2]|0;
    $224 = HEAP32[544648>>2]|0;
    $225 = $222 ? $223 : $224;
    HEAP32[$vararg_buffer25>>2] = 186;
    (_fprintf($225,776048,$vararg_buffer25)|0);
    $226 = HEAP32[(259664)>>2]|0;
    $227 = ($226|0)!=(0|0);
    $228 = HEAP32[(259664)>>2]|0;
    $229 = HEAP32[544648>>2]|0;
    $230 = $227 ? $228 : $229;
    (_fflush($230)|0);
    $ret = 0;
    break;
   }
  }
 } while(0);
 $231 = HEAP32[$data>>2]|0;
 _free($231);
 $232 = $list;
 _string_list_free($232);
 $233 = $ret;
 $234 = $233&1;
 $$expand_i1_val31 = $234&1;
 HEAP8[$0>>0] = $$expand_i1_val31;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $235 = $$pre_trunc&1;
 STACKTOP = sp;return ($235|0);
}
function _read_le($data,$size) {
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $size;
 $val = 0;
 $2 = $1;
 $3 = $2<<3;
 $1 = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $0 = $8;
  $9 = HEAP8[$7>>0]|0;
  $10 = $9&255;
  $11 = $i;
  $12 = $10 << $11;
  $13 = $val;
  $14 = $13 | $12;
  $val = $14;
  $15 = $i;
  $16 = (($15) + 8)|0;
  $i = $16;
 }
 $17 = $val;
 STACKTOP = sp;return ($17|0);
}
function _inflate_data_to_file($path,$cdata,$csize,$size,$crc32) {
 $path = $path|0;
 $cdata = $cdata|0;
 $csize = $csize|0;
 $size = $size|0;
 $crc32 = $crc32|0;
 var $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
 var $out_data = 0, $real_crc32 = 0, $ret = 0, $stream = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 109|0;
 $stream = sp + 32|0;
 $1 = $path;
 $2 = $cdata;
 $3 = $csize;
 $4 = $size;
 $5 = $crc32;
 $ret = 1;
 $6 = $4;
 $7 = (_malloc($6)|0);
 $out_data = $7;
 $8 = $out_data;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $76 = $$pre_trunc&1;
  STACKTOP = sp;return ($76|0);
 }
 $real_crc32 = 0;
 dest=$stream; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $10 = (_mz_inflateInit2($stream,-15)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = HEAP32[(259664)>>2]|0;
   $13 = ($12|0)!=(0|0);
   $14 = HEAP32[(259664)>>2]|0;
   $15 = HEAP32[544648>>2]|0;
   $16 = $13 ? $14 : $15;
   HEAP32[$vararg_buffer>>2] = 61;
   (_fprintf($16,776048,$vararg_buffer)|0);
   $17 = HEAP32[(259664)>>2]|0;
   $18 = ($17|0)!=(0|0);
   $19 = HEAP32[(259664)>>2]|0;
   $20 = HEAP32[544648>>2]|0;
   $21 = $18 ? $19 : $20;
   (_fflush($21)|0);
   $ret = 0;
  } else {
   $22 = $2;
   HEAP32[$stream>>2] = $22;
   $23 = $3;
   $24 = ((($stream)) + 4|0);
   HEAP32[$24>>2] = $23;
   $25 = $out_data;
   $26 = ((($stream)) + 12|0);
   HEAP32[$26>>2] = $25;
   $27 = $4;
   $28 = ((($stream)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_mz_inflate($stream,4)|0);
   $30 = ($29|0)!=(1);
   (_mz_inflateEnd($stream)|0);
   if ($30) {
    $31 = HEAP32[(259664)>>2]|0;
    $32 = ($31|0)!=(0|0);
    $33 = HEAP32[(259664)>>2]|0;
    $34 = HEAP32[544648>>2]|0;
    $35 = $32 ? $33 : $34;
    HEAP32[$vararg_buffer1>>2] = 71;
    (_fprintf($35,776048,$vararg_buffer1)|0);
    $36 = HEAP32[(259664)>>2]|0;
    $37 = ($36|0)!=(0|0);
    $38 = HEAP32[(259664)>>2]|0;
    $39 = HEAP32[544648>>2]|0;
    $40 = $37 ? $38 : $39;
    (_fflush($40)|0);
    $ret = 0;
    break;
   }
   $41 = $out_data;
   $42 = $4;
   $43 = (_crc32_calculate1854($41,$42)|0);
   $real_crc32 = $43;
   $44 = $real_crc32;
   $45 = $5;
   $46 = ($44|0)!=($45|0);
   if ($46) {
    $47 = HEAP32[(259664)>>2]|0;
    $48 = ($47|0)!=(0|0);
    $49 = HEAP32[(259664)>>2]|0;
    $50 = HEAP32[544648>>2]|0;
    $51 = $48 ? $49 : $50;
    $52 = $real_crc32;
    $53 = $5;
    HEAP32[$vararg_buffer4>>2] = $52;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $53;
    (_fprintf($51,776252,$vararg_buffer4)|0);
    $54 = HEAP32[(259664)>>2]|0;
    $55 = ($54|0)!=(0|0);
    $56 = HEAP32[(259664)>>2]|0;
    $57 = HEAP32[544648>>2]|0;
    $58 = $55 ? $56 : $57;
    (_fflush($58)|0);
   }
   $59 = $1;
   $60 = $out_data;
   $61 = $4;
   $62 = (_write_file($59,$60,$61)|0);
   if (!($62)) {
    $63 = HEAP32[(259664)>>2]|0;
    $64 = ($63|0)!=(0|0);
    $65 = HEAP32[(259664)>>2]|0;
    $66 = HEAP32[544648>>2]|0;
    $67 = $64 ? $65 : $66;
    HEAP32[$vararg_buffer8>>2] = 81;
    (_fprintf($67,776048,$vararg_buffer8)|0);
    $68 = HEAP32[(259664)>>2]|0;
    $69 = ($68|0)!=(0|0);
    $70 = HEAP32[(259664)>>2]|0;
    $71 = HEAP32[544648>>2]|0;
    $72 = $69 ? $70 : $71;
    (_fflush($72)|0);
    $ret = 0;
   }
  }
 } while(0);
 $73 = $out_data;
 _free($73);
 $74 = $ret;
 $75 = $74&1;
 $$expand_i1_val12 = $75&1;
 HEAP8[$0>>0] = $$expand_i1_val12;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $76 = $$pre_trunc&1;
 STACKTOP = sp;return ($76|0);
}
function _crc32_calculate1854($data,$length) {
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $length;
 $2 = $0;
 $3 = $1;
 $4 = (_crc32(0,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _crc32($crc,$ptr_tmp,$buf_len) {
 $crc = $crc|0;
 $ptr_tmp = $ptr_tmp|0;
 $buf_len = $buf_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, $crcu32 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $crc;
 $2 = $ptr_tmp;
 $3 = $buf_len;
 $4 = $2;
 $ptr = $4;
 $5 = $1;
 $crcu32 = $5;
 $6 = $ptr;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $8 = $crcu32;
 $9 = $8 ^ -1;
 $crcu32 = $9;
 while(1) {
  $10 = $3;
  $11 = (($10) + -1)|0;
  $3 = $11;
  $12 = ($10|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $ptr;
  $14 = ((($13)) + 1|0);
  $ptr = $14;
  $15 = HEAP8[$13>>0]|0;
  $b = $15;
  $16 = $crcu32;
  $17 = $16 >>> 4;
  $18 = $crcu32;
  $19 = $18 & 15;
  $20 = $b;
  $21 = $20&255;
  $22 = $21 & 15;
  $23 = $19 ^ $22;
  $24 = (296236 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $17 ^ $25;
  $crcu32 = $26;
  $27 = $crcu32;
  $28 = $27 >>> 4;
  $29 = $crcu32;
  $30 = $29 & 15;
  $31 = $b;
  $32 = $31&255;
  $33 = $32 >> 4;
  $34 = $30 ^ $33;
  $35 = (296236 + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $28 ^ $36;
  $crcu32 = $37;
 }
 $38 = $crcu32;
 $39 = $38 ^ -1;
 $0 = $39;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _mz_inflateInit2($pStream,$window_bits) {
 $pStream = $pStream|0;
 $window_bits = $window_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $pDecomp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pStream;
 $2 = $window_bits;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = -2;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $5 = $2;
 $6 = ($5|0)!=(15);
 if ($6) {
  $7 = $2;
  $8 = (0 - ($7))|0;
  $9 = ($8|0)!=(15);
  if ($9) {
   $0 = -10000;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $10 = $1;
 $11 = ((($10)) + 36|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = ((($18)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = ((($20)) + 44|0);
 HEAP32[$21>>2] = 0;
 $22 = (_malloc(43784)|0);
 $pDecomp = $22;
 $23 = $pDecomp;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $pDecomp;
  $26 = $1;
  $27 = ((($26)) + 28|0);
  HEAP32[$27>>2] = $25;
  $28 = $pDecomp;
  HEAP32[$28>>2] = 0;
  $29 = $pDecomp;
  $30 = ((($29)) + 10992|0);
  HEAP32[$30>>2] = 0;
  $31 = $pDecomp;
  $32 = ((($31)) + 10996|0);
  HEAP32[$32>>2] = 0;
  $33 = $pDecomp;
  $34 = ((($33)) + 43780|0);
  HEAP32[$34>>2] = 1;
  $35 = $pDecomp;
  $36 = ((($35)) + 11000|0);
  HEAP32[$36>>2] = 1;
  $37 = $pDecomp;
  $38 = ((($37)) + 11004|0);
  HEAP32[$38>>2] = 0;
  $39 = $2;
  $40 = $pDecomp;
  $41 = ((($40)) + 11008|0);
  HEAP32[$41>>2] = $39;
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 } else {
  $0 = -4;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _mz_inflateInit($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pStream;
 $1 = $0;
 $2 = (_mz_inflateInit2($1,15)|0);
 STACKTOP = sp;return ($2|0);
}
function _mz_inflate($pStream,$flush) {
 $pStream = $pStream|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $decomp_flags = 0, $first_call = 0, $in_bytes = 0, $n = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $orig_avail_in = 0, $out_bytes = 0, $pState = 0, $status = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $in_bytes = sp + 12|0;
 $out_bytes = sp + 8|0;
 $1 = $pStream;
 $2 = $flush;
 $decomp_flags = 8;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $2;
   $10 = ($9|0)==(1);
   if ($10) {
    $2 = 2;
   }
   $11 = $2;
   $12 = ($11|0)!=(0);
   $13 = $2;
   $14 = ($13|0)!=(2);
   $or$cond = $12 & $14;
   $15 = $2;
   $16 = ($15|0)!=(4);
   $or$cond3 = $or$cond & $16;
   if ($or$cond3) {
    $0 = -2;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
   $17 = $1;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $pState = $19;
   $20 = $pState;
   $21 = ((($20)) + 11008|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)>(0);
   if ($23) {
    $24 = $decomp_flags;
    $25 = $24 | 1;
    $decomp_flags = $25;
   }
   $26 = $1;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $orig_avail_in = $28;
   $29 = $pState;
   $30 = ((($29)) + 11000|0);
   $31 = HEAP32[$30>>2]|0;
   $first_call = $31;
   $32 = $pState;
   $33 = ((($32)) + 11000|0);
   HEAP32[$33>>2] = 0;
   $34 = $pState;
   $35 = ((($34)) + 43780|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)<(0);
   if ($37) {
    $0 = -3;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
   $38 = $pState;
   $39 = ((($38)) + 11004|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   $42 = $2;
   $43 = ($42|0)!=(4);
   $or$cond5 = $41 & $43;
   if ($or$cond5) {
    $0 = -2;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
   $44 = $2;
   $45 = ($44|0)==(4);
   $46 = $45&1;
   $47 = $pState;
   $48 = ((($47)) + 11004|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 | $46;
   HEAP32[$48>>2] = $50;
   $51 = $2;
   $52 = ($51|0)==(4);
   $53 = $first_call;
   $54 = ($53|0)!=(0);
   $or$cond7 = $52 & $54;
   if ($or$cond7) {
    $55 = $decomp_flags;
    $56 = $55 | 4;
    $decomp_flags = $56;
    $57 = $1;
    $58 = ((($57)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    HEAP32[$in_bytes>>2] = $59;
    $60 = $1;
    $61 = ((($60)) + 16|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP32[$out_bytes>>2] = $62;
    $63 = $pState;
    $64 = $1;
    $65 = HEAP32[$64>>2]|0;
    $66 = $1;
    $67 = ((($66)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $1;
    $70 = ((($69)) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $decomp_flags;
    $73 = (_tinfl_decompress($63,$65,$in_bytes,$68,$71,$out_bytes,$72)|0);
    $status = $73;
    $74 = $status;
    $75 = $pState;
    $76 = ((($75)) + 43780|0);
    HEAP32[$76>>2] = $74;
    $77 = HEAP32[$in_bytes>>2]|0;
    $78 = $1;
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + ($77)|0);
    HEAP32[$78>>2] = $80;
    $81 = HEAP32[$in_bytes>>2]|0;
    $82 = $1;
    $83 = ((($82)) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) - ($81))|0;
    HEAP32[$83>>2] = $85;
    $86 = HEAP32[$in_bytes>>2]|0;
    $87 = $1;
    $88 = ((($87)) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + ($86))|0;
    HEAP32[$88>>2] = $90;
    $91 = $pState;
    $92 = ((($91)) + 28|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $1;
    $95 = ((($94)) + 40|0);
    HEAP32[$95>>2] = $93;
    $96 = HEAP32[$out_bytes>>2]|0;
    $97 = $1;
    $98 = ((($97)) + 12|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + ($96)|0);
    HEAP32[$98>>2] = $100;
    $101 = HEAP32[$out_bytes>>2]|0;
    $102 = $1;
    $103 = ((($102)) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) - ($101))|0;
    HEAP32[$103>>2] = $105;
    $106 = HEAP32[$out_bytes>>2]|0;
    $107 = $1;
    $108 = ((($107)) + 20|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($106))|0;
    HEAP32[$108>>2] = $110;
    $111 = $status;
    $112 = ($111|0)<(0);
    if ($112) {
     $0 = -3;
     $325 = $0;
     STACKTOP = sp;return ($325|0);
    }
    $113 = $status;
    $114 = ($113|0)!=(0);
    if ($114) {
     $115 = $pState;
     $116 = ((($115)) + 43780|0);
     HEAP32[$116>>2] = -1;
     $0 = -5;
     $325 = $0;
     STACKTOP = sp;return ($325|0);
    } else {
     $0 = 1;
     $325 = $0;
     STACKTOP = sp;return ($325|0);
    }
   }
   $117 = $2;
   $118 = ($117|0)!=(4);
   if ($118) {
    $119 = $decomp_flags;
    $120 = $119 | 2;
    $decomp_flags = $120;
   }
   $121 = $pState;
   $122 = ((($121)) + 10996|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($123|0)!=(0);
   if ($124) {
    $125 = $pState;
    $126 = ((($125)) + 10996|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $1;
    $129 = ((($128)) + 16|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($127>>>0)<($130>>>0);
    if ($131) {
     $132 = $pState;
     $133 = ((($132)) + 10996|0);
     $134 = HEAP32[$133>>2]|0;
     $138 = $134;
    } else {
     $135 = $1;
     $136 = ((($135)) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $137;
    }
    $n = $138;
    $139 = $1;
    $140 = ((($139)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $pState;
    $143 = ((($142)) + 11012|0);
    $144 = $pState;
    $145 = ((($144)) + 10992|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($143) + ($146)|0);
    $148 = $n;
    _memcpy(($141|0),($147|0),($148|0))|0;
    $149 = $n;
    $150 = $1;
    $151 = ((($150)) + 12|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + ($149)|0);
    HEAP32[$151>>2] = $153;
    $154 = $n;
    $155 = $1;
    $156 = ((($155)) + 16|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (($157) - ($154))|0;
    HEAP32[$156>>2] = $158;
    $159 = $n;
    $160 = $1;
    $161 = ((($160)) + 20|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (($162) + ($159))|0;
    HEAP32[$161>>2] = $163;
    $164 = $n;
    $165 = $pState;
    $166 = ((($165)) + 10996|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (($167) - ($164))|0;
    HEAP32[$166>>2] = $168;
    $169 = $pState;
    $170 = ((($169)) + 10992|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $n;
    $173 = (($171) + ($172))|0;
    $174 = $173 & 32767;
    $175 = $pState;
    $176 = ((($175)) + 10992|0);
    HEAP32[$176>>2] = $174;
    $177 = $pState;
    $178 = ((($177)) + 43780|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(0);
    if ($180) {
     $181 = $pState;
     $182 = ((($181)) + 10996|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($183|0)!=(0);
     $185 = $184 ^ 1;
     $187 = $185;
    } else {
     $187 = 0;
    }
    $186 = $187 ? 1 : 0;
    $0 = $186;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
   while(1) {
    $188 = $1;
    $189 = ((($188)) + 4|0);
    $190 = HEAP32[$189>>2]|0;
    HEAP32[$in_bytes>>2] = $190;
    $191 = $pState;
    $192 = ((($191)) + 10992|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (32768 - ($193))|0;
    HEAP32[$out_bytes>>2] = $194;
    $195 = $pState;
    $196 = $1;
    $197 = HEAP32[$196>>2]|0;
    $198 = $pState;
    $199 = ((($198)) + 11012|0);
    $200 = $pState;
    $201 = ((($200)) + 11012|0);
    $202 = $pState;
    $203 = ((($202)) + 10992|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (($201) + ($204)|0);
    $206 = $decomp_flags;
    $207 = (_tinfl_decompress($195,$197,$in_bytes,$199,$205,$out_bytes,$206)|0);
    $status = $207;
    $208 = $status;
    $209 = $pState;
    $210 = ((($209)) + 43780|0);
    HEAP32[$210>>2] = $208;
    $211 = HEAP32[$in_bytes>>2]|0;
    $212 = $1;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($213) + ($211)|0);
    HEAP32[$212>>2] = $214;
    $215 = HEAP32[$in_bytes>>2]|0;
    $216 = $1;
    $217 = ((($216)) + 4|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = (($218) - ($215))|0;
    HEAP32[$217>>2] = $219;
    $220 = HEAP32[$in_bytes>>2]|0;
    $221 = $1;
    $222 = ((($221)) + 8|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (($223) + ($220))|0;
    HEAP32[$222>>2] = $224;
    $225 = $pState;
    $226 = ((($225)) + 28|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $1;
    $229 = ((($228)) + 40|0);
    HEAP32[$229>>2] = $227;
    $230 = HEAP32[$out_bytes>>2]|0;
    $231 = $pState;
    $232 = ((($231)) + 10996|0);
    HEAP32[$232>>2] = $230;
    $233 = $pState;
    $234 = ((($233)) + 10996|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $1;
    $237 = ((($236)) + 16|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ($235>>>0)<($238>>>0);
    if ($239) {
     $240 = $pState;
     $241 = ((($240)) + 10996|0);
     $242 = HEAP32[$241>>2]|0;
     $246 = $242;
    } else {
     $243 = $1;
     $244 = ((($243)) + 16|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = $245;
    }
    $n = $246;
    $247 = $1;
    $248 = ((($247)) + 12|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $pState;
    $251 = ((($250)) + 11012|0);
    $252 = $pState;
    $253 = ((($252)) + 10992|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = (($251) + ($254)|0);
    $256 = $n;
    _memcpy(($249|0),($255|0),($256|0))|0;
    $257 = $n;
    $258 = $1;
    $259 = ((($258)) + 12|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = (($260) + ($257)|0);
    HEAP32[$259>>2] = $261;
    $262 = $n;
    $263 = $1;
    $264 = ((($263)) + 16|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = (($265) - ($262))|0;
    HEAP32[$264>>2] = $266;
    $267 = $n;
    $268 = $1;
    $269 = ((($268)) + 20|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = (($270) + ($267))|0;
    HEAP32[$269>>2] = $271;
    $272 = $n;
    $273 = $pState;
    $274 = ((($273)) + 10996|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($275) - ($272))|0;
    HEAP32[$274>>2] = $276;
    $277 = $pState;
    $278 = ((($277)) + 10992|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = $n;
    $281 = (($279) + ($280))|0;
    $282 = $281 & 32767;
    $283 = $pState;
    $284 = ((($283)) + 10992|0);
    HEAP32[$284>>2] = $282;
    $285 = $status;
    $286 = ($285|0)<(0);
    if ($286) {
     label = 33;
     break;
    }
    $287 = $status;
    $288 = ($287|0)!=(1);
    $289 = $orig_avail_in;
    $290 = ($289|0)!=(0);
    $or$cond9 = $288 | $290;
    if (!($or$cond9)) {
     label = 35;
     break;
    }
    $291 = $2;
    $292 = ($291|0)==(4);
    $293 = $status;
    $294 = ($293|0)==(0);
    if ($292) {
     if ($294) {
      label = 38;
      break;
     }
     $300 = $1;
     $301 = ((($300)) + 16|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ($302|0)!=(0);
     if ($303) {
      continue;
     } else {
      label = 40;
      break;
     }
    }
    if ($294) {
     label = 45;
     break;
    }
    $304 = $1;
    $305 = ((($304)) + 4|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = ($306|0)!=(0);
    if (!($307)) {
     label = 45;
     break;
    }
    $308 = $1;
    $309 = ((($308)) + 16|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = ($310|0)!=(0);
    if (!($311)) {
     label = 45;
     break;
    }
    $312 = $pState;
    $313 = ((($312)) + 10996|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = ($314|0)!=(0);
    if ($315) {
     label = 45;
     break;
    }
   }
   if ((label|0) == 33) {
    $0 = -3;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
   else if ((label|0) == 35) {
    $0 = -5;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
   else if ((label|0) == 38) {
    $295 = $pState;
    $296 = ((($295)) + 10996|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = ($297|0)!=(0);
    $299 = $298 ? -5 : 1;
    $0 = $299;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
   else if ((label|0) == 40) {
    $0 = -5;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
   else if ((label|0) == 45) {
    $316 = $status;
    $317 = ($316|0)==(0);
    if ($317) {
     $318 = $pState;
     $319 = ((($318)) + 10996|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = ($320|0)!=(0);
     $322 = $321 ^ 1;
     $324 = $322;
    } else {
     $324 = 0;
    }
    $323 = $324 ? 1 : 0;
    $0 = $323;
    $325 = $0;
    STACKTOP = sp;return ($325|0);
   }
  }
 }
 $0 = -2;
 $325 = $0;
 STACKTOP = sp;return ($325|0);
}
function _tinfl_decompress($r,$pIn_buf_next,$pIn_buf_size,$pOut_buf_start,$pOut_buf_next,$pOut_buf_size,$decomp_flags) {
 $r = $r|0;
 $pIn_buf_next = $pIn_buf_next|0;
 $pIn_buf_size = $pIn_buf_size|0;
 $pOut_buf_start = $pOut_buf_start|0;
 $pOut_buf_next = $pOut_buf_next|0;
 $pOut_buf_size = $pOut_buf_size|0;
 $decomp_flags = $decomp_flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bit_buf = 0, $block_len = 0, $buf_len = 0, $c = 0, $c1 = 0, $c12 = 0, $c14 = 0, $c17 = 0, $c19 = 0;
 var $c2 = 0, $c20 = 0, $c22 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $c8 = 0, $c9 = 0, $code_len = 0, $code_len11 = 0, $code_len13 = 0, $code_len16 = 0, $code_size = 0, $counter = 0, $cur_code = 0, $dist = 0, $dist_from_out_buf_start = 0, $extra_bits = 0, $extra_bits18 = 0, $i = 0;
 var $i23 = 0, $i6 = 0, $j = 0, $k = 0, $l = 0, $n = 0, $next_code = 0, $num_bits = 0, $num_extra = 0, $or$cond = 0, $or$cond3 = 0, $or$cond7 = 0, $out_buf_size_mask = 0, $p = 0, $pIn_buf_cur = 0, $pIn_buf_end = 0, $pOut_buf_cur = 0, $pOut_buf_end = 0, $pSrc = 0, $pTable = 0;
 var $ptr = 0, $rev_code = 0, $s = 0, $s1 = 0, $s2 = 0, $s21 = 0, $s7 = 0, $status = 0, $sym2 = 0, $sym_index = 0, $temp = 0, $temp10 = 0, $temp15 = 0, $total = 0, $total_syms = 0, $tree_cur = 0, $tree_next = 0, $used_syms = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_code = sp + 192|0;
 $total_syms = sp + 128|0;
 $1 = $r;
 $2 = $pIn_buf_next;
 $3 = $pIn_buf_size;
 $4 = $pOut_buf_start;
 $5 = $pOut_buf_next;
 $6 = $pOut_buf_size;
 $7 = $decomp_flags;
 $status = -1;
 $8 = $2;
 $pIn_buf_cur = $8;
 $9 = $2;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + ($11)|0);
 $pIn_buf_end = $12;
 $13 = $5;
 $pOut_buf_cur = $13;
 $14 = $5;
 $15 = $6;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16)|0);
 $pOut_buf_end = $17;
 $18 = $7;
 $19 = $18 & 4;
 $20 = ($19|0)!=(0);
 if ($20) {
  $30 = -1;
 } else {
  $21 = $5;
  $22 = $4;
  $23 = $21;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $6;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + ($27))|0;
  $29 = (($28) - 1)|0;
  $30 = $29;
 }
 $out_buf_size_mask = $30;
 $31 = $out_buf_size_mask;
 $32 = (($31) + 1)|0;
 $33 = $out_buf_size_mask;
 $34 = $32 & $33;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $36 = $5;
  $37 = $4;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   $41 = $1;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $num_bits = $43;
   $44 = $1;
   $45 = ((($44)) + 56|0);
   $46 = HEAP32[$45>>2]|0;
   $bit_buf = $46;
   $47 = $1;
   $48 = ((($47)) + 32|0);
   $49 = HEAP32[$48>>2]|0;
   $dist = $49;
   $50 = $1;
   $51 = ((($50)) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $counter = $52;
   $53 = $1;
   $54 = ((($53)) + 40|0);
   $55 = HEAP32[$54>>2]|0;
   $num_extra = $55;
   $56 = $1;
   $57 = ((($56)) + 60|0);
   $58 = HEAP32[$57>>2]|0;
   $dist_from_out_buf_start = $58;
   $59 = $1;
   $60 = HEAP32[$59>>2]|0;
   do {
    switch ($60|0) {
    case 0:  {
     $61 = $1;
     $62 = ((($61)) + 12|0);
     HEAP32[$62>>2] = 0;
     $63 = $1;
     $64 = ((($63)) + 8|0);
     HEAP32[$64>>2] = 0;
     $num_extra = 0;
     $counter = 0;
     $dist = 0;
     $num_bits = 0;
     $bit_buf = 0;
     $65 = $1;
     $66 = ((($65)) + 28|0);
     HEAP32[$66>>2] = 1;
     $67 = $1;
     $68 = ((($67)) + 16|0);
     HEAP32[$68>>2] = 1;
     $69 = $7;
     $70 = $69 & 1;
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = $pIn_buf_cur;
      $73 = $pIn_buf_end;
      $74 = ($72>>>0)>=($73>>>0);
      if ($74) {
       label = 9;
      } else {
       $90 = $pIn_buf_cur;
       $91 = ((($90)) + 1|0);
       $pIn_buf_cur = $91;
       $92 = HEAP8[$90>>0]|0;
       $93 = $92&255;
       $94 = $1;
       $95 = ((($94)) + 8|0);
       HEAP32[$95>>2] = $93;
       label = 15;
      }
     } else {
      label = 31;
     }
     break;
    }
    case 1:  {
     $79 = $pIn_buf_cur;
     $80 = $pIn_buf_end;
     $81 = ($79>>>0)<($80>>>0);
     if ($81) {
      $82 = $pIn_buf_cur;
      $83 = ((($82)) + 1|0);
      $pIn_buf_cur = $83;
      $84 = HEAP8[$82>>0]|0;
      $85 = $84&255;
      $86 = $1;
      $87 = ((($86)) + 8|0);
      HEAP32[$87>>2] = $85;
      label = 15;
     } else {
      label = 9;
     }
     break;
    }
    case 2:  {
     $103 = $pIn_buf_cur;
     $104 = $pIn_buf_end;
     $105 = ($103>>>0)<($104>>>0);
     if ($105) {
      $106 = $pIn_buf_cur;
      $107 = ((($106)) + 1|0);
      $pIn_buf_cur = $107;
      $108 = HEAP8[$106>>0]|0;
      $109 = $108&255;
      $110 = $1;
      $111 = ((($110)) + 12|0);
      HEAP32[$111>>2] = $109;
      label = 22;
     } else {
      label = 16;
     }
     break;
    }
    case 36:  {
     label = 30;
     break;
    }
    case 3:  {
     $177 = $pIn_buf_cur;
     $178 = $pIn_buf_end;
     $179 = ($177>>>0)<($178>>>0);
     if ($179) {
      $180 = $pIn_buf_cur;
      $181 = ((($180)) + 1|0);
      $pIn_buf_cur = $181;
      $182 = HEAP8[$180>>0]|0;
      $183 = $182&255;
      $c = $183;
      label = 39;
     } else {
      label = 33;
     }
     break;
    }
    case 5:  {
     $226 = $pIn_buf_cur;
     $227 = $pIn_buf_end;
     $228 = ($226>>>0)<($227>>>0);
     if ($228) {
      $229 = $pIn_buf_cur;
      $230 = ((($229)) + 1|0);
      $pIn_buf_cur = $230;
      $231 = HEAP8[$229>>0]|0;
      $232 = $231&255;
      $c1 = $232;
      label = 49;
     } else {
      label = 43;
     }
     break;
    }
    case 6:  {
     $269 = $pIn_buf_cur;
     $270 = $pIn_buf_end;
     $271 = ($269>>>0)<($270>>>0);
     if ($271) {
      $272 = $pIn_buf_cur;
      $273 = ((($272)) + 1|0);
      $pIn_buf_cur = $273;
      $274 = HEAP8[$272>>0]|0;
      $275 = $274&255;
      $c2 = $275;
      label = 61;
     } else {
      label = 55;
     }
     break;
    }
    case 7:  {
     $307 = $pIn_buf_cur;
     $308 = $pIn_buf_end;
     $309 = ($307>>>0)<($308>>>0);
     if ($309) {
      $310 = $pIn_buf_cur;
      $311 = ((($310)) + 1|0);
      $pIn_buf_cur = $311;
      $312 = HEAP8[$310>>0]|0;
      $313 = $counter;
      $314 = $1;
      $315 = ((($314)) + 10528|0);
      $316 = (($315) + ($313)|0);
      HEAP8[$316>>0] = $312;
      label = 70;
     } else {
      label = 64;
     }
     break;
    }
    case 39:  {
     label = 72;
     break;
    }
    case 51:  {
     $370 = $pIn_buf_cur;
     $371 = $pIn_buf_end;
     $372 = ($370>>>0)<($371>>>0);
     if ($372) {
      $373 = $pIn_buf_cur;
      $374 = ((($373)) + 1|0);
      $pIn_buf_cur = $374;
      $375 = HEAP8[$373>>0]|0;
      $376 = $375&255;
      $c3 = $376;
      label = 82;
     } else {
      label = 76;
     }
     break;
    }
    case 52:  {
     label = 84;
     break;
    }
    case 9:  {
     label = 88;
     break;
    }
    case 38:  {
     label = 90;
     break;
    }
    case 40:  {
     label = 93;
     break;
    }
    case 10:  {
     label = 104;
     break;
    }
    case 11:  {
     $537 = $pIn_buf_cur;
     $538 = $pIn_buf_end;
     $539 = ($537>>>0)<($538>>>0);
     if ($539) {
      $540 = $pIn_buf_cur;
      $541 = ((($540)) + 1|0);
      $pIn_buf_cur = $541;
      $542 = HEAP8[$540>>0]|0;
      $543 = $542&255;
      $c4 = $543;
      label = 125;
     } else {
      label = 119;
     }
     break;
    }
    case 14:  {
     $614 = $pIn_buf_cur;
     $615 = $pIn_buf_end;
     $616 = ($614>>>0)<($615>>>0);
     if ($616) {
      $617 = $pIn_buf_cur;
      $618 = ((($617)) + 1|0);
      $pIn_buf_cur = $618;
      $619 = HEAP8[$617>>0]|0;
      $620 = $619&255;
      $c5 = $620;
      label = 137;
     } else {
      label = 131;
     }
     break;
    }
    case 35:  {
     label = 148;
     break;
    }
    case 16:  {
     $901 = $pIn_buf_cur;
     $902 = $pIn_buf_end;
     $903 = ($901>>>0)<($902>>>0);
     if ($903) {
      $904 = $pIn_buf_cur;
      $905 = ((($904)) + 1|0);
      $pIn_buf_cur = $905;
      $906 = HEAP8[$904>>0]|0;
      $907 = $906&255;
      $c8 = $907;
      label = 189;
     } else {
      label = 183;
     }
     break;
    }
    case 17:  {
     label = 198;
     break;
    }
    case 18:  {
     $1006 = $pIn_buf_cur;
     $1007 = $pIn_buf_end;
     $1008 = ($1006>>>0)<($1007>>>0);
     if ($1008) {
      $1009 = $pIn_buf_cur;
      $1010 = ((($1009)) + 1|0);
      $pIn_buf_cur = $1010;
      $1011 = HEAP8[$1009>>0]|0;
      $1012 = $1011&255;
      $c9 = $1012;
      label = 207;
     } else {
      label = 201;
     }
     break;
    }
    case 21:  {
     label = 212;
     break;
    }
    case 23:  {
     $1167 = $pIn_buf_cur;
     $1168 = $pIn_buf_end;
     $1169 = ($1167>>>0)<($1168>>>0);
     if ($1169) {
      $1170 = $pIn_buf_cur;
      $1171 = ((($1170)) + 1|0);
      $pIn_buf_cur = $1171;
      $1172 = HEAP8[$1170>>0]|0;
      $1173 = $1172&255;
      $c12 = $1173;
      label = 234;
     } else {
      label = 228;
     }
     break;
    }
    case 24:  {
     label = 241;
     break;
    }
    case 25:  {
     $1398 = $pIn_buf_cur;
     $1399 = $pIn_buf_end;
     $1400 = ($1398>>>0)<($1399>>>0);
     if ($1400) {
      $1401 = $pIn_buf_cur;
      $1402 = ((($1401)) + 1|0);
      $pIn_buf_cur = $1402;
      $1403 = HEAP8[$1401>>0]|0;
      $1404 = $1403&255;
      $c14 = $1404;
      label = 270;
     } else {
      label = 264;
     }
     break;
    }
    case 26:  {
     $1491 = $pIn_buf_cur;
     $1492 = $pIn_buf_end;
     $1493 = ($1491>>>0)<($1492>>>0);
     if ($1493) {
      $1494 = $pIn_buf_cur;
      $1495 = ((($1494)) + 1|0);
      $pIn_buf_cur = $1495;
      $1496 = HEAP8[$1494>>0]|0;
      $1497 = $1496&255;
      $c17 = $1497;
      label = 289;
     } else {
      label = 283;
     }
     break;
    }
    case 27:  {
     $1586 = $pIn_buf_cur;
     $1587 = $pIn_buf_end;
     $1588 = ($1586>>>0)<($1587>>>0);
     if ($1588) {
      $1589 = $pIn_buf_cur;
      $1590 = ((($1589)) + 1|0);
      $pIn_buf_cur = $1590;
      $1591 = HEAP8[$1589>>0]|0;
      $1592 = $1591&255;
      $c19 = $1592;
      label = 304;
     } else {
      label = 298;
     }
     break;
    }
    case 37:  {
     label = 308;
     break;
    }
    case 53:  {
     label = 311;
     break;
    }
    case 32:  {
     $1723 = $pIn_buf_cur;
     $1724 = $pIn_buf_end;
     $1725 = ($1723>>>0)<($1724>>>0);
     if ($1725) {
      $1726 = $pIn_buf_cur;
      $1727 = ((($1726)) + 1|0);
      $pIn_buf_cur = $1727;
      $1728 = HEAP8[$1726>>0]|0;
      $1729 = $1728&255;
      $c20 = $1729;
      label = 329;
     } else {
      label = 323;
     }
     break;
    }
    case 41:  {
     $1766 = $pIn_buf_cur;
     $1767 = $pIn_buf_end;
     $1768 = ($1766>>>0)<($1767>>>0);
     if ($1768) {
      $1769 = $pIn_buf_cur;
      $1770 = ((($1769)) + 1|0);
      $pIn_buf_cur = $1770;
      $1771 = HEAP8[$1769>>0]|0;
      $1772 = $1771&255;
      $c22 = $1772;
      label = 341;
     } else {
      label = 335;
     }
     break;
    }
    case 42:  {
     $1799 = $pIn_buf_cur;
     $1800 = $pIn_buf_end;
     $1801 = ($1799>>>0)<($1800>>>0);
     if ($1801) {
      $1802 = $pIn_buf_cur;
      $1803 = ((($1802)) + 1|0);
      $pIn_buf_cur = $1803;
      $1804 = HEAP8[$1802>>0]|0;
      $1805 = $1804&255;
      $s21 = $1805;
      label = 350;
     } else {
      label = 344;
     }
     break;
    }
    case 34:  {
     label = 351;
     break;
    }
    default: {
     label = 352;
    }
    }
   } while(0);
   do {
    if ((label|0) == 9) {
     $75 = $7;
     $76 = $75 & 2;
     $77 = ($76|0)!=(0);
     if ($77) {
      $status = 1;
      $78 = $1;
      HEAP32[$78>>2] = 1;
      label = 352;
      break;
     } else {
      $88 = $1;
      $89 = ((($88)) + 8|0);
      HEAP32[$89>>2] = 0;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $96 = $pIn_buf_cur;
    $97 = $pIn_buf_end;
    $98 = ($96>>>0)>=($97>>>0);
    if ($98) {
     label = 16;
    } else {
     $114 = $pIn_buf_cur;
     $115 = ((($114)) + 1|0);
     $pIn_buf_cur = $115;
     $116 = HEAP8[$114>>0]|0;
     $117 = $116&255;
     $118 = $1;
     $119 = ((($118)) + 12|0);
     HEAP32[$119>>2] = $117;
     label = 22;
    }
   }
   do {
    if ((label|0) == 16) {
     $99 = $7;
     $100 = $99 & 2;
     $101 = ($100|0)!=(0);
     if ($101) {
      $status = 1;
      $102 = $1;
      HEAP32[$102>>2] = 2;
      label = 352;
      break;
     } else {
      $112 = $1;
      $113 = ((($112)) + 12|0);
      HEAP32[$113>>2] = 0;
      label = 22;
      break;
     }
    }
   } while(0);
   if ((label|0) == 22) {
    $120 = $1;
    $121 = ((($120)) + 8|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $122<<8;
    $124 = $1;
    $125 = ((($124)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($123) + ($126))|0;
    $128 = (($127>>>0) % 31)&-1;
    $129 = ($128|0)!=(0);
    if ($129) {
     $141 = 1;
    } else {
     $130 = $1;
     $131 = ((($130)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = $132 & 32;
     $134 = ($133|0)!=(0);
     if ($134) {
      $141 = 1;
     } else {
      $135 = $1;
      $136 = ((($135)) + 8|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = $137 & 15;
      $139 = ($138|0)!=(8);
      $141 = $139;
     }
    }
    $140 = $141&1;
    $counter = $140;
    $142 = $7;
    $143 = $142 & 4;
    $144 = ($143|0)!=(0);
    if (!($144)) {
     $145 = $1;
     $146 = ((($145)) + 8|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $147 >>> 4;
     $149 = (8 + ($148))|0;
     $150 = 1 << $149;
     $151 = ($150>>>0)>(32768);
     if ($151) {
      $162 = 1;
     } else {
      $152 = $out_buf_size_mask;
      $153 = (($152) + 1)|0;
      $154 = $1;
      $155 = ((($154)) + 8|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = $156 >>> 4;
      $158 = (8 + ($157))|0;
      $159 = 1 << $158;
      $160 = ($153>>>0)<($159>>>0);
      $162 = $160;
     }
     $161 = $162&1;
     $163 = $counter;
     $164 = $163 | $161;
     $counter = $164;
    }
    $165 = $counter;
    $166 = ($165|0)!=(0);
    if ($166) {
     label = 30;
    } else {
     label = 31;
    }
   }
   if ((label|0) == 30) {
    $status = -1;
    $167 = $1;
    HEAP32[$167>>2] = 36;
    label = 352;
   }
   L74: while(1) {
    switch (label|0) {
     case 31: {
      label = 0;
      $168 = $num_bits;
      $169 = ($168>>>0)<(3);
      if ($169) {
       label = 32;
      } else {
       label = 40;
      }
      break;
     }
     case 33: {
      label = 0;
      $173 = $7;
      $174 = $173 & 2;
      $175 = ($174|0)!=(0);
      if ($175) {
       $status = 1;
       $176 = $1;
       HEAP32[$176>>2] = 3;
       label = 352;
       continue L74;
      } else {
       $c = 0;
       label = 39;
       continue L74;
      }
      break;
     }
     case 39: {
      label = 0;
      $188 = $c;
      $189 = $num_bits;
      $190 = $188 << $189;
      $191 = $bit_buf;
      $192 = $191 | $190;
      $bit_buf = $192;
      $193 = $num_bits;
      $194 = (($193) + 8)|0;
      $num_bits = $194;
      $195 = $num_bits;
      $196 = ($195>>>0)<(3);
      if ($196) {
       label = 32;
      } else {
       label = 40;
      }
      break;
     }
     case 43: {
      label = 0;
      $222 = $7;
      $223 = $222 & 2;
      $224 = ($223|0)!=(0);
      if ($224) {
       $status = 1;
       $225 = $1;
       HEAP32[$225>>2] = 5;
       label = 352;
       continue L74;
      } else {
       $c1 = 0;
       label = 49;
       continue L74;
      }
      break;
     }
     case 49: {
      label = 0;
      $237 = $c1;
      $238 = $num_bits;
      $239 = $237 << $238;
      $240 = $bit_buf;
      $241 = $240 | $239;
      $bit_buf = $241;
      $242 = $num_bits;
      $243 = (($242) + 8)|0;
      $num_bits = $243;
      $244 = $num_bits;
      $245 = $num_bits;
      $246 = $245 & 7;
      $247 = ($244>>>0)<($246>>>0);
      if ($247) {
       label = 42;
      } else {
       label = 50;
      }
      break;
     }
     case 55: {
      label = 0;
      $265 = $7;
      $266 = $265 & 2;
      $267 = ($266|0)!=(0);
      if ($267) {
       $status = 1;
       $268 = $1;
       HEAP32[$268>>2] = 6;
       label = 352;
       continue L74;
      } else {
       $c2 = 0;
       label = 61;
       continue L74;
      }
      break;
     }
     case 61: {
      label = 0;
      $280 = $c2;
      $281 = $num_bits;
      $282 = $280 << $281;
      $283 = $bit_buf;
      $284 = $283 | $282;
      $bit_buf = $284;
      $285 = $num_bits;
      $286 = (($285) + 8)|0;
      $num_bits = $286;
      $287 = $num_bits;
      $288 = ($287>>>0)<(8);
      if ($288) {
       label = 54;
      } else {
       label = 62;
      }
      break;
     }
     case 64: {
      label = 0;
      $303 = $7;
      $304 = $303 & 2;
      $305 = ($304|0)!=(0);
      if ($305) {
       $status = 1;
       $306 = $1;
       HEAP32[$306>>2] = 7;
       label = 352;
       continue L74;
      } else {
       $317 = $counter;
       $318 = $1;
       $319 = ((($318)) + 10528|0);
       $320 = (($319) + ($317)|0);
       HEAP8[$320>>0] = 0;
       label = 70;
       continue L74;
      }
      break;
     }
     case 70: {
      label = 0;
      $328 = $counter;
      $329 = (($328) + 1)|0;
      $counter = $329;
      label = 51;
      break;
     }
     case 72: {
      label = 0;
      $status = -1;
      $355 = $1;
      HEAP32[$355>>2] = 39;
      label = 352;
      continue L74;
      break;
     }
     case 76: {
      label = 0;
      $366 = $7;
      $367 = $366 & 2;
      $368 = ($367|0)!=(0);
      if ($368) {
       $status = 1;
       $369 = $1;
       HEAP32[$369>>2] = 51;
       label = 352;
       continue L74;
      } else {
       $c3 = 0;
       label = 82;
       continue L74;
      }
      break;
     }
     case 82: {
      label = 0;
      $381 = $c3;
      $382 = $num_bits;
      $383 = $381 << $382;
      $384 = $bit_buf;
      $385 = $384 | $383;
      $bit_buf = $385;
      $386 = $num_bits;
      $387 = (($386) + 8)|0;
      $num_bits = $387;
      $388 = $num_bits;
      $389 = ($388>>>0)<(8);
      if ($389) {
       label = 75;
      } else {
       label = 83;
      }
      break;
     }
     case 84: {
      label = 0;
      $396 = $pOut_buf_cur;
      $397 = $pOut_buf_end;
      $398 = ($396>>>0)>=($397>>>0);
      if ($398) {
       $status = 2;
       $399 = $1;
       HEAP32[$399>>2] = 52;
       label = 352;
       continue L74;
      } else {
       $400 = $dist;
       $401 = $400&255;
       $402 = $pOut_buf_cur;
       $403 = ((($402)) + 1|0);
       $pOut_buf_cur = $403;
       HEAP8[$402>>0] = $401;
       $404 = $counter;
       $405 = (($404) + -1)|0;
       $counter = $405;
       label = 73;
       break;
      }
      break;
     }
     case 88: {
      label = 0;
      $408 = $pOut_buf_cur;
      $409 = $pOut_buf_end;
      $410 = ($408>>>0)>=($409>>>0);
      if (!($410)) {
       label = 90;
       continue L74;
      }
      $status = 2;
      $411 = $1;
      HEAP32[$411>>2] = 9;
      label = 352;
      continue L74;
      break;
     }
     case 90: {
      label = 0;
      $412 = $pIn_buf_cur;
      $413 = $pIn_buf_end;
      $414 = ($412>>>0)>=($413>>>0);
      if ($414) {
       $415 = $7;
       $416 = $415 & 2;
       $417 = ($416|0)!=(0);
       if (!($417)) {
        label = 93;
        continue L74;
       }
       $status = 1;
       $418 = $1;
       HEAP32[$418>>2] = 38;
       label = 352;
       continue L74;
      }
      $420 = $pOut_buf_end;
      $421 = $pOut_buf_cur;
      $422 = $420;
      $423 = $421;
      $424 = (($422) - ($423))|0;
      $425 = $pIn_buf_end;
      $426 = $pIn_buf_cur;
      $427 = $425;
      $428 = $426;
      $429 = (($427) - ($428))|0;
      $430 = ($424>>>0)<($429>>>0);
      if ($430) {
       $431 = $pOut_buf_end;
       $432 = $pOut_buf_cur;
       $433 = $431;
       $434 = $432;
       $435 = (($433) - ($434))|0;
       $443 = $435;
      } else {
       $436 = $pIn_buf_end;
       $437 = $pIn_buf_cur;
       $438 = $436;
       $439 = $437;
       $440 = (($438) - ($439))|0;
       $443 = $440;
      }
      $441 = $counter;
      $442 = ($443>>>0)<($441>>>0);
      do {
       if ($442) {
        $444 = $pOut_buf_end;
        $445 = $pOut_buf_cur;
        $446 = $444;
        $447 = $445;
        $448 = (($446) - ($447))|0;
        $449 = $pIn_buf_end;
        $450 = $pIn_buf_cur;
        $451 = $449;
        $452 = $450;
        $453 = (($451) - ($452))|0;
        $454 = ($448>>>0)<($453>>>0);
        if ($454) {
         $455 = $pOut_buf_end;
         $456 = $pOut_buf_cur;
         $457 = $455;
         $458 = $456;
         $459 = (($457) - ($458))|0;
         $466 = $459;
         break;
        } else {
         $460 = $pIn_buf_end;
         $461 = $pIn_buf_cur;
         $462 = $460;
         $463 = $461;
         $464 = (($462) - ($463))|0;
         $466 = $464;
         break;
        }
       } else {
        $465 = $counter;
        $466 = $465;
       }
      } while(0);
      $n = $466;
      $467 = $pOut_buf_cur;
      $468 = $pIn_buf_cur;
      $469 = $n;
      _memcpy(($467|0),($468|0),($469|0))|0;
      $470 = $n;
      $471 = $pIn_buf_cur;
      $472 = (($471) + ($470)|0);
      $pIn_buf_cur = $472;
      $473 = $n;
      $474 = $pOut_buf_cur;
      $475 = (($474) + ($473)|0);
      $pOut_buf_cur = $475;
      $476 = $n;
      $477 = $counter;
      $478 = (($477) - ($476))|0;
      $counter = $478;
      label = 87;
      break;
     }
     case 93: {
      label = 0;
      $status = -1;
      $419 = $1;
      HEAP32[$419>>2] = 40;
      label = 352;
      continue L74;
      break;
     }
     case 104: {
      label = 0;
      $status = -1;
      $483 = $1;
      HEAP32[$483>>2] = 10;
      label = 352;
      continue L74;
      break;
     }
     case 119: {
      label = 0;
      $533 = $7;
      $534 = $533 & 2;
      $535 = ($534|0)!=(0);
      if ($535) {
       $status = 1;
       $536 = $1;
       HEAP32[$536>>2] = 11;
       label = 352;
       continue L74;
      } else {
       $c4 = 0;
       label = 125;
       continue L74;
      }
      break;
     }
     case 125: {
      label = 0;
      $548 = $c4;
      $549 = $num_bits;
      $550 = $548 << $549;
      $551 = $bit_buf;
      $552 = $551 | $550;
      $bit_buf = $552;
      $553 = $num_bits;
      $554 = (($553) + 8)|0;
      $num_bits = $554;
      $555 = $num_bits;
      $556 = $counter;
      $557 = (776327 + ($556)|0);
      $558 = HEAP8[$557>>0]|0;
      $559 = $558 << 24 >> 24;
      $560 = ($555>>>0)<($559>>>0);
      if ($560) {
       label = 118;
      } else {
       label = 126;
      }
      break;
     }
     case 131: {
      label = 0;
      $610 = $7;
      $611 = $610 & 2;
      $612 = ($611|0)!=(0);
      if ($612) {
       $status = 1;
       $613 = $1;
       HEAP32[$613>>2] = 14;
       label = 352;
       continue L74;
      } else {
       $c5 = 0;
       label = 137;
       continue L74;
      }
      break;
     }
     case 137: {
      label = 0;
      $625 = $c5;
      $626 = $num_bits;
      $627 = $625 << $626;
      $628 = $bit_buf;
      $629 = $628 | $627;
      $bit_buf = $629;
      $630 = $num_bits;
      $631 = (($630) + 8)|0;
      $num_bits = $631;
      $632 = $num_bits;
      $633 = ($632>>>0)<(3);
      if ($633) {
       label = 130;
      } else {
       label = 138;
      }
      break;
     }
     case 148: {
      label = 0;
      $status = -1;
      $711 = $1;
      HEAP32[$711>>2] = 35;
      label = 352;
      continue L74;
      break;
     }
     case 183: {
      label = 0;
      $897 = $7;
      $898 = $897 & 2;
      $899 = ($898|0)!=(0);
      if ($899) {
       $status = 1;
       $900 = $1;
       HEAP32[$900>>2] = 16;
       label = 352;
       continue L74;
      } else {
       $c8 = 0;
       label = 189;
       continue L74;
      }
      break;
     }
     case 189: {
      label = 0;
      $912 = $c8;
      $913 = $num_bits;
      $914 = $912 << $913;
      $915 = $bit_buf;
      $916 = $915 | $914;
      $bit_buf = $916;
      $917 = $num_bits;
      $918 = (($917) + 8)|0;
      $num_bits = $918;
      $919 = $num_bits;
      $920 = ($919>>>0)<(15);
      if ($920) {
       label = 174;
      } else {
       label = 191;
      }
      break;
     }
     case 198: {
      label = 0;
      $status = -1;
      $990 = $1;
      HEAP32[$990>>2] = 17;
      label = 352;
      continue L74;
      break;
     }
     case 201: {
      label = 0;
      $1002 = $7;
      $1003 = $1002 & 2;
      $1004 = ($1003|0)!=(0);
      if ($1004) {
       $status = 1;
       $1005 = $1;
       HEAP32[$1005>>2] = 18;
       label = 352;
       continue L74;
      } else {
       $c9 = 0;
       label = 207;
       continue L74;
      }
      break;
     }
     case 207: {
      label = 0;
      $1017 = $c9;
      $1018 = $num_bits;
      $1019 = $1017 << $1018;
      $1020 = $bit_buf;
      $1021 = $1020 | $1019;
      $bit_buf = $1021;
      $1022 = $num_bits;
      $1023 = (($1022) + 8)|0;
      $num_bits = $1023;
      $1024 = $num_bits;
      $1025 = $num_extra;
      $1026 = ($1024>>>0)<($1025>>>0);
      if ($1026) {
       label = 200;
      } else {
       label = 208;
      }
      break;
     }
     case 212: {
      label = 0;
      $status = -1;
      $1074 = $1;
      HEAP32[$1074>>2] = 21;
      label = 352;
      continue L74;
      break;
     }
     case 228: {
      label = 0;
      $1163 = $7;
      $1164 = $1163 & 2;
      $1165 = ($1164|0)!=(0);
      if ($1165) {
       $status = 1;
       $1166 = $1;
       HEAP32[$1166>>2] = 23;
       label = 352;
       continue L74;
      } else {
       $c12 = 0;
       label = 234;
       continue L74;
      }
      break;
     }
     case 234: {
      label = 0;
      $1178 = $c12;
      $1179 = $num_bits;
      $1180 = $1178 << $1179;
      $1181 = $bit_buf;
      $1182 = $1181 | $1180;
      $bit_buf = $1182;
      $1183 = $num_bits;
      $1184 = (($1183) + 8)|0;
      $num_bits = $1184;
      $1185 = $num_bits;
      $1186 = ($1185>>>0)<(15);
      if ($1186) {
       label = 219;
      } else {
       label = 236;
      }
      break;
     }
     case 241: {
      label = 0;
      $1244 = $pOut_buf_cur;
      $1245 = $pOut_buf_end;
      $1246 = ($1244>>>0)>=($1245>>>0);
      if ($1246) {
       $status = 2;
       $1247 = $1;
       HEAP32[$1247>>2] = 24;
       label = 352;
       continue L74;
      } else {
       $1248 = $counter;
       $1249 = $1248&255;
       $1250 = $pOut_buf_cur;
       $1251 = ((($1250)) + 1|0);
       $pOut_buf_cur = $1251;
       HEAP8[$1250>>0] = $1249;
       label = 215;
       break;
      }
      break;
     }
     case 264: {
      label = 0;
      $1394 = $7;
      $1395 = $1394 & 2;
      $1396 = ($1395|0)!=(0);
      if ($1396) {
       $status = 1;
       $1397 = $1;
       HEAP32[$1397>>2] = 25;
       label = 352;
       continue L74;
      } else {
       $c14 = 0;
       label = 270;
       continue L74;
      }
      break;
     }
     case 270: {
      label = 0;
      $1409 = $c14;
      $1410 = $num_bits;
      $1411 = $1409 << $1410;
      $1412 = $bit_buf;
      $1413 = $1412 | $1411;
      $bit_buf = $1413;
      $1414 = $num_bits;
      $1415 = (($1414) + 8)|0;
      $num_bits = $1415;
      $1416 = $num_bits;
      $1417 = $num_extra;
      $1418 = ($1416>>>0)<($1417>>>0);
      if ($1418) {
       label = 263;
      } else {
       label = 271;
      }
      break;
     }
     case 283: {
      label = 0;
      $1487 = $7;
      $1488 = $1487 & 2;
      $1489 = ($1488|0)!=(0);
      if ($1489) {
       $status = 1;
       $1490 = $1;
       HEAP32[$1490>>2] = 26;
       label = 352;
       continue L74;
      } else {
       $c17 = 0;
       label = 289;
       continue L74;
      }
      break;
     }
     case 289: {
      label = 0;
      $1502 = $c17;
      $1503 = $num_bits;
      $1504 = $1502 << $1503;
      $1505 = $bit_buf;
      $1506 = $1505 | $1504;
      $bit_buf = $1506;
      $1507 = $num_bits;
      $1508 = (($1507) + 8)|0;
      $num_bits = $1508;
      $1509 = $num_bits;
      $1510 = ($1509>>>0)<(15);
      if ($1510) {
       label = 274;
      } else {
       label = 291;
      }
      break;
     }
     case 298: {
      label = 0;
      $1582 = $7;
      $1583 = $1582 & 2;
      $1584 = ($1583|0)!=(0);
      if ($1584) {
       $status = 1;
       $1585 = $1;
       HEAP32[$1585>>2] = 27;
       label = 352;
       continue L74;
      } else {
       $c19 = 0;
       label = 304;
       continue L74;
      }
      break;
     }
     case 304: {
      label = 0;
      $1597 = $c19;
      $1598 = $num_bits;
      $1599 = $1597 << $1598;
      $1600 = $bit_buf;
      $1601 = $1600 | $1599;
      $bit_buf = $1601;
      $1602 = $num_bits;
      $1603 = (($1602) + 8)|0;
      $num_bits = $1603;
      $1604 = $num_bits;
      $1605 = $num_extra;
      $1606 = ($1604>>>0)<($1605>>>0);
      if ($1606) {
       label = 297;
      } else {
       label = 305;
      }
      break;
     }
     case 308: {
      label = 0;
      $status = -1;
      $1632 = $1;
      HEAP32[$1632>>2] = 37;
      label = 352;
      continue L74;
      break;
     }
     case 311: {
      label = 0;
      $1653 = $pOut_buf_cur;
      $1654 = $pOut_buf_end;
      $1655 = ($1653>>>0)>=($1654>>>0);
      if ($1655) {
       $status = 2;
       $1656 = $1;
       HEAP32[$1656>>2] = 53;
       label = 352;
       continue L74;
      } else {
       $1657 = $dist_from_out_buf_start;
       $1658 = (($1657) + 1)|0;
       $dist_from_out_buf_start = $1658;
       $1659 = $dist;
       $1660 = (($1657) - ($1659))|0;
       $1661 = $out_buf_size_mask;
       $1662 = $1660 & $1661;
       $1663 = $4;
       $1664 = (($1663) + ($1662)|0);
       $1665 = HEAP8[$1664>>0]|0;
       $1666 = $pOut_buf_cur;
       $1667 = ((($1666)) + 1|0);
       $pOut_buf_cur = $1667;
       HEAP8[$1666>>0] = $1665;
       label = 310;
       break;
      }
      break;
     }
     case 323: {
      label = 0;
      $1719 = $7;
      $1720 = $1719 & 2;
      $1721 = ($1720|0)!=(0);
      if ($1721) {
       $status = 1;
       $1722 = $1;
       HEAP32[$1722>>2] = 32;
       label = 352;
       continue L74;
      } else {
       $c20 = 0;
       label = 329;
       continue L74;
      }
      break;
     }
     case 329: {
      label = 0;
      $1734 = $c20;
      $1735 = $num_bits;
      $1736 = $1734 << $1735;
      $1737 = $bit_buf;
      $1738 = $1737 | $1736;
      $bit_buf = $1738;
      $1739 = $num_bits;
      $1740 = (($1739) + 8)|0;
      $num_bits = $1740;
      $1741 = $num_bits;
      $1742 = $num_bits;
      $1743 = $1742 & 7;
      $1744 = ($1741>>>0)<($1743>>>0);
      if ($1744) {
       label = 322;
      } else {
       label = 330;
      }
      break;
     }
     case 335: {
      label = 0;
      $1762 = $7;
      $1763 = $1762 & 2;
      $1764 = ($1763|0)!=(0);
      if ($1764) {
       $status = 1;
       $1765 = $1;
       HEAP32[$1765>>2] = 41;
       label = 352;
       continue L74;
      } else {
       $c22 = 0;
       label = 341;
       continue L74;
      }
      break;
     }
     case 341: {
      label = 0;
      $1777 = $c22;
      $1778 = $num_bits;
      $1779 = $1777 << $1778;
      $1780 = $bit_buf;
      $1781 = $1780 | $1779;
      $bit_buf = $1781;
      $1782 = $num_bits;
      $1783 = (($1782) + 8)|0;
      $num_bits = $1783;
      $1784 = $num_bits;
      $1785 = ($1784>>>0)<(8);
      if ($1785) {
       label = 334;
      } else {
       label = 342;
      }
      break;
     }
     case 344: {
      label = 0;
      $1795 = $7;
      $1796 = $1795 & 2;
      $1797 = ($1796|0)!=(0);
      if ($1797) {
       $status = 1;
       $1798 = $1;
       HEAP32[$1798>>2] = 42;
       label = 352;
       continue L74;
      } else {
       $s21 = 0;
       label = 350;
       continue L74;
      }
      break;
     }
     case 350: {
      label = 0;
      $1810 = $1;
      $1811 = ((($1810)) + 16|0);
      $1812 = HEAP32[$1811>>2]|0;
      $1813 = $1812 << 8;
      $1814 = $s21;
      $1815 = $1813 | $1814;
      $1816 = $1;
      $1817 = ((($1816)) + 16|0);
      HEAP32[$1817>>2] = $1815;
      $1818 = $counter;
      $1819 = (($1818) + 1)|0;
      $counter = $1819;
      label = 331;
      break;
     }
     case 351: {
      label = 0;
      $status = 0;
      $1820 = $1;
      HEAP32[$1820>>2] = 34;
      label = 352;
      continue L74;
      break;
     }
     case 352: {
      label = 0;
      $1821 = $num_bits;
      $1822 = $1;
      $1823 = ((($1822)) + 4|0);
      HEAP32[$1823>>2] = $1821;
      $1824 = $bit_buf;
      $1825 = $1;
      $1826 = ((($1825)) + 56|0);
      HEAP32[$1826>>2] = $1824;
      $1827 = $dist;
      $1828 = $1;
      $1829 = ((($1828)) + 32|0);
      HEAP32[$1829>>2] = $1827;
      $1830 = $counter;
      $1831 = $1;
      $1832 = ((($1831)) + 36|0);
      HEAP32[$1832>>2] = $1830;
      $1833 = $num_extra;
      $1834 = $1;
      $1835 = ((($1834)) + 40|0);
      HEAP32[$1835>>2] = $1833;
      $1836 = $dist_from_out_buf_start;
      $1837 = $1;
      $1838 = ((($1837)) + 60|0);
      HEAP32[$1838>>2] = $1836;
      $1839 = $pIn_buf_cur;
      $1840 = $2;
      $1841 = $1839;
      $1842 = $1840;
      $1843 = (($1841) - ($1842))|0;
      $1844 = $3;
      HEAP32[$1844>>2] = $1843;
      $1845 = $pOut_buf_cur;
      $1846 = $5;
      $1847 = $1845;
      $1848 = $1846;
      $1849 = (($1847) - ($1848))|0;
      $1850 = $6;
      HEAP32[$1850>>2] = $1849;
      $1851 = $7;
      $1852 = $1851 & 9;
      $1853 = ($1852|0)!=(0);
      $1854 = $status;
      $1855 = ($1854|0)>=(0);
      $or$cond7 = $1853 & $1855;
      if ($or$cond7) {
       label = 353;
       break L74;
      } else {
       break L74;
      }
      break;
     }
    }
    if ((label|0) == 32) {
     label = 0;
     $170 = $pIn_buf_cur;
     $171 = $pIn_buf_end;
     $172 = ($170>>>0)>=($171>>>0);
     if ($172) {
      label = 33;
      continue;
     }
     $184 = $pIn_buf_cur;
     $185 = ((($184)) + 1|0);
     $pIn_buf_cur = $185;
     $186 = HEAP8[$184>>0]|0;
     $187 = $186&255;
     $c = $187;
     label = 39;
     continue;
    }
    L199: do {
     if ((label|0) == 40) {
      label = 0;
      $197 = $bit_buf;
      $198 = $197 & 7;
      $199 = $1;
      $200 = ((($199)) + 20|0);
      HEAP32[$200>>2] = $198;
      $201 = $bit_buf;
      $202 = $201 >>> 3;
      $bit_buf = $202;
      $203 = $num_bits;
      $204 = (($203) - 3)|0;
      $num_bits = $204;
      $205 = $1;
      $206 = ((($205)) + 20|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = $207 >>> 1;
      $209 = $1;
      $210 = ((($209)) + 24|0);
      HEAP32[$210>>2] = $208;
      $211 = $1;
      $212 = ((($211)) + 24|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213|0)==(0);
      if ($214) {
       $215 = $num_bits;
       $216 = $num_bits;
       $217 = $216 & 7;
       $218 = ($215>>>0)<($217>>>0);
       if ($218) {
        label = 42;
        break;
       } else {
        label = 50;
        break;
       }
      }
      $479 = $1;
      $480 = ((($479)) + 24|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = ($481|0)==(3);
      if ($482) {
       label = 104;
       continue L74;
      }
      $484 = $1;
      $485 = ((($484)) + 24|0);
      $486 = HEAP32[$485>>2]|0;
      $487 = ($486|0)==(1);
      if (!($487)) {
       $counter = 0;
       label = 116;
       break;
      }
      $488 = $1;
      $489 = ((($488)) + 64|0);
      $p = $489;
      $490 = $1;
      $491 = ((($490)) + 44|0);
      HEAP32[$491>>2] = 288;
      $492 = $1;
      $493 = ((($492)) + 44|0);
      $494 = ((($493)) + 4|0);
      HEAP32[$494>>2] = 32;
      $495 = $1;
      $496 = ((($495)) + 64|0);
      $497 = ((($496)) + 3488|0);
      dest=$497; stop=dest+32|0; do { HEAP8[dest>>0]=5|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $i = 0;
      while(1) {
       $498 = $i;
       $499 = ($498>>>0)<=(143);
       if (!($499)) {
        break;
       }
       $500 = $p;
       $501 = ((($500)) + 1|0);
       $p = $501;
       HEAP8[$500>>0] = 8;
       $502 = $i;
       $503 = (($502) + 1)|0;
       $i = $503;
      }
      while(1) {
       $504 = $i;
       $505 = ($504>>>0)<=(255);
       if (!($505)) {
        break;
       }
       $506 = $p;
       $507 = ((($506)) + 1|0);
       $p = $507;
       HEAP8[$506>>0] = 9;
       $508 = $i;
       $509 = (($508) + 1)|0;
       $i = $509;
      }
      while(1) {
       $510 = $i;
       $511 = ($510>>>0)<=(279);
       if (!($511)) {
        break;
       }
       $512 = $p;
       $513 = ((($512)) + 1|0);
       $p = $513;
       HEAP8[$512>>0] = 7;
       $514 = $i;
       $515 = (($514) + 1)|0;
       $i = $515;
      }
      while(1) {
       $516 = $i;
       $517 = ($516>>>0)<=(287);
       if (!($517)) {
        label = 140;
        break L199;
       }
       $518 = $p;
       $519 = ((($518)) + 1|0);
       $p = $519;
       HEAP8[$518>>0] = 8;
       $520 = $i;
       $521 = (($520) + 1)|0;
       $i = $521;
      }
     }
    } while(0);
    if ((label|0) == 42) {
     label = 0;
     $219 = $pIn_buf_cur;
     $220 = $pIn_buf_end;
     $221 = ($219>>>0)>=($220>>>0);
     if ($221) {
      label = 43;
      continue;
     }
     $233 = $pIn_buf_cur;
     $234 = ((($233)) + 1|0);
     $pIn_buf_cur = $234;
     $235 = HEAP8[$233>>0]|0;
     $236 = $235&255;
     $c1 = $236;
     label = 49;
     continue;
    }
    else if ((label|0) == 50) {
     label = 0;
     $248 = $num_bits;
     $249 = $248 & 7;
     $250 = $bit_buf;
     $251 = $250 >>> $249;
     $bit_buf = $251;
     $252 = $num_bits;
     $253 = $252 & 7;
     $254 = $num_bits;
     $255 = (($254) - ($253))|0;
     $num_bits = $255;
     $counter = 0;
     label = 51;
    }
    do {
     if ((label|0) == 51) {
      label = 0;
      $256 = $counter;
      $257 = ($256>>>0)<(4);
      if (!($257)) {
       $330 = $1;
       $331 = ((($330)) + 10528|0);
       $332 = HEAP8[$331>>0]|0;
       $333 = $332&255;
       $334 = $1;
       $335 = ((($334)) + 10528|0);
       $336 = ((($335)) + 1|0);
       $337 = HEAP8[$336>>0]|0;
       $338 = $337&255;
       $339 = $338 << 8;
       $340 = $333 | $339;
       $counter = $340;
       $341 = $1;
       $342 = ((($341)) + 10528|0);
       $343 = ((($342)) + 2|0);
       $344 = HEAP8[$343>>0]|0;
       $345 = $344&255;
       $346 = $1;
       $347 = ((($346)) + 10528|0);
       $348 = ((($347)) + 3|0);
       $349 = HEAP8[$348>>0]|0;
       $350 = $349&255;
       $351 = $350 << 8;
       $352 = $345 | $351;
       $353 = 65535 ^ $352;
       $354 = ($340|0)!=($353|0);
       if ($354) {
        label = 72;
        continue L74;
       } else {
        label = 73;
        break;
       }
      }
      $258 = $num_bits;
      $259 = ($258|0)!=(0);
      if ($259) {
       $260 = $num_bits;
       $261 = ($260>>>0)<(8);
       if ($261) {
        label = 54;
        break;
       } else {
        label = 62;
        break;
       }
      }
      $300 = $pIn_buf_cur;
      $301 = $pIn_buf_end;
      $302 = ($300>>>0)>=($301>>>0);
      if ($302) {
       label = 64;
       continue L74;
      }
      $321 = $pIn_buf_cur;
      $322 = ((($321)) + 1|0);
      $pIn_buf_cur = $322;
      $323 = HEAP8[$321>>0]|0;
      $324 = $counter;
      $325 = $1;
      $326 = ((($325)) + 10528|0);
      $327 = (($326) + ($324)|0);
      HEAP8[$327>>0] = $323;
      label = 70;
      continue L74;
     }
    } while(0);
    if ((label|0) == 54) {
     label = 0;
     $262 = $pIn_buf_cur;
     $263 = $pIn_buf_end;
     $264 = ($262>>>0)>=($263>>>0);
     if ($264) {
      label = 55;
      continue;
     }
     $276 = $pIn_buf_cur;
     $277 = ((($276)) + 1|0);
     $pIn_buf_cur = $277;
     $278 = HEAP8[$276>>0]|0;
     $279 = $278&255;
     $c2 = $279;
     label = 61;
     continue;
    }
    else if ((label|0) == 62) {
     label = 0;
     $289 = $bit_buf;
     $290 = $289 & 255;
     $291 = $290&255;
     $292 = $counter;
     $293 = $1;
     $294 = ((($293)) + 10528|0);
     $295 = (($294) + ($292)|0);
     HEAP8[$295>>0] = $291;
     $296 = $bit_buf;
     $297 = $296 >>> 8;
     $bit_buf = $297;
     $298 = $num_bits;
     $299 = (($298) - 8)|0;
     $num_bits = $299;
     label = 70;
     continue;
    }
    else if ((label|0) == 73) {
     label = 0;
     $356 = $counter;
     $357 = ($356|0)!=(0);
     $358 = $num_bits;
     $359 = ($358|0)!=(0);
     $360 = $357 ? $359 : 0;
     if ($360) {
      $361 = $num_bits;
      $362 = ($361>>>0)<(8);
      if ($362) {
       label = 75;
      } else {
       label = 83;
      }
     } else {
      label = 87;
     }
    }
    if ((label|0) == 75) {
     label = 0;
     $363 = $pIn_buf_cur;
     $364 = $pIn_buf_end;
     $365 = ($363>>>0)>=($364>>>0);
     if ($365) {
      label = 76;
      continue;
     }
     $377 = $pIn_buf_cur;
     $378 = ((($377)) + 1|0);
     $pIn_buf_cur = $378;
     $379 = HEAP8[$377>>0]|0;
     $380 = $379&255;
     $c3 = $380;
     label = 82;
     continue;
    }
    else if ((label|0) == 83) {
     label = 0;
     $390 = $bit_buf;
     $391 = $390 & 255;
     $dist = $391;
     $392 = $bit_buf;
     $393 = $392 >>> 8;
     $bit_buf = $393;
     $394 = $num_bits;
     $395 = (($394) - 8)|0;
     $num_bits = $395;
     label = 84;
     continue;
    }
    else if ((label|0) == 87) {
     label = 0;
     $406 = $counter;
     $407 = ($406|0)!=(0);
     if ($407) {
      label = 88;
      continue;
     } else {
      label = 319;
     }
    }
    L244: while(1) {
     switch (label|0) {
      case 116: {
       label = 0;
       $522 = $counter;
       $523 = ($522>>>0)<(3);
       if ($523) {
        $524 = $num_bits;
        $525 = $counter;
        $526 = (776327 + ($525)|0);
        $527 = HEAP8[$526>>0]|0;
        $528 = $527 << 24 >> 24;
        $529 = ($524>>>0)<($528>>>0);
        if ($529) {
         label = 118;
         continue L244;
        } else {
         label = 126;
         continue L244;
        }
       } else {
        $596 = $1;
        $597 = ((($596)) + 64|0);
        $598 = ((($597)) + 6976|0);
        _memset(($598|0),0,288)|0;
        $counter = 0;
        label = 128;
        break;
       }
       break;
      }
      case 118: {
       label = 0;
       $530 = $pIn_buf_cur;
       $531 = $pIn_buf_end;
       $532 = ($530>>>0)>=($531>>>0);
       if ($532) {
        label = 119;
        continue L74;
       } else {
        label = 124;
        break L244;
       }
       break;
      }
      case 126: {
       label = 0;
       $561 = $bit_buf;
       $562 = $counter;
       $563 = (776327 + ($562)|0);
       $564 = HEAP8[$563>>0]|0;
       $565 = $564 << 24 >> 24;
       $566 = 1 << $565;
       $567 = (($566) - 1)|0;
       $568 = $561 & $567;
       $569 = $counter;
       $570 = $1;
       $571 = ((($570)) + 44|0);
       $572 = (($571) + ($569<<2)|0);
       HEAP32[$572>>2] = $568;
       $573 = $counter;
       $574 = (776327 + ($573)|0);
       $575 = HEAP8[$574>>0]|0;
       $576 = $575 << 24 >> 24;
       $577 = $bit_buf;
       $578 = $577 >>> $576;
       $bit_buf = $578;
       $579 = $counter;
       $580 = (776327 + ($579)|0);
       $581 = HEAP8[$580>>0]|0;
       $582 = $581 << 24 >> 24;
       $583 = $num_bits;
       $584 = (($583) - ($582))|0;
       $num_bits = $584;
       $585 = $counter;
       $586 = (296300 + ($585<<2)|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = $counter;
       $589 = $1;
       $590 = ((($589)) + 44|0);
       $591 = (($590) + ($588<<2)|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = (($592) + ($587))|0;
       HEAP32[$591>>2] = $593;
       $594 = $counter;
       $595 = (($594) + 1)|0;
       $counter = $595;
       label = 116;
       continue L244;
       break;
      }
      case 130: {
       label = 0;
       $607 = $pIn_buf_cur;
       $608 = $pIn_buf_end;
       $609 = ($607>>>0)>=($608>>>0);
       if ($609) {
        label = 131;
        continue L74;
       } else {
        label = 136;
        break L244;
       }
       break;
      }
      case 138: {
       label = 0;
       $634 = $bit_buf;
       $635 = $634 & 7;
       $s = $635;
       $636 = $bit_buf;
       $637 = $636 >>> 3;
       $bit_buf = $637;
       $638 = $num_bits;
       $639 = (($638) - 3)|0;
       $num_bits = $639;
       $640 = $s;
       $641 = $640&255;
       $642 = $counter;
       $643 = (776331 + ($642)|0);
       $644 = HEAP8[$643>>0]|0;
       $645 = $644&255;
       $646 = $1;
       $647 = ((($646)) + 64|0);
       $648 = ((($647)) + 6976|0);
       $649 = (($648) + ($645)|0);
       HEAP8[$649>>0] = $641;
       $650 = $counter;
       $651 = (($650) + 1)|0;
       $counter = $651;
       label = 128;
       break;
      }
      case 140: {
       label = 0;
       $655 = $1;
       $656 = ((($655)) + 24|0);
       $657 = HEAP32[$656>>2]|0;
       $658 = ($657|0)>=(0);
       if (!($658)) {
        label = 215;
        continue L244;
       }
       $659 = $1;
       $660 = ((($659)) + 24|0);
       $661 = HEAP32[$660>>2]|0;
       $662 = $1;
       $663 = ((($662)) + 64|0);
       $664 = (($663) + (($661*3488)|0)|0);
       $pTable = $664;
       dest=$total_syms; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
       $665 = $pTable;
       $666 = ((($665)) + 288|0);
       _memset(($666|0),0,2048)|0;
       $667 = $pTable;
       $668 = ((($667)) + 2336|0);
       _memset(($668|0),0,1152)|0;
       $i6 = 0;
       while(1) {
        $669 = $i6;
        $670 = $1;
        $671 = ((($670)) + 24|0);
        $672 = HEAP32[$671>>2]|0;
        $673 = $1;
        $674 = ((($673)) + 44|0);
        $675 = (($674) + ($672<<2)|0);
        $676 = HEAP32[$675>>2]|0;
        $677 = ($669>>>0)<($676>>>0);
        if (!($677)) {
         break;
        }
        $678 = $i6;
        $679 = $pTable;
        $680 = (($679) + ($678)|0);
        $681 = HEAP8[$680>>0]|0;
        $682 = $681&255;
        $683 = (($total_syms) + ($682<<2)|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (($684) + 1)|0;
        HEAP32[$683>>2] = $685;
        $686 = $i6;
        $687 = (($686) + 1)|0;
        $i6 = $687;
       }
       $used_syms = 0;
       $total = 0;
       $688 = ((($next_code)) + 4|0);
       HEAP32[$688>>2] = 0;
       HEAP32[$next_code>>2] = 0;
       $i6 = 1;
       while(1) {
        $689 = $i6;
        $690 = ($689>>>0)<=(15);
        if (!($690)) {
         break;
        }
        $691 = $i6;
        $692 = (($total_syms) + ($691<<2)|0);
        $693 = HEAP32[$692>>2]|0;
        $694 = $used_syms;
        $695 = (($694) + ($693))|0;
        $used_syms = $695;
        $696 = $total;
        $697 = $i6;
        $698 = (($total_syms) + ($697<<2)|0);
        $699 = HEAP32[$698>>2]|0;
        $700 = (($696) + ($699))|0;
        $701 = $700 << 1;
        $total = $701;
        $702 = $i6;
        $703 = (($702) + 1)|0;
        $704 = (($next_code) + ($703<<2)|0);
        HEAP32[$704>>2] = $701;
        $705 = $i6;
        $706 = (($705) + 1)|0;
        $i6 = $706;
       }
       $707 = $total;
       $708 = (65536)!=($707|0);
       $709 = $used_syms;
       $710 = ($709>>>0)>(1);
       $or$cond = $708 & $710;
       if ($or$cond) {
        label = 148;
        continue L74;
       }
       $tree_next = -1;
       $sym_index = 0;
       while(1) {
        $712 = $sym_index;
        $713 = $1;
        $714 = ((($713)) + 24|0);
        $715 = HEAP32[$714>>2]|0;
        $716 = $1;
        $717 = ((($716)) + 44|0);
        $718 = (($717) + ($715<<2)|0);
        $719 = HEAP32[$718>>2]|0;
        $720 = ($712>>>0)<($719>>>0);
        if (!($720)) {
         break;
        }
        $rev_code = 0;
        $721 = $sym_index;
        $722 = $pTable;
        $723 = (($722) + ($721)|0);
        $724 = HEAP8[$723>>0]|0;
        $725 = $724&255;
        $code_size = $725;
        $726 = $code_size;
        $727 = ($726|0)!=(0);
        L267: do {
         if ($727) {
          $728 = $code_size;
          $729 = (($next_code) + ($728<<2)|0);
          $730 = HEAP32[$729>>2]|0;
          $731 = (($730) + 1)|0;
          HEAP32[$729>>2] = $731;
          $cur_code = $730;
          $732 = $code_size;
          $l = $732;
          while(1) {
           $733 = $l;
           $734 = ($733>>>0)>(0);
           if (!($734)) {
            break;
           }
           $735 = $rev_code;
           $736 = $735 << 1;
           $737 = $cur_code;
           $738 = $737 & 1;
           $739 = $736 | $738;
           $rev_code = $739;
           $740 = $l;
           $741 = (($740) + -1)|0;
           $l = $741;
           $742 = $cur_code;
           $743 = $742 >>> 1;
           $cur_code = $743;
          }
          $744 = $code_size;
          $745 = ($744>>>0)<=(10);
          if ($745) {
           $746 = $code_size;
           $747 = $746 << 9;
           $748 = $sym_index;
           $749 = $747 | $748;
           $750 = $749&65535;
           $k = $750;
           while(1) {
            $751 = $rev_code;
            $752 = ($751>>>0)<(1024);
            if (!($752)) {
             break L267;
            }
            $753 = $k;
            $754 = $rev_code;
            $755 = $pTable;
            $756 = ((($755)) + 288|0);
            $757 = (($756) + ($754<<1)|0);
            HEAP16[$757>>1] = $753;
            $758 = $code_size;
            $759 = 1 << $758;
            $760 = $rev_code;
            $761 = (($760) + ($759))|0;
            $rev_code = $761;
           }
          }
          $762 = $rev_code;
          $763 = $762 & 1023;
          $764 = $pTable;
          $765 = ((($764)) + 288|0);
          $766 = (($765) + ($763<<1)|0);
          $767 = HEAP16[$766>>1]|0;
          $768 = $767 << 16 >> 16;
          $tree_cur = $768;
          $769 = (0)==($768|0);
          if ($769) {
           $770 = $tree_next;
           $771 = $770&65535;
           $772 = $rev_code;
           $773 = $772 & 1023;
           $774 = $pTable;
           $775 = ((($774)) + 288|0);
           $776 = (($775) + ($773<<1)|0);
           HEAP16[$776>>1] = $771;
           $777 = $tree_next;
           $tree_cur = $777;
           $778 = $tree_next;
           $779 = (($778) - 2)|0;
           $tree_next = $779;
          }
          $780 = $rev_code;
          $781 = $780 >>> 9;
          $rev_code = $781;
          $782 = $code_size;
          $j = $782;
          while(1) {
           $783 = $j;
           $784 = ($783>>>0)>(11);
           $785 = $rev_code;
           $786 = $785 >>> 1;
           $rev_code = $786;
           $787 = $786 & 1;
           $788 = $tree_cur;
           $789 = (($788) - ($787))|0;
           $tree_cur = $789;
           if (!($784)) {
            break;
           }
           $790 = $tree_cur;
           $791 = (0 - ($790))|0;
           $792 = (($791) - 1)|0;
           $793 = $pTable;
           $794 = ((($793)) + 2336|0);
           $795 = (($794) + ($792<<1)|0);
           $796 = HEAP16[$795>>1]|0;
           $797 = ($796<<16>>16)!=(0);
           if ($797) {
            $809 = $tree_cur;
            $810 = (0 - ($809))|0;
            $811 = (($810) - 1)|0;
            $812 = $pTable;
            $813 = ((($812)) + 2336|0);
            $814 = (($813) + ($811<<1)|0);
            $815 = HEAP16[$814>>1]|0;
            $816 = $815 << 16 >> 16;
            $tree_cur = $816;
           } else {
            $798 = $tree_next;
            $799 = $798&65535;
            $800 = $tree_cur;
            $801 = (0 - ($800))|0;
            $802 = (($801) - 1)|0;
            $803 = $pTable;
            $804 = ((($803)) + 2336|0);
            $805 = (($804) + ($802<<1)|0);
            HEAP16[$805>>1] = $799;
            $806 = $tree_next;
            $tree_cur = $806;
            $807 = $tree_next;
            $808 = (($807) - 2)|0;
            $tree_next = $808;
           }
           $817 = $j;
           $818 = (($817) + -1)|0;
           $j = $818;
          }
          $819 = $sym_index;
          $820 = $819&65535;
          $821 = $tree_cur;
          $822 = (0 - ($821))|0;
          $823 = (($822) - 1)|0;
          $824 = $pTable;
          $825 = ((($824)) + 2336|0);
          $826 = (($825) + ($823<<1)|0);
          HEAP16[$826>>1] = $820;
         }
        } while(0);
        $827 = $sym_index;
        $828 = (($827) + 1)|0;
        $sym_index = $828;
       }
       $829 = $1;
       $830 = ((($829)) + 24|0);
       $831 = HEAP32[$830>>2]|0;
       $832 = ($831|0)==(2);
       if ($832) {
        $counter = 0;
        label = 171;
       } else {
        label = 214;
       }
       break;
      }
      case 174: {
       label = 0;
       $851 = $bit_buf;
       $852 = $851 & 1023;
       $853 = $1;
       $854 = ((($853)) + 64|0);
       $855 = ((($854)) + 6976|0);
       $856 = ((($855)) + 288|0);
       $857 = (($856) + ($852<<1)|0);
       $858 = HEAP16[$857>>1]|0;
       $859 = $858 << 16 >> 16;
       $temp = $859;
       $860 = $temp;
       $861 = ($860|0)>=(0);
       if ($861) {
        $862 = $temp;
        $863 = $862 >> 9;
        $code_len = $863;
        $864 = $code_len;
        $865 = ($864|0)!=(0);
        if (!($865)) {
         label = 182;
         break L244;
        }
        $866 = $num_bits;
        $867 = $code_len;
        $868 = ($866>>>0)>=($867>>>0);
        if ($868) {
         label = 191;
         continue L244;
        } else {
         label = 182;
         break L244;
        }
       }
       $869 = $num_bits;
       $870 = ($869>>>0)>(10);
       if (!($870)) {
        label = 182;
        break L244;
       }
       $code_len = 10;
       while(1) {
        $871 = $temp;
        $872 = $871 ^ -1;
        $873 = $bit_buf;
        $874 = $code_len;
        $875 = (($874) + 1)|0;
        $code_len = $875;
        $876 = $873 >>> $874;
        $877 = $876 & 1;
        $878 = (($872) + ($877))|0;
        $879 = $1;
        $880 = ((($879)) + 64|0);
        $881 = ((($880)) + 6976|0);
        $882 = ((($881)) + 2336|0);
        $883 = (($882) + ($878<<1)|0);
        $884 = HEAP16[$883>>1]|0;
        $885 = $884 << 16 >> 16;
        $temp = $885;
        $886 = $temp;
        $887 = ($886|0)<(0);
        if (!($887)) {
         break;
        }
        $888 = $num_bits;
        $889 = $code_len;
        $890 = (($889) + 1)|0;
        $891 = ($888>>>0)>=($890>>>0);
        if (!($891)) {
         break;
        }
       }
       $892 = $temp;
       $893 = ($892|0)>=(0);
       if ($893) {
        label = 191;
        continue L244;
       } else {
        label = 182;
        break L244;
       }
       break;
      }
      case 191: {
       label = 0;
       $940 = $bit_buf;
       $941 = $940 & 1023;
       $942 = $1;
       $943 = ((($942)) + 64|0);
       $944 = ((($943)) + 6976|0);
       $945 = ((($944)) + 288|0);
       $946 = (($945) + ($941<<1)|0);
       $947 = HEAP16[$946>>1]|0;
       $948 = $947 << 16 >> 16;
       $temp = $948;
       $949 = ($948|0)>=(0);
       if ($949) {
        $950 = $temp;
        $951 = $950 >> 9;
        $code_len = $951;
        $952 = $temp;
        $953 = $952 & 511;
        $temp = $953;
       } else {
        $code_len = 10;
        while(1) {
         $954 = $temp;
         $955 = $954 ^ -1;
         $956 = $bit_buf;
         $957 = $code_len;
         $958 = (($957) + 1)|0;
         $code_len = $958;
         $959 = $956 >>> $957;
         $960 = $959 & 1;
         $961 = (($955) + ($960))|0;
         $962 = $1;
         $963 = ((($962)) + 64|0);
         $964 = ((($963)) + 6976|0);
         $965 = ((($964)) + 2336|0);
         $966 = (($965) + ($961<<1)|0);
         $967 = HEAP16[$966>>1]|0;
         $968 = $967 << 16 >> 16;
         $temp = $968;
         $969 = $temp;
         $970 = ($969|0)<(0);
         if (!($970)) {
          break;
         }
        }
       }
       $971 = $temp;
       $dist = $971;
       $972 = $code_len;
       $973 = $bit_buf;
       $974 = $973 >>> $972;
       $bit_buf = $974;
       $975 = $code_len;
       $976 = $num_bits;
       $977 = (($976) - ($975))|0;
       $num_bits = $977;
       $978 = $dist;
       $979 = ($978>>>0)<(16);
       $980 = $dist;
       if ($979) {
        $981 = $980&255;
        $982 = $counter;
        $983 = (($982) + 1)|0;
        $counter = $983;
        $984 = $1;
        $985 = ((($984)) + 10532|0);
        $986 = (($985) + ($982)|0);
        HEAP8[$986>>0] = $981;
        label = 171;
        break;
       }
       $987 = ($980|0)!=(16);
       $988 = $counter;
       $989 = ($988|0)!=(0);
       $or$cond3 = $987 | $989;
       if (!($or$cond3)) {
        label = 198;
        continue L74;
       }
       $991 = $dist;
       $992 = (($991) - 16)|0;
       $993 = (776350 + ($992)|0);
       $994 = HEAP8[$993>>0]|0;
       $995 = $994 << 24 >> 24;
       $num_extra = $995;
       $996 = $num_bits;
       $997 = $num_extra;
       $998 = ($996>>>0)<($997>>>0);
       if ($998) {
        label = 200;
        continue L244;
       } else {
        label = 208;
        continue L244;
       }
       break;
      }
      case 200: {
       label = 0;
       $999 = $pIn_buf_cur;
       $1000 = $pIn_buf_end;
       $1001 = ($999>>>0)>=($1000>>>0);
       if ($1001) {
        label = 201;
        continue L74;
       } else {
        label = 206;
        break L244;
       }
       break;
      }
      case 208: {
       label = 0;
       $1027 = $bit_buf;
       $1028 = $num_extra;
       $1029 = 1 << $1028;
       $1030 = (($1029) - 1)|0;
       $1031 = $1027 & $1030;
       $s7 = $1031;
       $1032 = $num_extra;
       $1033 = $bit_buf;
       $1034 = $1033 >>> $1032;
       $bit_buf = $1034;
       $1035 = $num_extra;
       $1036 = $num_bits;
       $1037 = (($1036) - ($1035))|0;
       $num_bits = $1037;
       $1038 = $dist;
       $1039 = (($1038) - 16)|0;
       $1040 = (776354 + ($1039)|0);
       $1041 = HEAP8[$1040>>0]|0;
       $1042 = $1041 << 24 >> 24;
       $1043 = $s7;
       $1044 = (($1043) + ($1042))|0;
       $s7 = $1044;
       $1045 = $1;
       $1046 = ((($1045)) + 10532|0);
       $1047 = $counter;
       $1048 = (($1046) + ($1047)|0);
       $1049 = $dist;
       $1050 = ($1049|0)==(16);
       if ($1050) {
        $1051 = $counter;
        $1052 = (($1051) - 1)|0;
        $1053 = $1;
        $1054 = ((($1053)) + 10532|0);
        $1055 = (($1054) + ($1052)|0);
        $1056 = HEAP8[$1055>>0]|0;
        $1057 = $1056&255;
        $1059 = $1057;
       } else {
        $1059 = 0;
       }
       $1058 = $1059&255;
       $1060 = $s7;
       _memset(($1048|0),($1058|0),($1060|0))|0;
       $1061 = $s7;
       $1062 = $counter;
       $1063 = (($1062) + ($1061))|0;
       $counter = $1063;
       label = 171;
       break;
      }
      case 215: {
       label = 0;
       $1099 = $pIn_buf_end;
       $1100 = $pIn_buf_cur;
       $1101 = $1099;
       $1102 = $1100;
       $1103 = (($1101) - ($1102))|0;
       $1104 = ($1103|0)<(4);
       if (!($1104)) {
        $1105 = $pOut_buf_end;
        $1106 = $pOut_buf_cur;
        $1107 = $1105;
        $1108 = $1106;
        $1109 = (($1107) - ($1108))|0;
        $1110 = ($1109|0)<(2);
        if (!($1110)) {
         $1252 = $num_bits;
         $1253 = ($1252>>>0)<(15);
         if ($1253) {
          $1254 = $pIn_buf_cur;
          $1255 = HEAP8[$1254>>0]|0;
          $1256 = $1255&255;
          $1257 = $pIn_buf_cur;
          $1258 = ((($1257)) + 1|0);
          $1259 = HEAP8[$1258>>0]|0;
          $1260 = $1259&255;
          $1261 = $1260 << 8;
          $1262 = $1256 | $1261;
          $1263 = $num_bits;
          $1264 = $1262 << $1263;
          $1265 = $bit_buf;
          $1266 = $1265 | $1264;
          $bit_buf = $1266;
          $1267 = $pIn_buf_cur;
          $1268 = ((($1267)) + 2|0);
          $pIn_buf_cur = $1268;
          $1269 = $num_bits;
          $1270 = (($1269) + 16)|0;
          $num_bits = $1270;
         }
         $1271 = $bit_buf;
         $1272 = $1271 & 1023;
         $1273 = $1;
         $1274 = ((($1273)) + 64|0);
         $1275 = ((($1274)) + 288|0);
         $1276 = (($1275) + ($1272<<1)|0);
         $1277 = HEAP16[$1276>>1]|0;
         $1278 = $1277 << 16 >> 16;
         $sym2 = $1278;
         $1279 = ($1278|0)>=(0);
         if ($1279) {
          $1280 = $sym2;
          $1281 = $1280 >> 9;
          $code_len13 = $1281;
         } else {
          $code_len13 = 10;
          while(1) {
           $1282 = $sym2;
           $1283 = $1282 ^ -1;
           $1284 = $bit_buf;
           $1285 = $code_len13;
           $1286 = (($1285) + 1)|0;
           $code_len13 = $1286;
           $1287 = $1284 >>> $1285;
           $1288 = $1287 & 1;
           $1289 = (($1283) + ($1288))|0;
           $1290 = $1;
           $1291 = ((($1290)) + 64|0);
           $1292 = ((($1291)) + 2336|0);
           $1293 = (($1292) + ($1289<<1)|0);
           $1294 = HEAP16[$1293>>1]|0;
           $1295 = $1294 << 16 >> 16;
           $sym2 = $1295;
           $1296 = $sym2;
           $1297 = ($1296|0)<(0);
           if (!($1297)) {
            break;
           }
          }
         }
         $1298 = $sym2;
         $counter = $1298;
         $1299 = $code_len13;
         $1300 = $bit_buf;
         $1301 = $1300 >>> $1299;
         $bit_buf = $1301;
         $1302 = $code_len13;
         $1303 = $num_bits;
         $1304 = (($1303) - ($1302))|0;
         $num_bits = $1304;
         $1305 = $counter;
         $1306 = $1305 & 256;
         $1307 = ($1306|0)!=(0);
         if ($1307) {
          label = 260;
          break;
         }
         $1308 = $num_bits;
         $1309 = ($1308>>>0)<(15);
         if ($1309) {
          $1310 = $pIn_buf_cur;
          $1311 = HEAP8[$1310>>0]|0;
          $1312 = $1311&255;
          $1313 = $pIn_buf_cur;
          $1314 = ((($1313)) + 1|0);
          $1315 = HEAP8[$1314>>0]|0;
          $1316 = $1315&255;
          $1317 = $1316 << 8;
          $1318 = $1312 | $1317;
          $1319 = $num_bits;
          $1320 = $1318 << $1319;
          $1321 = $bit_buf;
          $1322 = $1321 | $1320;
          $bit_buf = $1322;
          $1323 = $pIn_buf_cur;
          $1324 = ((($1323)) + 2|0);
          $pIn_buf_cur = $1324;
          $1325 = $num_bits;
          $1326 = (($1325) + 16)|0;
          $num_bits = $1326;
         }
         $1327 = $bit_buf;
         $1328 = $1327 & 1023;
         $1329 = $1;
         $1330 = ((($1329)) + 64|0);
         $1331 = ((($1330)) + 288|0);
         $1332 = (($1331) + ($1328<<1)|0);
         $1333 = HEAP16[$1332>>1]|0;
         $1334 = $1333 << 16 >> 16;
         $sym2 = $1334;
         $1335 = ($1334|0)>=(0);
         if ($1335) {
          $1336 = $sym2;
          $1337 = $1336 >> 9;
          $code_len13 = $1337;
         } else {
          $code_len13 = 10;
          while(1) {
           $1338 = $sym2;
           $1339 = $1338 ^ -1;
           $1340 = $bit_buf;
           $1341 = $code_len13;
           $1342 = (($1341) + 1)|0;
           $code_len13 = $1342;
           $1343 = $1340 >>> $1341;
           $1344 = $1343 & 1;
           $1345 = (($1339) + ($1344))|0;
           $1346 = $1;
           $1347 = ((($1346)) + 64|0);
           $1348 = ((($1347)) + 2336|0);
           $1349 = (($1348) + ($1345<<1)|0);
           $1350 = HEAP16[$1349>>1]|0;
           $1351 = $1350 << 16 >> 16;
           $sym2 = $1351;
           $1352 = $sym2;
           $1353 = ($1352|0)<(0);
           if (!($1353)) {
            break;
           }
          }
         }
         $1354 = $code_len13;
         $1355 = $bit_buf;
         $1356 = $1355 >>> $1354;
         $bit_buf = $1356;
         $1357 = $code_len13;
         $1358 = $num_bits;
         $1359 = (($1358) - ($1357))|0;
         $num_bits = $1359;
         $1360 = $counter;
         $1361 = $1360&255;
         $1362 = $pOut_buf_cur;
         HEAP8[$1362>>0] = $1361;
         $1363 = $sym2;
         $1364 = $1363 & 256;
         $1365 = ($1364|0)!=(0);
         if ($1365) {
          $1366 = $pOut_buf_cur;
          $1367 = ((($1366)) + 1|0);
          $pOut_buf_cur = $1367;
          $1368 = $sym2;
          $counter = $1368;
          label = 260;
          break;
         } else {
          $1369 = $sym2;
          $1370 = $1369&255;
          $1371 = $pOut_buf_cur;
          $1372 = ((($1371)) + 1|0);
          HEAP8[$1372>>0] = $1370;
          $1373 = $pOut_buf_cur;
          $1374 = ((($1373)) + 2|0);
          $pOut_buf_cur = $1374;
          label = 215;
          continue L244;
         }
        }
       }
       $1111 = $num_bits;
       $1112 = ($1111>>>0)<(15);
       if (!($1112)) {
        label = 236;
        continue L244;
       }
       $1113 = $pIn_buf_end;
       $1114 = $pIn_buf_cur;
       $1115 = $1113;
       $1116 = $1114;
       $1117 = (($1115) - ($1116))|0;
       $1118 = ($1117|0)<(2);
       if ($1118) {
        label = 219;
        continue L244;
       }
       $1187 = $pIn_buf_cur;
       $1188 = HEAP8[$1187>>0]|0;
       $1189 = $1188&255;
       $1190 = $num_bits;
       $1191 = $1189 << $1190;
       $1192 = $pIn_buf_cur;
       $1193 = ((($1192)) + 1|0);
       $1194 = HEAP8[$1193>>0]|0;
       $1195 = $1194&255;
       $1196 = $num_bits;
       $1197 = (($1196) + 8)|0;
       $1198 = $1195 << $1197;
       $1199 = $1191 | $1198;
       $1200 = $bit_buf;
       $1201 = $1200 | $1199;
       $bit_buf = $1201;
       $1202 = $pIn_buf_cur;
       $1203 = ((($1202)) + 2|0);
       $pIn_buf_cur = $1203;
       $1204 = $num_bits;
       $1205 = (($1204) + 16)|0;
       $num_bits = $1205;
       label = 236;
       continue L244;
       break;
      }
      case 219: {
       label = 0;
       $1119 = $bit_buf;
       $1120 = $1119 & 1023;
       $1121 = $1;
       $1122 = ((($1121)) + 64|0);
       $1123 = ((($1122)) + 288|0);
       $1124 = (($1123) + ($1120<<1)|0);
       $1125 = HEAP16[$1124>>1]|0;
       $1126 = $1125 << 16 >> 16;
       $temp10 = $1126;
       $1127 = $temp10;
       $1128 = ($1127|0)>=(0);
       if ($1128) {
        $1129 = $temp10;
        $1130 = $1129 >> 9;
        $code_len11 = $1130;
        $1131 = $code_len11;
        $1132 = ($1131|0)!=(0);
        if (!($1132)) {
         label = 227;
         break L244;
        }
        $1133 = $num_bits;
        $1134 = $code_len11;
        $1135 = ($1133>>>0)>=($1134>>>0);
        if ($1135) {
         label = 236;
         continue L244;
        } else {
         label = 227;
         break L244;
        }
       }
       $1136 = $num_bits;
       $1137 = ($1136>>>0)>(10);
       if (!($1137)) {
        label = 227;
        break L244;
       }
       $code_len11 = 10;
       while(1) {
        $1138 = $temp10;
        $1139 = $1138 ^ -1;
        $1140 = $bit_buf;
        $1141 = $code_len11;
        $1142 = (($1141) + 1)|0;
        $code_len11 = $1142;
        $1143 = $1140 >>> $1141;
        $1144 = $1143 & 1;
        $1145 = (($1139) + ($1144))|0;
        $1146 = $1;
        $1147 = ((($1146)) + 64|0);
        $1148 = ((($1147)) + 2336|0);
        $1149 = (($1148) + ($1145<<1)|0);
        $1150 = HEAP16[$1149>>1]|0;
        $1151 = $1150 << 16 >> 16;
        $temp10 = $1151;
        $1152 = $temp10;
        $1153 = ($1152|0)<(0);
        if (!($1153)) {
         break;
        }
        $1154 = $num_bits;
        $1155 = $code_len11;
        $1156 = (($1155) + 1)|0;
        $1157 = ($1154>>>0)>=($1156>>>0);
        if (!($1157)) {
         break;
        }
       }
       $1158 = $temp10;
       $1159 = ($1158|0)>=(0);
       if ($1159) {
        label = 236;
        continue L244;
       } else {
        label = 227;
        break L244;
       }
       break;
      }
      case 236: {
       label = 0;
       $1206 = $bit_buf;
       $1207 = $1206 & 1023;
       $1208 = $1;
       $1209 = ((($1208)) + 64|0);
       $1210 = ((($1209)) + 288|0);
       $1211 = (($1210) + ($1207<<1)|0);
       $1212 = HEAP16[$1211>>1]|0;
       $1213 = $1212 << 16 >> 16;
       $temp10 = $1213;
       $1214 = ($1213|0)>=(0);
       if ($1214) {
        $1215 = $temp10;
        $1216 = $1215 >> 9;
        $code_len11 = $1216;
        $1217 = $temp10;
        $1218 = $1217 & 511;
        $temp10 = $1218;
       } else {
        $code_len11 = 10;
        while(1) {
         $1219 = $temp10;
         $1220 = $1219 ^ -1;
         $1221 = $bit_buf;
         $1222 = $code_len11;
         $1223 = (($1222) + 1)|0;
         $code_len11 = $1223;
         $1224 = $1221 >>> $1222;
         $1225 = $1224 & 1;
         $1226 = (($1220) + ($1225))|0;
         $1227 = $1;
         $1228 = ((($1227)) + 64|0);
         $1229 = ((($1228)) + 2336|0);
         $1230 = (($1229) + ($1226<<1)|0);
         $1231 = HEAP16[$1230>>1]|0;
         $1232 = $1231 << 16 >> 16;
         $temp10 = $1232;
         $1233 = $temp10;
         $1234 = ($1233|0)<(0);
         if (!($1234)) {
          break;
         }
        }
       }
       $1235 = $temp10;
       $counter = $1235;
       $1236 = $code_len11;
       $1237 = $bit_buf;
       $1238 = $1237 >>> $1236;
       $bit_buf = $1238;
       $1239 = $code_len11;
       $1240 = $num_bits;
       $1241 = (($1240) - ($1239))|0;
       $num_bits = $1241;
       $1242 = $counter;
       $1243 = ($1242>>>0)>=(256);
       if ($1243) {
        label = 260;
       } else {
        label = 241;
        continue L74;
       }
       break;
      }
      case 263: {
       label = 0;
       $1391 = $pIn_buf_cur;
       $1392 = $pIn_buf_end;
       $1393 = ($1391>>>0)>=($1392>>>0);
       if ($1393) {
        label = 264;
        continue L74;
       } else {
        label = 269;
        break L244;
       }
       break;
      }
      case 271: {
       label = 0;
       $1419 = $bit_buf;
       $1420 = $num_extra;
       $1421 = 1 << $1420;
       $1422 = (($1421) - 1)|0;
       $1423 = $1419 & $1422;
       $extra_bits = $1423;
       $1424 = $num_extra;
       $1425 = $bit_buf;
       $1426 = $1425 >>> $1424;
       $bit_buf = $1426;
       $1427 = $num_extra;
       $1428 = $num_bits;
       $1429 = (($1428) - ($1427))|0;
       $num_bits = $1429;
       $1430 = $extra_bits;
       $1431 = $counter;
       $1432 = (($1431) + ($1430))|0;
       $counter = $1432;
       break;
      }
      case 274: {
       label = 0;
       $1441 = $bit_buf;
       $1442 = $1441 & 1023;
       $1443 = $1;
       $1444 = ((($1443)) + 64|0);
       $1445 = ((($1444)) + 3488|0);
       $1446 = ((($1445)) + 288|0);
       $1447 = (($1446) + ($1442<<1)|0);
       $1448 = HEAP16[$1447>>1]|0;
       $1449 = $1448 << 16 >> 16;
       $temp15 = $1449;
       $1450 = $temp15;
       $1451 = ($1450|0)>=(0);
       if ($1451) {
        $1452 = $temp15;
        $1453 = $1452 >> 9;
        $code_len16 = $1453;
        $1454 = $code_len16;
        $1455 = ($1454|0)!=(0);
        if (!($1455)) {
         label = 282;
         break L244;
        }
        $1456 = $num_bits;
        $1457 = $code_len16;
        $1458 = ($1456>>>0)>=($1457>>>0);
        if ($1458) {
         label = 291;
         continue L244;
        } else {
         label = 282;
         break L244;
        }
       }
       $1459 = $num_bits;
       $1460 = ($1459>>>0)>(10);
       if (!($1460)) {
        label = 282;
        break L244;
       }
       $code_len16 = 10;
       while(1) {
        $1461 = $temp15;
        $1462 = $1461 ^ -1;
        $1463 = $bit_buf;
        $1464 = $code_len16;
        $1465 = (($1464) + 1)|0;
        $code_len16 = $1465;
        $1466 = $1463 >>> $1464;
        $1467 = $1466 & 1;
        $1468 = (($1462) + ($1467))|0;
        $1469 = $1;
        $1470 = ((($1469)) + 64|0);
        $1471 = ((($1470)) + 3488|0);
        $1472 = ((($1471)) + 2336|0);
        $1473 = (($1472) + ($1468<<1)|0);
        $1474 = HEAP16[$1473>>1]|0;
        $1475 = $1474 << 16 >> 16;
        $temp15 = $1475;
        $1476 = $temp15;
        $1477 = ($1476|0)<(0);
        if (!($1477)) {
         break;
        }
        $1478 = $num_bits;
        $1479 = $code_len16;
        $1480 = (($1479) + 1)|0;
        $1481 = ($1478>>>0)>=($1480>>>0);
        if (!($1481)) {
         break;
        }
       }
       $1482 = $temp15;
       $1483 = ($1482|0)>=(0);
       if ($1483) {
        label = 291;
        continue L244;
       } else {
        label = 282;
        break L244;
       }
       break;
      }
      case 291: {
       label = 0;
       $1530 = $bit_buf;
       $1531 = $1530 & 1023;
       $1532 = $1;
       $1533 = ((($1532)) + 64|0);
       $1534 = ((($1533)) + 3488|0);
       $1535 = ((($1534)) + 288|0);
       $1536 = (($1535) + ($1531<<1)|0);
       $1537 = HEAP16[$1536>>1]|0;
       $1538 = $1537 << 16 >> 16;
       $temp15 = $1538;
       $1539 = ($1538|0)>=(0);
       if ($1539) {
        $1540 = $temp15;
        $1541 = $1540 >> 9;
        $code_len16 = $1541;
        $1542 = $temp15;
        $1543 = $1542 & 511;
        $temp15 = $1543;
       } else {
        $code_len16 = 10;
        while(1) {
         $1544 = $temp15;
         $1545 = $1544 ^ -1;
         $1546 = $bit_buf;
         $1547 = $code_len16;
         $1548 = (($1547) + 1)|0;
         $code_len16 = $1548;
         $1549 = $1546 >>> $1547;
         $1550 = $1549 & 1;
         $1551 = (($1545) + ($1550))|0;
         $1552 = $1;
         $1553 = ((($1552)) + 64|0);
         $1554 = ((($1553)) + 3488|0);
         $1555 = ((($1554)) + 2336|0);
         $1556 = (($1555) + ($1551<<1)|0);
         $1557 = HEAP16[$1556>>1]|0;
         $1558 = $1557 << 16 >> 16;
         $temp15 = $1558;
         $1559 = $temp15;
         $1560 = ($1559|0)<(0);
         if (!($1560)) {
          break;
         }
        }
       }
       $1561 = $temp15;
       $dist = $1561;
       $1562 = $code_len16;
       $1563 = $bit_buf;
       $1564 = $1563 >>> $1562;
       $bit_buf = $1564;
       $1565 = $code_len16;
       $1566 = $num_bits;
       $1567 = (($1566) - ($1565))|0;
       $num_bits = $1567;
       $1568 = $dist;
       $1569 = (296560 + ($1568<<2)|0);
       $1570 = HEAP32[$1569>>2]|0;
       $num_extra = $1570;
       $1571 = $dist;
       $1572 = (296688 + ($1571<<2)|0);
       $1573 = HEAP32[$1572>>2]|0;
       $dist = $1573;
       $1574 = $num_extra;
       $1575 = ($1574|0)!=(0);
       if ($1575) {
        $1576 = $num_bits;
        $1577 = $num_extra;
        $1578 = ($1576>>>0)<($1577>>>0);
        if ($1578) {
         label = 297;
         continue L244;
        } else {
         label = 305;
         continue L244;
        }
       } else {
        label = 306;
       }
       break;
      }
      case 297: {
       label = 0;
       $1579 = $pIn_buf_cur;
       $1580 = $pIn_buf_end;
       $1581 = ($1579>>>0)>=($1580>>>0);
       if ($1581) {
        label = 298;
        continue L74;
       } else {
        label = 303;
        break L244;
       }
       break;
      }
      case 305: {
       label = 0;
       $1607 = $bit_buf;
       $1608 = $num_extra;
       $1609 = 1 << $1608;
       $1610 = (($1609) - 1)|0;
       $1611 = $1607 & $1610;
       $extra_bits18 = $1611;
       $1612 = $num_extra;
       $1613 = $bit_buf;
       $1614 = $1613 >>> $1612;
       $bit_buf = $1614;
       $1615 = $num_extra;
       $1616 = $num_bits;
       $1617 = (($1616) - ($1615))|0;
       $num_bits = $1617;
       $1618 = $extra_bits18;
       $1619 = $dist;
       $1620 = (($1619) + ($1618))|0;
       $dist = $1620;
       label = 306;
       break;
      }
      case 310: {
       label = 0;
       $1650 = $counter;
       $1651 = (($1650) + -1)|0;
       $counter = $1651;
       $1652 = ($1650|0)!=(0);
       if ($1652) {
        label = 311;
        continue L74;
       } else {
        label = 215;
        continue L244;
       }
       break;
      }
      case 319: {
       label = 0;
       $1703 = $1;
       $1704 = ((($1703)) + 20|0);
       $1705 = HEAP32[$1704>>2]|0;
       $1706 = $1705 & 1;
       $1707 = ($1706|0)!=(0);
       $1708 = $1707 ^ 1;
       if ($1708) {
        label = 31;
        continue L74;
       }
       $1709 = $7;
       $1710 = $1709 & 1;
       $1711 = ($1710|0)!=(0);
       if (!($1711)) {
        label = 351;
        continue L74;
       }
       $1712 = $num_bits;
       $1713 = $num_bits;
       $1714 = $1713 & 7;
       $1715 = ($1712>>>0)<($1714>>>0);
       if ($1715) {
        label = 322;
        continue L244;
       } else {
        label = 330;
        continue L244;
       }
       break;
      }
      case 322: {
       label = 0;
       $1716 = $pIn_buf_cur;
       $1717 = $pIn_buf_end;
       $1718 = ($1716>>>0)>=($1717>>>0);
       if ($1718) {
        label = 323;
        continue L74;
       } else {
        label = 328;
        break L244;
       }
       break;
      }
      case 330: {
       label = 0;
       $1745 = $num_bits;
       $1746 = $1745 & 7;
       $1747 = $bit_buf;
       $1748 = $1747 >>> $1746;
       $bit_buf = $1748;
       $1749 = $num_bits;
       $1750 = $1749 & 7;
       $1751 = $num_bits;
       $1752 = (($1751) - ($1750))|0;
       $num_bits = $1752;
       $counter = 0;
       label = 331;
       continue L244;
       break;
      }
      case 331: {
       label = 0;
       $1753 = $counter;
       $1754 = ($1753>>>0)<(4);
       if (!($1754)) {
        label = 351;
        continue L74;
       }
       $1755 = $num_bits;
       $1756 = ($1755|0)!=(0);
       if (!($1756)) {
        label = 343;
        break L244;
       }
       $1757 = $num_bits;
       $1758 = ($1757>>>0)<(8);
       if ($1758) {
        label = 334;
        continue L244;
       } else {
        label = 342;
        continue L244;
       }
       break;
      }
      case 334: {
       label = 0;
       $1759 = $pIn_buf_cur;
       $1760 = $pIn_buf_end;
       $1761 = ($1759>>>0)>=($1760>>>0);
       if ($1761) {
        label = 335;
        continue L74;
       } else {
        label = 340;
        break L244;
       }
       break;
      }
      case 342: {
       label = 0;
       $1786 = $bit_buf;
       $1787 = $1786 & 255;
       $s21 = $1787;
       $1788 = $bit_buf;
       $1789 = $1788 >>> 8;
       $bit_buf = $1789;
       $1790 = $num_bits;
       $1791 = (($1790) - 8)|0;
       $num_bits = $1791;
       label = 350;
       continue L74;
       break;
      }
     }
     do {
      if ((label|0) == 128) {
       label = 0;
       $599 = $counter;
       $600 = $1;
       $601 = ((($600)) + 44|0);
       $602 = ((($601)) + 8|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = ($599>>>0)<($603>>>0);
       if ($604) {
        $605 = $num_bits;
        $606 = ($605>>>0)<(3);
        if ($606) {
         label = 130;
         continue L244;
        } else {
         label = 138;
         continue L244;
        }
       } else {
        $652 = $1;
        $653 = ((($652)) + 44|0);
        $654 = ((($653)) + 8|0);
        HEAP32[$654>>2] = 19;
        label = 140;
        continue L244;
       }
      }
      else if ((label|0) == 171) {
       label = 0;
       $833 = $counter;
       $834 = $1;
       $835 = ((($834)) + 44|0);
       $836 = HEAP32[$835>>2]|0;
       $837 = $1;
       $838 = ((($837)) + 44|0);
       $839 = ((($838)) + 4|0);
       $840 = HEAP32[$839>>2]|0;
       $841 = (($836) + ($840))|0;
       $842 = ($833>>>0)<($841>>>0);
       if (!($842)) {
        $1064 = $1;
        $1065 = ((($1064)) + 44|0);
        $1066 = HEAP32[$1065>>2]|0;
        $1067 = $1;
        $1068 = ((($1067)) + 44|0);
        $1069 = ((($1068)) + 4|0);
        $1070 = HEAP32[$1069>>2]|0;
        $1071 = (($1066) + ($1070))|0;
        $1072 = $counter;
        $1073 = ($1071|0)!=($1072|0);
        if ($1073) {
         label = 212;
         continue L74;
        }
        $1075 = $1;
        $1076 = ((($1075)) + 64|0);
        $1077 = $1;
        $1078 = ((($1077)) + 10532|0);
        $1079 = $1;
        $1080 = ((($1079)) + 44|0);
        $1081 = HEAP32[$1080>>2]|0;
        _memcpy(($1076|0),($1078|0),($1081|0))|0;
        $1082 = $1;
        $1083 = ((($1082)) + 64|0);
        $1084 = ((($1083)) + 3488|0);
        $1085 = $1;
        $1086 = ((($1085)) + 10532|0);
        $1087 = $1;
        $1088 = ((($1087)) + 44|0);
        $1089 = HEAP32[$1088>>2]|0;
        $1090 = (($1086) + ($1089)|0);
        $1091 = $1;
        $1092 = ((($1091)) + 44|0);
        $1093 = ((($1092)) + 4|0);
        $1094 = HEAP32[$1093>>2]|0;
        _memcpy(($1084|0),($1090|0),($1094|0))|0;
        label = 214;
        break;
       }
       $843 = $num_bits;
       $844 = ($843>>>0)<(15);
       if (!($844)) {
        label = 191;
        continue L244;
       }
       $845 = $pIn_buf_end;
       $846 = $pIn_buf_cur;
       $847 = $845;
       $848 = $846;
       $849 = (($847) - ($848))|0;
       $850 = ($849|0)<(2);
       if ($850) {
        label = 174;
        continue L244;
       }
       $921 = $pIn_buf_cur;
       $922 = HEAP8[$921>>0]|0;
       $923 = $922&255;
       $924 = $num_bits;
       $925 = $923 << $924;
       $926 = $pIn_buf_cur;
       $927 = ((($926)) + 1|0);
       $928 = HEAP8[$927>>0]|0;
       $929 = $928&255;
       $930 = $num_bits;
       $931 = (($930) + 8)|0;
       $932 = $929 << $931;
       $933 = $925 | $932;
       $934 = $bit_buf;
       $935 = $934 | $933;
       $bit_buf = $935;
       $936 = $pIn_buf_cur;
       $937 = ((($936)) + 2|0);
       $pIn_buf_cur = $937;
       $938 = $num_bits;
       $939 = (($938) + 16)|0;
       $num_bits = $939;
       label = 191;
       continue L244;
      }
      else if ((label|0) == 260) {
       label = 0;
       $1375 = $counter;
       $1376 = $1375 & 511;
       $counter = $1376;
       $1377 = ($1376|0)==(256);
       if ($1377) {
        label = 319;
        continue L244;
       }
       $1378 = $counter;
       $1379 = (($1378) - 257)|0;
       $1380 = (296312 + ($1379<<2)|0);
       $1381 = HEAP32[$1380>>2]|0;
       $num_extra = $1381;
       $1382 = $counter;
       $1383 = (($1382) - 257)|0;
       $1384 = (296436 + ($1383<<2)|0);
       $1385 = HEAP32[$1384>>2]|0;
       $counter = $1385;
       $1386 = $num_extra;
       $1387 = ($1386|0)!=(0);
       if ($1387) {
        $1388 = $num_bits;
        $1389 = $num_extra;
        $1390 = ($1388>>>0)<($1389>>>0);
        if ($1390) {
         label = 263;
         continue L244;
        } else {
         label = 271;
         continue L244;
        }
       }
      }
      else if ((label|0) == 306) {
       label = 0;
       $1621 = $pOut_buf_cur;
       $1622 = $4;
       $1623 = $1621;
       $1624 = $1622;
       $1625 = (($1623) - ($1624))|0;
       $dist_from_out_buf_start = $1625;
       $1626 = $dist;
       $1627 = $dist_from_out_buf_start;
       $1628 = ($1626>>>0)>($1627>>>0);
       if ($1628) {
        $1629 = $7;
        $1630 = $1629 & 4;
        $1631 = ($1630|0)!=(0);
        if ($1631) {
         label = 308;
         continue L74;
        }
       }
       $1633 = $4;
       $1634 = $dist_from_out_buf_start;
       $1635 = $dist;
       $1636 = (($1634) - ($1635))|0;
       $1637 = $out_buf_size_mask;
       $1638 = $1636 & $1637;
       $1639 = (($1633) + ($1638)|0);
       $pSrc = $1639;
       $1640 = $pOut_buf_cur;
       $1641 = $pSrc;
       $1642 = ($1640>>>0)>($1641>>>0);
       $1643 = $pOut_buf_cur;
       $1644 = $pSrc;
       $1645 = $1642 ? $1643 : $1644;
       $1646 = $counter;
       $1647 = (($1645) + ($1646)|0);
       $1648 = $pOut_buf_end;
       $1649 = ($1647>>>0)>($1648>>>0);
       if ($1649) {
        label = 310;
        continue L244;
       }
       while(1) {
        $1668 = $pSrc;
        $1669 = HEAP8[$1668>>0]|0;
        $1670 = $pOut_buf_cur;
        HEAP8[$1670>>0] = $1669;
        $1671 = $pSrc;
        $1672 = ((($1671)) + 1|0);
        $1673 = HEAP8[$1672>>0]|0;
        $1674 = $pOut_buf_cur;
        $1675 = ((($1674)) + 1|0);
        HEAP8[$1675>>0] = $1673;
        $1676 = $pSrc;
        $1677 = ((($1676)) + 2|0);
        $1678 = HEAP8[$1677>>0]|0;
        $1679 = $pOut_buf_cur;
        $1680 = ((($1679)) + 2|0);
        HEAP8[$1680>>0] = $1678;
        $1681 = $pOut_buf_cur;
        $1682 = ((($1681)) + 3|0);
        $pOut_buf_cur = $1682;
        $1683 = $pSrc;
        $1684 = ((($1683)) + 3|0);
        $pSrc = $1684;
        $1685 = $counter;
        $1686 = (($1685) - 3)|0;
        $counter = $1686;
        $1687 = ($1686|0)>(2);
        if (!($1687)) {
         break;
        }
       }
       $1688 = $counter;
       $1689 = ($1688|0)>(0);
       if (!($1689)) {
        label = 215;
        continue L244;
       }
       $1690 = $pSrc;
       $1691 = HEAP8[$1690>>0]|0;
       $1692 = $pOut_buf_cur;
       HEAP8[$1692>>0] = $1691;
       $1693 = $counter;
       $1694 = ($1693|0)>(1);
       if ($1694) {
        $1695 = $pSrc;
        $1696 = ((($1695)) + 1|0);
        $1697 = HEAP8[$1696>>0]|0;
        $1698 = $pOut_buf_cur;
        $1699 = ((($1698)) + 1|0);
        HEAP8[$1699>>0] = $1697;
       }
       $1700 = $counter;
       $1701 = $pOut_buf_cur;
       $1702 = (($1701) + ($1700)|0);
       $pOut_buf_cur = $1702;
       label = 215;
       continue L244;
      }
     } while(0);
     if ((label|0) == 214) {
      label = 0;
      $1095 = $1;
      $1096 = ((($1095)) + 24|0);
      $1097 = HEAP32[$1096>>2]|0;
      $1098 = (($1097) + -1)|0;
      HEAP32[$1096>>2] = $1098;
      label = 140;
      continue;
     }
     $1433 = $num_bits;
     $1434 = ($1433>>>0)<(15);
     if (!($1434)) {
      label = 291;
      continue;
     }
     $1435 = $pIn_buf_end;
     $1436 = $pIn_buf_cur;
     $1437 = $1435;
     $1438 = $1436;
     $1439 = (($1437) - ($1438))|0;
     $1440 = ($1439|0)<(2);
     if ($1440) {
      label = 274;
      continue;
     }
     $1511 = $pIn_buf_cur;
     $1512 = HEAP8[$1511>>0]|0;
     $1513 = $1512&255;
     $1514 = $num_bits;
     $1515 = $1513 << $1514;
     $1516 = $pIn_buf_cur;
     $1517 = ((($1516)) + 1|0);
     $1518 = HEAP8[$1517>>0]|0;
     $1519 = $1518&255;
     $1520 = $num_bits;
     $1521 = (($1520) + 8)|0;
     $1522 = $1519 << $1521;
     $1523 = $1515 | $1522;
     $1524 = $bit_buf;
     $1525 = $1524 | $1523;
     $bit_buf = $1525;
     $1526 = $pIn_buf_cur;
     $1527 = ((($1526)) + 2|0);
     $pIn_buf_cur = $1527;
     $1528 = $num_bits;
     $1529 = (($1528) + 16)|0;
     $num_bits = $1529;
     label = 291;
    }
    switch (label|0) {
     case 124: {
      label = 0;
      $544 = $pIn_buf_cur;
      $545 = ((($544)) + 1|0);
      $pIn_buf_cur = $545;
      $546 = HEAP8[$544>>0]|0;
      $547 = $546&255;
      $c4 = $547;
      label = 125;
      continue L74;
      break;
     }
     case 136: {
      label = 0;
      $621 = $pIn_buf_cur;
      $622 = ((($621)) + 1|0);
      $pIn_buf_cur = $622;
      $623 = HEAP8[$621>>0]|0;
      $624 = $623&255;
      $c5 = $624;
      label = 137;
      continue L74;
      break;
     }
     case 182: {
      label = 0;
      $894 = $pIn_buf_cur;
      $895 = $pIn_buf_end;
      $896 = ($894>>>0)>=($895>>>0);
      if ($896) {
       label = 183;
       continue L74;
      }
      $908 = $pIn_buf_cur;
      $909 = ((($908)) + 1|0);
      $pIn_buf_cur = $909;
      $910 = HEAP8[$908>>0]|0;
      $911 = $910&255;
      $c8 = $911;
      label = 189;
      continue L74;
      break;
     }
     case 206: {
      label = 0;
      $1013 = $pIn_buf_cur;
      $1014 = ((($1013)) + 1|0);
      $pIn_buf_cur = $1014;
      $1015 = HEAP8[$1013>>0]|0;
      $1016 = $1015&255;
      $c9 = $1016;
      label = 207;
      continue L74;
      break;
     }
     case 227: {
      label = 0;
      $1160 = $pIn_buf_cur;
      $1161 = $pIn_buf_end;
      $1162 = ($1160>>>0)>=($1161>>>0);
      if ($1162) {
       label = 228;
       continue L74;
      }
      $1174 = $pIn_buf_cur;
      $1175 = ((($1174)) + 1|0);
      $pIn_buf_cur = $1175;
      $1176 = HEAP8[$1174>>0]|0;
      $1177 = $1176&255;
      $c12 = $1177;
      label = 234;
      continue L74;
      break;
     }
     case 269: {
      label = 0;
      $1405 = $pIn_buf_cur;
      $1406 = ((($1405)) + 1|0);
      $pIn_buf_cur = $1406;
      $1407 = HEAP8[$1405>>0]|0;
      $1408 = $1407&255;
      $c14 = $1408;
      label = 270;
      continue L74;
      break;
     }
     case 282: {
      label = 0;
      $1484 = $pIn_buf_cur;
      $1485 = $pIn_buf_end;
      $1486 = ($1484>>>0)>=($1485>>>0);
      if ($1486) {
       label = 283;
       continue L74;
      }
      $1498 = $pIn_buf_cur;
      $1499 = ((($1498)) + 1|0);
      $pIn_buf_cur = $1499;
      $1500 = HEAP8[$1498>>0]|0;
      $1501 = $1500&255;
      $c17 = $1501;
      label = 289;
      continue L74;
      break;
     }
     case 303: {
      label = 0;
      $1593 = $pIn_buf_cur;
      $1594 = ((($1593)) + 1|0);
      $pIn_buf_cur = $1594;
      $1595 = HEAP8[$1593>>0]|0;
      $1596 = $1595&255;
      $c19 = $1596;
      label = 304;
      continue L74;
      break;
     }
     case 328: {
      label = 0;
      $1730 = $pIn_buf_cur;
      $1731 = ((($1730)) + 1|0);
      $pIn_buf_cur = $1731;
      $1732 = HEAP8[$1730>>0]|0;
      $1733 = $1732&255;
      $c20 = $1733;
      label = 329;
      continue L74;
      break;
     }
     case 340: {
      label = 0;
      $1773 = $pIn_buf_cur;
      $1774 = ((($1773)) + 1|0);
      $pIn_buf_cur = $1774;
      $1775 = HEAP8[$1773>>0]|0;
      $1776 = $1775&255;
      $c22 = $1776;
      label = 341;
      continue L74;
      break;
     }
     case 343: {
      label = 0;
      $1792 = $pIn_buf_cur;
      $1793 = $pIn_buf_end;
      $1794 = ($1792>>>0)>=($1793>>>0);
      if ($1794) {
       label = 344;
       continue L74;
      }
      $1806 = $pIn_buf_cur;
      $1807 = ((($1806)) + 1|0);
      $pIn_buf_cur = $1807;
      $1808 = HEAP8[$1806>>0]|0;
      $1809 = $1808&255;
      $s21 = $1809;
      label = 350;
      continue L74;
      break;
     }
    }
   }
   if ((label|0) == 353) {
    $1856 = $5;
    $ptr = $1856;
    $1857 = $6;
    $1858 = HEAP32[$1857>>2]|0;
    $buf_len = $1858;
    $1859 = $1;
    $1860 = ((($1859)) + 28|0);
    $1861 = HEAP32[$1860>>2]|0;
    $1862 = $1861 & 65535;
    $s1 = $1862;
    $1863 = $1;
    $1864 = ((($1863)) + 28|0);
    $1865 = HEAP32[$1864>>2]|0;
    $1866 = $1865 >>> 16;
    $s2 = $1866;
    $1867 = $buf_len;
    $1868 = (($1867>>>0) % 5552)&-1;
    $block_len = $1868;
    while(1) {
     $1869 = $buf_len;
     $1870 = ($1869|0)!=(0);
     if (!($1870)) {
      break;
     }
     $i23 = 0;
     while(1) {
      $1871 = $i23;
      $1872 = (($1871) + 7)|0;
      $1873 = $block_len;
      $1874 = ($1872>>>0)<($1873>>>0);
      if (!($1874)) {
       break;
      }
      $1875 = $ptr;
      $1876 = HEAP8[$1875>>0]|0;
      $1877 = $1876&255;
      $1878 = $s1;
      $1879 = (($1878) + ($1877))|0;
      $s1 = $1879;
      $1880 = $s1;
      $1881 = $s2;
      $1882 = (($1881) + ($1880))|0;
      $s2 = $1882;
      $1883 = $ptr;
      $1884 = ((($1883)) + 1|0);
      $1885 = HEAP8[$1884>>0]|0;
      $1886 = $1885&255;
      $1887 = $s1;
      $1888 = (($1887) + ($1886))|0;
      $s1 = $1888;
      $1889 = $s1;
      $1890 = $s2;
      $1891 = (($1890) + ($1889))|0;
      $s2 = $1891;
      $1892 = $ptr;
      $1893 = ((($1892)) + 2|0);
      $1894 = HEAP8[$1893>>0]|0;
      $1895 = $1894&255;
      $1896 = $s1;
      $1897 = (($1896) + ($1895))|0;
      $s1 = $1897;
      $1898 = $s1;
      $1899 = $s2;
      $1900 = (($1899) + ($1898))|0;
      $s2 = $1900;
      $1901 = $ptr;
      $1902 = ((($1901)) + 3|0);
      $1903 = HEAP8[$1902>>0]|0;
      $1904 = $1903&255;
      $1905 = $s1;
      $1906 = (($1905) + ($1904))|0;
      $s1 = $1906;
      $1907 = $s1;
      $1908 = $s2;
      $1909 = (($1908) + ($1907))|0;
      $s2 = $1909;
      $1910 = $ptr;
      $1911 = ((($1910)) + 4|0);
      $1912 = HEAP8[$1911>>0]|0;
      $1913 = $1912&255;
      $1914 = $s1;
      $1915 = (($1914) + ($1913))|0;
      $s1 = $1915;
      $1916 = $s1;
      $1917 = $s2;
      $1918 = (($1917) + ($1916))|0;
      $s2 = $1918;
      $1919 = $ptr;
      $1920 = ((($1919)) + 5|0);
      $1921 = HEAP8[$1920>>0]|0;
      $1922 = $1921&255;
      $1923 = $s1;
      $1924 = (($1923) + ($1922))|0;
      $s1 = $1924;
      $1925 = $s1;
      $1926 = $s2;
      $1927 = (($1926) + ($1925))|0;
      $s2 = $1927;
      $1928 = $ptr;
      $1929 = ((($1928)) + 6|0);
      $1930 = HEAP8[$1929>>0]|0;
      $1931 = $1930&255;
      $1932 = $s1;
      $1933 = (($1932) + ($1931))|0;
      $s1 = $1933;
      $1934 = $s1;
      $1935 = $s2;
      $1936 = (($1935) + ($1934))|0;
      $s2 = $1936;
      $1937 = $ptr;
      $1938 = ((($1937)) + 7|0);
      $1939 = HEAP8[$1938>>0]|0;
      $1940 = $1939&255;
      $1941 = $s1;
      $1942 = (($1941) + ($1940))|0;
      $s1 = $1942;
      $1943 = $s1;
      $1944 = $s2;
      $1945 = (($1944) + ($1943))|0;
      $s2 = $1945;
      $1946 = $i23;
      $1947 = (($1946) + 8)|0;
      $i23 = $1947;
      $1948 = $ptr;
      $1949 = ((($1948)) + 8|0);
      $ptr = $1949;
     }
     while(1) {
      $1950 = $i23;
      $1951 = $block_len;
      $1952 = ($1950>>>0)<($1951>>>0);
      if (!($1952)) {
       break;
      }
      $1953 = $ptr;
      $1954 = ((($1953)) + 1|0);
      $ptr = $1954;
      $1955 = HEAP8[$1953>>0]|0;
      $1956 = $1955&255;
      $1957 = $s1;
      $1958 = (($1957) + ($1956))|0;
      $s1 = $1958;
      $1959 = $s1;
      $1960 = $s2;
      $1961 = (($1960) + ($1959))|0;
      $s2 = $1961;
      $1962 = $i23;
      $1963 = (($1962) + 1)|0;
      $i23 = $1963;
     }
     $1964 = $s1;
     $1965 = (($1964>>>0) % 65521)&-1;
     $s1 = $1965;
     $1966 = $s2;
     $1967 = (($1966>>>0) % 65521)&-1;
     $s2 = $1967;
     $1968 = $block_len;
     $1969 = $buf_len;
     $1970 = (($1969) - ($1968))|0;
     $buf_len = $1970;
     $block_len = 5552;
    }
    $1971 = $s2;
    $1972 = $1971 << 16;
    $1973 = $s1;
    $1974 = (($1972) + ($1973))|0;
    $1975 = $1;
    $1976 = ((($1975)) + 28|0);
    HEAP32[$1976>>2] = $1974;
    $1977 = $status;
    $1978 = ($1977|0)==(0);
    if ($1978) {
     $1979 = $7;
     $1980 = $1979 & 1;
     $1981 = ($1980|0)!=(0);
     if ($1981) {
      $1982 = $1;
      $1983 = ((($1982)) + 28|0);
      $1984 = HEAP32[$1983>>2]|0;
      $1985 = $1;
      $1986 = ((($1985)) + 16|0);
      $1987 = HEAP32[$1986>>2]|0;
      $1988 = ($1984|0)!=($1987|0);
      if ($1988) {
       $status = -2;
      }
     }
    }
   }
   $1989 = $status;
   $0 = $1989;
   $1990 = $0;
   STACKTOP = sp;return ($1990|0);
  }
 }
 $39 = $6;
 HEAP32[$39>>2] = 0;
 $40 = $3;
 HEAP32[$40>>2] = 0;
 $0 = -3;
 $1990 = $0;
 STACKTOP = sp;return ($1990|0);
}
function _mz_inflateEnd($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pStream;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $0 = -2;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = $1;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = $1;
  $12 = ((($11)) + 28|0);
  HEAP32[$12>>2] = 0;
 }
 $0 = 0;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _retro_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[297496>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$4 & 1023]($0);
 }
 $5 = (__Znwj(3848)|0);
 __THREW__ = 0;
 invoke_vi(326,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($5);
  ___resumeException($8|0);
  // unreachable;
 } else {
  HEAP32[297496>>2] = $5;
  return;
 }
}
function _retro_deinit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[297496>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[297496>>2] = 0;
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$4 & 1023]($0);
 HEAP32[297496>>2] = 0;
 return;
}
function _retro_api_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _retro_set_controller_port_device($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _retro_get_system_info($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$info>>2]=0|0;HEAP32[$info+4>>2]=0|0;HEAP32[$info+8>>2]=0|0;HEAP32[$info+12>>2]=0|0;
 HEAP32[$info>>2] = 778250;
 $0 = ((($info)) + 4|0);
 HEAP32[$0>>2] = 778259;
 $1 = ((($info)) + 12|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($info)) + 8|0);
 HEAP32[$2>>2] = 778262;
 return;
}
function _retro_get_system_av_info($info) {
 $info = $info|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 24|0);
 ;HEAP32[$0>>2]=HEAP32[264344>>2]|0;HEAP32[$0+4>>2]=HEAP32[264344+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[264344+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[264344+12>>2]|0;
 ;HEAP32[$info>>2]=HEAP32[297500>>2]|0;HEAP32[$info+4>>2]=HEAP32[297500+4>>2]|0;HEAP32[$info+8>>2]=HEAP32[297500+8>>2]|0;HEAP32[$info+12>>2]=HEAP32[297500+12>>2]|0;HEAP32[$info+16>>2]=HEAP32[297500+16>>2]|0;
 return;
}
function _retro_set_environment($cb) {
 $cb = $cb|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[297520>>2] = $cb;
 return;
}
function _retro_set_audio_sample($cb) {
 $cb = $cb|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[297524>>2] = $cb;
 return;
}
function _retro_set_audio_sample_batch($cb) {
 $cb = $cb|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[297528>>2] = $cb;
 return;
}
function _retro_set_input_poll($cb) {
 $cb = $cb|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[297532>>2] = $cb;
 return;
}
function _retro_set_input_state($cb) {
 $cb = $cb|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[297536>>2] = $cb;
 return;
}
function _retro_set_video_refresh($cb) {
 $cb = $cb|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[297540>>2] = $cb;
 return;
}
function _retro_reset() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[297496>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viii[$4 & 1023]($0,1,0);
 return;
}
function _retro_run() {
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$5$i = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond6 = 0, $exitcond7 = 0, $h$03 = 0, $i$01 = 0, $in_pixels$05 = 0, $not$$i = 0, $out_pixels$04 = 0, $out_samples = 0, $p$02$i = 0, $pads = 0, $samples = 0, $w$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pads = sp;
 $samples = sp + 8200|0;
 $out_samples = sp + 8|0;
 $0 = $pads;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = ((($pads)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$pads>>2] = 0;
 $5 = HEAP32[297532>>2]|0;
 FUNCTION_TABLE_v[$5 & 511]();
 $10 = 0;$p$02$i = 0;
 while(1) {
  $6 = (($pads) + ($p$02$i<<2)|0);
  $7 = HEAP32[297536>>2]|0;
  $8 = (FUNCTION_TABLE_iiiii[$7 & 255]($p$02$i,1,0,8)|0);
  $not$$i = ($8<<16>>16)!=(0);
  $$$i = $not$$i&1;
  $9 = $$$i | $10;
  $11 = HEAP32[297536>>2]|0;
  $12 = (FUNCTION_TABLE_iiiii[$11 & 255]($p$02$i,1,0,0)|0);
  $13 = ($12<<16>>16)==(0);
  $14 = $13 ? 0 : 2;
  $15 = $14 | $9;
  $16 = HEAP32[297536>>2]|0;
  $17 = (FUNCTION_TABLE_iiiii[$16 & 255]($p$02$i,1,0,2)|0);
  $18 = ($17<<16>>16)==(0);
  $$3$i = $18 ? 0 : 4;
  $19 = $$3$i | $15;
  $20 = HEAP32[297536>>2]|0;
  $21 = (FUNCTION_TABLE_iiiii[$20 & 255]($p$02$i,1,0,3)|0);
  $22 = ($21<<16>>16)==(0);
  $23 = $22 ? 0 : 8;
  $24 = $23 | $19;
  $25 = HEAP32[297536>>2]|0;
  $26 = (FUNCTION_TABLE_iiiii[$25 & 255]($p$02$i,1,0,4)|0);
  $27 = ($26<<16>>16)==(0);
  $$4$i = $27 ? 0 : 16;
  $28 = $$4$i | $24;
  $29 = HEAP32[297536>>2]|0;
  $30 = (FUNCTION_TABLE_iiiii[$29 & 255]($p$02$i,1,0,5)|0);
  $31 = ($30<<16>>16)==(0);
  $32 = $31 ? 0 : 32;
  $33 = $32 | $28;
  $34 = HEAP32[297536>>2]|0;
  $35 = (FUNCTION_TABLE_iiiii[$34 & 255]($p$02$i,1,0,6)|0);
  $36 = ($35<<16>>16)==(0);
  $$5$i = $36 ? 0 : 64;
  $37 = $$5$i | $33;
  $38 = HEAP32[297536>>2]|0;
  $39 = (FUNCTION_TABLE_iiiii[$38 & 255]($p$02$i,1,0,7)|0);
  $40 = ($39<<16>>16)==(0);
  $41 = $40 ? 0 : 128;
  $42 = $41 | $37;
  HEAP32[$6>>2] = $42;
  $43 = (($p$02$i) + 1)|0;
  $exitcond$i = ($43|0)==(2);
  if ($exitcond$i) {
   break;
  }
  $$phi$trans$insert = (($pads) + ($43<<2)|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $10 = $$pre;$p$02$i = $43;
 }
 $44 = HEAP32[297496>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$pads>>2]|0;
 $49 = ((($pads)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 (FUNCTION_TABLE_iiii[$47 & 1023]($44,$48,$50)|0);
 $51 = HEAP32[297496>>2]|0;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($53)) + 24|0);
 $h$03 = 0;$in_pixels$05 = $55;$out_pixels$04 = 297544;
 while(1) {
  $w$02 = 0;
  while(1) {
   $57 = (($in_pixels$05) + ($w$02)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (((($53)) + 36|0) + ($59<<1)|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61 << 16 >> 16;
   $63 = (776454 + (($62*3)|0)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = (((776454 + (($62*3)|0)|0)) + 1|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = (((776454 + (($62*3)|0)|0)) + 2|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $65 << 16;
   $73 = $68 << 8;
   $74 = $73 | $72;
   $75 = $74 | $71;
   $76 = (($out_pixels$04) + ($w$02<<2)|0);
   HEAP32[$76>>2] = $75;
   $77 = (($w$02) + 1)|0;
   $exitcond6 = ($77|0)==(256);
   if ($exitcond6) {
    break;
   } else {
    $w$02 = $77;
   }
  }
  $78 = (($h$03) + 1)|0;
  $79 = HEAP32[$56>>2]|0;
  $80 = (($in_pixels$05) + ($79)|0);
  $81 = ((($out_pixels$04)) + 1024|0);
  $exitcond7 = ($78|0)==(240);
  if ($exitcond7) {
   break;
  } else {
   $h$03 = $78;$in_pixels$05 = $80;$out_pixels$04 = $81;
  }
 }
 $82 = HEAP32[297540>>2]|0;
 FUNCTION_TABLE_viiii[$82 & 1023](297544,256,240,1024);
 $83 = HEAP32[297496>>2]|0;
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (FUNCTION_TABLE_iiii[$86 & 1023]($83,$samples,2048)|0);
 $88 = ($87|0)>(0);
 if ($88) {
  $i$01 = 0;
 } else {
  $96 = HEAP32[297528>>2]|0;
  (FUNCTION_TABLE_iii[$96 & 511]($out_samples,$87)|0);
  STACKTOP = sp;return;
 }
 while(1) {
  $89 = (($samples) + ($i$01<<1)|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $i$01 << 1;
  $92 = $91 | 1;
  $93 = (($out_samples) + ($92<<1)|0);
  HEAP16[$93>>1] = $90;
  $94 = (($out_samples) + ($91<<1)|0);
  HEAP16[$94>>1] = $90;
  $95 = (($i$01) + 1)|0;
  $exitcond = ($95|0)==($87|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $95;
  }
 }
 $96 = HEAP32[297528>>2]|0;
 (FUNCTION_TABLE_iii[$96 & 511]($out_samples,$87)|0);
 STACKTOP = sp;return;
}
function _retro_load_game($info) {
 $info = $info|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $desc = 0, $fmt = 0, $reader = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $desc = sp + 44|0;
 $fmt = sp + 40|0;
 $reader = sp;
 $0 = sp + 32|0;
 $1 = HEAP32[297496>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 _memcpy(($desc|0),(543304|0),660)|0;
 $3 = HEAP32[297520>>2]|0;
 (FUNCTION_TABLE_iii[$3 & 511](11,$desc)|0);
 HEAP32[$fmt>>2] = 1;
 $4 = HEAP32[297520>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 511](10,$fmt)|0);
 do {
  if ($5) {
   $7 = HEAP32[297496>>2]|0;
   (__ZN7Nes_Emu15set_sample_rateEl($7,44100)|0);
   $8 = HEAP32[297496>>2]|0;
   __ZN7Nes_Emu13set_equalizerERKNS_11equalizer_tE($8,264176);
   $9 = HEAP32[297496>>2]|0;
   __ZN7Nes_Emu17set_palette_rangeEii($9,0,256);
   $10 = HEAP32[297496>>2]|0;
   $11 = ((($10)) + 88|0);
   HEAP32[$11>>2] = (778550);
   $12 = ((($10)) + 3404|0);
   HEAP32[$12>>2] = 256;
   $13 = ((($info)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($info)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   __ZN15Mem_File_ReaderC2EPKvl($reader,$14,$16);
   $17 = HEAP32[297496>>2]|0;
   HEAP32[$0>>2] = $reader;
   $18 = ((($0)) + 4|0);
   HEAP32[$18>>2] = 0;
   __THREW__ = 0;
   $19 = (invoke_iii(327,($17|0),($0|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $27 = ___cxa_find_matching_catch()|0;
    $28 = tempRet0;
    __THREW__ = 0;
    invoke_vi(328,($0|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     ___clang_call_terminate($31);
     // unreachable;
    } else {
     $$0 = $28;$$01 = $27;
     ___resumeException($$01|0);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(328,($0|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    $24 = ($19|0)==(0|0);
    $$02 = $24;
    break;
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$0 = $26;$$01 = $25;
   ___resumeException($$01|0);
   // unreachable;
  } else {
   $6 = HEAP32[544648>>2]|0;
   (_fwrite(778266,27,1,$6)|0);
   $$02 = 0;
  }
 } while(0);
 $$1 = $$02;
 STACKTOP = sp;return ($$1|0);
}
function _retro_unload_game() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[297496>>2]|0;
 __ZN7Nes_Emu5closeEv($0);
 return;
}
function _retro_get_region() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _retro_load_game_special($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _retro_serialize_size() {
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $writer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $writer = sp + 8|0;
 $0 = sp;
 __ZN10Mem_WriterC2Ev($writer);
 $1 = HEAP32[297496>>2]|0;
 HEAP32[$0>>2] = $writer;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_iii(329,($1|0),($0|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   __THREW__ = 0;
   invoke_vi(330,($0|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $19 = ___cxa_find_matching_catch(0|0)|0;
    $20 = tempRet0;
    ___clang_call_terminate($19);
    // unreachable;
   } else {
    $$0 = $14;$$01 = $13;
   }
  } else {
   __THREW__ = 0;
   invoke_vi(330,($0|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $$0 = $12;$$01 = $11;
    break;
   } else {
    $8 = ($3|0)==(0|0);
    $9 = ((($writer)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $$02 = $8 ? $10 : 0;
    __ZN10Mem_WriterD2Ev($writer);
    STACKTOP = sp;return ($$02|0);
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(95,($writer|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
 return (0)|0;
}
function _retro_serialize($data,$size) {
 $data = $data|0;
 $size = $size|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $writer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $writer = sp + 8|0;
 $0 = sp;
 __ZN10Mem_WriterC2EPvli($writer,$data,$size,0);
 $1 = HEAP32[297496>>2]|0;
 HEAP32[$0>>2] = $writer;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_iii(329,($1|0),($0|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   __THREW__ = 0;
   invoke_vi(330,($0|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $17 = ___cxa_find_matching_catch(0|0)|0;
    $18 = tempRet0;
    ___clang_call_terminate($17);
    // unreachable;
   } else {
    $$0 = $11;$$01 = $12;
   }
  } else {
   __THREW__ = 0;
   invoke_vi(330,($0|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$0 = $9;$$01 = $10;
    break;
   } else {
    $8 = ($3|0)==(0|0);
    __ZN10Mem_WriterD2Ev($writer);
    STACKTOP = sp;return ($8|0);
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(95,($writer|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
 return (0)|0;
}
function _retro_unserialize($data,$size) {
 $data = $data|0;
 $size = $size|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reader = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $reader = sp;
 $0 = sp + 32|0;
 __ZN15Mem_File_ReaderC2EPKvl($reader,$data,$size);
 $1 = HEAP32[297496>>2]|0;
 HEAP32[$0>>2] = $reader;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_iii(331,($1|0),($0|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __THREW__ = 0;
  invoke_vi(328,($0|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $15 = ___cxa_find_matching_catch(0|0)|0;
   $16 = tempRet0;
   ___clang_call_terminate($15);
   // unreachable;
  } else {
   $$0 = $11;$$01 = $12;
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(328,($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ($3|0)==(0|0);
  STACKTOP = sp;return ($8|0);
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 $$0 = $9;$$01 = $10;
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function _retro_get_memory_data($id) {
 $id = $id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($id|0) {
 case 0:  {
  $0 = HEAP32[297496>>2]|0;
  $1 = ((($0)) + 2876|0);
  $2 = HEAP32[$1>>2]|0;
  $$0 = $2;
  break;
 }
 case 2:  {
  $3 = HEAP32[297496>>2]|0;
  $4 = ((($3)) + 828|0);
  $$0 = $4;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _retro_get_memory_size($id) {
 $id = $id|0;
 var $switch$select = 0, $switch$select2 = 0, $switch$selectcmp = 0, $switch$selectcmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$selectcmp = ($id|0)==(2);
 $switch$select = $switch$selectcmp ? 2048 : 0;
 $switch$selectcmp1 = ($id|0)==(0);
 $switch$select2 = $switch$selectcmp1 ? 8192 : $switch$select;
 return ($switch$select2|0);
}
function _retro_cheat_reset() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _retro_cheat_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN15Std_File_WriterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296824);
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 (_fclose($1)|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN15Std_File_WriterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296824);
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 (_fclose($1)|0);
 __ZdlPv($this);
 return;
}
function __ZN15Std_File_Writer5writeEPKvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fwrite($p,1,$s,$1)|0);
 $3 = ($2|0)==($s|0);
 $$ = $3 ? 0 : 839768;
 return ($$|0);
}
function __ZN10Mem_WriterC2EPvli($this,$p,$s,$b) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296844);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $p;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = $s;
 $3 = ($b|0)!=(0);
 $4 = $3 ? 2 : 1;
 $5 = ((($this)) + 16|0);
 HEAP32[$5>>2] = $4;
 return;
}
function __ZN10Mem_WriterC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296844);
 $0 = ((($this)) + 4|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return;
}
function __ZN10Mem_WriterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296844);
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 return;
}
function __ZN10Mem_WriterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296844);
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  __ZdlPv($this);
  return;
 }
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 __ZdlPv($this);
 return;
}
function __ZN10Mem_Writer5writeEPKvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $$0 = 0, $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4|0)<($s|0);
 L1: do {
  if ($5) {
   $6 = ((($this)) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   switch ($7|0) {
   case 2:  {
    $$01 = $4;$19 = $3;
    break L1;
    break;
   }
   case 1:  {
    $$0 = 839791;
    return ($$0|0);
    break;
   }
   default: {
   }
   }
   $8 = (($3) + ($s))|0;
   $9 = $8 >> 1;
   $10 = (($8) + 2048)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($this)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_realloc($13,$11)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = 839862;
    return ($$0|0);
   } else {
    HEAP32[$12>>2] = $14;
    HEAP32[$0>>2] = $11;
    $$pre = HEAP32[$2>>2]|0;
    $$01 = $s;$19 = $$pre;
    break;
   }
  } else {
   $$01 = $s;$19 = $3;
  }
 } while(0);
 $16 = ((($this)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($19)|0);
 _memcpy(($18|0),($p|0),($$01|0))|0;
 $20 = HEAP32[$2>>2]|0;
 $21 = (($20) + ($$01))|0;
 HEAP32[$2>>2] = $21;
 $$0 = 0;
 return ($$0|0);
}
function __ZN16Auto_File_Reader4openEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_malloc(32)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 839862;
  return ($$0|0);
 }
 __THREW__ = 0;
 invoke_vi(332,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  _free($2);
  ___resumeException($6|0);
  // unreachable;
 }
 HEAP32[$this>>2] = $2;
 $8 = ((($this)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN15Std_File_Reader4openEPKc($2,$9)|0);
 $$0 = $10;
 return ($$0|0);
}
function __ZN16Auto_File_ReaderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($3);
 return;
}
function __ZN16Auto_File_Writer9open_compEi($this,$level) {
 $this = $this|0;
 $level = $level|0;
 var $$$i$i = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (__Znwj(8)|0);
 HEAP32[$2>>2] = (296824);
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$this>>2] = $2;
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_fopen($5,839734)|0);
 HEAP32[$3>>2] = $6;
 $7 = ($6|0)==(0|0);
 $$$i$i = $7 ? 839737 : 0;
 $$0 = $$$i$i;
 return ($$0|0);
}
function __ZN16Auto_File_WriterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($3);
 return;
}
function __ZNK7Nes_Apu10save_stateEP11apu_state_t($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = $i$01 >> 2;
  $1 = $i$01 & 3;
  $2 = (($this) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($1)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = (($state) + ($i$01)|0);
  HEAP8[$6>>0] = $5;
  $7 = (($i$01) + 1)|0;
  $exitcond = ($7|0)==(20);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $7;
  }
 }
 $8 = ((($this)) + 1336|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9&255;
 $11 = ((($state)) + 17|0);
 HEAP8[$11>>0] = $10;
 $12 = ((($this)) + 1940|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13&255;
 $15 = ((($state)) + 20|0);
 HEAP8[$15>>0] = $14;
 $16 = ((($this)) + 1944|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&255;
 $19 = ((($state)) + 21|0);
 HEAP8[$19>>0] = $18;
 $20 = ((($this)) + 1932|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21&65535;
 $23 = ((($state)) + 22|0);
 HEAP16[$23>>1] = $22;
 $24 = ((($this)) + 1936|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25&255;
 $27 = ((($state)) + 24|0);
 HEAP8[$27>>0] = $26;
 $28 = ((($this)) + 1948|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ((($state)) + 25|0);
 HEAP8[$30>>0] = $29;
 $31 = ((($this)) + 48|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&255;
 $34 = ((($state)) + 28|0);
 HEAP8[$34>>0] = $33;
 $35 = ((($this)) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36&255;
 $38 = ((($state)) + 29|0);
 HEAP8[$38>>0] = $37;
 $39 = ((($this)) + 27|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ((($state)) + 30|0);
 HEAP8[$41>>0] = $40;
 $42 = ((($this)) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43&65535;
 $45 = ((($state)) + 26|0);
 HEAP16[$45>>1] = $44;
 $46 = ((($this)) + 32|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47&255;
 $49 = ((($state)) + 31|0);
 HEAP8[$49>>0] = $48;
 $50 = ((($this)) + 52|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51&255;
 $53 = ((($state)) + 32|0);
 HEAP8[$53>>0] = $52;
 $54 = ((($this)) + 56|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55&255;
 $57 = ((($state)) + 33|0);
 HEAP8[$57>>0] = $56;
 $58 = ((($this)) + 25|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = ((($state)) + 34|0);
 HEAP8[$60>>0] = $59;
 $61 = ((($this)) + 92|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62&255;
 $64 = ((($state)) + 38|0);
 HEAP8[$64>>0] = $63;
 $65 = ((($this)) + 88|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66&255;
 $68 = ((($state)) + 39|0);
 HEAP8[$68>>0] = $67;
 $69 = ((($this)) + 71|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ((($state)) + 40|0);
 HEAP8[$71>>0] = $70;
 $72 = ((($this)) + 80|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73&65535;
 $75 = ((($state)) + 36|0);
 HEAP16[$75>>1] = $74;
 $76 = ((($this)) + 76|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77&255;
 $79 = ((($state)) + 41|0);
 HEAP8[$79>>0] = $78;
 $80 = ((($this)) + 96|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81&255;
 $83 = ((($state)) + 42|0);
 HEAP8[$83>>0] = $82;
 $84 = ((($this)) + 100|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85&255;
 $87 = ((($state)) + 43|0);
 HEAP8[$87>>0] = $86;
 $88 = ((($this)) + 69|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = ((($state)) + 44|0);
 HEAP8[$90>>0] = $89;
 $91 = ((($this)) + 720|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92&65535;
 $94 = ((($state)) + 46|0);
 HEAP16[$94>>1] = $93;
 $95 = ((($this)) + 716|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $96&255;
 $98 = ((($state)) + 48|0);
 HEAP8[$98>>0] = $97;
 $99 = ((($this)) + 732|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $100&255;
 $102 = ((($state)) + 50|0);
 HEAP8[$102>>0] = $101;
 $103 = ((($this)) + 711|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ((($state)) + 51|0);
 HEAP8[$105>>0] = $104;
 $106 = ((($this)) + 140|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $107&255;
 $109 = ((($state)) + 54|0);
 HEAP8[$109>>0] = $108;
 $110 = ((($this)) + 136|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111&255;
 $113 = ((($state)) + 55|0);
 HEAP8[$113>>0] = $112;
 $114 = ((($this)) + 119|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = ((($state)) + 56|0);
 HEAP8[$116>>0] = $115;
 $117 = ((($this)) + 128|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $118&65535;
 $120 = ((($state)) + 52|0);
 HEAP16[$120>>1] = $119;
 $121 = ((($this)) + 124|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $122&255;
 $124 = ((($state)) + 57|0);
 HEAP8[$124>>0] = $123;
 $125 = ((($this)) + 144|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $126&65535;
 $128 = ((($state)) + 58|0);
 HEAP16[$128>>1] = $127;
 $129 = ((($this)) + 1304|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = $130&65535;
 $132 = ((($state)) + 60|0);
 HEAP16[$132>>1] = $131;
 $133 = ((($this)) + 1300|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $134&65535;
 $136 = ((($state)) + 62|0);
 HEAP16[$136>>1] = $135;
 $137 = ((($this)) + 1320|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $138&255;
 $140 = ((($state)) + 66|0);
 HEAP8[$140>>0] = $139;
 $141 = ((($this)) + 1324|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $142&255;
 $144 = ((($state)) + 67|0);
 HEAP8[$144>>0] = $143;
 $145 = ((($this)) + 1328|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $146&255;
 $148 = ((($state)) + 68|0);
 HEAP8[$148>>0] = $147;
 $149 = ((($this)) + 1332|0);
 $150 = HEAP8[$149>>0]|0;
 $151 = ((($state)) + 69|0);
 HEAP8[$151>>0] = $150;
 $152 = ((($this)) + 1333|0);
 $153 = HEAP8[$152>>0]|0;
 $154 = ((($state)) + 70|0);
 HEAP8[$154>>0] = $153;
 $155 = ((($this)) + 1345|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = ((($state)) + 71|0);
 HEAP8[$157>>0] = $156;
 $158 = ((($this)) + 1312|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $159 | 32768;
 $161 = $160&65535;
 $162 = ((($state)) + 64|0);
 HEAP16[$162>>1] = $161;
 return;
}
function __ZN7Nes_Apu10load_stateERK11apu_state_t($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Nes_Apu5resetEbi($this,0,0);
 $0 = ((($state)) + 21|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 __ZN7Nes_Apu14write_registerElji($this,0,16407,$2);
 $3 = ((($state)) + 20|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 __ZN7Nes_Apu14write_registerElji($this,0,16405,$5);
 $6 = HEAP8[$3>>0]|0;
 $7 = $6&255;
 $8 = ((($this)) + 1940|0);
 HEAP32[$8>>2] = $7;
 $i$01 = 0;
 while(1) {
  $9 = (($state) + ($i$01)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $i$01 >> 2;
  $13 = $i$01 & 3;
  $14 = (($this) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13)|0);
  HEAP8[$16>>0] = $10;
  $17 = (($i$01) + 16384)|0;
  __ZN7Nes_Apu14write_registerElji($this,0,$17,$11);
  $18 = (($i$01) + 1)|0;
  $exitcond = ($18|0)==(20);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $18;
  }
 }
 $19 = ((($state)) + 22|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ((($this)) + 1932|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($state)) + 24|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ((($this)) + 1936|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($state)) + 25|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)!=(0);
 $30 = ((($this)) + 1948|0);
 $31 = $29&1;
 HEAP8[$30>>0] = $31;
 $32 = ((($state)) + 28|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = ((($this)) + 48|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($state)) + 29|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = ((($this)) + 44|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($state)) + 30|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ($41<<24>>24)!=(0);
 $43 = ((($this)) + 27|0);
 $44 = $42&1;
 HEAP8[$43>>0] = $44;
 $45 = ((($state)) + 26|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = ((($this)) + 36|0);
 HEAP32[$48>>2] = $47;
 $49 = ((($state)) + 31|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = ((($this)) + 32|0);
 HEAP32[$52>>2] = $51;
 $53 = ((($state)) + 32|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = ((($this)) + 52|0);
 HEAP32[$56>>2] = $55;
 $57 = ((($state)) + 33|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = ((($this)) + 56|0);
 HEAP32[$60>>2] = $59;
 $61 = ((($state)) + 34|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = ($62<<24>>24)!=(0);
 $64 = ((($this)) + 25|0);
 $65 = $63&1;
 HEAP8[$64>>0] = $65;
 $66 = ((($state)) + 38|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = ((($this)) + 92|0);
 HEAP32[$69>>2] = $68;
 $70 = ((($state)) + 39|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = ((($this)) + 88|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($state)) + 40|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = ($75<<24>>24)!=(0);
 $77 = ((($this)) + 71|0);
 $78 = $76&1;
 HEAP8[$77>>0] = $78;
 $79 = ((($state)) + 36|0);
 $80 = HEAP16[$79>>1]|0;
 $81 = $80&65535;
 $82 = ((($this)) + 80|0);
 HEAP32[$82>>2] = $81;
 $83 = ((($state)) + 41|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = ((($this)) + 76|0);
 HEAP32[$86>>2] = $85;
 $87 = ((($state)) + 42|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = ((($this)) + 96|0);
 HEAP32[$90>>2] = $89;
 $91 = ((($state)) + 43|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = ((($this)) + 100|0);
 HEAP32[$94>>2] = $93;
 $95 = ((($state)) + 44|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = ($96<<24>>24)!=(0);
 $98 = ((($this)) + 69|0);
 $99 = $97&1;
 HEAP8[$98>>0] = $99;
 $100 = ((($state)) + 46|0);
 $101 = HEAP16[$100>>1]|0;
 $102 = $101&65535;
 $103 = ((($this)) + 720|0);
 HEAP32[$103>>2] = $102;
 $104 = ((($state)) + 48|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $105&255;
 $107 = ((($this)) + 716|0);
 HEAP32[$107>>2] = $106;
 $108 = ((($state)) + 50|0);
 $109 = HEAP8[$108>>0]|0;
 $110 = $109&255;
 $111 = ((($this)) + 732|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($state)) + 51|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = ($113<<24>>24)!=(0);
 $115 = ((($this)) + 711|0);
 $116 = $114&1;
 HEAP8[$115>>0] = $116;
 $117 = ((($state)) + 54|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = $118&255;
 $120 = ((($this)) + 140|0);
 HEAP32[$120>>2] = $119;
 $121 = ((($state)) + 55|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122&255;
 $124 = ((($this)) + 136|0);
 HEAP32[$124>>2] = $123;
 $125 = ((($state)) + 56|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = ($126<<24>>24)!=(0);
 $128 = ((($this)) + 119|0);
 $129 = $127&1;
 HEAP8[$128>>0] = $129;
 $130 = ((($state)) + 52|0);
 $131 = HEAP16[$130>>1]|0;
 $132 = $131&65535;
 $133 = ((($this)) + 128|0);
 HEAP32[$133>>2] = $132;
 $134 = ((($state)) + 57|0);
 $135 = HEAP8[$134>>0]|0;
 $136 = $135&255;
 $137 = ((($this)) + 124|0);
 HEAP32[$137>>2] = $136;
 $138 = ((($state)) + 58|0);
 $139 = HEAP16[$138>>1]|0;
 $140 = $139&65535;
 $141 = ((($this)) + 144|0);
 HEAP32[$141>>2] = $140;
 $142 = ((($this)) + 1288|0);
 $143 = ((($state)) + 60|0);
 $144 = HEAP16[$143>>1]|0;
 $145 = $144&65535;
 $146 = ((($this)) + 1304|0);
 HEAP32[$146>>2] = $145;
 $147 = ((($state)) + 62|0);
 $148 = HEAP16[$147>>1]|0;
 $149 = $148&65535;
 $150 = ((($this)) + 1300|0);
 HEAP32[$150>>2] = $149;
 $151 = ((($state)) + 66|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = $152&255;
 $154 = ((($this)) + 1320|0);
 HEAP32[$154>>2] = $153;
 $155 = ((($state)) + 67|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = $156&255;
 $158 = ((($this)) + 1324|0);
 HEAP32[$158>>2] = $157;
 $159 = ((($state)) + 68|0);
 $160 = HEAP8[$159>>0]|0;
 $161 = $160&255;
 $162 = ((($this)) + 1328|0);
 HEAP32[$162>>2] = $161;
 $163 = ((($state)) + 69|0);
 $164 = HEAP8[$163>>0]|0;
 $165 = ($164<<24>>24)!=(0);
 $166 = ((($this)) + 1332|0);
 $167 = $165&1;
 HEAP8[$166>>0] = $167;
 $168 = ((($state)) + 70|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = ($169<<24>>24)!=(0);
 $171 = ((($this)) + 1333|0);
 $172 = $170&1;
 HEAP8[$171>>0] = $172;
 $173 = ((($state)) + 71|0);
 $174 = HEAP8[$173>>0]|0;
 $175 = ($174<<24>>24)!=(0);
 $176 = ((($this)) + 1345|0);
 $177 = $175&1;
 HEAP8[$176>>0] = $177;
 $178 = ((($state)) + 64|0);
 $179 = HEAP16[$178>>1]|0;
 $180 = $179&65535;
 $181 = $180 & 32767;
 $182 = ((($this)) + 1312|0);
 HEAP32[$182>>2] = $181;
 __ZN7Nes_Dmc10recalc_irqEv($142);
 return;
}
function __ZN11Blip_BufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 2147483647;
 $0 = ((($this)) + 4|0);
 $1 = ((($this)) + 32|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;HEAP32[$0+24>>2]=0|0;
 HEAP32[$1>>2] = 16;
 $2 = ((($this)) + 36|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN11Blip_BufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 return;
}
function __ZN11Blip_Buffer5clearEi($this,$entire_buffer) {
 $this = $this|0;
 $entire_buffer = $entire_buffer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ($entire_buffer|0)==(0);
 if ($5) {
  $8 = 72;
 } else {
  $6 = ((($this)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $phitmp = $7 << 2;
  $phitmp1 = (($phitmp) + 72)|0;
  $8 = $phitmp1;
 }
 _memset(($3|0),0,($8|0))|0;
 return;
}
function __ZN11Blip_Buffer15set_sample_rateEli($this,$new_rate,$msec) {
 $this = $this|0;
 $new_rate = $new_rate|0;
 $msec = $msec|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp1$i = 0;
 var $shift$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($msec|0)==(0);
 if ($0) {
  $9 = 65453;
 } else {
  $1 = (($msec) + 1)|0;
  $2 = Math_imul($1, $new_rate)|0;
  $3 = (($2) + 999)|0;
  $4 = ($3|0)<(65453000);
  $5 = (($3|0) / 1000)&-1;
  $$ = $4 ? $5 : 65453;
  $9 = $$;
 }
 $6 = ((($this)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($9|0);
 do {
  if (!($8)) {
   $10 = ((($this)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $9 << 2;
   $13 = (($12) + 72)|0;
   $14 = (_realloc($11,$13)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = 839862;
    return ($$0|0);
   } else {
    HEAP32[$10>>2] = $14;
    break;
   }
  }
 } while(0);
 HEAP32[$6>>2] = $9;
 $16 = ((($this)) + 24|0);
 HEAP32[$16>>2] = $new_rate;
 $17 = ($9*1000)|0;
 $18 = (($17|0) / ($new_rate|0))&-1;
 $19 = (($18) + -1)|0;
 $20 = ((($this)) + 36|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($this)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if (!($23)) {
  HEAP32[$21>>2] = $22;
  $24 = (+($new_rate|0));
  $25 = (+($22|0));
  $26 = $24 / $25;
  $27 = $26 * 65536.0;
  $28 = $27 + 0.5;
  $29 = (+Math_floor((+$28)));
  $30 = (~~(($29)));
  HEAP32[$this>>2] = $30;
 }
 $31 = ((($this)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)>(0);
 if ($33) {
  $34 = $32 << 16;
  $35 = (($34|0) / ($new_rate|0))&-1;
  $36 = ($35>>>0)<(2);
  if ($36) {
   $shift$1$i = 13;
  } else {
   $37 = ($35>>>0)<(4);
   if ($37) {
    $shift$1$i = 12;
   } else {
    $38 = ($35>>>0)<(8);
    if ($38) {
     $shift$1$i = 11;
    } else {
     $39 = ($35>>>0)<(16);
     if ($39) {
      $shift$1$i = 10;
     } else {
      $40 = ($35>>>0)<(32);
      if ($40) {
       $shift$1$i = 9;
      } else {
       $41 = ($35>>>0)<(64);
       if ($41) {
        $shift$1$i = 8;
       } else {
        $42 = ($35>>>0)<(128);
        if ($42) {
         $shift$1$i = 7;
        } else {
         $43 = ($35>>>0)<(256);
         if ($43) {
          $shift$1$i = 6;
         } else {
          $44 = ($35>>>0)<(512);
          if ($44) {
           $shift$1$i = 5;
          } else {
           $45 = ($35>>>0)<(1024);
           if ($45) {
            $shift$1$i = 4;
           } else {
            $46 = ($35>>>0)<(2048);
            if ($46) {
             $shift$1$i = 3;
            } else {
             $47 = ($35>>>0)<(4096);
             if ($47) {
              $shift$1$i = 2;
             } else {
              $48 = ($35>>>0)<(8192);
              $$$i = $48&1;
              $shift$1$i = $$$i;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } else {
  $shift$1$i = 31;
 }
 $49 = ((($this)) + 20|0);
 HEAP32[$49>>2] = $shift$1$i;
 $50 = ((($this)) + 4|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($this)) + 16|0);
 HEAP32[$51>>2] = 0;
 $52 = ((($this)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0|0);
 if ($54) {
  $$0 = 0;
  return ($$0|0);
 }
 $phitmp$i = $9 << 2;
 $phitmp1$i = (($phitmp$i) + 72)|0;
 _memset(($53|0),0,($phitmp1$i|0))|0;
 $$0 = 0;
 return ($$0|0);
}
function __ZN11Blip_Buffer9bass_freqEi($this,$freq) {
 $this = $this|0;
 $freq = $freq|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $shift$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = $freq;
 $1 = ($freq|0)>(0);
 if ($1) {
  $2 = $freq << 16;
  $3 = ((($this)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2|0) / ($4|0))&-1;
  $6 = ($5>>>0)<(2);
  if ($6) {
   $shift$1 = 13;
  } else {
   $7 = ($5>>>0)<(4);
   if ($7) {
    $shift$1 = 12;
   } else {
    $9 = ($5>>>0)<(8);
    if ($9) {
     $shift$1 = 11;
    } else {
     $10 = ($5>>>0)<(16);
     if ($10) {
      $shift$1 = 10;
     } else {
      $11 = ($5>>>0)<(32);
      if ($11) {
       $shift$1 = 9;
      } else {
       $12 = ($5>>>0)<(64);
       if ($12) {
        $shift$1 = 8;
       } else {
        $13 = ($5>>>0)<(128);
        if ($13) {
         $shift$1 = 7;
        } else {
         $14 = ($5>>>0)<(256);
         if ($14) {
          $shift$1 = 6;
         } else {
          $15 = ($5>>>0)<(512);
          if ($15) {
           $shift$1 = 5;
          } else {
           $16 = ($5>>>0)<(1024);
           if ($16) {
            $shift$1 = 4;
           } else {
            $17 = ($5>>>0)<(2048);
            if ($17) {
             $shift$1 = 3;
            } else {
             $18 = ($5>>>0)<(4096);
             if ($18) {
              $shift$1 = 2;
             } else {
              $19 = ($5>>>0)<(8192);
              $$ = $19&1;
              $shift$1 = $$;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } else {
  $shift$1 = 31;
 }
 $8 = ((($this)) + 20|0);
 HEAP32[$8>>2] = $shift$1;
 return;
}
function __ZNK11Blip_Buffer17clock_rate_factorEl($this,$clock_rate) {
 $this = $this|0;
 $clock_rate = $clock_rate|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (+($1|0));
 $3 = (+($clock_rate|0));
 $4 = $2 / $3;
 $5 = $4 * 65536.0;
 $6 = $5 + 0.5;
 $7 = (+Math_floor((+$6)));
 $8 = (~~(($7)));
 return ($8|0);
}
function __ZN11Blip_Buffer9end_frameEl($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = Math_imul($0, $t)|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 HEAP32[$2>>2] = $4;
 return;
}
function __ZN11Blip_Synth_C2EPsi($this,$p,$w) {
 $this = $this|0;
 $p = $p|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = $p;
 $1 = ((($this)) + 12|0);
 HEAP32[$1>>2] = $w;
 HEAPF64[$this>>3] = 0.0;
 $2 = ((($this)) + 16|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 return;
}
function __ZNK9blip_eq_t8generateEPfi($this,$out,$count) {
 $this = $this|0;
 $out = $out|0;
 $count = $count|0;
 var $$0$i = 0.0, $$0$op$i = 0.0, $$01$i = 0.0, $$in = 0, $$inv$i = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $9 = 0, $exitcond$i = 0, $i$02$i = 0, $oversample$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($count|0));
 $1 = 144.0 / $0;
 $2 = $1 + 0.84999999999999998;
 $3 = ((($this)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+($4|0));
 $6 = $5 * 0.5;
 $7 = ((($this)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $10 = (+($8|0));
 $11 = $6 / $10;
 $oversample$0 = $9 ? $2 : $11;
 $12 = ((($this)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = $oversample$0 * $14;
 $16 = $15 / $6;
 $17 = $oversample$0 * 64.0;
 $18 = +HEAPF64[$this>>3];
 $$inv$i = $16 >= 0.99899999999999999;
 $$01$i = $$inv$i ? 0.99899999999999999 : $16;
 $19 = $18 < -300.0;
 $$0$i = $19 ? -300.0 : $18;
 $20 = $$0$i > 5.0;
 $$0$op$i = $$0$i * 1.2207031250000001E-5;
 $21 = $20 ? 6.103515625E-5 : $$0$op$i;
 $22 = 1.0 - $$01$i;
 $23 = $21 / $22;
 $24 = (+Math_pow(10.0,(+$23)));
 $25 = $$01$i * 4096.0;
 $26 = 4096.0 - $25;
 $27 = (+Math_pow((+$24),(+$26)));
 $28 = 3.8349519697141029E-4 / $17;
 $29 = ($count|0)>(0);
 if ($29) {
  $30 = $25 + -1.0;
  $i$02$i = 0;
  while(1) {
   $31 = (($i$02$i) - ($count))|0;
   $32 = $31 << 1;
   $33 = $32 | 1;
   $34 = (+($33|0));
   $35 = $28 * $34;
   $36 = $35 * 4095.0;
   $37 = (+Math_cos((+$36)));
   $38 = $24 * $37;
   $39 = $35 * 4096.0;
   $40 = (+Math_cos((+$39)));
   $41 = $38 - $40;
   $42 = $25 * $35;
   $43 = (+Math_cos((+$42)));
   $44 = $30 * $35;
   $45 = (+Math_cos((+$44)));
   $46 = (+Math_cos((+$35)));
   $47 = $27 * $41;
   $48 = $24 * $45;
   $49 = $47 - $48;
   $50 = $43 + $49;
   $51 = $24 - $46;
   $52 = $51 - $46;
   $53 = $24 * $52;
   $54 = $53 + 1.0;
   $55 = 2.0 - $46;
   $56 = $55 - $46;
   $57 = 1.0 - $46;
   $58 = $57 - $43;
   $59 = $45 + $58;
   $60 = $59 * $54;
   $61 = $50 * $56;
   $62 = $61 + $60;
   $63 = $56 * $54;
   $64 = $62 / $63;
   $65 = $64;
   $66 = (($out) + ($i$02$i<<2)|0);
   HEAPF32[$66>>2] = $65;
   $67 = (($i$02$i) + 1)|0;
   $exitcond$i = ($67|0)==($count|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$02$i = $67;
   }
  }
 }
 $68 = (($count) + -1)|0;
 $69 = (+($68|0));
 $70 = 3.1415926535897931 / $69;
 $71 = ($count|0)==(0);
 if ($71) {
  return;
 } else {
  $$in = $count;
 }
 while(1) {
  $72 = (($$in) + -1)|0;
  $73 = (+($72|0));
  $74 = $70 * $73;
  $75 = (+Math_cos((+$74)));
  $76 = $75 * 0.46000000000000002;
  $77 = 0.54000000000000004 - $76;
  $78 = (($out) + ($72<<2)|0);
  $79 = +HEAPF32[$78>>2];
  $80 = $79;
  $81 = $80 * $77;
  $82 = $81;
  HEAPF32[$78>>2] = $82;
  $83 = ($72|0)==(0);
  if ($83) {
   break;
  } else {
   $$in = $72;
  }
 }
 return;
}
function __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $$error$0$i = 0, $$error$0$us$i = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $error$02$us$i = 0, $exitcond = 0, $exitcond12 = 0, $fimpulse = 0, $i$03$us$i = 0, $i$27 = 0;
 var $i$35 = 0, $next$04 = 0.0, $p$04$i = 0, $p$04$i$phi = 0, $p$04$us$i = 0, $p$04$us$i$phi = 0, $sum$03 = 0.0, $total$0$lcssa = 0.0, $total$06 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fimpulse = sp;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 5;
 $3 = (($2) + -32)|0;
 $4 = ((($fimpulse)) + 256|0);
 __ZNK9blip_eq_t8generateEPfi($eq,$4,$3);
 $5 = (($2) + 32)|0;
 $6 = $2 | 31;
 $9 = 63;
 while(1) {
  $8 = (($6) - ($9))|0;
  $10 = (($fimpulse) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($5) + ($9))|0;
  $13 = (($fimpulse) + ($12<<2)|0);
  HEAP32[$13>>2] = $11;
  $14 = (($9) + -1)|0;
  $15 = ($9|0)==(0);
  if ($15) {
   break;
  } else {
   $9 = $14;
  }
 }
 _memset(($fimpulse|0),0,256)|0;
 $7 = ($3|0)>(0);
 if ($7) {
  $16 = $1 << 5;
  $17 = (($16) + -32)|0;
  $i$27 = 0;$total$06 = 0.0;
  while(1) {
   $18 = (($i$27) + 64)|0;
   $19 = (($fimpulse) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $20;
   $22 = $total$06 + $21;
   $23 = (($i$27) + 1)|0;
   $exitcond12 = ($23|0)==($17|0);
   if ($exitcond12) {
    $total$0$lcssa = $22;
    break;
   } else {
    $i$27 = $23;$total$06 = $22;
   }
  }
 } else {
  $total$0$lcssa = 0.0;
 }
 $24 = 16384.0 / $total$0$lcssa;
 $25 = ((($this)) + 16|0);
 HEAP32[$25>>2] = 32768;
 $26 = HEAP32[$0>>2]|0;
 $27 = $26 << 5;
 $28 = $27 | 1;
 $29 = ($28|0)>(0);
 $30 = ((($this)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 if ($29) {
  $33 = $26 << 5;
  $34 = $33 | 1;
  $i$35 = 0;$next$04 = 0.0;$sum$03 = 0.0;
  while(1) {
   $35 = $next$04 - $sum$03;
   $36 = $24 * $35;
   $37 = $36 + 0.5;
   $38 = (+Math_floor((+$37)));
   $39 = (~~(($38)));
   $40 = (($31) + ($i$35<<1)|0);
   HEAP16[$40>>1] = $39;
   $41 = (($fimpulse) + ($i$35<<2)|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $42;
   $44 = $sum$03 + $43;
   $45 = (($i$35) + 64)|0;
   $46 = (($fimpulse) + ($45<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $47;
   $49 = $next$04 + $48;
   $50 = (($i$35) + 1)|0;
   $exitcond = ($50|0)==($34|0);
   if ($exitcond) {
    break;
   } else {
    $i$35 = $50;$next$04 = $49;$sum$03 = $44;
   }
  }
  $51 = ($28|0)>(1);
  $52 = (($28) + -64)|0;
  if ($51) {
   $54 = 63;$p$04$us$i = 64;
   while(1) {
    $55 = (63 - ($p$04$us$i))|0;
    $error$02$us$i = 32768;$i$03$us$i = 1;
    while(1) {
     $65 = (($i$03$us$i) + ($54))|0;
     $66 = (($31) + ($65<<1)|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = $67 << 16 >> 16;
     $69 = (($error$02$us$i) - ($68))|0;
     $70 = (($i$03$us$i) + ($55))|0;
     $71 = (($31) + ($70<<1)|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72 << 16 >> 16;
     $74 = (($69) - ($73))|0;
     $75 = (($i$03$us$i) + 64)|0;
     $76 = ($75|0)<($28|0);
     if ($76) {
      $error$02$us$i = $74;$i$03$us$i = $75;
     } else {
      $$lcssa = $74;
      break;
     }
    }
    $53 = ($54|0)==($55|0);
    $56 = (($$lcssa|0) / 2)&-1;
    $$error$0$us$i = $53 ? $56 : $$lcssa;
    $57 = (($54) + ($52))|0;
    $58 = (($31) + ($57<<1)|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $61 = (($60) + ($$error$0$us$i))|0;
    $62 = $61&65535;
    HEAP16[$58>>1] = $62;
    $63 = (($54) + -1)|0;
    $64 = ($54|0)>(31);
    if ($64) {
     $p$04$us$i$phi = $54;$54 = $63;$p$04$us$i = $p$04$us$i$phi;
    } else {
     break;
    }
   }
  } else {
   $81 = $52;
   label = 11;
  }
 } else {
  $32 = (($28) + -64)|0;
  $81 = $32;
  label = 11;
 }
 if ((label|0) == 11) {
  $79 = 63;$p$04$i = 64;
  while(1) {
   $77 = (63 - ($p$04$i))|0;
   $78 = ($79|0)==($77|0);
   $$error$0$i = $78 ? 16384 : 32768;
   $80 = (($79) + ($81))|0;
   $82 = (($31) + ($80<<1)|0);
   $83 = HEAP16[$82>>1]|0;
   $84 = $83&65535;
   $85 = (($$error$0$i) + ($84))|0;
   $86 = $85&65535;
   HEAP16[$82>>1] = $86;
   $87 = (($79) + -1)|0;
   $88 = ($79|0)>(31);
   if ($88) {
    $p$04$i$phi = $79;$79 = $87;$p$04$i = $p$04$i$phi;
   } else {
    break;
   }
  }
 }
 $89 = +HEAPF64[$this>>3];
 $90 = $89 != 0.0;
 if (!($90)) {
  STACKTOP = sp;return;
 }
 HEAPF64[$this>>3] = 0.0;
 __ZN11Blip_Synth_11volume_unitEd($this,$89);
 STACKTOP = sp;return;
}
function __ZN11Blip_Synth_11volume_unitEd($this,$new_unit) {
 $this = $this|0;
 $new_unit = +$new_unit;
 var $$error$0$i = 0, $$error$0$us$i = 0, $$in = 0, $$lcssa = 0, $$lcssa16 = 0, $$lcssa17 = 0.0, $$pre = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $9 = 0.0, $error$02$us$i = 0, $factor$03 = 0.0, $factor$1 = 0.0, $i$03$us$i = 0, $or$cond = 0, $p$04$i = 0, $p$04$i$phi = 0, $p$04$us$i = 0, $p$04$us$i$phi = 0, $shift$02 = 0, $shift$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = +HEAPF64[$this>>3];
 $2 = $1 != $new_unit;
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ((($this)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAPF64[$0>>3] = -8.0;
  $6 = ((($0)) + 8|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($0)) + 12|0);
  HEAP32[$7>>2] = 44100;
  $8 = ((($0)) + 16|0);
  HEAP32[$8>>2] = 0;
  __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$0);
  $$pre = HEAP32[$3>>2]|0;
  $11 = $$pre;
 } else {
  $11 = $4;
 }
 HEAPF64[$this>>3] = $new_unit;
 $9 = $new_unit * 1073741824.0;
 $10 = (+($11|0));
 $12 = $9 / $10;
 $13 = $12 > 0.0;
 $14 = $12 < 2.0;
 $or$cond = $13 & $14;
 L7: do {
  if ($or$cond) {
   $factor$03 = $12;$shift$02 = 0;
   while(1) {
    $15 = (($shift$02) + 1)|0;
    $16 = $factor$03 * 2.0;
    $17 = $16 < 2.0;
    if ($17) {
     $factor$03 = $16;$shift$02 = $15;
    } else {
     $$lcssa16 = $15;$$lcssa17 = $16;$shift$02$lcssa = $shift$02;
     break;
    }
   }
   $18 = ($$lcssa16|0)==(0);
   if ($18) {
    $factor$1 = $$lcssa17;
   } else {
    $19 = $11 >> $$lcssa16;
    HEAP32[$3>>2] = $19;
    $20 = 1 << $shift$02$lcssa;
    $21 = (($20) + 32768)|0;
    $22 = 32768 >>> $$lcssa16;
    $23 = ((($this)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 << 5;
    $26 = $25 | 1;
    $27 = ((($this)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $$in = $26;
    while(1) {
     $29 = (($$in) + -1)|0;
     $30 = (($28) + ($29<<1)|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = $31 << 16 >> 16;
     $33 = (($21) + ($32))|0;
     $34 = $33 >> $$lcssa16;
     $35 = (($34) - ($22))|0;
     $36 = $35&65535;
     HEAP16[$30>>1] = $36;
     $37 = ($29|0)==(0);
     if ($37) {
      break;
     } else {
      $$in = $29;
     }
    }
    $38 = ($26|0)>(1);
    $39 = (($26) + -64)|0;
    if ($38) {
     $42 = 63;$p$04$us$i = 64;
    } else {
     $40 = (($19|0) / 2)&-1;
     $67 = 63;$p$04$i = 64;
     while(1) {
      $65 = (63 - ($p$04$i))|0;
      $66 = ($67|0)==($65|0);
      $$error$0$i = $66 ? $40 : $19;
      $68 = (($67) + ($39))|0;
      $69 = (($28) + ($68<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = (($$error$0$i) + ($71))|0;
      $73 = $72&65535;
      HEAP16[$69>>1] = $73;
      $74 = (($67) + -1)|0;
      $75 = ($67|0)>(31);
      if ($75) {
       $p$04$i$phi = $67;$67 = $74;$p$04$i = $p$04$i$phi;
      } else {
       $factor$1 = $$lcssa17;
       break L7;
      }
     }
    }
    while(1) {
     $43 = (63 - ($p$04$us$i))|0;
     $error$02$us$i = $19;$i$03$us$i = 1;
     while(1) {
      $53 = (($i$03$us$i) + ($42))|0;
      $54 = (($28) + ($53<<1)|0);
      $55 = HEAP16[$54>>1]|0;
      $56 = $55 << 16 >> 16;
      $57 = (($error$02$us$i) - ($56))|0;
      $58 = (($i$03$us$i) + ($43))|0;
      $59 = (($28) + ($58<<1)|0);
      $60 = HEAP16[$59>>1]|0;
      $61 = $60 << 16 >> 16;
      $62 = (($57) - ($61))|0;
      $63 = (($i$03$us$i) + 64)|0;
      $64 = ($63|0)<($26|0);
      if ($64) {
       $error$02$us$i = $62;$i$03$us$i = $63;
      } else {
       $$lcssa = $62;
       break;
      }
     }
     $41 = ($42|0)==($43|0);
     $44 = (($$lcssa|0) / 2)&-1;
     $$error$0$us$i = $41 ? $44 : $$lcssa;
     $45 = (($42) + ($39))|0;
     $46 = (($28) + ($45<<1)|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = $47&65535;
     $49 = (($48) + ($$error$0$us$i))|0;
     $50 = $49&65535;
     HEAP16[$46>>1] = $50;
     $51 = (($42) + -1)|0;
     $52 = ($42|0)>(31);
     if ($52) {
      $p$04$us$i$phi = $42;$42 = $51;$p$04$us$i = $p$04$us$i$phi;
     } else {
      $factor$1 = $$lcssa17;
      break;
     }
    }
   }
  } else {
   $factor$1 = $12;
  }
 } while(0);
 $76 = $factor$1 + 0.5;
 $77 = (+Math_floor((+$76)));
 $78 = (~~(($77)));
 $79 = ((($this)) + 28|0);
 HEAP32[$79>>2] = $78;
 STACKTOP = sp;return;
}
function __ZN11Blip_Buffer12read_samplesEPsli($this,$out,$max_samples,$stereo) {
 $this = $this|0;
 $out = $out|0;
 $max_samples = $max_samples|0;
 $stereo = $stereo|0;
 var $$07 = 0, $$110 = 0, $$in = 0, $$in13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $accum$05 = 0, $accum$18 = 0, $accum$2 = 0, $in$06 = 0, $in$19 = 0, $max_samples$ = 0, $sext = 0, $sext1 = 0, $storemerge = 0;
 var $storemerge$in = 0, $storemerge14 = 0, $storemerge14$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 16;
 $3 = ($2|0)>($max_samples|0);
 $max_samples$ = $3 ? $max_samples : $2;
 $4 = ($max_samples$|0)==(0);
 if ($4) {
  return ($max_samples$|0);
 }
 $5 = ((($this)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($stereo|0)==(0);
 if ($11) {
  $$07 = $out;$$in13 = $max_samples$;$accum$05 = $8;$in$06 = $10;
  while(1) {
   $12 = (($$in13) + -1)|0;
   $13 = $accum$05 >> 14;
   $14 = $accum$05 >> $6;
   $15 = (($accum$05) - ($14))|0;
   $16 = ((($in$06)) + 4|0);
   $17 = HEAP32[$in$06>>2]|0;
   $18 = (($17) + ($15))|0;
   $19 = ((($$07)) + 2|0);
   $sext = $13 << 16;
   $20 = $sext >> 16;
   $21 = ($20|0)==($13|0);
   $22 = $accum$05 >> 31;
   $23 = (32767 - ($22))|0;
   $storemerge14$in = $21 ? $13 : $23;
   $storemerge14 = $storemerge14$in&65535;
   HEAP16[$$07>>1] = $storemerge14;
   $24 = ($12|0)==(0);
   if ($24) {
    $accum$2 = $18;
    break;
   } else {
    $$07 = $19;$$in13 = $12;$accum$05 = $18;$in$06 = $16;
   }
  }
 } else {
  $$110 = $out;$$in = $max_samples$;$accum$18 = $8;$in$19 = $10;
  while(1) {
   $25 = (($$in) + -1)|0;
   $26 = $accum$18 >> 14;
   $27 = $accum$18 >> $6;
   $28 = (($accum$18) - ($27))|0;
   $29 = ((($in$19)) + 4|0);
   $30 = HEAP32[$in$19>>2]|0;
   $31 = (($30) + ($28))|0;
   $32 = ((($$110)) + 4|0);
   $sext1 = $26 << 16;
   $33 = $sext1 >> 16;
   $34 = ($33|0)==($26|0);
   $35 = $accum$18 >> 31;
   $36 = (32767 - ($35))|0;
   $storemerge$in = $34 ? $26 : $36;
   $storemerge = $storemerge$in&65535;
   HEAP16[$$110>>1] = $storemerge;
   $37 = ($25|0)==(0);
   if ($37) {
    $accum$2 = $31;
    break;
   } else {
    $$110 = $32;$$in = $25;$accum$18 = $31;$in$19 = $29;
   }
  }
 }
 HEAP32[$7>>2] = $accum$2;
 $38 = $max_samples$ << 16;
 $39 = (($1) - ($38))|0;
 HEAP32[$0>>2] = $39;
 $40 = $39 >>> 16;
 $41 = (($40) + 18)|0;
 $42 = (($10) + ($max_samples$<<2)|0);
 $43 = $41 << 2;
 _memmove(($10|0),($42|0),($43|0))|0;
 $44 = HEAP32[$9>>2]|0;
 $45 = (($44) + ($41<<2)|0);
 $46 = $max_samples$ << 2;
 _memset(($45|0),0,($46|0))|0;
 return ($max_samples$|0);
}
function __ZN12Multi_Buffer17set_channel_countEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN11Mono_BufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 HEAP32[$0>>2] = 1;
 $1 = ((($this)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 4|0);
 HEAP32[$3>>2] = 1;
 HEAP32[$this>>2] = (296864);
 $4 = ((($this)) + 20|0);
 __ZN11Blip_BufferC2Ev($4);
 return;
}
function __ZN11Mono_BufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296864);
 $0 = ((($this)) + 20|0);
 __ZN11Blip_BufferD2Ev($0);
 return;
}
function __ZN11Mono_BufferD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296864);
 $0 = ((($this)) + 20|0);
 __THREW__ = 0;
 invoke_vi(333,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN11Mono_Buffer15set_sample_rateEli($this,$rate,$msec) {
 $this = $this|0;
 $rate = $rate|0;
 $msec = $msec|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = (__ZN11Blip_Buffer15set_sample_rateEli($0,$rate,$msec)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 8|0);
 HEAP32[$7>>2] = $4;
 $8 = ((($this)) + 12|0);
 HEAP32[$8>>2] = $6;
 $$0 = 0;
 return ($$0|0);
}
function __ZN13Silent_BufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 HEAP32[$0>>2] = 1;
 $1 = ((($this)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 4|0);
 HEAP32[$3>>2] = 1;
 HEAP32[$this>>2] = (543972);
 $4 = ((($this)) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZN11Mono_Buffer7channelEi($agg$result,$this,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($this)) + 20|0);
 HEAP32[$agg$result>>2] = $1;
 $2 = ((($agg$result)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($agg$result)) + 8|0);
 HEAP32[$3>>2] = $1;
 return;
}
function __ZN11Mono_Buffer9end_frameElb($this,$t,$0) {
 $this = $this|0;
 $t = $t|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($this)) + 20|0);
 __ZN11Blip_Buffer9end_frameEl($1,$t);
 return;
}
function __ZN7Nes_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 1960|0);
 $1 = ((($this)) + 60|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($this)) + 104|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($this)) + 672|0);
 $4 = ((($this)) + 152|0);
 __ZN11Blip_Synth_C2EPsi($3,$4,8);
 $5 = ((($this)) + 1256|0);
 $6 = ((($this)) + 736|0);
 __ZN11Blip_Synth_C2EPsi($5,$6,8);
 $7 = ((($this)) + 1880|0);
 $8 = ((($this)) + 1360|0);
 __ZN11Blip_Synth_C2EPsi($7,$8,8);
 $9 = ((($this)) + 2736|0);
 __ZN11Blip_Synth_C2EPsi($9,$0,12);
 $10 = ((($this)) + 1356|0);
 HEAP32[$10>>2] = $this;
 $11 = ((($this)) + 1348|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($this)) + 1952|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($this)) + 20|0);
 HEAP32[$this>>2] = $13;
 $14 = ((($this)) + 64|0);
 $15 = ((($this)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($this)) + 704|0);
 $17 = ((($this)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($this)) + 112|0);
 $19 = ((($this)) + 12|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($this)) + 1288|0);
 $21 = ((($this)) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($this)) + 28|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($this)) + 72|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($this)) + 712|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($this)) + 120|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($this)) + 1296|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($this)) + 1347|0);
 HEAP8[$27>>0] = 0;
 __ZN11Blip_Synth_11volume_unitEd($9,0.0075199999999999998);
 __ZN11Blip_Synth_11volume_unitEd($5,0.0085100000000000002);
 __ZN11Blip_Synth_11volume_unitEd($3,0.0049399999999999999);
 __ZN11Blip_Synth_11volume_unitEd($7,0.0033500000000000001);
 __ZN7Nes_Apu5resetEbi($this,0,0);
 return;
}
function __ZN7Nes_Apu6outputEP11Blip_Buffer($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = $buffer;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = $buffer;
 $5 = ((($this)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = $buffer;
 $8 = ((($this)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $buffer;
 $11 = ((($this)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = $buffer;
 return;
}
function __ZN7Nes_Apu6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 1347|0);
 HEAP8[$0>>0] = 0;
 $1 = $v * 0.0075199999999999998;
 $2 = ((($this)) + 2736|0);
 __ZN11Blip_Synth_11volume_unitEd($2,$1);
 $3 = $v * 0.0085100000000000002;
 $4 = ((($this)) + 1256|0);
 __ZN11Blip_Synth_11volume_unitEd($4,$3);
 $5 = $v * 0.0049399999999999999;
 $6 = ((($this)) + 672|0);
 __ZN11Blip_Synth_11volume_unitEd($6,$5);
 $7 = $v * 0.0033500000000000001;
 $8 = ((($this)) + 1880|0);
 __ZN11Blip_Synth_11volume_unitEd($8,$7);
 return;
}
function __ZN7Nes_Apu5resetEbi($this,$pal_mode,$initial_dmc_dac) {
 $this = $this|0;
 $pal_mode = $pal_mode|0;
 $initial_dmc_dac = $initial_dmc_dac|0;
 var $$$i$i = 0, $$$i3$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $addr$02 = 0, $exitcond = 0, $new_irq$0$i$i = 0, $new_irq$0$i4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pal_mode ? 8314 : 7458;
 $1 = ((($this)) + 1928|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($this)) + 1288|0);
 $3 = ((($this)) + 1346|0);
 $4 = $pal_mode&1;
 HEAP8[$3>>0] = $4;
 $5 = ((($this)) + 56|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 36|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
 $7 = ((($this)) + 100|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 80|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;
 $9 = ((($this)) + 732|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($this)) + 728|0);
 HEAP32[$10>>2] = 1;
 $11 = ((($this)) + 720|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($this)) + 724|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($this)) + 144|0);
 HEAP32[$13>>2] = 16384;
 $14 = ((($this)) + 128|0);
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;
 __ZN7Nes_Dmc5resetEv($2);
 $15 = ((($this)) + 1912|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($this)) + 1916|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($this)) + 1940|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($this)) + 1948|0);
 HEAP8[$18>>0] = 0;
 $19 = ((($this)) + 1920|0);
 HEAP32[$19>>2] = 1073741824;
 $20 = ((($this)) + 1932|0);
 HEAP32[$20>>2] = 1;
 __ZN7Nes_Apu10run_until_El($this,0);
 $21 = ((($this)) + 1944|0);
 HEAP32[$21>>2] = 0;
 $22 = HEAP8[$18>>0]|0;
 $23 = ((($this)) + 1924|0);
 $24 = HEAP32[$20>>2]|0;
 $25 = $24 & 1;
 $26 = ((($this)) + 1936|0);
 HEAP32[$26>>2] = 1;
 $27 = HEAP32[$1>>2]|0;
 $28 = (($25) + ($27))|0;
 HEAP32[$20>>2] = $28;
 $29 = ($27*3)|0;
 $30 = (($28) + ($29))|0;
 HEAP32[$23>>2] = $30;
 $31 = ((($this)) + 1340|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($this)) + 1345|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 | $22;
 $36 = ($35<<24>>24)==(0);
 $37 = ($32|0)>($30|0);
 $$$i3$i = $37 ? $30 : $32;
 $new_irq$0$i4$i = $36 ? $$$i3$i : 0;
 $38 = HEAP32[$19>>2]|0;
 $39 = ($new_irq$0$i4$i|0)==($38|0);
 if (!($39)) {
  HEAP32[$19>>2] = $new_irq$0$i4$i;
  $40 = ((($this)) + 1952|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = ((($this)) + 1956|0);
   $44 = HEAP32[$43>>2]|0;
   FUNCTION_TABLE_vi[$41 & 1023]($44);
  }
 }
 __ZN7Nes_Apu10run_until_El($this,0);
 $45 = ((($this)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 12|0);
 HEAP32[$47>>2] = 0;
 $48 = ((($this)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 12|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($this)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 12|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($this)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$this>>2]|0;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = 0;
 HEAP8[$33>>0] = 0;
 HEAP32[$17>>2] = 0;
 HEAP32[$31>>2] = 1073741824;
 $59 = HEAP8[$18>>0]|0;
 $60 = ($59<<24>>24)==(0);
 if ($60) {
  $61 = HEAP32[$23>>2]|0;
  $62 = ($61|0)<(1073741824);
  $$$i$i = $62 ? $61 : 1073741824;
  $new_irq$0$i$i = $$$i$i;
 } else {
  $new_irq$0$i$i = 0;
 }
 $63 = HEAP32[$19>>2]|0;
 $64 = ($new_irq$0$i$i|0)==($63|0);
 if ($64) {
  $addr$02 = 16384;
 } else {
  HEAP32[$19>>2] = $new_irq$0$i$i;
  $65 = ((($this)) + 1952|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0|0);
  if ($67) {
   $addr$02 = 16384;
  } else {
   $68 = ((($this)) + 1956|0);
   $69 = HEAP32[$68>>2]|0;
   FUNCTION_TABLE_vi[$66 & 1023]($69);
   $addr$02 = 16384;
  }
 }
 while(1) {
  $70 = $addr$02 & 3;
  $71 = ($70|0)!=(0);
  $72 = $71 ? 0 : 16;
  __ZN7Nes_Apu14write_registerElji($this,0,$addr$02,$72);
  $73 = (($addr$02) + 1)|0;
  $exitcond = ($73|0)==(16404);
  if ($exitcond) {
   break;
  } else {
   $addr$02 = $73;
  }
 }
 $74 = ((($this)) + 1336|0);
 HEAP32[$74>>2] = $initial_dmc_dac;
 $75 = ((($this)) + 1347|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = ($76<<24>>24)==(0);
 if (!($77)) {
  return;
 }
 HEAP32[$12>>2] = 15;
 return;
}
function __ZN7Nes_ApuD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN7Nes_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2736|0);
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($0,$eq);
 $1 = ((($this)) + 1256|0);
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($1,$eq);
 $2 = ((($this)) + 672|0);
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($2,$eq);
 $3 = ((($this)) + 1880|0);
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($3,$eq);
 return;
}
function __ZN7Nes_Apu14write_registerElji($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $$$i = 0, $$$i3 = 0, $$lobit = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$off = 0, $extract$t = 0;
 var $new_irq$0$i = 0, $new_irq$0$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $addr$off = (($addr) + -16384)|0;
 $0 = ($addr$off>>>0)>(23);
 if ($0) {
  return;
 }
 __ZN7Nes_Apu10run_until_El($this,$time);
 $1 = ($addr>>>0)<(16404);
 if ($1) {
  $2 = $addr$off >>> 2;
  $3 = (($this) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $addr & 3;
  $6 = $data&255;
  $7 = (($4) + ($5)|0);
  HEAP8[$7>>0] = $6;
  $8 = (((($4)) + 4|0) + ($5)|0);
  HEAP8[$8>>0] = 1;
  $9 = ($2|0)==(4);
  if ($9) {
   $10 = ((($this)) + 1288|0);
   __ZN7Nes_Dmc14write_registerEii($10,$5,$data);
   return;
  }
  $11 = ($5|0)==(3);
  if (!($11)) {
   return;
  }
  $12 = ((($this)) + 1940|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = 1 << $2;
  $15 = $13 & $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = $data >>> 3;
   $18 = $17 & 31;
   $19 = (839830 + ($18)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ((($4)) + 12|0);
   HEAP32[$22>>2] = $21;
  }
  $23 = ($addr$off>>>0)<(8);
  if (!($23)) {
   return;
  }
  $24 = ((($4)) + 32|0);
  HEAP32[$24>>2] = 7;
  return;
 }
 switch ($addr|0) {
 case 16405:  {
  $25 = $data & 16;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = ((($this)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 12|0);
   HEAP32[$29>>2] = 0;
  }
  $30 = $data & 8;
  $31 = ($30|0)==(0);
  if ($31) {
   $94 = ((($this)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 12|0);
   HEAP32[$96>>2] = 0;
  }
  $97 = $data & 4;
  $98 = ($97|0)==(0);
  if ($98) {
   $99 = ((($this)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 12|0);
   HEAP32[$101>>2] = 0;
  }
  $102 = $data & 2;
  $103 = ($102|0)==(0);
  if ($103) {
   $104 = ((($this)) + 4|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 12|0);
   HEAP32[$106>>2] = 0;
  }
  $107 = $data & 1;
  $108 = ($107|0)==(0);
  if ($108) {
   $109 = HEAP32[$this>>2]|0;
   $110 = ((($109)) + 12|0);
   HEAP32[$110>>2] = 0;
  }
  $37 = ((($this)) + 1288|0);
  $38 = ((($this)) + 1345|0);
  $36 = HEAP8[$38>>0]|0;
  HEAP8[$38>>0] = 0;
  $111 = ((($this)) + 1940|0);
  $34 = HEAP32[$111>>2]|0;
  HEAP32[$111>>2] = $data;
  do {
   if ($26) {
    $32 = ((($this)) + 1340|0);
    HEAP32[$32>>2] = 1073741824;
    $42 = 0;$47 = 1073741824;
   } else {
    $33 = $34 & 16;
    $35 = ($33|0)==(0);
    $extract$t = ($36<<24>>24)==(0);
    if ($35) {
     __ZN7Nes_Dmc5startEv($37);
    }
    if ($extract$t) {
     return;
    } else {
     $$phi$trans$insert = ((($this)) + 1340|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $$pre6 = HEAP8[$38>>0]|0;
     $42 = $$pre6;$47 = $$pre;
     break;
    }
   }
  } while(0);
  $39 = ((($this)) + 1948|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 | $42;
  $43 = ($41<<24>>24)==(0);
  if ($43) {
   $44 = ((($this)) + 1924|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($47|0)>($45|0);
   $$$i = $46 ? $45 : $47;
   $new_irq$0$i = $$$i;
  } else {
   $new_irq$0$i = 0;
  }
  $48 = ((($this)) + 1920|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($new_irq$0$i|0)==($49|0);
  if ($50) {
   return;
  }
  HEAP32[$48>>2] = $new_irq$0$i;
  $51 = ((($this)) + 1952|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0|0);
  if ($53) {
   return;
  }
  $54 = ((($this)) + 1956|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vi[$52 & 1023]($55);
  return;
  break;
 }
 case 16407:  {
  $56 = ((($this)) + 1944|0);
  HEAP32[$56>>2] = $data;
  $57 = $data & 64;
  $$lobit = $57 >>> 6;
  $58 = $$lobit ^ 1;
  $59 = ((($this)) + 1948|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 & $58;
  $63 = $62&255;
  HEAP8[$59>>0] = $63;
  $64 = ((($this)) + 1924|0);
  HEAP32[$64>>2] = 1073741824;
  $65 = ((($this)) + 1932|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 1;
  HEAP32[$65>>2] = $67;
  $68 = ((($this)) + 1936|0);
  HEAP32[$68>>2] = 0;
  $69 = $data & 128;
  $70 = ($69|0)==(0);
  if ($70) {
   $71 = ($57|0)==(0);
   HEAP32[$68>>2] = 1;
   $72 = ((($this)) + 1928|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($67) + ($73))|0;
   HEAP32[$65>>2] = $74;
   if ($71) {
    $75 = (($74) + ($time))|0;
    $76 = ($73*3)|0;
    $77 = (($75) + ($76))|0;
    HEAP32[$64>>2] = $77;
    $85 = $77;
   } else {
    $85 = 1073741824;
   }
  } else {
   $85 = 1073741824;
  }
  $78 = ((($this)) + 1340|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($this)) + 1345|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $63 | $81;
  $83 = ($82<<24>>24)==(0);
  $84 = ($79|0)>($85|0);
  $$$i3 = $84 ? $85 : $79;
  $new_irq$0$i4 = $83 ? $$$i3 : 0;
  $86 = ((($this)) + 1920|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($new_irq$0$i4|0)==($87|0);
  if ($88) {
   return;
  }
  HEAP32[$86>>2] = $new_irq$0$i4;
  $89 = ((($this)) + 1952|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(0|0);
  if ($91) {
   return;
  }
  $92 = ((($this)) + 1956|0);
  $93 = HEAP32[$92>>2]|0;
  FUNCTION_TABLE_vi[$90 & 1023]($93);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZN7Nes_Apu11irq_changedEv($this) {
 $this = $this|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $new_irq$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 1340|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 1345|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($this)) + 1948|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 | $3;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $8 = ((($this)) + 1924|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($1|0)>($9|0);
  $$ = $10 ? $9 : $1;
  $new_irq$0 = $$;
 } else {
  $new_irq$0 = 0;
 }
 $11 = ((($this)) + 1920|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($new_irq$0|0)==($12|0);
 if ($13) {
  return;
 }
 HEAP32[$11>>2] = $new_irq$0;
 $14 = ((($this)) + 1952|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  return;
 }
 $17 = ((($this)) + 1956|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$15 & 1023]($18);
 return;
}
function __ZN7Nes_Apu9run_untilEl($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 1300|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0$i$i = 1073741824;
 } else {
  $3 = ((($this)) + 1356|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 1916|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($this)) + 1304|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6))|0;
  $10 = ((($this)) + 1324|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + -1)|0;
  $13 = ((($this)) + 1316|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = Math_imul($12, $14)|0;
  $16 = (($9) + ($15))|0;
  $$0$i$i = $16;
 }
 $17 = ($$0$i$i|0)<($end_time|0);
 if (!($17)) {
  return;
 }
 $18 = ((($this)) + 1916|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$18>>2] = $end_time;
 $20 = ((($this)) + 1288|0);
 __ZN7Nes_Dmc3runEll($20,$19,$end_time);
 return;
}
function __ZN7Nes_Apu10run_until_El($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $end_time$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 1912|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($end_time|0);
 if ($2) {
  return;
 }
 $3 = ((($this)) + 1916|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($end_time|0);
 if ($5) {
  HEAP32[$3>>2] = $end_time;
  $6 = ((($this)) + 1288|0);
  __ZN7Nes_Dmc3runEll($6,$4,$end_time);
 }
 $7 = ((($this)) + 1932|0);
 $8 = ((($this)) + 20|0);
 $9 = ((($this)) + 64|0);
 $10 = ((($this)) + 704|0);
 $11 = ((($this)) + 112|0);
 $12 = ((($this)) + 1928|0);
 $13 = ((($this)) + 1936|0);
 $14 = ((($this)) + 1944|0);
 $15 = ((($this)) + 1924|0);
 $16 = ((($this)) + 1948|0);
 while(1) {
  $17 = HEAP32[$0>>2]|0;
  $18 = HEAP32[$7>>2]|0;
  $19 = (($18) + ($17))|0;
  $20 = ($19|0)>($end_time|0);
  $end_time$ = $20 ? $end_time : $19;
  $21 = (($19) - ($end_time$))|0;
  HEAP32[$7>>2] = $21;
  __ZN10Nes_Square3runEll($8,$17,$end_time$);
  $22 = HEAP32[$0>>2]|0;
  __ZN10Nes_Square3runEll($9,$22,$end_time$);
  $23 = HEAP32[$0>>2]|0;
  __ZN12Nes_Triangle3runEll($10,$23,$end_time$);
  $24 = HEAP32[$0>>2]|0;
  __ZN9Nes_Noise3runEll($11,$24,$end_time$);
  HEAP32[$0>>2] = $end_time$;
  $25 = ($end_time$|0)==($end_time|0);
  if ($25) {
   break;
  }
  $26 = HEAP32[$12>>2]|0;
  HEAP32[$7>>2] = $26;
  $27 = HEAP32[$13>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$13>>2] = $28;
  switch ($27|0) {
  case 0:  {
   $29 = HEAP32[$14>>2]|0;
   $30 = $29 & 192;
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = $26 << 2;
    $33 = (($end_time$) + 1)|0;
    $34 = (($33) + ($32))|0;
    HEAP32[$15>>2] = $34;
    HEAP8[$16>>0] = 1;
    label = 9;
   } else {
    label = 9;
   }
   break;
  }
  case 2:  {
   label = 9;
   break;
  }
  case 1:  {
   $35 = (($26) + -2)|0;
   HEAP32[$7>>2] = $35;
   break;
  }
  case 3:  {
   HEAP32[$13>>2] = 0;
   $36 = HEAP32[$14>>2]|0;
   $37 = $36 & 128;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $39 = (($26) + -6)|0;
    $40 = (($39) + ($26))|0;
    HEAP32[$7>>2] = $40;
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 9) {
   label = 0;
   __ZN7Nes_Osc12clock_lengthEi($8,32);
   __ZN7Nes_Osc12clock_lengthEi($9,32);
   __ZN7Nes_Osc12clock_lengthEi($11,32);
   __ZN7Nes_Osc12clock_lengthEi($10,128);
   __ZN10Nes_Square11clock_sweepEi($8,-1);
   __ZN10Nes_Square11clock_sweepEi($9,0);
  }
  __ZN12Nes_Triangle20clock_linear_counterEv($10);
  __ZN12Nes_Envelope14clock_envelopeEv($8);
  __ZN12Nes_Envelope14clock_envelopeEv($9);
  __ZN12Nes_Envelope14clock_envelopeEv($11);
 }
 return;
}
function __ZN7Nes_Apu9end_frameEl($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$pre = 0, $$pre36 = 0, $$pre37 = 0, $$pre38 = 0, $$sum$i = 0, $$sum$i21 = 0, $$sum$i5 = 0, $$sum1$i = 0, $$sum1$i22 = 0, $$sum1$i6 = 0, $$sum11$i = 0, $$sum11$i14 = 0, $$sum11$i30 = 0, $$sum1213$i = 0, $$sum1213$i15 = 0, $$sum1213$i31 = 0, $$sum14$i = 0, $$sum14$i16 = 0, $$sum14$i32 = 0;
 var $$sum1516$i = 0, $$sum1516$i17 = 0, $$sum1516$i33 = 0, $$sum17$i = 0, $$sum17$i18 = 0, $$sum17$i34 = 0, $$sum18$i = 0, $$sum18$i19 = 0, $$sum18$i35 = 0, $$sum2$i = 0, $$sum2$i23 = 0, $$sum2$i7 = 0, $$sum3$i = 0, $$sum3$i24 = 0, $$sum3$i8 = 0, $$sum45$i = 0, $$sum45$i25 = 0, $$sum45$i9 = 0, $$sum6$i = 0, $$sum6$i10 = 0;
 var $$sum6$i26 = 0, $$sum7$i = 0, $$sum7$i11 = 0, $$sum7$i27 = 0, $$sum8$i = 0, $$sum8$i12 = 0, $$sum8$i28 = 0, $$sum910$i = 0, $$sum910$i13 = 0, $$sum910$i29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $or$cond$i1 = 0, $or$cond$i20 = 0, $or$cond$i3 = 0, $or$cond$i4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 1912|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($end_time|0);
 if ($2) {
  __ZN7Nes_Apu10run_until_El($this,$end_time);
 }
 $3 = ((($this)) + 1347|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($this)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($this)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$9>>2] = 0;
  $11 = ($8|0)!=(0|0);
  $12 = ($10|0)!=(0);
  $or$cond$i = $11 & $12;
  if ($or$cond$i) {
   $13 = ((($this)) + 60|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (0 - ($10))|0;
   $16 = HEAP32[$8>>2]|0;
   $17 = Math_imul($16, $6)|0;
   $18 = ((($8)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + ($19))|0;
   __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEmiP11Blip_Buffer($14,$20,$15,$8);
   $$pre = HEAP32[$0>>2]|0;
   $32 = $$pre;
  } else {
   $32 = $6;
  }
  $21 = ((($this)) + 72|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($this)) + 84|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$23>>2] = 0;
  $25 = ($22|0)!=(0|0);
  $26 = ($24|0)!=(0);
  $or$cond$i1 = $25 & $26;
  if ($or$cond$i1) {
   $27 = ((($this)) + 104|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (0 - ($24))|0;
   $30 = HEAP32[$22>>2]|0;
   $31 = Math_imul($30, $32)|0;
   $33 = ((($22)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($31) + ($34))|0;
   __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEmiP11Blip_Buffer($28,$35,$29,$22);
   $$pre36 = HEAP32[$0>>2]|0;
   $45 = $$pre36;
  } else {
   $45 = $32;
  }
  $36 = ((($this)) + 712|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($this)) + 724|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$38>>2] = 0;
  $40 = ($37|0)!=(0|0);
  $41 = ($39|0)!=(0);
  $or$cond$i3 = $40 & $41;
  if ($or$cond$i3) {
   $42 = (0 - ($39))|0;
   $43 = HEAP32[$37>>2]|0;
   $44 = Math_imul($43, $45)|0;
   $46 = ((($37)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($44) + ($47))|0;
   $49 = ((($this)) + 1284|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($50, $42)|0;
   $52 = $48 >>> 10;
   $53 = $52 & 63;
   $$sum$i = (64 - ($53))|0;
   $54 = (((($this)) + 736|0) + ($$sum$i<<1)|0);
   $55 = ((($37)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $48 >>> 16;
   $58 = HEAP16[$54>>1]|0;
   $59 = $58 << 16 >> 16;
   $60 = Math_imul($59, $51)|0;
   $$sum1$i = (($57) + 4)|0;
   $61 = (($56) + ($$sum1$i<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($60) + ($62))|0;
   $$sum2$i = (($$sum$i) + 64)|0;
   $64 = (((($this)) + 736|0) + ($$sum2$i<<1)|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65 << 16 >> 16;
   $67 = Math_imul($66, $51)|0;
   $$sum3$i = (($57) + 5)|0;
   $68 = (($56) + ($$sum3$i<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($67) + ($69))|0;
   $$sum45$i = $$sum$i | 128;
   $71 = (((($this)) + 736|0) + ($$sum45$i<<1)|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72 << 16 >> 16;
   HEAP32[$61>>2] = $63;
   HEAP32[$68>>2] = $70;
   $74 = Math_imul($73, $51)|0;
   $$sum6$i = (($57) + 6)|0;
   $75 = (($56) + ($$sum6$i<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($74) + ($76))|0;
   $$sum7$i = (($$sum$i) + 192)|0;
   $78 = (((($this)) + 736|0) + ($$sum7$i<<1)|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79 << 16 >> 16;
   $81 = Math_imul($80, $51)|0;
   $$sum8$i = (($57) + 7)|0;
   $82 = (($56) + ($$sum8$i<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + ($83))|0;
   $85 = (((($this)) + 736|0) + ($53<<1)|0);
   $$sum910$i = $53 | 192;
   $86 = (((($this)) + 736|0) + ($$sum910$i<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87 << 16 >> 16;
   HEAP32[$75>>2] = $77;
   HEAP32[$82>>2] = $84;
   $89 = Math_imul($88, $51)|0;
   $$sum11$i = (($57) + 8)|0;
   $90 = (($56) + ($$sum11$i<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + ($91))|0;
   $$sum1213$i = $53 | 128;
   $93 = (((($this)) + 736|0) + ($$sum1213$i<<1)|0);
   $94 = HEAP16[$93>>1]|0;
   $95 = $94 << 16 >> 16;
   $96 = Math_imul($95, $51)|0;
   $$sum14$i = (($57) + 9)|0;
   $97 = (($56) + ($$sum14$i<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($96) + ($98))|0;
   $$sum1516$i = $53 | 64;
   $100 = (((($this)) + 736|0) + ($$sum1516$i<<1)|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101 << 16 >> 16;
   HEAP32[$90>>2] = $92;
   HEAP32[$97>>2] = $99;
   $103 = Math_imul($102, $51)|0;
   $$sum17$i = (($57) + 10)|0;
   $104 = (($56) + ($$sum17$i<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (($103) + ($105))|0;
   $107 = HEAP16[$85>>1]|0;
   $108 = $107 << 16 >> 16;
   $109 = Math_imul($108, $51)|0;
   $$sum18$i = (($57) + 11)|0;
   $110 = (($56) + ($$sum18$i<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($109) + ($111))|0;
   HEAP32[$104>>2] = $106;
   HEAP32[$110>>2] = $112;
   $$pre37 = HEAP32[$0>>2]|0;
   $122 = $$pre37;
  } else {
   $122 = $45;
  }
  $113 = ((($this)) + 120|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($this)) + 132|0);
  $116 = HEAP32[$115>>2]|0;
  HEAP32[$115>>2] = 0;
  $117 = ($114|0)!=(0|0);
  $118 = ($116|0)!=(0);
  $or$cond$i20 = $117 & $118;
  if ($or$cond$i20) {
   $119 = (0 - ($116))|0;
   $120 = HEAP32[$114>>2]|0;
   $121 = Math_imul($120, $122)|0;
   $123 = ((($114)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($121) + ($124))|0;
   $126 = ((($this)) + 700|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = Math_imul($127, $119)|0;
   $129 = $125 >>> 10;
   $130 = $129 & 63;
   $$sum$i21 = (64 - ($130))|0;
   $131 = (((($this)) + 152|0) + ($$sum$i21<<1)|0);
   $132 = ((($114)) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $125 >>> 16;
   $135 = HEAP16[$131>>1]|0;
   $136 = $135 << 16 >> 16;
   $137 = Math_imul($136, $128)|0;
   $$sum1$i22 = (($134) + 4)|0;
   $138 = (($133) + ($$sum1$i22<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($137) + ($139))|0;
   $$sum2$i23 = (($$sum$i21) + 64)|0;
   $141 = (((($this)) + 152|0) + ($$sum2$i23<<1)|0);
   $142 = HEAP16[$141>>1]|0;
   $143 = $142 << 16 >> 16;
   $144 = Math_imul($143, $128)|0;
   $$sum3$i24 = (($134) + 5)|0;
   $145 = (($133) + ($$sum3$i24<<2)|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($144) + ($146))|0;
   $$sum45$i25 = $$sum$i21 | 128;
   $148 = (((($this)) + 152|0) + ($$sum45$i25<<1)|0);
   $149 = HEAP16[$148>>1]|0;
   $150 = $149 << 16 >> 16;
   HEAP32[$138>>2] = $140;
   HEAP32[$145>>2] = $147;
   $151 = Math_imul($150, $128)|0;
   $$sum6$i26 = (($134) + 6)|0;
   $152 = (($133) + ($$sum6$i26<<2)|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($151) + ($153))|0;
   $$sum7$i27 = (($$sum$i21) + 192)|0;
   $155 = (((($this)) + 152|0) + ($$sum7$i27<<1)|0);
   $156 = HEAP16[$155>>1]|0;
   $157 = $156 << 16 >> 16;
   $158 = Math_imul($157, $128)|0;
   $$sum8$i28 = (($134) + 7)|0;
   $159 = (($133) + ($$sum8$i28<<2)|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($158) + ($160))|0;
   $162 = (((($this)) + 152|0) + ($130<<1)|0);
   $$sum910$i29 = $130 | 192;
   $163 = (((($this)) + 152|0) + ($$sum910$i29<<1)|0);
   $164 = HEAP16[$163>>1]|0;
   $165 = $164 << 16 >> 16;
   HEAP32[$152>>2] = $154;
   HEAP32[$159>>2] = $161;
   $166 = Math_imul($165, $128)|0;
   $$sum11$i30 = (($134) + 8)|0;
   $167 = (($133) + ($$sum11$i30<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($166) + ($168))|0;
   $$sum1213$i31 = $130 | 128;
   $170 = (((($this)) + 152|0) + ($$sum1213$i31<<1)|0);
   $171 = HEAP16[$170>>1]|0;
   $172 = $171 << 16 >> 16;
   $173 = Math_imul($172, $128)|0;
   $$sum14$i32 = (($134) + 9)|0;
   $174 = (($133) + ($$sum14$i32<<2)|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($173) + ($175))|0;
   $$sum1516$i33 = $130 | 64;
   $177 = (((($this)) + 152|0) + ($$sum1516$i33<<1)|0);
   $178 = HEAP16[$177>>1]|0;
   $179 = $178 << 16 >> 16;
   HEAP32[$167>>2] = $169;
   HEAP32[$174>>2] = $176;
   $180 = Math_imul($179, $128)|0;
   $$sum17$i34 = (($134) + 10)|0;
   $181 = (($133) + ($$sum17$i34<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($180) + ($182))|0;
   $184 = HEAP16[$162>>1]|0;
   $185 = $184 << 16 >> 16;
   $186 = Math_imul($185, $128)|0;
   $$sum18$i35 = (($134) + 11)|0;
   $187 = (($133) + ($$sum18$i35<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($186) + ($188))|0;
   HEAP32[$181>>2] = $183;
   HEAP32[$187>>2] = $189;
   $$pre38 = HEAP32[$0>>2]|0;
   $199 = $$pre38;
  } else {
   $199 = $122;
  }
  $190 = ((($this)) + 1296|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ((($this)) + 1308|0);
  $193 = HEAP32[$192>>2]|0;
  HEAP32[$192>>2] = 0;
  $194 = ($191|0)!=(0|0);
  $195 = ($193|0)!=(0);
  $or$cond$i4 = $194 & $195;
  if ($or$cond$i4) {
   $196 = (0 - ($193))|0;
   $197 = HEAP32[$191>>2]|0;
   $198 = Math_imul($197, $199)|0;
   $200 = ((($191)) + 4|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = (($198) + ($201))|0;
   $203 = ((($this)) + 1908|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = Math_imul($204, $196)|0;
   $206 = $202 >>> 10;
   $207 = $206 & 63;
   $$sum$i5 = (64 - ($207))|0;
   $208 = (((($this)) + 1360|0) + ($$sum$i5<<1)|0);
   $209 = ((($191)) + 8|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = $202 >>> 16;
   $212 = HEAP16[$208>>1]|0;
   $213 = $212 << 16 >> 16;
   $214 = Math_imul($213, $205)|0;
   $$sum1$i6 = (($211) + 4)|0;
   $215 = (($210) + ($$sum1$i6<<2)|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($214) + ($216))|0;
   $$sum2$i7 = (($$sum$i5) + 64)|0;
   $218 = (((($this)) + 1360|0) + ($$sum2$i7<<1)|0);
   $219 = HEAP16[$218>>1]|0;
   $220 = $219 << 16 >> 16;
   $221 = Math_imul($220, $205)|0;
   $$sum3$i8 = (($211) + 5)|0;
   $222 = (($210) + ($$sum3$i8<<2)|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (($221) + ($223))|0;
   $$sum45$i9 = $$sum$i5 | 128;
   $225 = (((($this)) + 1360|0) + ($$sum45$i9<<1)|0);
   $226 = HEAP16[$225>>1]|0;
   $227 = $226 << 16 >> 16;
   HEAP32[$215>>2] = $217;
   HEAP32[$222>>2] = $224;
   $228 = Math_imul($227, $205)|0;
   $$sum6$i10 = (($211) + 6)|0;
   $229 = (($210) + ($$sum6$i10<<2)|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($228) + ($230))|0;
   $$sum7$i11 = (($$sum$i5) + 192)|0;
   $232 = (((($this)) + 1360|0) + ($$sum7$i11<<1)|0);
   $233 = HEAP16[$232>>1]|0;
   $234 = $233 << 16 >> 16;
   $235 = Math_imul($234, $205)|0;
   $$sum8$i12 = (($211) + 7)|0;
   $236 = (($210) + ($$sum8$i12<<2)|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (($235) + ($237))|0;
   $239 = (((($this)) + 1360|0) + ($207<<1)|0);
   $$sum910$i13 = $207 | 192;
   $240 = (((($this)) + 1360|0) + ($$sum910$i13<<1)|0);
   $241 = HEAP16[$240>>1]|0;
   $242 = $241 << 16 >> 16;
   HEAP32[$229>>2] = $231;
   HEAP32[$236>>2] = $238;
   $243 = Math_imul($242, $205)|0;
   $$sum11$i14 = (($211) + 8)|0;
   $244 = (($210) + ($$sum11$i14<<2)|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = (($243) + ($245))|0;
   $$sum1213$i15 = $207 | 128;
   $247 = (((($this)) + 1360|0) + ($$sum1213$i15<<1)|0);
   $248 = HEAP16[$247>>1]|0;
   $249 = $248 << 16 >> 16;
   $250 = Math_imul($249, $205)|0;
   $$sum14$i16 = (($211) + 9)|0;
   $251 = (($210) + ($$sum14$i16<<2)|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (($250) + ($252))|0;
   $$sum1516$i17 = $207 | 64;
   $254 = (((($this)) + 1360|0) + ($$sum1516$i17<<1)|0);
   $255 = HEAP16[$254>>1]|0;
   $256 = $255 << 16 >> 16;
   HEAP32[$244>>2] = $246;
   HEAP32[$251>>2] = $253;
   $257 = Math_imul($256, $205)|0;
   $$sum17$i18 = (($211) + 10)|0;
   $258 = (($210) + ($$sum17$i18<<2)|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = (($257) + ($259))|0;
   $261 = HEAP16[$239>>1]|0;
   $262 = $261 << 16 >> 16;
   $263 = Math_imul($262, $205)|0;
   $$sum18$i19 = (($211) + 11)|0;
   $264 = (($210) + ($$sum18$i19<<2)|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = (($263) + ($265))|0;
   HEAP32[$258>>2] = $260;
   HEAP32[$264>>2] = $266;
  }
 }
 $267 = HEAP32[$0>>2]|0;
 $268 = (($267) - ($end_time))|0;
 HEAP32[$0>>2] = $268;
 $269 = ((($this)) + 1916|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = (($270) - ($end_time))|0;
 HEAP32[$269>>2] = $271;
 $272 = ((($this)) + 1924|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = ($273|0)==(1073741824);
 if (!($274)) {
  $275 = (($273) - ($end_time))|0;
  HEAP32[$272>>2] = $275;
 }
 $276 = ((($this)) + 1340|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = ($277|0)==(1073741824);
 if (!($278)) {
  $279 = (($277) - ($end_time))|0;
  HEAP32[$276>>2] = $279;
 }
 $280 = ((($this)) + 1920|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = ($281|0)==(1073741824);
 if ($282) {
  return;
 } else {
  $283 = (($281) - ($end_time))|0;
  $284 = ($283|0)<(0);
  $$ = $284 ? 0 : $283;
  HEAP32[$280>>2] = $$;
  return;
 }
}
function __ZN7Nes_Apu11read_statusEl($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_irq$0$i = 0, $not$ = 0, $result$1 = 0, $result$1$1 = 0;
 var $result$1$2 = 0, $result$1$3 = 0, $result$1$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($time) + -1)|0;
 __ZN7Nes_Apu10run_until_El($this,$0);
 $1 = ((($this)) + 1345|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 7;
 $5 = ((($this)) + 1948|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 6;
 $9 = $8 | $4;
 $10 = HEAP32[$this>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $not$ = ($12|0)!=(0);
 $13 = $not$&1;
 $result$1 = $13 | $9;
 $14 = ((($this)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 $19 = $18 ? 0 : 2;
 $result$1$1 = $19 | $result$1;
 $20 = ((($this)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 $25 = $24 ? 0 : 4;
 $result$1$2 = $25 | $result$1$1;
 $26 = ((($this)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 $31 = $30 ? 0 : 8;
 $result$1$3 = $31 | $result$1$2;
 $32 = ((($this)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 $37 = $36 ? 0 : 16;
 $result$1$4 = $37 | $result$1$3;
 __ZN7Nes_Apu10run_until_El($this,$time);
 $38 = HEAP8[$5>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  return ($result$1$4|0);
 }
 HEAP8[$5>>0] = 0;
 $40 = ((($this)) + 1340|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP8[$1>>0]|0;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  $44 = ((($this)) + 1924|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($41|0)>($45|0);
  $$$i = $46 ? $45 : $41;
  $new_irq$0$i = $$$i;
 } else {
  $new_irq$0$i = 0;
 }
 $47 = ((($this)) + 1920|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($new_irq$0$i|0)==($48|0);
 if ($49) {
  return ($result$1$4|0);
 }
 HEAP32[$47>>2] = $new_irq$0$i;
 $50 = ((($this)) + 1952|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  return ($result$1$4|0);
 }
 $53 = ((($this)) + 1956|0);
 $54 = HEAP32[$53>>2]|0;
 FUNCTION_TABLE_vi[$51 & 1023]($54);
 return ($result$1$4|0);
}
function __ZN8Nes_CartC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$this>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return;
}
function __ZN8Nes_Cart5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 HEAP32[$this>>2] = 0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return;
}
function __ZN8Nes_CartD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 HEAP32[$this>>2] = 0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return;
}
function __ZN8Nes_Cart9load_inesE16Auto_File_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$$i = 0, $$$i2 = 0, $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $not$$i = 0, $not$$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h = sp;
 $0 = (__ZN16Auto_File_Reader4openEv($in)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$in>>2]|0;
 $3 = (__ZN11Data_Reader4readEPvi($2,$h,16)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_memcmp($h,839876,4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 776418;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($h)) + 15|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 $$phi$trans$insert = ((($h)) + 7|0);
 if ($9) {
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $14 = $$pre;
 } else {
  HEAP8[$$phi$trans$insert>>0] = 0;
  $14 = 0;
 }
 $10 = ((($h)) + 6|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $14&255;
 $15 = $13 << 8;
 $16 = $15 | $12;
 $17 = ((($this)) + 16|0);
 HEAP32[$17>>2] = $16;
 $18 = $11 & 4;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[$in>>2]|0;
  $21 = (__ZN11Data_Reader4skipEi($20,512)|0);
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $$0 = $21;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $23 = ((($h)) + 4|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 14;
 $27 = ((($this)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==($26|0);
 do {
  if (!($29)) {
   $30 = HEAP32[$this>>2]|0;
   $31 = $26 | 8193;
   $32 = (($31) + -8191)|0;
   $33 = (_realloc($30,$32)|0);
   $34 = ($24<<24>>24)==(0);
   $not$$i1 = ($33|0)!=(0|0);
   $$$i2 = $34 | $not$$i1;
   if ($$$i2) {
    HEAP32[$this>>2] = $33;
    HEAP32[$27>>2] = $26;
    break;
   } else {
    $$0 = 839862;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $35 = ((($h)) + 5|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 13;
 $39 = ((($this)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==($38|0);
 do {
  if ($41) {
   $50 = $26;
  } else {
   $42 = ((($this)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $38 | 8191;
   $45 = (($44) + -8191)|0;
   $46 = (_realloc($43,$45)|0);
   $47 = ($36<<24>>24)==(0);
   $not$$i = ($46|0)!=(0|0);
   $$$i = $47 | $not$$i;
   if ($$$i) {
    HEAP32[$42>>2] = $46;
    HEAP32[$39>>2] = $38;
    $$pre6 = HEAP32[$27>>2]|0;
    $50 = $$pre6;
    break;
   } else {
    $$0 = 839862;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $48 = HEAP32[$in>>2]|0;
 $49 = HEAP32[$this>>2]|0;
 $51 = (__ZN11Data_Reader4readEPvi($48,$49,$50)|0);
 $52 = ($51|0)==(0|0);
 if (!($52)) {
  $$0 = $51;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = HEAP32[$in>>2]|0;
 $54 = ((($this)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$39>>2]|0;
 $57 = (__ZN11Data_Reader4readEPvi($53,$55,$56)|0);
 $$0 = $57;
 STACKTOP = sp;return ($$0|0);
}
function __ZN8Nes_CoreC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2252|0);
 __ZN12Nes_Ppu_ImplC2Ev($0);
 $1 = ((($this)) + 2732|0);
 HEAP32[$1>>2] = 8;
 $2 = ((($this)) + 2736|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 3000|0);
 HEAP32[$3>>2] = $this;
 $4 = ((($this)) + 2996|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 3028|0);
 HEAP32[$5>>2] = 1073741824;
 $6 = ((($this)) + 3048|0);
 HEAP32[$6>>2] = 1073741824;
 $7 = ((($this)) + 3004|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 2236|0);
 $9 = ((($this)) + 2212|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($this)) + 3080|0);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;
 return;
}
function __ZN8Nes_Core4initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2212|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  return (0|0);
 }
 $3 = (__Znwj(13016)|0);
 $4 = ((($3)) + 8192|0);
 __THREW__ = 0;
 invoke_vi(334,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($3);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$0>>2] = $3;
 $7 = ((($3)) + 9544|0);
 HEAP32[$7>>2] = $this;
 $8 = ((($3)) + 9540|0);
 HEAP32[$8>>2] = 335;
 $9 = ((($3)) + 10144|0);
 HEAP32[$9>>2] = 336;
 $10 = ((($3)) + 10148|0);
 HEAP32[$10>>2] = $this;
 return (0|0);
}
function __ZN8Nes_Core8read_dmcEPvj($data,$addr) {
 $data = $data|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr >>> 11;
 $1 = (($data) + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($addr)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($data)) + 3076|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4)|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($data)) + 3108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 4)|0;
 HEAP32[$9>>2] = $11;
 $12 = ((($data)) + 132|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -4)|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($data)) + 144|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -4)|0;
 HEAP32[$15>>2] = $17;
 $18 = ((($data)) + 140|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -4)|0;
 HEAP32[$18>>2] = $20;
 return ($5|0);
}
function __ZN8Nes_Core15apu_irq_changedEPv($emu) {
 $emu = $emu|0;
 var $$$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$0$i$i$i$i = 0, $x$y$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emu)) + 3104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($emu)) + 2212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 10112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($emu)) + 2240|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$11 & 511]($8,$2)|0);
 $13 = ($6|0)<($12|0);
 $x$y$i$i$i = $13 ? $6 : $12;
 $14 = ((($emu)) + 3108|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 ^ -1;
 $17 = (($x$y$i$i$i) + ($16))|0;
 $18 = ((($emu)) + 140|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($emu)) + 144|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>($17|0);
 if (!($21)) {
  $t$0$i$i$i$i = $20;
  $26 = ((($emu)) + 132|0);
  HEAP32[$26>>2] = $t$0$i$i$i$i;
  return;
 }
 $22 = ((($emu)) + 159|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 & 4;
 $25 = ($24<<24>>24)==(0);
 $$$i$i$i$i = $25 ? $17 : $20;
 $t$0$i$i$i$i = $$$i$i$i$i;
 $26 = ((($emu)) + 132|0);
 HEAP32[$26>>2] = $t$0$i$i$i$i;
 return;
}
function __ZN8Nes_Core5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2236|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 2240|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($2);
 }
 HEAP32[$1>>2] = 0;
 $7 = ((($this)) + 2252|0);
 __ZN12Nes_Ppu_Impl9close_chrEv($7);
 $8 = ((($this)) + 3104|0);
 HEAP32[$8>>2] = 0;
 return;
}
function __ZN8Nes_Core4openEPK8Nes_Cart($this,$new_cart) {
 $this = $this|0;
 $new_cart = $new_cart|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2236|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 2240|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($2);
 }
 HEAP32[$1>>2] = 0;
 $7 = ((($this)) + 2252|0);
 __ZN12Nes_Ppu_Impl9close_chrEv($7);
 $8 = ((($this)) + 3104|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 2212|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 do {
  if ($11) {
   $12 = (__Znwj(13016)|0);
   $13 = ((($12)) + 8192|0);
   __THREW__ = 0;
   invoke_vi(334,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    __ZdlPv($12);
    ___resumeException($20|0);
    // unreachable;
   } else {
    HEAP32[$9>>2] = $12;
    $16 = ((($12)) + 9544|0);
    HEAP32[$16>>2] = $this;
    $17 = ((($12)) + 9540|0);
    HEAP32[$17>>2] = 335;
    $18 = ((($12)) + 10144|0);
    HEAP32[$18>>2] = 336;
    $19 = ((($12)) + 10148|0);
    HEAP32[$19>>2] = $this;
    break;
   }
  }
 } while(0);
 $22 = (__ZN10Nes_Mapper6createEPK8Nes_CartP8Nes_Core($new_cart,$this)|0);
 HEAP32[$1>>2] = $22;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $$0 = 776435;
  return ($$0|0);
 }
 $24 = ((($new_cart)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($new_cart)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (__ZN12Nes_Ppu_Impl8open_chrEPKhl($7,$25,$27)|0);
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $$0 = $28;
  return ($$0|0);
 }
 HEAP32[$0>>2] = $new_cart;
 $30 = HEAP32[$9>>2]|0;
 $31 = ((($30)) + 10960|0);
 _memset(($31|0),-14,2049)|0;
 __ZN8Nes_Core5resetEbb($this,1,1);
 $$0 = 0;
 return ($$0|0);
}
function __ZN8Nes_Core5resetEbb($this,$full_reset,$erase_battery_ram) {
 $this = $this|0;
 $full_reset = $full_reset|0;
 $erase_battery_ram = $erase_battery_ram|0;
 var $$not = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($full_reset) {
  $0 = ((($this)) + 2212|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ((($1)) + 10960|0);
  __ZN7Nes_Cpu5resetEPKv($this,$2);
  $3 = ((($this)) + 3108|0);
  HEAP32[$3>>2] = -1;
  $4 = ((($this)) + 3104|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($this)) + 164|0);
  _memset(($5|0),-1,2048)|0;
  $6 = ((($this)) + 172|0);
  HEAP8[$6>>0] = -9;
  $7 = ((($this)) + 173|0);
  HEAP8[$7>>0] = -17;
  $8 = ((($this)) + 174|0);
  HEAP8[$8>>0] = -33;
  $9 = ((($this)) + 179|0);
  HEAP8[$9>>0] = -65;
  $10 = ((($this)) + 3100|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($this)) + 2220|0);
  HEAP8[$11>>0] = 0;
  $12 = ((($this)) + 3096|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($this)) + 3092|0);
  HEAP32[$13>>2] = 0;
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 10960|0);
  __ZN7Nes_Cpu8map_codeEjjPKv($this,24576,2048,$15);
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 10960|0);
  __ZN7Nes_Cpu8map_codeEjjPKv($this,26624,2048,$17);
  $18 = HEAP32[$0>>2]|0;
  $19 = ((($18)) + 10960|0);
  __ZN7Nes_Cpu8map_codeEjjPKv($this,28672,2048,$19);
  $20 = HEAP32[$0>>2]|0;
  $21 = ((($20)) + 10960|0);
  __ZN7Nes_Cpu8map_codeEjjPKv($this,30720,2048,$21);
  $22 = ((($this)) + 2236|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 2;
  $$not = ($26|0)==(0);
  $brmerge = $$not | $erase_battery_ram;
  if ($brmerge) {
   $27 = HEAP32[$0>>2]|0;
   _memset(($27|0),-1,8192)|0;
  }
  $28 = ((($this)) + 3080|0);
  HEAP32[$28>>2] = 0;
  $29 = ((($this)) + 3084|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($this)) + 2248|0);
  HEAP32[$30>>2] = 0;
  $$pre$phiZ2D = $0;
 } else {
  $$pre = ((($this)) + 2212|0);
  $$pre$phiZ2D = $$pre;
 }
 $31 = ((($this)) + 2252|0);
 __ZN12Nes_Ppu_Impl5resetEb($31,$full_reset);
 $32 = HEAP32[$$pre$phiZ2D>>2]|0;
 $33 = ((($32)) + 8192|0);
 __ZN7Nes_Apu5resetEbi($33,0,0);
 $34 = ((($this)) + 2240|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 FUNCTION_TABLE_vi[$38 & 1023]($35);
 $39 = ((($this)) + 124|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 65532|0);
 $42 = ((($40)) + 65533|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 << 8;
 $46 = HEAP8[$41>>0]|0;
 $47 = $46&255;
 $48 = $45 | $47;
 $49 = ((($this)) + 152|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($this)) + 160|0);
 HEAP8[$50>>0] = -3;
 $51 = ((($this)) + 156|0);
 HEAP8[$51>>0] = 0;
 $52 = ((($this)) + 157|0);
 HEAP8[$52>>0] = 0;
 $53 = ((($this)) + 158|0);
 HEAP8[$53>>0] = 0;
 $54 = ((($this)) + 159|0);
 HEAP8[$54>>0] = 4;
 $55 = ((($this)) + 2244|0);
 HEAP16[$55>>1] = 0;
 $56 = ((($this)) + 2216|0);
 HEAP32[$56>>2] = 0;
 return;
}
function __ZN8Nes_CoreD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2236|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 2240|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  label = 3;
 } else {
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  invoke_vi($6|0,($2|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   label = 8;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   HEAP32[$1>>2] = 0;
   $9 = ((($this)) + 2252|0);
   __THREW__ = 0;
   invoke_vi(337,($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    label = 8;
   } else {
    $12 = ((($this)) + 3104|0);
    HEAP32[$12>>2] = 0;
    $13 = ((($this)) + 2212|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     __ZN12Nes_Ppu_ImplD2Ev($9);
     return;
    }
    $16 = ((($14)) + 8192|0);
    __THREW__ = 0;
    invoke_vi(338,($16|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     $21 = ___cxa_find_matching_catch()|0;
     $22 = tempRet0;
     __ZdlPv($14);
     $$0 = $22;$$01 = $21;$$pre$phiZ2D = $9;
     break;
    }
    __ZdlPv($14);
    __ZN12Nes_Ppu_ImplD2Ev($9);
    return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $$pre = ((($this)) + 2252|0);
  $$0 = $20;$$01 = $19;$$pre$phiZ2D = $$pre;
 }
 __THREW__ = 0;
 invoke_vi(339,($$pre$phiZ2D|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZNK8Nes_Core10save_stateEP9Nes_State($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10Nes_State_5clearEv($out);
 $0 = ((($out)) + 20|0);
 $1 = ((($this)) + 2244|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = ((($out)) + 48|0);
 HEAP8[$12>>0] = 1;
 $13 = ((($out)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 152|0);
 ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;
 $16 = ((($out)) + 49|0);
 HEAP8[$16>>0] = 1;
 $17 = ((($out)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this)) + 3080|0);
 ;HEAP32[$18>>2]=HEAP32[$19>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$19+8>>2]|0;
 $20 = ((($out)) + 50|0);
 HEAP8[$20>>0] = 1;
 $21 = ((($this)) + 2212|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 8192|0);
 $24 = ((($out)) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 __ZNK7Nes_Apu10save_stateEP11apu_state_t($23,$25);
 $26 = ((($out)) + 51|0);
 HEAP8[$26>>0] = 1;
 $27 = ((($this)) + 2252|0);
 __ZNK12Nes_Ppu_Impl10save_stateEP10Nes_State_($27,$out);
 $28 = HEAP32[$out>>2]|0;
 $29 = ((($this)) + 164|0);
 _memcpy(($28|0),($29|0),2048)|0;
 $30 = ((($out)) + 54|0);
 HEAP8[$30>>0] = 1;
 $31 = ((($out)) + 56|0);
 HEAP16[$31>>1] = 0;
 $32 = ((($this)) + 2220|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)==(0);
 if ($34) {
  $38 = ((($out)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$39>>2] = 0;
  $40 = ((($this)) + 2240|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  FUNCTION_TABLE_vii[$44 & 1023]($41,$39);
  $45 = ((($out)) + 53|0);
  HEAP8[$45>>0] = 1;
  return;
 }
 HEAP16[$31>>1] = 8192;
 $35 = ((($out)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$21>>2]|0;
 _memcpy(($36|0),($37|0),8192)|0;
 $38 = ((($out)) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$39>>2] = 0;
 $40 = ((($this)) + 2240|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 FUNCTION_TABLE_vii[$44 & 1023]($41,$39);
 $45 = ((($out)) + 53|0);
 HEAP8[$45>>0] = 1;
 return;
}
function __ZN8Nes_Core10load_stateERK10Nes_State_($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0;
 var $x$y$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 3104|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 2216|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($in)) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($this)) + 2244|0);
  $6 = ((($in)) + 20|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = $5;
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
 }
 $17 = ((($this)) + 2996|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($in)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($this)) + 2248|0);
 $21 = ($19|0)==(1073741824);
 $$ = $21 ? 0 : $19;
 HEAP32[$20>>2] = $$;
 $22 = ((($in)) + 49|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $25 = ((($this)) + 152|0);
  $26 = ((($in)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  ;HEAP32[$25>>2]=HEAP32[$27>>2]|0;HEAP32[$25+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$27+8>>2]|0;
 }
 $28 = ((($in)) + 50|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  $31 = ((($this)) + 3080|0);
  $32 = ((($in)) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  ;HEAP32[$31>>2]=HEAP32[$33>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$33+8>>2]|0;
 }
 $34 = ((($in)) + 51|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 $37 = ((($this)) + 2212|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 8192|0);
 if ($36) {
  __ZN7Nes_Apu5resetEbi($39,0,0);
 } else {
  $40 = ((($in)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  __ZN7Nes_Apu10load_stateERK11apu_state_t($39,$41);
  $42 = HEAP32[$37>>2]|0;
  $43 = ((($42)) + 8192|0);
  $44 = ((($this)) + 2244|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $47 = (($46|0) / -3)&-1;
  __ZN7Nes_Apu9end_frameEl($43,$47);
 }
 $48 = ((($this)) + 2252|0);
 __ZN12Nes_Ppu_Impl10load_stateERK10Nes_State_($48,$in);
 $49 = ((($in)) + 54|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = ((($this)) + 164|0);
  $53 = HEAP32[$in>>2]|0;
  _memcpy(($52|0),($53|0),2048)|0;
 }
 $54 = ((($this)) + 2220|0);
 HEAP8[$54>>0] = 0;
 $55 = ((($in)) + 56|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = ($56<<16>>16)==(0);
 if (!($57)) {
  HEAP8[$54>>0] = 1;
  $58 = HEAP32[$37>>2]|0;
  $59 = ((($in)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $56 << 16 >> 16;
  $62 = ($61|0)<(8192);
  $x$y$i = $62 ? $61 : 8192;
  _memcpy(($58|0),($60|0),($x$y$i|0))|0;
  $63 = ((($this)) + 3096|0);
  HEAP32[$63>>2] = 0;
  $64 = HEAP8[$54>>0]|0;
  $65 = ($64<<24>>24)==(0);
  if ($65) {
   HEAP8[$54>>0] = 1;
   $66 = HEAP32[$37>>2]|0;
   _memset(($66|0),-1,8192)|0;
  }
  $67 = ((($this)) + 3092|0);
  HEAP32[$67>>2] = 32768;
  HEAP32[$63>>2] = 32768;
  $68 = HEAP32[$37>>2]|0;
  __ZN7Nes_Cpu8map_codeEjjPKv($this,24576,8192,$68);
 }
 $69 = ((($in)) + 53|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  return;
 }
 $72 = ((($this)) + 2240|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 16|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($in)) + 44|0);
 $78 = HEAP32[$77>>2]|0;
 FUNCTION_TABLE_vii[$76 & 1023]($73,$78);
 return;
}
function __ZN8Nes_Core11enable_sramEbb($this,$b,$read_only) {
 $this = $this|0;
 $b = $b|0;
 $read_only = $read_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 3096|0);
 HEAP32[$0>>2] = 0;
 if (!($b)) {
  $9 = ((($this)) + 3092|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($this)) + 2212|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 10960|0);
  __ZN7Nes_Cpu8map_codeEjjPKv($this,24576,2048,$12);
  $13 = HEAP32[$10>>2]|0;
  $14 = ((($13)) + 10960|0);
  __ZN7Nes_Cpu8map_codeEjjPKv($this,26624,2048,$14);
  $15 = HEAP32[$10>>2]|0;
  $16 = ((($15)) + 10960|0);
  __ZN7Nes_Cpu8map_codeEjjPKv($this,28672,2048,$16);
  $17 = HEAP32[$10>>2]|0;
  $18 = ((($17)) + 10960|0);
  __ZN7Nes_Cpu8map_codeEjjPKv($this,30720,2048,$18);
  return;
 }
 $1 = ((($this)) + 2220|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  HEAP8[$1>>0] = 1;
  $4 = ((($this)) + 2212|0);
  $5 = HEAP32[$4>>2]|0;
  _memset(($5|0),-1,8192)|0;
 }
 $6 = ((($this)) + 3092|0);
 HEAP32[$6>>2] = 32768;
 if (!($read_only)) {
  HEAP32[$0>>2] = 32768;
 }
 $7 = ((($this)) + 2212|0);
 $8 = HEAP32[$7>>2]|0;
 __ZN7Nes_Cpu8map_codeEjjPKv($this,24576,8192,$8);
 return;
}
function __ZN8Nes_Core15enable_prg_6000Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 3096|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 3092|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 3100|0);
 HEAP32[$2>>2] = 32768;
 return;
}
function __ZN8Nes_Core11irq_changedEv($this) {
 $this = $this|0;
 var $$$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$0$i$i$i = 0, $x$y$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 3104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($this)) + 2212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 10112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 2240|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$11 & 511]($8,$2)|0);
 $13 = ($6|0)<($12|0);
 $x$y$i$i = $13 ? $6 : $12;
 $14 = ((($this)) + 3108|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 ^ -1;
 $17 = (($x$y$i$i) + ($16))|0;
 $18 = ((($this)) + 140|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($this)) + 144|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>($17|0);
 if (!($21)) {
  $t$0$i$i$i = $20;
  $26 = ((($this)) + 132|0);
  HEAP32[$26>>2] = $t$0$i$i$i;
  return;
 }
 $22 = ((($this)) + 159|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 & 4;
 $25 = ($24<<24>>24)==(0);
 $$$i$i$i = $25 ? $17 : $20;
 $t$0$i$i$i = $$$i$i$i;
 $26 = ((($this)) + 132|0);
 HEAP32[$26>>2] = $t$0$i$i$i;
 return;
}
function __ZN8Nes_Core8write_ioEji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $$$i$i$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $phitmp$i$i = 0, $t$0$i$i$i$i = 0, $x$y$i$i$i = 0, $x$y$i1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($addr|0) {
 case 16404:  {
  $0 = ((($this)) + 2252|0);
  $1 = ((($this)) + 3104|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $data << 8;
  $4 = $data >>> 3;
  $5 = $4 & 2097151;
  $6 = (($this) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($3)|0);
  __ZN7Nes_Ppu11dma_spritesElPKv($0,$2,$8);
  $9 = ((($this)) + 3076|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + -513)|0;
  HEAP32[$9>>2] = $11;
  $12 = ((($this)) + 3108|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 513)|0;
  HEAP32[$12>>2] = $14;
  $15 = ((($this)) + 132|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -513)|0;
  HEAP32[$15>>2] = $17;
  $18 = ((($this)) + 144|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + -513)|0;
  HEAP32[$18>>2] = $20;
  $21 = ((($this)) + 140|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + -513)|0;
  HEAP32[$21>>2] = $23;
  return;
  break;
 }
 case 16406:  {
  $24 = ((($this)) + 3088|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $data & 1;
  $28 = $27 ^ 1;
  $29 = $28 & $26;
  $30 = ($29|0)==(0);
  if (!($30)) {
   $31 = ((($this)) + 2232|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[$31>>2] = $33;
   $34 = ((($this)) + 2224|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($this)) + 3080|0);
   HEAP32[$36>>2] = $35;
   $37 = ((($this)) + 2228|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($this)) + 3084|0);
   HEAP32[$39>>2] = $38;
  }
  $40 = $data&255;
  HEAP8[$24>>0] = $40;
  return;
  break;
 }
 default: {
  $41 = ((($this)) + 2212|0);
  $42 = (($addr) + -16384)|0;
  $43 = ($42>>>0)<(24);
  if (!($43)) {
   return;
  }
  $44 = HEAP32[$41>>2]|0;
  $45 = ((($44)) + 8192|0);
  $46 = ((($this)) + 3104|0);
  $47 = HEAP32[$46>>2]|0;
  __ZN7Nes_Apu14write_registerElji($45,$47,$addr,$data);
  switch ($addr|0) {
  case 16400:  {
   break;
  }
  case 16405:  {
   label = 8;
   break;
  }
  default: {
   return;
  }
  }
  if ((label|0) == 8) {
   $48 = $data & 16;
   $49 = ($48|0)==(0);
   if ($49) {
    return;
   }
  }
  $50 = HEAP32[$41>>2]|0;
  $51 = ((($50)) + 8192|0);
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 1)|0;
  __ZN7Nes_Apu9run_untilEl($51,$53);
  $54 = HEAP32[$46>>2]|0;
  $55 = (($54) + 1)|0;
  $56 = ((($this)) + 2252|0);
  $57 = ((($this)) + 3016|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)>($55|0);
  if ($59) {
   $$0$i$i$i = $58;
  } else {
   $60 = ((($this)) + 3028|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)<($54|0);
   if ($62) {
    __ZN7Nes_Ppu16render_bg_until_El($56,$54);
    $$pre$i$i$i = HEAP32[$57>>2]|0;
    $$0$i$i$i = $$pre$i$i$i;
   } else {
    $$0$i$i$i = $58;
   }
  }
  $63 = HEAP32[$41>>2]|0;
  $64 = ((($63)) + 9492|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(0);
  if ($66) {
   $$0$i$i$i$i = 1073741825;
  } else {
   $67 = ((($63)) + 9548|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 1916|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($63)) + 9496|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($63)) + 9516|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + -1)|0;
   $76 = ((($63)) + 9508|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = Math_imul($75, $77)|0;
   $79 = (($70) + 1)|0;
   $80 = (($79) + ($72))|0;
   $phitmp$i$i = (($80) + ($78))|0;
   $$0$i$i$i$i = $phitmp$i$i;
  }
  $81 = ($$0$i$i$i|0)<($$0$i$i$i$i|0);
  $x$y$i1$i$i = $81 ? $$0$i$i$i : $$0$i$i$i$i;
  $82 = ((($this)) + 3008|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($x$y$i1$i$i|0)<($83|0);
  $x$y$i$i$i = $84 ? $x$y$i1$i$i : $83;
  $85 = ((($this)) + 3108|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $86 ^ -1;
  $88 = (($x$y$i$i$i) + ($87))|0;
  $89 = ((($this)) + 144|0);
  HEAP32[$89>>2] = $88;
  $90 = ((($this)) + 140|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)<($88|0);
  if ($92) {
   $93 = ((($this)) + 159|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94 & 4;
   $96 = ($95<<24>>24)==(0);
   $$$i$i$i$i = $96 ? $91 : $88;
   $t$0$i$i$i$i = $$$i$i$i$i;
  } else {
   $t$0$i$i$i$i = $88;
  }
  $97 = ((($this)) + 132|0);
  HEAP32[$97>>2] = $t$0$i$i$i$i;
  return;
 }
 }
}
function __ZN8Nes_Core13event_changedEv($this) {
 $this = $this|0;
 var $$$i$i$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $t$0$i$i$i = 0, $x$y$i$i = 0, $x$y$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 3104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($this)) + 2252|0);
 $4 = ((($this)) + 3016|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>($2|0);
 if ($6) {
  $$0$i$i = $5;
 } else {
  $7 = ((($this)) + 3028|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)<($1|0);
  if ($9) {
   __ZN7Nes_Ppu16render_bg_until_El($3,$1);
   $$pre$i$i = HEAP32[$4>>2]|0;
   $$0$i$i = $$pre$i$i;
  } else {
   $$0$i$i = $5;
  }
 }
 $10 = ((($this)) + 2212|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 9492|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $$0$i$i$i = 1073741825;
 } else {
  $15 = ((($11)) + 9548|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 1916|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($11)) + 9496|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($11)) + 9516|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + -1)|0;
  $24 = ((($11)) + 9508|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = Math_imul($23, $25)|0;
  $27 = (($18) + 1)|0;
  $28 = (($27) + ($20))|0;
  $phitmp$i = (($28) + ($26))|0;
  $$0$i$i$i = $phitmp$i;
 }
 $29 = ($$0$i$i|0)<($$0$i$i$i|0);
 $x$y$i1$i = $29 ? $$0$i$i : $$0$i$i$i;
 $30 = ((($this)) + 3008|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($x$y$i1$i|0)<($31|0);
 $x$y$i$i = $32 ? $x$y$i1$i : $31;
 $33 = ((($this)) + 3108|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 ^ -1;
 $36 = (($x$y$i$i) + ($35))|0;
 $37 = ((($this)) + 144|0);
 HEAP32[$37>>2] = $36;
 $38 = ((($this)) + 140|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)<($36|0);
 if (!($40)) {
  $t$0$i$i$i = $36;
  $45 = ((($this)) + 132|0);
  HEAP32[$45>>2] = $t$0$i$i$i;
  return;
 }
 $41 = ((($this)) + 159|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42 & 4;
 $44 = ($43<<24>>24)==(0);
 $$$i$i$i = $44 ? $39 : $36;
 $t$0$i$i$i = $$$i$i$i;
 $45 = ((($this)) + 132|0);
 HEAP32[$45>>2] = $t$0$i$i$i;
 return;
}
function __ZN8Nes_Core7read_ioEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr & 65534;
 $1 = ($0|0)==(16406);
 if ($1) {
  $2 = $addr & 1;
  $3 = (((($this)) + 3080|0) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($this)) + 3088|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 & 1;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $9 = $4 >>> 1;
   $10 = $9 | -2147483648;
   HEAP32[$3>>2] = $10;
  }
  $11 = $4 & 1;
  $$0 = $11;
  return ($$0|0);
 }
 $12 = ($addr|0)==(16405);
 if ($12) {
  $13 = ((($this)) + 2212|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 8192|0);
  $16 = ((($this)) + 3104|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (__ZN7Nes_Apu11read_statusEl($15,$17)|0);
  $$0 = $18;
  return ($$0|0);
 } else {
  $19 = $addr >>> 8;
  $$0 = $19;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN8Nes_Core14emulate_frame_Ev($this) {
 $this = $this|0;
 var $$ = 0, $$$i$i$i$ = 0, $$$i$i$i4 = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$lcssa31 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extra_instructions$0 = 0, $extra_instructions$1 = 0, $last_result$0 = 0, $last_result$0$cmp = 0, $last_result$0$off = 0, $last_result$1 = 0, $or$cond3 = 0, $phitmp$i = 0, $t$0$i$i$i5 = 0, $x$y$i$i = 0, $x$y$i$i7 = 0, $x$y$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2212|0);
 $1 = ((($this)) + 3104|0);
 $2 = ((($this)) + 3108|0);
 $3 = ((($this)) + 2252|0);
 $4 = ((($this)) + 3016|0);
 $5 = ((($this)) + 3008|0);
 $6 = ((($this)) + 2240|0);
 $7 = ((($this)) + 140|0);
 $8 = ((($this)) + 144|0);
 $9 = ((($this)) + 159|0);
 $10 = ((($this)) + 132|0);
 $11 = ((($this)) + 148|0);
 $12 = ((($this)) + 136|0);
 $13 = ((($this)) + 3076|0);
 $14 = ((($this)) + 2216|0);
 $15 = ((($this)) + 3028|0);
 $16 = ((($this)) + 152|0);
 $17 = ((($this)) + 160|0);
 $18 = ((($this)) + 124|0);
 $19 = ((($this)) + 2254|0);
 $$pre = HEAP32[$1>>2]|0;
 $23 = $$pre;$extra_instructions$0 = 0;$last_result$0 = 0;
 while(1) {
  $20 = HEAP32[$0>>2]|0;
  $21 = ((($20)) + 8192|0);
  $22 = (($23) + 1)|0;
  __ZN7Nes_Apu9run_untilEl($21,$22);
  $24 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $24;
  $25 = (($24) + 1)|0;
  $26 = HEAP32[$4>>2]|0;
  $27 = ($26|0)>($25|0);
  if ($27) {
   $$0$i = $26;
  } else {
   $28 = HEAP32[$15>>2]|0;
   $29 = ($28|0)<($24|0);
   if ($29) {
    __ZN7Nes_Ppu16render_bg_until_El($3,$24);
    $$pre$i = HEAP32[$4>>2]|0;
    $$0$i = $$pre$i;
   } else {
    $$0$i = $26;
   }
  }
  $30 = ($25|0)<($$0$i|0);
  $$pre20 = HEAP32[$5>>2]|0;
  if ($30) {
   $extra_instructions$1 = $extra_instructions$0;
  } else {
   $31 = ($$pre20|0)>($25|0);
   if (!($31)) {
    $$lcssa = $24;$$lcssa31 = $25;
    label = 7;
    break;
   }
   $81 = ($extra_instructions$0|0)>(2);
   if ($81) {
    $$0 = $25;
    label = 29;
    break;
   }
   $last_result$0$off = (($last_result$0) + -1)|0;
   $last_result$0$cmp = ($last_result$0$off>>>0)>(1);
   if ($last_result$0$cmp) {
    $82 = ($$pre20|0)>(65535);
    if ($82) {
     $$0 = $25;
     label = 29;
     break;
    }
    $83 = HEAP8[$3>>0]|0;
    $84 = $83&255;
    $85 = $84 & 128;
    $86 = HEAP8[$19>>0]|0;
    $87 = $86&255;
    $88 = $85 & $87;
    $89 = ($88|0)==(0);
    if (!($89)) {
     $$0 = $25;
     label = 29;
     break;
    }
   }
   $90 = (($extra_instructions$0) + 1)|0;
   $extra_instructions$1 = $90;
  }
  $91 = ($25|0)<($$pre20|0);
  if ($91) {
   $last_result$1 = $last_result$0;
  } else {
   HEAP32[$5>>2] = 1073741824;
   $92 = HEAP32[$16>>2]|0;
   $93 = $92 >>> 8;
   $94 = HEAP8[$17>>0]|0;
   $95 = $94&255;
   $96 = (($95) + 255)|0;
   $97 = $93&255;
   $98 = $95 | 256;
   $99 = (((($this)) + 164|0) + ($98)|0);
   HEAP8[$99>>0] = $97;
   $100 = (($95) + 254)|0;
   $101 = $92&255;
   $102 = $96 | 256;
   $103 = (((($this)) + 164|0) + ($102)|0);
   HEAP8[$103>>0] = $101;
   $104 = HEAP8[$9>>0]|0;
   $105 = $104&255;
   $106 = $105 | 32;
   $107 = (($95) + 253)|0;
   $108 = $107&255;
   HEAP8[$17>>0] = $108;
   $109 = $106&255;
   $110 = $100 | 256;
   $111 = (((($this)) + 164|0) + ($110)|0);
   HEAP8[$111>>0] = $109;
   $112 = HEAP32[$13>>2]|0;
   $113 = (($112) + -7)|0;
   HEAP32[$13>>2] = $113;
   $114 = HEAP32[$2>>2]|0;
   $115 = (($114) + 7)|0;
   HEAP32[$2>>2] = $115;
   $116 = HEAP32[$10>>2]|0;
   $117 = (($116) + -7)|0;
   HEAP32[$10>>2] = $117;
   $118 = HEAP32[$8>>2]|0;
   $119 = (($118) + -7)|0;
   HEAP32[$8>>2] = $119;
   $120 = HEAP32[$7>>2]|0;
   $121 = (($120) + -7)|0;
   HEAP32[$7>>2] = $121;
   $122 = $105 | 4;
   $123 = $122&255;
   HEAP8[$9>>0] = $123;
   $124 = HEAP32[$18>>2]|0;
   $125 = ((($124)) + 65530|0);
   $126 = ((($124)) + 65531|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = $127&255;
   $129 = $128 << 8;
   $130 = HEAP8[$125>>0]|0;
   $131 = $130&255;
   $132 = $129 | $131;
   HEAP32[$16>>2] = $132;
   $last_result$1 = 0;
  }
  $133 = HEAP32[$0>>2]|0;
  $134 = ((($133)) + 10112|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = HEAP32[$6>>2]|0;
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($137)) + 32|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (FUNCTION_TABLE_iii[$139 & 511]($136,$25)|0);
  $141 = ($135|0)<($140|0);
  $x$y$i$i7 = $141 ? $135 : $140;
  $142 = HEAP32[$2>>2]|0;
  $143 = $142 ^ -1;
  $144 = (($x$y$i$i7) + ($143))|0;
  HEAP32[$7>>2] = $144;
  $145 = HEAP32[$8>>2]|0;
  $146 = ($145|0)>($144|0);
  if ($146) {
   $147 = HEAP8[$9>>0]|0;
   $148 = $147 & 4;
   $149 = ($148<<24>>24)==(0);
   $$$i$i$i4 = $149 ? $144 : $145;
   $t$0$i$i$i5 = $$$i$i$i4;
  } else {
   $t$0$i$i$i5 = $145;
  }
  HEAP32[$10>>2] = $t$0$i$i$i5;
  $150 = ($25|0)<($x$y$i$i7|0);
  do {
   if (!($150)) {
    $151 = HEAP8[$9>>0]|0;
    $152 = $151 & 4;
    $153 = ($152<<24>>24)==(0);
    $154 = ($last_result$1|0)==(1);
    $or$cond3 = $154 | $153;
    if ($or$cond3) {
     $155 = ($last_result$1|0)==(2);
     if ($155) {
      $201 = (($25) - ($142))|0;
      HEAP32[$7>>2] = $201;
      $202 = ($145|0)>($201|0);
      $203 = $202 & $153;
      $$$i$i$i$ = $203 ? $201 : $145;
      HEAP32[$10>>2] = $$$i$i$i$;
      break;
     } else {
      $156 = HEAP32[$6>>2]|0;
      $157 = HEAP32[$156>>2]|0;
      $158 = ((($157)) + 36|0);
      $159 = HEAP32[$158>>2]|0;
      FUNCTION_TABLE_vii[$159 & 1023]($156,$25);
      $160 = HEAP32[$16>>2]|0;
      $161 = $160 >>> 8;
      $162 = HEAP8[$17>>0]|0;
      $163 = $162&255;
      $164 = (($163) + 255)|0;
      $165 = $161&255;
      $166 = $163 | 256;
      $167 = (((($this)) + 164|0) + ($166)|0);
      HEAP8[$167>>0] = $165;
      $168 = (($163) + 254)|0;
      $169 = $160&255;
      $170 = $164 | 256;
      $171 = (((($this)) + 164|0) + ($170)|0);
      HEAP8[$171>>0] = $169;
      $172 = HEAP8[$9>>0]|0;
      $173 = $172&255;
      $174 = $173 | 32;
      $175 = (($163) + 253)|0;
      $176 = $175&255;
      HEAP8[$17>>0] = $176;
      $177 = $174&255;
      $178 = $168 | 256;
      $179 = (((($this)) + 164|0) + ($178)|0);
      HEAP8[$179>>0] = $177;
      $180 = HEAP32[$13>>2]|0;
      $181 = (($180) + -7)|0;
      HEAP32[$13>>2] = $181;
      $182 = HEAP32[$2>>2]|0;
      $183 = (($182) + 7)|0;
      HEAP32[$2>>2] = $183;
      $184 = HEAP32[$10>>2]|0;
      $185 = (($184) + -7)|0;
      HEAP32[$10>>2] = $185;
      $186 = HEAP32[$8>>2]|0;
      $187 = (($186) + -7)|0;
      HEAP32[$8>>2] = $187;
      $188 = HEAP32[$7>>2]|0;
      $189 = (($188) + -7)|0;
      HEAP32[$7>>2] = $189;
      $190 = $173 | 4;
      $191 = $190&255;
      HEAP8[$9>>0] = $191;
      $192 = HEAP32[$18>>2]|0;
      $193 = ((($192)) + 65534|0);
      $194 = ((($192)) + 65535|0);
      $195 = HEAP8[$194>>0]|0;
      $196 = $195&255;
      $197 = $196 << 8;
      $198 = HEAP8[$193>>0]|0;
      $199 = $198&255;
      $200 = $197 | $199;
      HEAP32[$16>>2] = $200;
      break;
     }
    }
   }
  } while(0);
  $204 = HEAP32[$4>>2]|0;
  $205 = ($204|0)>($25|0);
  if ($205) {
   $$0$i$i = $204;
  } else {
   $206 = HEAP32[$1>>2]|0;
   $207 = HEAP32[$15>>2]|0;
   $208 = ($207|0)<($206|0);
   if ($208) {
    __ZN7Nes_Ppu16render_bg_until_El($3,$206);
    $$pre$i$i = HEAP32[$4>>2]|0;
    $$0$i$i = $$pre$i$i;
   } else {
    $$0$i$i = $204;
   }
  }
  $209 = HEAP32[$0>>2]|0;
  $210 = ((($209)) + 9492|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = ($211|0)==(0);
  if ($212) {
   $$0$i$i$i = 1073741825;
  } else {
   $213 = ((($209)) + 9548|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ((($214)) + 1916|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ((($209)) + 9496|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = ((($209)) + 9516|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = (($220) + -1)|0;
   $222 = ((($209)) + 9508|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = Math_imul($221, $223)|0;
   $225 = (($216) + 1)|0;
   $226 = (($225) + ($218))|0;
   $phitmp$i = (($226) + ($224))|0;
   $$0$i$i$i = $phitmp$i;
  }
  $227 = ($$0$i$i|0)<($$0$i$i$i|0);
  $x$y$i1$i = $227 ? $$0$i$i : $$0$i$i$i;
  $228 = HEAP32[$5>>2]|0;
  $229 = ($x$y$i1$i|0)<($228|0);
  $x$y$i$i = $229 ? $x$y$i1$i : $228;
  $230 = ($extra_instructions$1|0)==(0);
  $231 = (($24) + 2)|0;
  $$ = $230 ? $x$y$i$i : $231;
  $232 = HEAP32[$11>>2]|0;
  $233 = HEAP32[$2>>2]|0;
  $234 = $233 ^ -1;
  $235 = (($$) + ($234))|0;
  $236 = (__ZN7Nes_Cpu3runEl($this,$235)|0);
  $237 = HEAP32[$12>>2]|0;
  $238 = HEAP32[$13>>2]|0;
  $239 = (($238) - ($237))|0;
  HEAP32[$13>>2] = $239;
  $240 = HEAP32[$2>>2]|0;
  $241 = (($240) + ($237))|0;
  HEAP32[$2>>2] = $241;
  $242 = HEAP32[$10>>2]|0;
  $243 = (($242) - ($237))|0;
  HEAP32[$10>>2] = $243;
  $244 = HEAP32[$8>>2]|0;
  $245 = (($244) - ($237))|0;
  HEAP32[$8>>2] = $245;
  $246 = HEAP32[$7>>2]|0;
  $247 = (($246) - ($237))|0;
  HEAP32[$7>>2] = $247;
  HEAP32[$1>>2] = $241;
  $248 = HEAP32[$11>>2]|0;
  $249 = (($248) - ($232))|0;
  $250 = HEAP32[$14>>2]|0;
  $251 = (($249) + ($250))|0;
  HEAP32[$14>>2] = $251;
  $23 = $241;$extra_instructions$0 = $extra_instructions$1;$last_result$0 = $236;
 }
 if ((label|0) == 7) {
  $32 = HEAP8[$3>>0]|0;
  $33 = $32&255;
  $34 = $33 & 128;
  $35 = HEAP8[$19>>0]|0;
  $36 = $35&255;
  $37 = $34 & $36;
  $38 = ($37|0)==(0);
  if (!($38)) {
   $$0 = $$lcssa31;
   return ($$0|0);
  }
  $39 = HEAP32[$16>>2]|0;
  $40 = $39 >>> 8;
  $41 = HEAP8[$17>>0]|0;
  $42 = $41&255;
  $43 = (($42) + 255)|0;
  $44 = $40&255;
  $45 = $42 | 256;
  $46 = (((($this)) + 164|0) + ($45)|0);
  HEAP8[$46>>0] = $44;
  $47 = (($42) + 254)|0;
  $48 = $39&255;
  $49 = $43 | 256;
  $50 = (((($this)) + 164|0) + ($49)|0);
  HEAP8[$50>>0] = $48;
  $51 = HEAP8[$9>>0]|0;
  $52 = $51&255;
  $53 = $52 | 32;
  $54 = (($42) + 253)|0;
  $55 = $54&255;
  HEAP8[$17>>0] = $55;
  $56 = $53&255;
  $57 = $47 | 256;
  $58 = (((($this)) + 164|0) + ($57)|0);
  HEAP8[$58>>0] = $56;
  $59 = HEAP32[$13>>2]|0;
  $60 = (($59) + -7)|0;
  HEAP32[$13>>2] = $60;
  $61 = HEAP32[$2>>2]|0;
  $62 = (($61) + 7)|0;
  HEAP32[$2>>2] = $62;
  $63 = HEAP32[$10>>2]|0;
  $64 = (($63) + -7)|0;
  HEAP32[$10>>2] = $64;
  $65 = HEAP32[$8>>2]|0;
  $66 = (($65) + -7)|0;
  HEAP32[$8>>2] = $66;
  $67 = HEAP32[$7>>2]|0;
  $68 = (($67) + -7)|0;
  HEAP32[$7>>2] = $68;
  $69 = $52 | 4;
  $70 = $69&255;
  HEAP8[$9>>0] = $70;
  $71 = HEAP32[$18>>2]|0;
  $72 = ((($71)) + 65530|0);
  $73 = ((($71)) + 65531|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $75 << 8;
  $77 = HEAP8[$72>>0]|0;
  $78 = $77&255;
  $79 = $76 | $78;
  HEAP32[$16>>2] = $79;
  $80 = (($$lcssa) + 8)|0;
  $$0 = $80;
  return ($$0|0);
 }
 else if ((label|0) == 29) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN8Nes_Core13emulate_frameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2232|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 2252|0);
 $2 = ((($this)) + 2244|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (__ZN7Nes_Ppu11begin_frameEl($1,$4)|0);
 $6 = (($5) + -1)|0;
 $7 = ((($this)) + 3108|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($this)) + 3076|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 3104|0);
 HEAP32[$9>>2] = $6;
 $10 = ((($this)) + 2212|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8192|0);
 $13 = (__ZN8Nes_Core14emulate_frame_Ev($this)|0);
 __ZN7Nes_Apu10run_until_El($12,$13);
 $14 = HEAP32[$7>>2]|0;
 HEAP32[$9>>2] = $14;
 $15 = HEAP32[$10>>2]|0;
 $16 = ((($15)) + 8192|0);
 $17 = (($14) + 1)|0;
 __ZN7Nes_Apu10run_until_El($16,$17);
 $18 = ((($this)) + 3016|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$9>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = (__ZN7Nes_Ppu9end_frameEl($1,$21)|0);
 $23 = $22&65535;
 HEAP16[$2>>1] = $23;
 $24 = ((($this)) + 2240|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 FUNCTION_TABLE_vii[$28 & 1023]($25,$21);
 $29 = HEAP32[$10>>2]|0;
 $30 = ((($29)) + 8192|0);
 __ZN7Nes_Apu9end_frameEl($30,$19);
 HEAP32[$9>>2] = 0;
 $31 = ((($this)) + 2248|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 return ($19|0);
}
function __ZN8Nes_Core20add_mapper_interceptEjjbb($this,$addr,$size,$read,$write) {
 $this = $this|0;
 $addr = $addr|0;
 $size = $size|0;
 $read = $read|0;
 $write = $write|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $page$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($addr) + 2047)|0;
 $1 = (($0) + ($size))|0;
 $2 = $1 >>> 11;
 $3 = $addr >>> 11;
 $4 = ($3>>>0)<($2>>>0);
 if (!($4)) {
  return;
 }
 $5 = $read&1;
 $6 = $write&1;
 $page$01 = $3;
 while(1) {
  $7 = (((($this)) + 3112|0) + ($page$01)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $9 | $5;
  $11 = $10&255;
  HEAP8[$7>>0] = $11;
  $12 = (((($this)) + 3145|0) + ($page$01)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 | $6;
  $16 = $15&255;
  HEAP8[$12>>0] = $16;
  $17 = (($page$01) + 1)|0;
  $18 = ($17|0)<($2|0);
  if ($18) {
   $page$01 = $17;
  } else {
   break;
  }
 }
 return;
}
function __ZN8Nes_Core8cpu_readEjl($this,$addr,$time) {
 $this = $this|0;
 $addr = $addr|0;
 $time = $time|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr & 57344;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = $addr & 2047;
  $3 = (((($this)) + 164|0) + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $$0 = $5;
  return ($$0|0);
 }
 $6 = $addr >>> 11;
 $7 = (($this) + ($6<<2)|0);
 $8 = ($addr>>>0)>(32767);
 if ($8) {
  $9 = HEAP32[$7>>2]|0;
  $10 = (($9) + ($addr)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $$0 = $12;
  return ($$0|0);
 }
 $13 = ((($this)) + 3108|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($time))|0;
 $16 = ($addr>>>0)<(16384);
 if ($16) {
  $17 = ((($this)) + 2252|0);
  $18 = (__ZN7Nes_Ppu4readEjl($17,$addr,$15)|0);
  $$0 = $18;
  return ($$0|0);
 }
 $19 = ((($this)) + 3104|0);
 HEAP32[$19>>2] = $15;
 $20 = (((($this)) + 3112|0) + ($6)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if (!($22)) {
  $23 = ((($this)) + 2240|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_iiii[$27 & 1023]($24,$15,$addr)|0);
  $29 = ($28|0)>(-1);
  if ($29) {
   $$0 = $28;
   return ($$0|0);
  }
 }
 $30 = ($addr>>>0)<(24576);
 if ($30) {
  $31 = (__ZN8Nes_Core7read_ioEj($this,$addr)|0);
  $$0 = $31;
  return ($$0|0);
 }
 $32 = ((($this)) + 3092|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33>>>0)>($addr>>>0);
 if ($34) {
  $35 = $addr & 8191;
  $36 = ((($this)) + 2212|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($35)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $$0 = $40;
  return ($$0|0);
 }
 $41 = ((($this)) + 3100|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)>($addr>>>0);
 if ($43) {
  $44 = HEAP32[$7>>2]|0;
  $45 = (($44) + ($addr)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $$0 = $47;
  return ($$0|0);
 } else {
  $48 = $addr >>> 8;
  $$0 = $48;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN8Nes_Core14cpu_write_2007Ei($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $$addr$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2258|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($this)) + 2648|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 2580|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2))|0;
 $div$i = ($1&65535) >>> 7;
 $8 = $div$i & 127;
 $9 = $7&65535;
 HEAP16[$0>>1] = $9;
 $10 = $7 ^ $2;
 $11 = $2 & 16383;
 $12 = ($8&65535)<(64);
 do {
  if ($12) {
   $13 = $8&65535;
   $14 = ((($this)) + 2668|0);
   $15 = (($14) + ($13)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = $data&255;
   $19 = (($4) + ($11)|0);
   HEAP8[$19>>0] = $18;
   $20 = ((($this)) + 2592|0);
   HEAP8[$20>>0] = 1;
   $21 = $2 >>> 4;
   $22 = $21 & 7;
   $23 = 1 << $22;
   $24 = $17 | $23;
   $25 = $24&255;
   HEAP8[$15>>0] = $25;
  } else {
   $26 = ($11>>>0)<(16128);
   if ($26) {
    $27 = $data&255;
    $28 = $2 & 1023;
    $29 = $2 >>> 10;
    $30 = $29 & 3;
    $31 = (((($this)) + 2628|0) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + ($28)|0);
    HEAP8[$33>>0] = $27;
    break;
   }
   $34 = $data & 63;
   $35 = $2 & 3;
   $36 = ($35|0)==(0);
   $37 = $2 & 15;
   $$addr$i$i = $36 ? $37 : $2;
   $38 = $$addr$i$i & 31;
   $39 = (((($this)) + 2264|0) + ($38)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $34&255;
   HEAP8[$39>>0] = $42;
   $43 = ($41|0)==($34|0);
   if (!($43)) {
    $44 = ((($this)) + 2588|0);
    HEAP32[$44>>2] = 24;
   }
  }
 } while(0);
 $45 = $10 & 4096;
 $46 = ($45|0)==(0);
 if ($46) {
  return;
 }
 $47 = ((($this)) + 2240|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 56|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_vi[$51 & 1023]($48);
 return;
}
function __ZN8Nes_Core9cpu_writeEjil($this,$addr,$data,$time) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $addr & 57344;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = $data&255;
  $3 = $addr & 2047;
  $4 = (((($this)) + 164|0) + ($3)|0);
  HEAP8[$4>>0] = $2;
  return;
 }
 $5 = ((($this)) + 3108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($time))|0;
 $8 = ($addr>>>0)<(16384);
 if ($8) {
  $9 = $addr & 7;
  $10 = ($9|0)==(7);
  if ($10) {
   __ZN8Nes_Core14cpu_write_2007Ei($this,$data);
   return;
  } else {
   $11 = ((($this)) + 2252|0);
   __ZN7Nes_Ppu5writeElji($11,$7,$addr,$data);
   return;
  }
 }
 $12 = ((($this)) + 3104|0);
 HEAP32[$12>>2] = $7;
 $13 = $addr >>> 11;
 $14 = (((($this)) + 3145|0) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  $17 = ((($this)) + 2240|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiiii[$21 & 255]($18,$7,$addr,$data)|0);
  if ($22) {
   return;
  }
 }
 $23 = ($addr>>>0)<(24576);
 if ($23) {
  __ZN8Nes_Core8write_ioEji($this,$addr,$data);
  return;
 }
 $24 = ((($this)) + 3096|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25>>>0)>($addr>>>0);
 if ($26) {
  $27 = $data&255;
  $28 = $addr & 8191;
  $29 = ((($this)) + 2212|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($28)|0);
  HEAP8[$31>>0] = $27;
  return;
 }
 $32 = ($addr>>>0)>(32767);
 if (!($32)) {
  return;
 }
 $33 = ((($this)) + 2240|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_viiii[$37 & 1023]($34,$38,$addr,$data);
 return;
}
function __ZN7Nes_Cpu5resetEPKv($this,$unmapped_page) {
 $this = $this|0;
 $unmapped_page = $unmapped_page|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 148|0);
 $1 = ((($this)) + 136|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 132|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 140|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP8[$0+12>>0]=0|0;
 HEAP32[$3>>2] = 1073741824;
 $4 = ((($this)) + 144|0);
 HEAP32[$4>>2] = 1073741824;
 $5 = ((($this)) + 164|0);
 HEAP32[$this>>2] = $5;
 $6 = ((($this)) + -1884|0);
 $7 = ((($this)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($this)) + -3932|0);
 $9 = ((($this)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($this)) + -5980|0);
 $11 = ((($this)) + 12|0);
 HEAP32[$11>>2] = $10;
 $i$01 = 4;
 while(1) {
  $12 = $i$01 << 11;
  $13 = (0 - ($12))|0;
  $14 = (($unmapped_page) + ($13)|0);
  $15 = (($this) + ($i$01<<2)|0);
  HEAP32[$15>>2] = $14;
  $16 = (($i$01) + 1)|0;
  $exitcond = ($16|0)==(33);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $16;
  }
 }
 return;
}
function __ZN7Nes_Cpu8map_codeEjjPKv($this,$start,$size,$data) {
 $this = $this|0;
 $start = $start|0;
 $size = $size|0;
 $data = $data|0;
 var $$in = 0, $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $start >>> 11;
 $1 = $size >>> 11;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = (0 - ($0))|0;
 $$sum = $3 << 11;
 $4 = (($data) + ($$sum)|0);
 $$in = $1;
 while(1) {
  $5 = (($$in) + -1)|0;
  $6 = (($5) + ($0))|0;
  $7 = (($this) + ($6<<2)|0);
  HEAP32[$7>>2] = $4;
  $8 = ($5|0)==(0);
  if ($8) {
   break;
  } else {
   $$in = $5;
  }
 }
 return;
}
function __ZN7Nes_Cpu3runEl($this,$end) {
 $this = $this|0;
 $end = $end|0;
 var $$ = 0, $$$i$i = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$in = 0, $$in163 = 0, $$lcssa = 0, $$lcssa192 = 0, $$lcssa194 = 0, $$lcssa195 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
 var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
 var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
 var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
 var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
 var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
 var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
 var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
 var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
 var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
 var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
 var $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0;
 var $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0;
 var $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0;
 var $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0;
 var $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0;
 var $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0;
 var $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0;
 var $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0;
 var $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0;
 var $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0;
 var $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0;
 var $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0;
 var $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0;
 var $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0;
 var $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0;
 var $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0;
 var $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0;
 var $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0;
 var $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0;
 var $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0;
 var $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0;
 var $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0$be = 0, $a$0108 = 0, $a$0125 = 0, $a$0125$lcssa = 0, $a$0125$lcssa186 = 0, $a$1 = 0, $a$2 = 0, $c$0$be = 0;
 var $c$0119 = 0, $c$1 = 0, $c$10 = 0, $c$10$lcssa = 0, $c$11 = 0, $c$11$lcssa = 0, $c$12 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $clock_count$0$be = 0, $clock_count$0128 = 0, $clock_count$1 = 0, $clock_count$10 = 0, $clock_count$11 = 0;
 var $clock_count$12 = 0, $clock_count$13 = 0, $clock_count$14 = 0, $clock_count$15 = 0, $clock_count$16 = 0, $clock_count$17 = 0, $clock_count$18 = 0, $clock_count$19 = 0, $clock_count$2 = 0, $clock_count$3 = 0, $clock_count$4 = 0, $clock_count$5 = 0, $clock_count$6 = 0, $clock_count$7 = 0, $clock_count$8 = 0, $clock_count$9 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0;
 var $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$20 = 0, $data$21 = 0, $data$22 = 0, $data$23 = 0, $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$29 = 0, $data$3 = 0;
 var $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$34 = 0, $data$35 = 0, $data$36 = 0, $data$37 = 0, $data$38 = 0, $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0, $data$42 = 0, $data$43 = 0, $data$44 = 0, $data$45 = 0, $data$46 = 0, $data$47 = 0, $data$49 = 0;
 var $data$5 = 0, $data$50 = 0, $data$51 = 0, $data$54 = 0, $data$55 = 0, $data$56 = 0, $data$5623 = 0, $data$57 = 0, $data$58 = 0, $data$5834 = 0, $data$59 = 0, $data$6 = 0, $data$60 = 0, $data$6045 = 0, $data$61 = 0, $data$62 = 0, $data$6256 = 0, $data$63 = 0, $data$64 = 0, $data$6469 = 0;
 var $data$65 = 0, $data$66 = 0, $data$6680 = 0, $data$67 = 0, $data$68 = 0, $data$69 = 0, $data$7 = 0, $data$70 = 0, $data$7091 = 0, $data$8 = 0, $data$9 = 0, $nz$0$be = 0, $nz$0118 = 0, $nz$1 = 0, $nz$13 = 0, $nz$2 = 0, $nz$3 = 0, $nz$4 = 0, $nz$5 = 0, $nz$6 = 0;
 var $nz$6$lcssa = 0, $nz$7 = 0, $nz$7$lcssa = 0, $or$cond = 0, $pc$0 = 0, $pc$1$be = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$18 = 0, $pc$19 = 0, $pc$2 = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0;
 var $pc$222529 = 0, $pc$2226 = 0, $pc$23 = 0, $pc$233640 = 0, $pc$2337 = 0, $pc$24 = 0, $pc$244751 = 0, $pc$2448 = 0, $pc$25 = 0, $pc$255862 = 0, $pc$2559 = 0, $pc$26 = 0, $pc$267175 = 0, $pc$2672 = 0, $pc$27 = 0, $pc$278286 = 0, $pc$2783 = 0, $pc$28 = 0, $pc$29 = 0, $pc$3 = 0;
 var $pc$30 = 0, $pc$3092 = 0, $pc$3093 = 0, $pc$31 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $result = 0, $result$0$i20 = 0, $sext = 0, $sp$0$be = 0, $sp$0126 = 0, $sp$1 = 0, $sp$2 = 0, $sp$2$lcssa = 0, $sp$3 = 0, $sp$3$lcssa = 0;
 var $sp$4 = 0, $status$0$be = 0, $status$0122 = 0, $status$1 = 0, $status$2 = 0, $status$2$lcssa = 0, $status$3 = 0, $status$3$lcssa = 0, $status$4 = 0, $t$0$i$i = 0, $temp28$0 = 0, $temp49$0 = 0, $temp50$0 = 0, $temp57$1 = 0, $temp58$1 = 0, $temp73$065 = 0, $temp90$1 = 0, $x$0$be = 0, $x$0$pn = 0, $x$0$pn10 = 0;
 var $x$0$pn11 = 0, $x$0$pn12 = 0, $x$0$pn13 = 0, $x$0$pn14 = 0, $x$0$pn15 = 0, $x$0$pn4 = 0, $x$0$pn5 = 0, $x$0$pn6 = 0, $x$0$pn7 = 0, $x$0$pn8 = 0, $x$0$pn9 = 0, $x$0105 = 0, $x$0124 = 0, $x$0124$lcssa = 0, $x$0124$lcssa188 = 0, $x$1 = 0, $y$0$be = 0, $y$0102 = 0, $y$0123 = 0, $y$0123$lcssa = 0;
 var $y$0123$lcssa190 = 0, $y$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = ((($this)) + 144|0);
 HEAP32[$0>>2] = $end;
 $1 = ((($this)) + 140|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<($end|0);
 $4 = ((($this)) + 159|0);
 if ($3) {
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 & 4;
  $7 = ($6<<24>>24)==(0);
  $$$i$i = $7 ? $2 : $end;
  $t$0$i$i = $$$i$i;
 } else {
  $t$0$i$i = $end;
 }
 $8 = ((($this)) + 132|0);
 HEAP32[$8>>2] = $t$0$i$i;
 $9 = ((($this)) + 136|0);
 HEAP32[$9>>2] = 0;
 $result = 0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 152|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($this)) + 160|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) + 1)|0;
 $17 = $16 | 256;
 $18 = ((($this)) + 156|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ((($this)) + 157|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ((($this)) + 158|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = HEAP8[$4>>0]|0;
 $28 = $27&255;
 $29 = $28 & 76;
 $30 = $28 << 8;
 $31 = $28 << 4;
 $32 = $31 & 2048;
 $33 = $28 & 2;
 $34 = $32 | $33;
 $35 = $34 ^ 2;
 $36 = $12 >>> 11;
 $37 = (($this) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($12)|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = HEAP32[$8>>2]|0;
 $42 = ($10|0)<($41|0);
 if (!($42)) {
  $a$0108 = $20;$c$12 = $30;$clock_count$19 = $10;$nz$13 = $35;$pc$31 = $12;$sp$4 = $17;$status$4 = $29;$x$0105 = $23;$y$0102 = $26;
  $1660 = $status$4 & 76;
  $1661 = $c$12 >>> 8;
  $1662 = $1661 & 1;
  $1663 = $1660 | $1662;
  $1664 = $nz$13 & 2176;
  $1665 = ($1664|0)==(0);
  $1666 = $1663 | 128;
  $$18 = $1665 ? $1663 : $1666;
  $1667 = $nz$13 & 255;
  $1668 = ($1667|0)==(0);
  $1669 = $$18 | 2;
  $temp90$1 = $1668 ? $1669 : $$18;
  $1670 = $temp90$1&255;
  HEAP8[$4>>0] = $1670;
  HEAP32[$9>>2] = $clock_count$19;
  HEAP32[$11>>2] = $pc$31;
  $1671 = (($sp$4) + 255)|0;
  $1672 = $1671&255;
  HEAP8[$13>>0] = $1672;
  $1673 = $a$0108&255;
  HEAP8[$18>>0] = $1673;
  $1674 = $x$0105&255;
  HEAP8[$21>>0] = $1674;
  $1675 = $y$0102&255;
  HEAP8[$24>>0] = $1675;
  HEAP32[$1>>2] = 1073741824;
  $1676 = $result;
  STACKTOP = sp;return ($1676|0);
 }
 $43 = $40&255;
 $44 = ((($this)) + 148|0);
 $45 = ((($this)) + 2252|0);
 $46 = ((($this)) + 2254|0);
 $47 = ((($this)) + 3076|0);
 $48 = ((($this)) + 2257|0);
 $49 = ((($this)) + 3108|0);
 $50 = ((($this)) + 124|0);
 $$in = $12;$63 = $43;$67 = $38;$794 = $40;$a$0125 = $20;$c$0119 = $30;$clock_count$0128 = $10;$nz$0118 = $35;$sp$0126 = $17;$status$0122 = $29;$x$0124 = $23;$y$0123 = $26;
 L7: while(1) {
  $61 = (($$in) + 1)|0;
  $62 = (839881 + ($63)|0);
  $64 = HEAP8[$62>>0]|0;
  $65 = $64&255;
  $52 = (($65) + ($clock_count$0128))|0;
  $66 = (($67) + ($61)|0);
  $68 = HEAP8[$66>>0]|0;
  $69 = $68&255;
  L9: do {
   switch ($63|0) {
   case 181:  {
    $70 = (($69) + ($x$0124))|0;
    $71 = $70 & 255;
    $data$0 = $71;
    label = 9;
    break;
   }
   case 165:  {
    $data$0 = $69;
    label = 9;
    break;
   }
   case 208:  {
    $76 = (($$in) + 2)|0;
    $77 = $68 << 24 >> 24;
    $78 = $nz$0118&255;
    $79 = ($78<<24>>24)==(0);
    if ($79) {
     $pc$0 = $76;
     label = 5;
    } else {
     $80 = $76 & 255;
     $81 = (($77) + ($80))|0;
     $82 = (($77) + ($76))|0;
     $83 = $82 & 65535;
     $84 = $81 >>> 8;
     $85 = $84 & 1;
     $86 = (($85) + ($52))|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $86;$nz$0$be = $nz$0118;$pc$1$be = $83;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 32:  {
    $87 = (($$in) + 2)|0;
    $88 = HEAP16[$66>>1]|0;
    $89 = $88&65535;
    $90 = $87 >>> 8;
    $91 = $90&255;
    $92 = (($sp$0126) + -1)|0;
    $93 = $92 | 256;
    $94 = (((($this)) + 164|0) + ($93)|0);
    HEAP8[$94>>0] = $91;
    $95 = (($sp$0126) + -2)|0;
    $96 = $95 | 256;
    $97 = $87&255;
    $98 = (((($this)) + 164|0) + ($96)|0);
    HEAP8[$98>>0] = $97;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $89;$sp$0$be = $96;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 76:  {
    $99 = HEAP16[$66>>1]|0;
    $100 = $99&65535;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $100;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 232:  {
    $101 = (($x$0124) + 1)|0;
    $102 = $101 & 255;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $101;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $102;$y$0$be = $y$0123;
    break;
   }
   case 16:  {
    $103 = (($$in) + 2)|0;
    $104 = $68 << 24 >> 24;
    $105 = $nz$0118 & 2176;
    $106 = ($105|0)==(0);
    if ($106) {
     $107 = $103 & 255;
     $108 = (($104) + ($107))|0;
     $109 = (($104) + ($103))|0;
     $110 = $109 & 65535;
     $111 = $108 >>> 8;
     $112 = $111 & 1;
     $113 = (($112) + ($52))|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $113;$nz$0$be = $nz$0118;$pc$1$be = $110;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $pc$0 = $103;
     label = 5;
    }
    break;
   }
   case 193:  {
    $114 = (($69) + ($x$0124))|0;
    $115 = (($114) + 1)|0;
    $116 = $115 & 255;
    $117 = (((($this)) + 164|0) + ($116)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = $119 << 8;
    $121 = $114 & 255;
    $122 = (((($this)) + 164|0) + ($121)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = $120 | $124;
    $clock_count$1 = $52;$data$3 = $125;$pc$2 = $61;
    label = 26;
    break;
   }
   case 209:  {
    $126 = (((($this)) + 164|0) + ($69)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = (($128) + ($y$0123))|0;
    $130 = (($69) + 1)|0;
    $131 = $130 & 255;
    $132 = (((($this)) + 164|0) + ($131)|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = $133&255;
    $135 = $134 << 8;
    $136 = (($135) + ($129))|0;
    $137 = $129 >> 8;
    $138 = (($137) + ($52))|0;
    $139 = $129 & 256;
    $140 = ($139|0)==(0);
    if ($140) {
     $clock_count$1 = $138;$data$3 = $136;$pc$2 = $61;
     label = 26;
    } else {
     $141 = (($136) - ($139))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$141,$138)|0);
     $clock_count$1 = $138;$data$3 = $136;$pc$2 = $61;
     label = 26;
    }
    break;
   }
   case 213:  {
    $142 = (($69) + ($x$0124))|0;
    $143 = $142 & 255;
    $data$1 = $143;
    label = 21;
    break;
   }
   case 197:  {
    $data$1 = $69;
    label = 21;
    break;
   }
   case 217:  {
    $x$0$pn15 = $y$0123;
    label = 23;
    break;
   }
   case 221:  {
    $x$0$pn15 = $x$0124;
    label = 23;
    break;
   }
   case 205:  {
    $158 = (($$in) + 2)|0;
    $159 = (($67) + ($158)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $162 = $161 << 8;
    $163 = $162 | $69;
    $clock_count$1 = $52;$data$3 = $163;$pc$2 = $158;
    label = 26;
    break;
   }
   case 201:  {
    $clock_count$2 = $52;$data$4 = $69;$pc$3 = $61;
    label = 27;
    break;
   }
   case 48:  {
    $169 = (($$in) + 2)|0;
    $170 = $68 << 24 >> 24;
    $171 = $nz$0118 & 2176;
    $172 = ($171|0)==(0);
    if ($172) {
     $pc$0 = $169;
     label = 5;
    } else {
     $173 = $169 & 255;
     $174 = (($170) + ($173))|0;
     $175 = (($170) + ($169))|0;
     $176 = $175 & 65535;
     $177 = $174 >>> 8;
     $178 = $177 & 1;
     $179 = (($178) + ($52))|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $179;$nz$0$be = $nz$0118;$pc$1$be = $176;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 240:  {
    $180 = (($$in) + 2)|0;
    $181 = $68 << 24 >> 24;
    $182 = $nz$0118&255;
    $183 = ($182<<24>>24)==(0);
    if ($183) {
     $184 = $180 & 255;
     $185 = (($181) + ($184))|0;
     $186 = (($181) + ($180))|0;
     $187 = $186 & 65535;
     $188 = $185 >>> 8;
     $189 = $188 & 1;
     $190 = (($189) + ($52))|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $190;$nz$0$be = $nz$0118;$pc$1$be = $187;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $pc$0 = $180;
     label = 5;
    }
    break;
   }
   case 149:  {
    $191 = (($69) + ($x$0124))|0;
    $192 = $191 & 255;
    $data$5 = $192;
    label = 33;
    break;
   }
   case 133:  {
    $data$5 = $69;
    label = 33;
    break;
   }
   case 200:  {
    $196 = (($y$0123) + 1)|0;
    $197 = $196 & 255;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $196;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $197;
    break;
   }
   case 168:  {
    $y$1 = $a$0125;
    label = 36;
    break;
   }
   case 152:  {
    $y$1 = $y$0123;
    label = 36;
    break;
   }
   case 173:  {
    $198 = HEAP16[$66>>1]|0;
    $199 = $198&65535;
    $200 = (($$in) + 3)|0;
    $201 = ($198<<16>>16)==(8194);
    if ($201) {
     $202 = HEAP8[$46>>0]|0;
     $203 = $202&255;
     $204 = HEAP32[$47>>2]|0;
     HEAP8[$48>>0] = 0;
     $205 = ($204|0)>($52|0);
     if ($205) {
      $a$0$be = $203;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $203;$pc$1$be = $200;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
      break L9;
     }
     $206 = HEAP32[$49>>2]|0;
     $207 = (($206) + ($52))|0;
     $208 = (__ZN7Nes_Ppu9read_2002El($45,$207)|0);
     $a$0$be = $208;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $208;$pc$1$be = $200;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    } else {
     $209 = $199 & 2047;
     $210 = (((($this)) + 164|0) + ($209)|0);
     $211 = HEAP8[$210>>0]|0;
     $212 = $211&255;
     $213 = ($198&65535)>(8191);
     if (!($213)) {
      $a$0$be = $212;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $212;$pc$1$be = $200;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
      break L9;
     }
     $214 = (__ZN8Nes_Core8cpu_readEjl($this,$199,$52)|0);
     $a$0$be = $214;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $214;$pc$1$be = $200;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    }
    break;
   }
   case 96:  {
    $215 = (((($this)) + 164|0) + ($sp$0126)|0);
    $216 = HEAP8[$215>>0]|0;
    $217 = $216&255;
    $218 = (($217) + 1)|0;
    $219 = (($sp$0126) + -255)|0;
    $220 = $219 | 256;
    $221 = (((($this)) + 164|0) + ($220)|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = $222&255;
    $224 = $223 << 8;
    $225 = (($218) + ($224))|0;
    $226 = (($sp$0126) + -254)|0;
    $227 = $226 | 256;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $225;$sp$0$be = $227;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 153:  {
    $x$0$pn14 = $y$0123;
    label = 44;
    break;
   }
   case 157:  {
    $x$0$pn14 = $x$0124;
    label = 44;
    break;
   }
   case 141:  {
    $236 = (($$in) + 2)|0;
    $237 = (($67) + ($236)|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = $238&255;
    $240 = $239 << 8;
    $241 = $240 | $69;
    $data$7 = $241;$pc$4 = $236;
    label = 46;
    break;
   }
   case 169:  {
    $247 = (($$in) + 2)|0;
    $a$0$be = $69;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $69;$pc$1$be = $247;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 185:  {
    $248 = (($y$0123) - ($x$0124))|0;
    $249 = (($248) + ($69))|0;
    $data$8 = $249;
    label = 53;
    break;
   }
   case 189:  {
    $data$8 = $69;
    label = 53;
    break;
   }
   case 177:  {
    $273 = (($69) + 1)|0;
    $274 = $273 & 255;
    $275 = (((($this)) + 164|0) + ($274)|0);
    $276 = HEAP8[$275>>0]|0;
    $277 = $276&255;
    $278 = (((($this)) + 164|0) + ($69)|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    $281 = (($280) + ($y$0123))|0;
    $282 = (($$in) + 2)|0;
    $283 = $281 >>> 8;
    $284 = (($283) + ($52))|0;
    $285 = $277 << 8;
    $286 = (($281) + ($285))|0;
    $287 = $286 & 65535;
    $288 = $287 >>> 11;
    $289 = (($this) + ($288<<2)|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = (($290) + ($287)|0);
    $292 = HEAP8[$291>>0]|0;
    $293 = $292&255;
    $294 = (($286) + -8192)|0;
    $295 = ($294>>>0)>(24575);
    if ($295) {
     $a$0$be = $293;$c$0$be = $c$0119;$clock_count$0$be = $284;$nz$0$be = $293;$pc$1$be = $282;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $296 = $281 & 256;
     $297 = ($296|0)==(0);
     if (!($297)) {
      $298 = (($286) + -256)|0;
      (__ZN8Nes_Core8cpu_readEjl($this,$298,$284)|0);
     }
     $299 = (__ZN8Nes_Core8cpu_readEjl($this,$286,$284)|0);
     $a$0$be = $299;$c$0$be = $c$0119;$clock_count$0$be = $284;$nz$0$be = $299;$pc$1$be = $282;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 161:  {
    $300 = (($69) + ($x$0124))|0;
    $301 = (($300) + 1)|0;
    $302 = $301 & 255;
    $303 = (((($this)) + 164|0) + ($302)|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = $305 << 8;
    $307 = $300 & 255;
    $308 = (((($this)) + 164|0) + ($307)|0);
    $309 = HEAP8[$308>>0]|0;
    $310 = $309&255;
    $311 = $306 | $310;
    $312 = (__ZN8Nes_Core8cpu_readEjl($this,$311,$52)|0);
    $313 = (($$in) + 2)|0;
    $a$0$be = $312;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $312;$pc$1$be = $313;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 80:  {
    $314 = (($$in) + 2)|0;
    $315 = $68 << 24 >> 24;
    $316 = $status$0122 & 64;
    $317 = ($316|0)==(0);
    if ($317) {
     $318 = $314 & 255;
     $319 = (($315) + ($318))|0;
     $320 = (($315) + ($314))|0;
     $321 = $320 & 65535;
     $322 = $319 >>> 8;
     $323 = $322 & 1;
     $324 = (($323) + ($52))|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $324;$nz$0$be = $nz$0118;$pc$1$be = $321;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $pc$0 = $314;
     label = 5;
    }
    break;
   }
   case 112:  {
    $325 = (($$in) + 2)|0;
    $326 = $68 << 24 >> 24;
    $327 = $status$0122 & 64;
    $328 = ($327|0)==(0);
    if ($328) {
     $pc$0 = $325;
     label = 5;
    } else {
     $329 = $325 & 255;
     $330 = (($326) + ($329))|0;
     $331 = (($326) + ($325))|0;
     $332 = $331 & 65535;
     $333 = $330 >>> 8;
     $334 = $333 & 1;
     $335 = (($334) + ($52))|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $335;$nz$0$be = $nz$0118;$pc$1$be = $332;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 176:  {
    $336 = (($$in) + 2)|0;
    $337 = $68 << 24 >> 24;
    $338 = $c$0119 & 256;
    $339 = ($338|0)==(0);
    if ($339) {
     $pc$0 = $336;
     label = 5;
    } else {
     $340 = $336 & 255;
     $341 = (($337) + ($340))|0;
     $342 = (($337) + ($336))|0;
     $343 = $342 & 65535;
     $344 = $341 >>> 8;
     $345 = $344 & 1;
     $346 = (($345) + ($52))|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $346;$nz$0$be = $nz$0118;$pc$1$be = $343;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 144:  {
    $347 = (($$in) + 2)|0;
    $348 = $68 << 24 >> 24;
    $349 = $c$0119 & 256;
    $350 = ($349|0)==(0);
    if ($350) {
     $351 = $347 & 255;
     $352 = (($348) + ($351))|0;
     $353 = (($348) + ($347))|0;
     $354 = $353 & 65535;
     $355 = $352 >>> 8;
     $356 = $355 & 1;
     $357 = (($356) + ($52))|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $357;$nz$0$be = $nz$0118;$pc$1$be = $354;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $pc$0 = $347;
     label = 5;
    }
    break;
   }
   case 148:  {
    $358 = (($69) + ($x$0124))|0;
    $359 = $358 & 255;
    $data$9 = $359;
    label = 71;
    break;
   }
   case 132:  {
    $data$9 = $69;
    label = 71;
    break;
   }
   case 150:  {
    $363 = (($69) + ($y$0123))|0;
    $364 = $363 & 255;
    $data$10 = $364;
    label = 73;
    break;
   }
   case 134:  {
    $data$10 = $69;
    label = 73;
    break;
   }
   case 182:  {
    $368 = (($69) + ($y$0123))|0;
    $369 = $368 & 255;
    $data$11 = $369;
    label = 75;
    break;
   }
   case 166:  {
    $data$11 = $69;
    label = 75;
    break;
   }
   case 162:  {
    $data$12 = $69;
    label = 76;
    break;
   }
   case 180:  {
    $374 = (($69) + ($x$0124))|0;
    $375 = $374 & 255;
    $data$13 = $375;
    label = 78;
    break;
   }
   case 164:  {
    $data$13 = $69;
    label = 78;
    break;
   }
   case 160:  {
    $data$14 = $69;
    label = 79;
    break;
   }
   case 145:  {
    $380 = (((($this)) + 164|0) + ($69)|0);
    $381 = HEAP8[$380>>0]|0;
    $382 = $381&255;
    $383 = (($382) + ($y$0123))|0;
    $384 = (($69) + 1)|0;
    $385 = $384 & 255;
    $386 = (((($this)) + 164|0) + ($385)|0);
    $387 = HEAP8[$386>>0]|0;
    $388 = $387&255;
    $389 = $388 << 8;
    $390 = (($389) + ($383))|0;
    $391 = $383 & 256;
    $392 = (($390) - ($391))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$392,$52)|0);
    $data$7 = $390;$pc$4 = $61;
    label = 46;
    break;
   }
   case 129:  {
    $393 = (($69) + ($x$0124))|0;
    $394 = (($393) + 1)|0;
    $395 = $394 & 255;
    $396 = (((($this)) + 164|0) + ($395)|0);
    $397 = HEAP8[$396>>0]|0;
    $398 = $397&255;
    $399 = $398 << 8;
    $400 = $393 & 255;
    $401 = (((($this)) + 164|0) + ($400)|0);
    $402 = HEAP8[$401>>0]|0;
    $403 = $402&255;
    $404 = $399 | $403;
    $data$7 = $404;$pc$4 = $61;
    label = 46;
    break;
   }
   case 188:  {
    $405 = (($69) + ($x$0124))|0;
    $406 = $405 >>> 8;
    $407 = (($406) + ($52))|0;
    $clock_count$3 = $407;$data$15 = $405;
    label = 83;
    break;
   }
   case 172:  {
    $clock_count$3 = $52;$data$15 = $69;
    label = 83;
    break;
   }
   case 190:  {
    $419 = (($69) + ($y$0123))|0;
    $420 = $419 >>> 8;
    $421 = (($420) + ($52))|0;
    $clock_count$4 = $421;$data$16 = $419;
    label = 87;
    break;
   }
   case 174:  {
    $clock_count$4 = $52;$data$16 = $69;
    label = 87;
    break;
   }
   case 140:  {
    $temp28$0 = $y$0123;
    label = 91;
    break;
   }
   case 142:  {
    $temp28$0 = $x$0124;
    label = 91;
    break;
   }
   case 236:  {
    $440 = HEAP16[$66>>1]|0;
    $441 = $440&65535;
    $442 = (($$in) + 2)|0;
    $443 = (__ZN8Nes_Core8cpu_readEjl($this,$441,$52)|0);
    $data$17 = $443;$pc$5 = $442;
    label = 99;
    break;
   }
   case 228:  {
    $444 = (((($this)) + 164|0) + ($69)|0);
    $445 = HEAP8[$444>>0]|0;
    $446 = $445&255;
    $data$17 = $446;$pc$5 = $61;
    label = 99;
    break;
   }
   case 224:  {
    $data$17 = $69;$pc$5 = $61;
    label = 99;
    break;
   }
   case 204:  {
    $451 = HEAP16[$66>>1]|0;
    $452 = $451&65535;
    $453 = (($$in) + 2)|0;
    $454 = (__ZN8Nes_Core8cpu_readEjl($this,$452,$52)|0);
    $data$18 = $454;$pc$6 = $453;
    label = 102;
    break;
   }
   case 196:  {
    $455 = (((($this)) + 164|0) + ($69)|0);
    $456 = HEAP8[$455>>0]|0;
    $457 = $456&255;
    $data$18 = $457;$pc$6 = $61;
    label = 102;
    break;
   }
   case 192:  {
    $data$18 = $69;$pc$6 = $61;
    label = 102;
    break;
   }
   case 33:  {
    $462 = (($69) + ($x$0124))|0;
    $463 = (($462) + 1)|0;
    $464 = $463 & 255;
    $465 = (((($this)) + 164|0) + ($464)|0);
    $466 = HEAP8[$465>>0]|0;
    $467 = $466&255;
    $468 = $467 << 8;
    $469 = $462 & 255;
    $470 = (((($this)) + 164|0) + ($469)|0);
    $471 = HEAP8[$470>>0]|0;
    $472 = $471&255;
    $473 = $468 | $472;
    $clock_count$5 = $52;$data$21 = $473;$pc$7 = $61;
    label = 112;
    break;
   }
   case 49:  {
    $474 = (((($this)) + 164|0) + ($69)|0);
    $475 = HEAP8[$474>>0]|0;
    $476 = $475&255;
    $477 = (($476) + ($y$0123))|0;
    $478 = (($69) + 1)|0;
    $479 = $478 & 255;
    $480 = (((($this)) + 164|0) + ($479)|0);
    $481 = HEAP8[$480>>0]|0;
    $482 = $481&255;
    $483 = $482 << 8;
    $484 = (($483) + ($477))|0;
    $485 = $477 >> 8;
    $486 = (($485) + ($52))|0;
    $487 = $477 & 256;
    $488 = ($487|0)==(0);
    if ($488) {
     $clock_count$5 = $486;$data$21 = $484;$pc$7 = $61;
     label = 112;
    } else {
     $489 = (($484) - ($487))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$489,$486)|0);
     $clock_count$5 = $486;$data$21 = $484;$pc$7 = $61;
     label = 112;
    }
    break;
   }
   case 53:  {
    $490 = (($69) + ($x$0124))|0;
    $491 = $490 & 255;
    $data$19 = $491;
    label = 107;
    break;
   }
   case 37:  {
    $data$19 = $69;
    label = 107;
    break;
   }
   case 57:  {
    $x$0$pn13 = $y$0123;
    label = 109;
    break;
   }
   case 61:  {
    $x$0$pn13 = $x$0124;
    label = 109;
    break;
   }
   case 45:  {
    $506 = (($$in) + 2)|0;
    $507 = (($67) + ($506)|0);
    $508 = HEAP8[$507>>0]|0;
    $509 = $508&255;
    $510 = $509 << 8;
    $511 = $510 | $69;
    $clock_count$5 = $52;$data$21 = $511;$pc$7 = $506;
    label = 112;
    break;
   }
   case 41:  {
    $clock_count$6 = $52;$data$22 = $69;$pc$8 = $61;
    label = 113;
    break;
   }
   case 65:  {
    $515 = (($69) + ($x$0124))|0;
    $516 = (($515) + 1)|0;
    $517 = $516 & 255;
    $518 = (((($this)) + 164|0) + ($517)|0);
    $519 = HEAP8[$518>>0]|0;
    $520 = $519&255;
    $521 = $520 << 8;
    $522 = $515 & 255;
    $523 = (((($this)) + 164|0) + ($522)|0);
    $524 = HEAP8[$523>>0]|0;
    $525 = $524&255;
    $526 = $521 | $525;
    $clock_count$7 = $52;$data$25 = $526;$pc$9 = $61;
    label = 123;
    break;
   }
   case 81:  {
    $527 = (((($this)) + 164|0) + ($69)|0);
    $528 = HEAP8[$527>>0]|0;
    $529 = $528&255;
    $530 = (($529) + ($y$0123))|0;
    $531 = (($69) + 1)|0;
    $532 = $531 & 255;
    $533 = (((($this)) + 164|0) + ($532)|0);
    $534 = HEAP8[$533>>0]|0;
    $535 = $534&255;
    $536 = $535 << 8;
    $537 = (($536) + ($530))|0;
    $538 = $530 >> 8;
    $539 = (($538) + ($52))|0;
    $540 = $530 & 256;
    $541 = ($540|0)==(0);
    if ($541) {
     $clock_count$7 = $539;$data$25 = $537;$pc$9 = $61;
     label = 123;
    } else {
     $542 = (($537) - ($540))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$542,$539)|0);
     $clock_count$7 = $539;$data$25 = $537;$pc$9 = $61;
     label = 123;
    }
    break;
   }
   case 85:  {
    $543 = (($69) + ($x$0124))|0;
    $544 = $543 & 255;
    $data$23 = $544;
    label = 118;
    break;
   }
   case 69:  {
    $data$23 = $69;
    label = 118;
    break;
   }
   case 89:  {
    $x$0$pn12 = $y$0123;
    label = 120;
    break;
   }
   case 93:  {
    $x$0$pn12 = $x$0124;
    label = 120;
    break;
   }
   case 77:  {
    $559 = (($$in) + 2)|0;
    $560 = (($67) + ($559)|0);
    $561 = HEAP8[$560>>0]|0;
    $562 = $561&255;
    $563 = $562 << 8;
    $564 = $563 | $69;
    $clock_count$7 = $52;$data$25 = $564;$pc$9 = $559;
    label = 123;
    break;
   }
   case 73:  {
    $clock_count$8 = $52;$data$26 = $69;$pc$10 = $61;
    label = 124;
    break;
   }
   case 1:  {
    $568 = (($69) + ($x$0124))|0;
    $569 = (($568) + 1)|0;
    $570 = $569 & 255;
    $571 = (((($this)) + 164|0) + ($570)|0);
    $572 = HEAP8[$571>>0]|0;
    $573 = $572&255;
    $574 = $573 << 8;
    $575 = $568 & 255;
    $576 = (((($this)) + 164|0) + ($575)|0);
    $577 = HEAP8[$576>>0]|0;
    $578 = $577&255;
    $579 = $574 | $578;
    $clock_count$9 = $52;$data$29 = $579;$pc$11 = $61;
    label = 134;
    break;
   }
   case 17:  {
    $580 = (((($this)) + 164|0) + ($69)|0);
    $581 = HEAP8[$580>>0]|0;
    $582 = $581&255;
    $583 = (($582) + ($y$0123))|0;
    $584 = (($69) + 1)|0;
    $585 = $584 & 255;
    $586 = (((($this)) + 164|0) + ($585)|0);
    $587 = HEAP8[$586>>0]|0;
    $588 = $587&255;
    $589 = $588 << 8;
    $590 = (($589) + ($583))|0;
    $591 = $583 >> 8;
    $592 = (($591) + ($52))|0;
    $593 = $583 & 256;
    $594 = ($593|0)==(0);
    if ($594) {
     $clock_count$9 = $592;$data$29 = $590;$pc$11 = $61;
     label = 134;
    } else {
     $595 = (($590) - ($593))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$595,$592)|0);
     $clock_count$9 = $592;$data$29 = $590;$pc$11 = $61;
     label = 134;
    }
    break;
   }
   case 21:  {
    $596 = (($69) + ($x$0124))|0;
    $597 = $596 & 255;
    $data$27 = $597;
    label = 129;
    break;
   }
   case 5:  {
    $data$27 = $69;
    label = 129;
    break;
   }
   case 25:  {
    $x$0$pn11 = $y$0123;
    label = 131;
    break;
   }
   case 29:  {
    $x$0$pn11 = $x$0124;
    label = 131;
    break;
   }
   case 13:  {
    $612 = (($$in) + 2)|0;
    $613 = (($67) + ($612)|0);
    $614 = HEAP8[$613>>0]|0;
    $615 = $614&255;
    $616 = $615 << 8;
    $617 = $616 | $69;
    $clock_count$9 = $52;$data$29 = $617;$pc$11 = $612;
    label = 134;
    break;
   }
   case 9:  {
    $clock_count$10 = $52;$data$30 = $69;$pc$12 = $61;
    label = 135;
    break;
   }
   case 44:  {
    $621 = HEAP16[$66>>1]|0;
    $622 = $621&65535;
    $623 = (($$in) + 3)|0;
    $624 = $status$0122 & -65;
    $625 = ($621<<16>>16)==(8194);
    if ($625) {
     $626 = HEAP8[$46>>0]|0;
     $627 = $626&255;
     $628 = HEAP32[$47>>2]|0;
     HEAP8[$48>>0] = 0;
     $629 = ($628|0)>($52|0);
     if ($629) {
      $result$0$i20 = $627;
     } else {
      $630 = HEAP32[$49>>2]|0;
      $631 = (($630) + ($52))|0;
      $632 = (__ZN7Nes_Ppu9read_2002El($45,$631)|0);
      $result$0$i20 = $632;
     }
    } else {
     $633 = $622 & 2047;
     $634 = (((($this)) + 164|0) + ($633)|0);
     $635 = HEAP8[$634>>0]|0;
     $636 = $635&255;
     $637 = ($621&65535)>(8191);
     if ($637) {
      $638 = (__ZN8Nes_Core8cpu_readEjl($this,$622,$52)|0);
      $result$0$i20 = $638;
     } else {
      $result$0$i20 = $636;
     }
    }
    $639 = $result$0$i20 & 64;
    $640 = $639 | $624;
    $641 = $result$0$i20 & $a$0125;
    $642 = ($641|0)==(0);
    if ($642) {
     $643 = $result$0$i20 << 4;
     $644 = $643 & 2048;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $644;$pc$1$be = $623;$sp$0$be = $sp$0126;$status$0$be = $640;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $result$0$i20;$pc$1$be = $623;$sp$0$be = $sp$0126;$status$0$be = $640;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 36:  {
    $645 = (((($this)) + 164|0) + ($69)|0);
    $646 = HEAP8[$645>>0]|0;
    $647 = $646&255;
    $648 = (($$in) + 2)|0;
    $649 = $status$0122 & -65;
    $650 = $647 & 64;
    $651 = $650 | $649;
    $652 = $647 & $a$0125;
    $653 = ($652|0)==(0);
    if ($653) {
     $654 = $647 << 4;
     $655 = $654 & 2048;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $655;$pc$1$be = $648;$sp$0$be = $sp$0126;$status$0$be = $651;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $647;$pc$1$be = $648;$sp$0$be = $sp$0126;$status$0$be = $651;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 225:  {
    $656 = (($69) + ($x$0124))|0;
    $657 = (($656) + 1)|0;
    $658 = $657 & 255;
    $659 = (((($this)) + 164|0) + ($658)|0);
    $660 = HEAP8[$659>>0]|0;
    $661 = $660&255;
    $662 = $661 << 8;
    $663 = $656 & 255;
    $664 = (((($this)) + 164|0) + ($663)|0);
    $665 = HEAP8[$664>>0]|0;
    $666 = $665&255;
    $667 = $662 | $666;
    $clock_count$11 = $52;$data$33 = $667;$pc$13 = $61;
    label = 154;
    break;
   }
   case 241:  {
    $668 = (((($this)) + 164|0) + ($69)|0);
    $669 = HEAP8[$668>>0]|0;
    $670 = $669&255;
    $671 = (($670) + ($y$0123))|0;
    $672 = (($69) + 1)|0;
    $673 = $672 & 255;
    $674 = (((($this)) + 164|0) + ($673)|0);
    $675 = HEAP8[$674>>0]|0;
    $676 = $675&255;
    $677 = $676 << 8;
    $678 = (($677) + ($671))|0;
    $679 = $671 >> 8;
    $680 = (($679) + ($52))|0;
    $681 = $671 & 256;
    $682 = ($681|0)==(0);
    if ($682) {
     $clock_count$11 = $680;$data$33 = $678;$pc$13 = $61;
     label = 154;
    } else {
     $683 = (($678) - ($681))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$683,$680)|0);
     $clock_count$11 = $680;$data$33 = $678;$pc$13 = $61;
     label = 154;
    }
    break;
   }
   case 245:  {
    $684 = (($69) + ($x$0124))|0;
    $685 = $684 & 255;
    $data$31 = $685;
    label = 149;
    break;
   }
   case 229:  {
    $data$31 = $69;
    label = 149;
    break;
   }
   case 249:  {
    $x$0$pn10 = $y$0123;
    label = 151;
    break;
   }
   case 253:  {
    $x$0$pn10 = $x$0124;
    label = 151;
    break;
   }
   case 237:  {
    $700 = (($$in) + 2)|0;
    $701 = (($67) + ($700)|0);
    $702 = HEAP8[$701>>0]|0;
    $703 = $702&255;
    $704 = $703 << 8;
    $705 = $704 | $69;
    $clock_count$11 = $52;$data$33 = $705;$pc$13 = $700;
    label = 154;
    break;
   }
   case 235: case 233:  {
    $clock_count$12 = $52;$data$34 = $69;$pc$14 = $61;
    label = 155;
    break;
   }
   case 97:  {
    $708 = (($69) + ($x$0124))|0;
    $709 = (($708) + 1)|0;
    $710 = $709 & 255;
    $711 = (((($this)) + 164|0) + ($710)|0);
    $712 = HEAP8[$711>>0]|0;
    $713 = $712&255;
    $714 = $713 << 8;
    $715 = $708 & 255;
    $716 = (((($this)) + 164|0) + ($715)|0);
    $717 = HEAP8[$716>>0]|0;
    $718 = $717&255;
    $719 = $714 | $718;
    $clock_count$13 = $52;$data$37 = $719;$pc$15 = $61;
    label = 165;
    break;
   }
   case 113:  {
    $720 = (((($this)) + 164|0) + ($69)|0);
    $721 = HEAP8[$720>>0]|0;
    $722 = $721&255;
    $723 = (($722) + ($y$0123))|0;
    $724 = (($69) + 1)|0;
    $725 = $724 & 255;
    $726 = (((($this)) + 164|0) + ($725)|0);
    $727 = HEAP8[$726>>0]|0;
    $728 = $727&255;
    $729 = $728 << 8;
    $730 = (($729) + ($723))|0;
    $731 = $723 >> 8;
    $732 = (($731) + ($52))|0;
    $733 = $723 & 256;
    $734 = ($733|0)==(0);
    if ($734) {
     $clock_count$13 = $732;$data$37 = $730;$pc$15 = $61;
     label = 165;
    } else {
     $735 = (($730) - ($733))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$735,$732)|0);
     $clock_count$13 = $732;$data$37 = $730;$pc$15 = $61;
     label = 165;
    }
    break;
   }
   case 117:  {
    $736 = (($69) + ($x$0124))|0;
    $737 = $736 & 255;
    $data$35 = $737;
    label = 160;
    break;
   }
   case 101:  {
    $data$35 = $69;
    label = 160;
    break;
   }
   case 121:  {
    $x$0$pn9 = $y$0123;
    label = 162;
    break;
   }
   case 125:  {
    $x$0$pn9 = $x$0124;
    label = 162;
    break;
   }
   case 109:  {
    $752 = (($$in) + 2)|0;
    $753 = (($67) + ($752)|0);
    $754 = HEAP8[$753>>0]|0;
    $755 = $754&255;
    $756 = $755 << 8;
    $757 = $756 | $69;
    $clock_count$13 = $52;$data$37 = $757;$pc$15 = $752;
    label = 165;
    break;
   }
   case 105:  {
    $c$1 = $c$0119;$clock_count$14 = $52;$data$38 = $69;$pc$16 = $61;
    label = 166;
    break;
   }
   case 74:  {
    $a$1 = $a$0125;$pc$17 = $61;
    label = 167;
    break;
   }
   case 106:  {
    $a$2 = $a$0125;$c$2 = $c$0119;$pc$18 = $61;
    label = 168;
    break;
   }
   case 10:  {
    $778 = $a$0125 << 1;
    $779 = $778 & 254;
    $a$0$be = $779;$c$0$be = $778;$clock_count$0$be = $52;$nz$0$be = $778;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 42:  {
    $780 = $a$0125 << 1;
    $781 = $c$0119 >>> 8;
    $782 = $781 & 1;
    $783 = $780 | $782;
    $784 = $783 & 255;
    $a$0$be = $784;$c$0$be = $780;$clock_count$0$be = $52;$nz$0$be = $783;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 62:  {
    $785 = (($69) + ($x$0124))|0;
    $c$3 = $c$0119;$data$40 = $785;
    label = 174;
    break;
   }
   case 30:  {
    $786 = (($69) + ($x$0124))|0;
    $data$39 = $786;
    label = 173;
    break;
   }
   case 14:  {
    $data$39 = $69;
    label = 173;
    break;
   }
   case 46:  {
    $c$3 = $c$0119;$data$40 = $69;
    label = 174;
    break;
   }
   case 126:  {
    $814 = (($69) + ($x$0124))|0;
    $c$5 = $c$0119;$data$43 = $814;
    label = 190;
    break;
   }
   case 94:  {
    $815 = (($69) + ($x$0124))|0;
    $data$42 = $815;
    label = 189;
    break;
   }
   case 78:  {
    $data$42 = $69;
    label = 189;
    break;
   }
   case 110:  {
    $c$5 = $c$0119;$data$43 = $69;
    label = 190;
    break;
   }
   case 118:  {
    $837 = (($69) + ($x$0124))|0;
    $838 = $837 & 255;
    $c$6 = $c$0119;$data$45 = $838;
    label = 201;
    break;
   }
   case 86:  {
    $839 = (($69) + ($x$0124))|0;
    $840 = $839 & 255;
    $data$44 = $840;
    label = 200;
    break;
   }
   case 70:  {
    $data$44 = $69;
    label = 200;
    break;
   }
   case 102:  {
    $c$6 = $c$0119;$data$45 = $69;
    label = 201;
    break;
   }
   case 54:  {
    $849 = (($69) + ($x$0124))|0;
    $850 = $849 & 255;
    $c$7 = $c$0119;$data$47 = $850;
    label = 205;
    break;
   }
   case 22:  {
    $851 = (($69) + ($x$0124))|0;
    $852 = $851 & 255;
    $data$46 = $852;
    label = 204;
    break;
   }
   case 6:  {
    $data$46 = $69;
    label = 204;
    break;
   }
   case 38:  {
    $c$7 = $c$0119;$data$47 = $69;
    label = 205;
    break;
   }
   case 202:  {
    $860 = (($x$0124) + -1)|0;
    $861 = $860 & 255;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $860;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $861;$y$0$be = $y$0123;
    break;
   }
   case 136:  {
    $862 = (($y$0123) + -1)|0;
    $863 = $862 & 255;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $862;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $863;
    break;
   }
   case 246:  {
    $864 = (($69) + ($x$0124))|0;
    $865 = $864 & 255;
    $data$50 = $865;$nz$2 = 1;
    label = 211;
    break;
   }
   case 230:  {
    $data$50 = $69;$nz$2 = 1;
    label = 211;
    break;
   }
   case 214:  {
    $866 = (($69) + ($x$0124))|0;
    $867 = $866 & 255;
    $data$49 = $867;
    label = 210;
    break;
   }
   case 198:  {
    $data$49 = $69;
    label = 210;
    break;
   }
   case 254:  {
    $875 = (($69) + ($x$0124))|0;
    $876 = HEAP16[$66>>1]|0;
    $877 = $876&65535;
    $878 = (($877) + ($x$0124))|0;
    $879 = $875 & 256;
    $880 = (($878) - ($879))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$880,$52)|0);
    $data$54 = $878;$nz$4 = 1;
    label = 217;
    break;
   }
   case 238:  {
    $881 = HEAP16[$66>>1]|0;
    $882 = $881&65535;
    $data$54 = $882;$nz$4 = 1;
    label = 217;
    break;
   }
   case 222:  {
    $883 = (($69) + ($x$0124))|0;
    $884 = HEAP16[$66>>1]|0;
    $885 = $884&65535;
    $886 = (($885) + ($x$0124))|0;
    $887 = $883 & 256;
    $888 = (($886) - ($887))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$888,$52)|0);
    $data$54 = $886;$nz$4 = -1;
    label = 217;
    break;
   }
   case 206:  {
    $889 = HEAP16[$66>>1]|0;
    $890 = $889&65535;
    $data$54 = $890;$nz$4 = -1;
    label = 217;
    break;
   }
   case 170:  {
    $x$1 = $a$0125;
    label = 223;
    break;
   }
   case 138:  {
    $x$1 = $x$0124;
    label = 223;
    break;
   }
   case 154:  {
    $905 = (($x$0124) + 1)|0;
    $906 = $905 | 256;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $906;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 186:  {
    $907 = (($sp$0126) + 255)|0;
    $908 = $907 & 255;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $908;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $908;$y$0$be = $y$0123;
    break;
   }
   case 72:  {
    $909 = (($sp$0126) + -1)|0;
    $910 = $909 | 256;
    $911 = $a$0125&255;
    $912 = (((($this)) + 164|0) + ($910)|0);
    HEAP8[$912>>0] = $911;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $910;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 104:  {
    $913 = (((($this)) + 164|0) + ($sp$0126)|0);
    $914 = HEAP8[$913>>0]|0;
    $915 = $914&255;
    $916 = (($sp$0126) + -255)|0;
    $917 = $916 | 256;
    $a$0$be = $915;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $915;$pc$1$be = $61;$sp$0$be = $917;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 64:  {
    $918 = (((($this)) + 164|0) + ($sp$0126)|0);
    $919 = HEAP8[$918>>0]|0;
    $920 = $919&255;
    $921 = (($sp$0126) + -255)|0;
    $922 = $921 | 256;
    $923 = (((($this)) + 164|0) + ($922)|0);
    $924 = HEAP8[$923>>0]|0;
    $925 = $924&255;
    $926 = (($sp$0126) + -254)|0;
    $927 = $926 | 256;
    $928 = (((($this)) + 164|0) + ($927)|0);
    $929 = HEAP8[$928>>0]|0;
    $930 = $929&255;
    $931 = $930 << 8;
    $932 = $931 | $925;
    $933 = (($sp$0126) + -253)|0;
    $934 = $933 | 256;
    $935 = $920 & 76;
    $936 = $920 << 8;
    $937 = $920 << 4;
    $938 = $937 & 2048;
    $939 = $920 & 2;
    $940 = $938 | $939;
    $941 = $940 ^ 2;
    $942 = $920 ^ $status$0122;
    $943 = $942 & 4;
    $944 = ($943|0)==(0);
    if ($944) {
     $a$0$be = $a$0125;$c$0$be = $936;$clock_count$0$be = $52;$nz$0$be = $941;$pc$1$be = $932;$sp$0$be = $934;$status$0$be = $935;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $c$9 = $936;$nz$5 = $941;$pc$20 = $932;$sp$1 = $934;$status$1 = $935;
     label = 229;
    }
    break;
   }
   case 40:  {
    $951 = (((($this)) + 164|0) + ($sp$0126)|0);
    $952 = HEAP8[$951>>0]|0;
    $953 = $952&255;
    $954 = (($sp$0126) + -255)|0;
    $955 = $954 | 256;
    $956 = $953 & 76;
    $957 = $953 << 8;
    $958 = $953 << 4;
    $959 = $958 & 2048;
    $960 = $953 & 2;
    $961 = $959 | $960;
    $962 = $961 ^ 2;
    $963 = $953 ^ $status$0122;
    $964 = $963 & 4;
    $965 = ($964|0)==(0);
    if ($965) {
     $a$0$be = $a$0125;$c$0$be = $957;$clock_count$0$be = $52;$nz$0$be = $962;$pc$1$be = $61;$sp$0$be = $955;$status$0$be = $956;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $966 = $953 & 4;
     $967 = ($966|0)==(0);
     if ($967) {
      $c$10 = $957;$nz$6 = $962;$sp$2 = $955;$status$2 = $956;
      label = 242;
     } else {
      $c$11 = $957;$nz$7 = $962;$sp$3 = $955;$status$3 = $956;
      label = 250;
     }
    }
    break;
   }
   case 8:  {
    $968 = $status$0122 & 76;
    $969 = $c$0119 >>> 8;
    $970 = $969 & 1;
    $971 = $968 | $970;
    $972 = $nz$0118 & 2176;
    $973 = ($972|0)==(0);
    $974 = $971 | 128;
    $$ = $973 ? $971 : $974;
    $975 = $nz$0118 & 255;
    $976 = ($975|0)==(0);
    $977 = $$ | 2;
    $temp57$1 = $976 ? $977 : $$;
    $978 = (($sp$0126) + -1)|0;
    $979 = $978 | 256;
    $980 = $temp57$1 | 48;
    $981 = $980&255;
    $982 = (((($this)) + 164|0) + ($979)|0);
    HEAP8[$982>>0] = $981;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $979;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 108:  {
    $983 = HEAP16[$66>>1]|0;
    $984 = $983&65535;
    $985 = (__ZN8Nes_Core8cpu_readEjl($this,$984,$52)|0);
    $986 = $984 & 65280;
    $987 = (($984) + 1)|0;
    $988 = $987 & 255;
    $989 = $988 | $986;
    $990 = (__ZN8Nes_Core8cpu_readEjl($this,$989,$52)|0);
    $991 = $990 << 8;
    $992 = $991 | $985;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $992;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 0:  {
    $993 = (($$in) + 2)|0;
    $994 = $993 >>> 8;
    $995 = $994&255;
    $996 = (($sp$0126) + -1)|0;
    $997 = $996 | 256;
    $998 = (((($this)) + 164|0) + ($997)|0);
    HEAP8[$998>>0] = $995;
    $999 = $993&255;
    $1000 = (($sp$0126) + -2)|0;
    $1001 = $1000 | 256;
    $1002 = (((($this)) + 164|0) + ($1001)|0);
    HEAP8[$1002>>0] = $999;
    $1003 = $status$0122 & 76;
    $1004 = $c$0119 >>> 8;
    $1005 = $1004 & 1;
    $1006 = $1003 | $1005;
    $1007 = $nz$0118 & 2176;
    $1008 = ($1007|0)==(0);
    $1009 = $1006 | 128;
    $$17 = $1008 ? $1006 : $1009;
    $1010 = $nz$0118 & 255;
    $1011 = ($1010|0)==(0);
    $1012 = $$17 | 2;
    $temp58$1 = $1011 ? $1012 : $$17;
    $1013 = (($sp$0126) + -3)|0;
    $1014 = $1013 | 256;
    $1015 = $temp58$1 | 48;
    $1016 = $1015&255;
    $1017 = (((($this)) + 164|0) + ($1014)|0);
    HEAP8[$1017>>0] = $1016;
    $1018 = HEAP32[$50>>2]|0;
    $1019 = ((($1018)) + 65534|0);
    $1020 = HEAP16[$1019>>1]|0;
    $1021 = $1020&65535;
    $1022 = $status$0122 | 4;
    $c$9 = $c$0119;$nz$5 = $nz$0118;$pc$20 = $1021;$sp$1 = $1014;$status$1 = $1022;
    label = 229;
    break;
   }
   case 56:  {
    $a$0$be = $a$0125;$c$0$be = -1;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 24:  {
    $a$0$be = $a$0125;$c$0$be = 0;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 184:  {
    $1023 = $status$0122 & -65;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $1023;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 216:  {
    $1024 = $status$0122 & -9;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $1024;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 248:  {
    $1025 = $status$0122 | 8;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $1025;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 88:  {
    $1026 = $status$0122 & 4;
    $1027 = ($1026|0)==(0);
    if ($1027) {
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $1028 = $status$0122 & -5;
     $c$10 = $c$0119;$nz$6 = $nz$0118;$sp$2 = $sp$0126;$status$2 = $1028;
     label = 242;
    }
    break;
   }
   case 120:  {
    $1037 = $status$0122 & 4;
    $1038 = ($1037|0)==(0);
    if ($1038) {
     $1039 = $status$0122 | 4;
     $c$11 = $c$0119;$nz$7 = $nz$0118;$sp$3 = $sp$0126;$status$3 = $1039;
     label = 250;
    } else {
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 252: case 220: case 124: case 92: case 60: case 28:  {
    $1044 = (($69) + ($x$0124))|0;
    $1045 = $1044 >>> 8;
    $1046 = (($1045) + ($52))|0;
    $1047 = HEAP16[$66>>1]|0;
    $1048 = $1047&65535;
    $1049 = (($1048) + ($x$0124))|0;
    $1050 = $1044 & 256;
    $1051 = ($1050|0)==(0);
    if (!($1051)) {
     $1052 = (($1049) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$1052,$1046)|0);
    }
    (__ZN8Nes_Core8cpu_readEjl($this,$1049,$1046)|0);
    $clock_count$15 = $1046;
    label = 255;
    break;
   }
   case 12:  {
    $clock_count$15 = $52;
    label = 255;
    break;
   }
   case 244: case 226: case 212: case 194: case 137: case 130: case 128: case 100: case 84: case 68: case 52: case 20: case 4: case 116:  {
    $clock_count$16 = $52;$pc$21 = $61;
    label = 256;
    break;
   }
   case 250: case 218: case 122: case 90: case 58: case 26: case 234:  {
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 195:  {
    $1055 = (($69) + ($x$0124))|0;
    $1056 = (($1055) + 1)|0;
    $1057 = $1056 & 255;
    $1058 = (((($this)) + 164|0) + ($1057)|0);
    $1059 = HEAP8[$1058>>0]|0;
    $1060 = $1059&255;
    $1061 = $1060 << 8;
    $1062 = $1055 & 255;
    $1063 = (((($this)) + 164|0) + ($1062)|0);
    $1064 = HEAP8[$1063>>0]|0;
    $1065 = $1064&255;
    $1066 = $1061 | $1065;
    $data$56 = $1066;$pc$22 = $61;
    label = 263;
    break;
   }
   case 211:  {
    $1067 = (((($this)) + 164|0) + ($69)|0);
    $1068 = HEAP8[$1067>>0]|0;
    $1069 = $1068&255;
    $1070 = (($1069) + ($y$0123))|0;
    $1071 = (($69) + 1)|0;
    $1072 = $1071 & 255;
    $1073 = (((($this)) + 164|0) + ($1072)|0);
    $1074 = HEAP8[$1073>>0]|0;
    $1075 = $1074&255;
    $1076 = $1075 << 8;
    $1077 = (($1076) + ($1070))|0;
    $1078 = $1070 & 256;
    $1079 = (($1077) - ($1078))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1079,$52)|0);
    $data$56 = $1077;$pc$22 = $61;
    label = 263;
    break;
   }
   case 215:  {
    $1080 = (($69) + ($x$0124))|0;
    $1081 = $1080 & 255;
    $data$5623 = $1081;$pc$2226 = $61;
    label = 265;
    break;
   }
   case 219:  {
    $x$0$pn8 = $y$0123;
    label = 261;
    break;
   }
   case 223:  {
    $x$0$pn8 = $x$0124;
    label = 261;
    break;
   }
   case 207:  {
    $1090 = (($$in) + 2)|0;
    $1091 = (($67) + ($1090)|0);
    $1092 = HEAP8[$1091>>0]|0;
    $1093 = $1092&255;
    $1094 = $1093 << 8;
    $1095 = $1094 | $69;
    $data$56 = $1095;$pc$22 = $1090;
    label = 263;
    break;
   }
   case 199:  {
    $data$5623 = $69;$pc$2226 = $61;
    label = 265;
    break;
   }
   case 227:  {
    $1113 = (($69) + ($x$0124))|0;
    $1114 = (($1113) + 1)|0;
    $1115 = $1114 & 255;
    $1116 = (((($this)) + 164|0) + ($1115)|0);
    $1117 = HEAP8[$1116>>0]|0;
    $1118 = $1117&255;
    $1119 = $1118 << 8;
    $1120 = $1113 & 255;
    $1121 = (((($this)) + 164|0) + ($1120)|0);
    $1122 = HEAP8[$1121>>0]|0;
    $1123 = $1122&255;
    $1124 = $1119 | $1123;
    $data$58 = $1124;$pc$23 = $61;
    label = 275;
    break;
   }
   case 243:  {
    $1125 = (((($this)) + 164|0) + ($69)|0);
    $1126 = HEAP8[$1125>>0]|0;
    $1127 = $1126&255;
    $1128 = (($1127) + ($y$0123))|0;
    $1129 = (($69) + 1)|0;
    $1130 = $1129 & 255;
    $1131 = (((($this)) + 164|0) + ($1130)|0);
    $1132 = HEAP8[$1131>>0]|0;
    $1133 = $1132&255;
    $1134 = $1133 << 8;
    $1135 = (($1134) + ($1128))|0;
    $1136 = $1128 & 256;
    $1137 = (($1135) - ($1136))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1137,$52)|0);
    $data$58 = $1135;$pc$23 = $61;
    label = 275;
    break;
   }
   case 247:  {
    $1138 = (($69) + ($x$0124))|0;
    $1139 = $1138 & 255;
    $data$5834 = $1139;$pc$2337 = $61;
    label = 277;
    break;
   }
   case 251:  {
    $x$0$pn7 = $y$0123;
    label = 273;
    break;
   }
   case 255:  {
    $x$0$pn7 = $x$0124;
    label = 273;
    break;
   }
   case 239:  {
    $1148 = (($$in) + 2)|0;
    $1149 = (($67) + ($1148)|0);
    $1150 = HEAP8[$1149>>0]|0;
    $1151 = $1150&255;
    $1152 = $1151 << 8;
    $1153 = $1152 | $69;
    $data$58 = $1153;$pc$23 = $1148;
    label = 275;
    break;
   }
   case 231:  {
    $data$5834 = $69;$pc$2337 = $61;
    label = 277;
    break;
   }
   case 35:  {
    $1168 = (($69) + ($x$0124))|0;
    $1169 = (($1168) + 1)|0;
    $1170 = $1169 & 255;
    $1171 = (((($this)) + 164|0) + ($1170)|0);
    $1172 = HEAP8[$1171>>0]|0;
    $1173 = $1172&255;
    $1174 = $1173 << 8;
    $1175 = $1168 & 255;
    $1176 = (((($this)) + 164|0) + ($1175)|0);
    $1177 = HEAP8[$1176>>0]|0;
    $1178 = $1177&255;
    $1179 = $1174 | $1178;
    $data$60 = $1179;$pc$24 = $61;
    label = 287;
    break;
   }
   case 51:  {
    $1180 = (((($this)) + 164|0) + ($69)|0);
    $1181 = HEAP8[$1180>>0]|0;
    $1182 = $1181&255;
    $1183 = (($1182) + ($y$0123))|0;
    $1184 = (($69) + 1)|0;
    $1185 = $1184 & 255;
    $1186 = (((($this)) + 164|0) + ($1185)|0);
    $1187 = HEAP8[$1186>>0]|0;
    $1188 = $1187&255;
    $1189 = $1188 << 8;
    $1190 = (($1189) + ($1183))|0;
    $1191 = $1183 & 256;
    $1192 = (($1190) - ($1191))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1192,$52)|0);
    $data$60 = $1190;$pc$24 = $61;
    label = 287;
    break;
   }
   case 55:  {
    $1193 = (($69) + ($x$0124))|0;
    $1194 = $1193 & 255;
    $data$6045 = $1194;$pc$2448 = $61;
    label = 291;
    break;
   }
   case 59:  {
    $x$0$pn6 = $y$0123;
    label = 285;
    break;
   }
   case 63:  {
    $x$0$pn6 = $x$0124;
    label = 285;
    break;
   }
   case 47:  {
    $1203 = (($$in) + 2)|0;
    $1204 = (($67) + ($1203)|0);
    $1205 = HEAP8[$1204>>0]|0;
    $1206 = $1205&255;
    $1207 = $1206 << 8;
    $1208 = $1207 | $69;
    $data$60 = $1208;$pc$24 = $1203;
    label = 287;
    break;
   }
   case 39:  {
    $data$6045 = $69;$pc$2448 = $61;
    label = 291;
    break;
   }
   case 99:  {
    $1233 = (($69) + ($x$0124))|0;
    $1234 = (($1233) + 1)|0;
    $1235 = $1234 & 255;
    $1236 = (((($this)) + 164|0) + ($1235)|0);
    $1237 = HEAP8[$1236>>0]|0;
    $1238 = $1237&255;
    $1239 = $1238 << 8;
    $1240 = $1233 & 255;
    $1241 = (((($this)) + 164|0) + ($1240)|0);
    $1242 = HEAP8[$1241>>0]|0;
    $1243 = $1242&255;
    $1244 = $1239 | $1243;
    $data$62 = $1244;$pc$25 = $61;
    label = 299;
    break;
   }
   case 115:  {
    $1245 = (((($this)) + 164|0) + ($69)|0);
    $1246 = HEAP8[$1245>>0]|0;
    $1247 = $1246&255;
    $1248 = (($1247) + ($y$0123))|0;
    $1249 = (($69) + 1)|0;
    $1250 = $1249 & 255;
    $1251 = (((($this)) + 164|0) + ($1250)|0);
    $1252 = HEAP8[$1251>>0]|0;
    $1253 = $1252&255;
    $1254 = $1253 << 8;
    $1255 = (($1254) + ($1248))|0;
    $1256 = $1248 & 256;
    $1257 = (($1255) - ($1256))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1257,$52)|0);
    $data$62 = $1255;$pc$25 = $61;
    label = 299;
    break;
   }
   case 119:  {
    $1258 = (($69) + ($x$0124))|0;
    $1259 = $1258 & 255;
    $data$6256 = $1259;$pc$2559 = $61;
    label = 303;
    break;
   }
   case 123:  {
    $x$0$pn5 = $y$0123;
    label = 297;
    break;
   }
   case 127:  {
    $x$0$pn5 = $x$0124;
    label = 297;
    break;
   }
   case 111:  {
    $1268 = (($$in) + 2)|0;
    $1269 = (($67) + ($1268)|0);
    $1270 = HEAP8[$1269>>0]|0;
    $1271 = $1270&255;
    $1272 = $1271 << 8;
    $1273 = $1272 | $69;
    $data$62 = $1273;$pc$25 = $1268;
    label = 299;
    break;
   }
   case 103:  {
    $data$6256 = $69;$pc$2559 = $61;
    label = 303;
    break;
   }
   case 3:  {
    $1293 = (($69) + ($x$0124))|0;
    $1294 = (($1293) + 1)|0;
    $1295 = $1294 & 255;
    $1296 = (((($this)) + 164|0) + ($1295)|0);
    $1297 = HEAP8[$1296>>0]|0;
    $1298 = $1297&255;
    $1299 = $1298 << 8;
    $1300 = $1293 & 255;
    $1301 = (((($this)) + 164|0) + ($1300)|0);
    $1302 = HEAP8[$1301>>0]|0;
    $1303 = $1302&255;
    $1304 = $1299 | $1303;
    $data$64 = $1304;$pc$26 = $61;
    label = 311;
    break;
   }
   case 19:  {
    $1305 = (((($this)) + 164|0) + ($69)|0);
    $1306 = HEAP8[$1305>>0]|0;
    $1307 = $1306&255;
    $1308 = (($1307) + ($y$0123))|0;
    $1309 = (($69) + 1)|0;
    $1310 = $1309 & 255;
    $1311 = (((($this)) + 164|0) + ($1310)|0);
    $1312 = HEAP8[$1311>>0]|0;
    $1313 = $1312&255;
    $1314 = $1313 << 8;
    $1315 = (($1314) + ($1308))|0;
    $1316 = $1308 & 256;
    $1317 = (($1315) - ($1316))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1317,$52)|0);
    $data$64 = $1315;$pc$26 = $61;
    label = 311;
    break;
   }
   case 23:  {
    $1318 = (($69) + ($x$0124))|0;
    $1319 = $1318 & 255;
    $data$6469 = $1319;$pc$2672 = $61;
    label = 313;
    break;
   }
   case 27:  {
    $x$0$pn4 = $y$0123;
    label = 309;
    break;
   }
   case 31:  {
    $x$0$pn4 = $x$0124;
    label = 309;
    break;
   }
   case 15:  {
    $1328 = (($$in) + 2)|0;
    $1329 = (($67) + ($1328)|0);
    $1330 = HEAP8[$1329>>0]|0;
    $1331 = $1330&255;
    $1332 = $1331 << 8;
    $1333 = $1332 | $69;
    $data$64 = $1333;$pc$26 = $1328;
    label = 311;
    break;
   }
   case 7:  {
    $data$6469 = $69;$pc$2672 = $61;
    label = 313;
    break;
   }
   case 67:  {
    $1349 = (($69) + ($x$0124))|0;
    $1350 = (($1349) + 1)|0;
    $1351 = $1350 & 255;
    $1352 = (((($this)) + 164|0) + ($1351)|0);
    $1353 = HEAP8[$1352>>0]|0;
    $1354 = $1353&255;
    $1355 = $1354 << 8;
    $1356 = $1349 & 255;
    $1357 = (((($this)) + 164|0) + ($1356)|0);
    $1358 = HEAP8[$1357>>0]|0;
    $1359 = $1358&255;
    $1360 = $1355 | $1359;
    $data$66 = $1360;$pc$27 = $61;
    label = 323;
    break;
   }
   case 83:  {
    $1361 = (((($this)) + 164|0) + ($69)|0);
    $1362 = HEAP8[$1361>>0]|0;
    $1363 = $1362&255;
    $1364 = (($1363) + ($y$0123))|0;
    $1365 = (($69) + 1)|0;
    $1366 = $1365 & 255;
    $1367 = (((($this)) + 164|0) + ($1366)|0);
    $1368 = HEAP8[$1367>>0]|0;
    $1369 = $1368&255;
    $1370 = $1369 << 8;
    $1371 = (($1370) + ($1364))|0;
    $1372 = $1364 & 256;
    $1373 = (($1371) - ($1372))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1373,$52)|0);
    $data$66 = $1371;$pc$27 = $61;
    label = 323;
    break;
   }
   case 87:  {
    $1374 = (($69) + ($x$0124))|0;
    $1375 = $1374 & 255;
    $data$6680 = $1375;$pc$2783 = $61;
    label = 325;
    break;
   }
   case 91:  {
    $x$0$pn = $y$0123;
    label = 321;
    break;
   }
   case 95:  {
    $x$0$pn = $x$0124;
    label = 321;
    break;
   }
   case 79:  {
    $1384 = (($$in) + 2)|0;
    $1385 = (($67) + ($1384)|0);
    $1386 = HEAP8[$1385>>0]|0;
    $1387 = $1386&255;
    $1388 = $1387 << 8;
    $1389 = $1388 | $69;
    $data$66 = $1389;$pc$27 = $1384;
    label = 323;
    break;
   }
   case 71:  {
    $data$6680 = $69;$pc$2783 = $61;
    label = 325;
    break;
   }
   case 75:  {
    $1403 = $69 & $a$0125;
    $1404 = (($$in) + 2)|0;
    $a$1 = $1403;$pc$17 = $1404;
    label = 167;
    break;
   }
   case 43: case 11:  {
    $1405 = $69 & $a$0125;
    $1406 = $1405 << 1;
    $1407 = (($$in) + 2)|0;
    $a$0$be = $1405;$c$0$be = $1406;$clock_count$0$be = $52;$nz$0$be = $1405;$pc$1$be = $1407;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 107:  {
    $1408 = $69 & $a$0125;
    $1409 = $1408 >>> 1;
    $1410 = $c$0119 >>> 1;
    $1411 = $1410 & 128;
    $1412 = $1409 | $1411;
    $1413 = $1412 << 2;
    $1414 = $status$0122 & -65;
    $1415 = $1409 ^ $1408;
    $1416 = $1415 & 64;
    $1417 = $1416 | $1414;
    $1418 = (($$in) + 2)|0;
    $a$0$be = $1412;$c$0$be = $1413;$clock_count$0$be = $52;$nz$0$be = $1412;$pc$1$be = $1418;$sp$0$be = $sp$0126;$status$0$be = $1417;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 171:  {
    $1419 = (($$in) + 2)|0;
    $a$0$be = $69;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $69;$pc$1$be = $1419;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $69;$y$0$be = $y$0123;
    break;
   }
   case 163:  {
    $1420 = (($69) + ($x$0124))|0;
    $1421 = (($1420) + 1)|0;
    $1422 = $1421 & 255;
    $1423 = (((($this)) + 164|0) + ($1422)|0);
    $1424 = HEAP8[$1423>>0]|0;
    $1425 = $1424&255;
    $1426 = $1425 << 8;
    $1427 = $1420 & 255;
    $1428 = (((($this)) + 164|0) + ($1427)|0);
    $1429 = HEAP8[$1428>>0]|0;
    $1430 = $1429&255;
    $1431 = $1426 | $1430;
    $clock_count$17 = $52;$data$68 = $1431;$pc$28 = $61;
    label = 341;
    break;
   }
   case 179:  {
    $1432 = (((($this)) + 164|0) + ($69)|0);
    $1433 = HEAP8[$1432>>0]|0;
    $1434 = $1433&255;
    $1435 = (($1434) + ($y$0123))|0;
    $1436 = (($69) + 1)|0;
    $1437 = $1436 & 255;
    $1438 = (((($this)) + 164|0) + ($1437)|0);
    $1439 = HEAP8[$1438>>0]|0;
    $1440 = $1439&255;
    $1441 = $1440 << 8;
    $1442 = (($1441) + ($1435))|0;
    $1443 = $1435 >> 8;
    $1444 = (($1443) + ($52))|0;
    $1445 = $1435 & 256;
    $1446 = ($1445|0)==(0);
    if ($1446) {
     $clock_count$17 = $1444;$data$68 = $1442;$pc$28 = $61;
     label = 341;
    } else {
     $1447 = (($1442) - ($1445))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$1447,$1444)|0);
     $clock_count$17 = $1444;$data$68 = $1442;$pc$28 = $61;
     label = 341;
    }
    break;
   }
   case 183:  {
    $1448 = (($69) + ($y$0123))|0;
    $1449 = $1448 & 255;
    $data$67 = $1449;
    label = 337;
    break;
   }
   case 167:  {
    $data$67 = $69;
    label = 337;
    break;
   }
   case 191:  {
    $1453 = (($69) + ($y$0123))|0;
    $1454 = $1453 >>> 8;
    $1455 = (($1454) + ($52))|0;
    $1456 = (($$in) + 2)|0;
    $1457 = (($67) + ($1456)|0);
    $1458 = HEAP8[$1457>>0]|0;
    $1459 = $1458&255;
    $1460 = $1459 << 8;
    $1461 = (($1460) + ($1453))|0;
    $1462 = $1453 & 256;
    $1463 = ($1462|0)==(0);
    if ($1463) {
     $clock_count$17 = $1455;$data$68 = $1461;$pc$28 = $1456;
     label = 341;
    } else {
     $1464 = (($1461) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$1464,$1455)|0);
     $clock_count$17 = $1455;$data$68 = $1461;$pc$28 = $1456;
     label = 341;
    }
    break;
   }
   case 175:  {
    $1465 = (($$in) + 2)|0;
    $1466 = (($67) + ($1465)|0);
    $1467 = HEAP8[$1466>>0]|0;
    $1468 = $1467&255;
    $1469 = $1468 << 8;
    $1470 = $1469 | $69;
    $clock_count$17 = $52;$data$68 = $1470;$pc$28 = $1465;
    label = 341;
    break;
   }
   case 131:  {
    $1473 = (($69) + ($x$0124))|0;
    $1474 = (($1473) + 1)|0;
    $1475 = $1474 & 255;
    $1476 = (((($this)) + 164|0) + ($1475)|0);
    $1477 = HEAP8[$1476>>0]|0;
    $1478 = $1477&255;
    $1479 = $1478 << 8;
    $1480 = $1473 & 255;
    $1481 = (((($this)) + 164|0) + ($1480)|0);
    $1482 = HEAP8[$1481>>0]|0;
    $1483 = $1482&255;
    $1484 = $1479 | $1483;
    $data$70 = $1484;$pc$30 = $61;
    label = 346;
    break;
   }
   case 151:  {
    $1485 = (($69) + ($y$0123))|0;
    $1486 = $1485 & 255;
    $data$7091 = $1486;$pc$3093 = $61;
    label = 347;
    break;
   }
   case 143:  {
    $1487 = (($$in) + 2)|0;
    $1488 = (($67) + ($1487)|0);
    $1489 = HEAP8[$1488>>0]|0;
    $1490 = $1489&255;
    $1491 = $1490 << 8;
    $1492 = $1491 | $69;
    $data$70 = $1492;$pc$30 = $1487;
    label = 346;
    break;
   }
   case 135:  {
    $data$7091 = $69;$pc$3093 = $61;
    label = 347;
    break;
   }
   case 203:  {
    $1500 = $a$0125 & $x$0124;
    $1501 = (($1500) - ($69))|0;
    $1502 = ($1501>>>0)<(256);
    $1503 = $1502 ? 256 : 0;
    $1504 = $1501 & 255;
    $1505 = (($$in) + 2)|0;
    $a$0$be = $a$0125;$c$0$be = $1503;$clock_count$0$be = $52;$nz$0$be = $1504;$pc$1$be = $1505;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $1504;$y$0$be = $y$0123;
    break;
   }
   case 147:  {
    $1506 = (((($this)) + 164|0) + ($69)|0);
    $1507 = HEAP8[$1506>>0]|0;
    $1508 = $1507&255;
    $1509 = (($1508) + ($y$0123))|0;
    $1510 = (($69) + 1)|0;
    $1511 = $1510 & 255;
    $1512 = (((($this)) + 164|0) + ($1511)|0);
    $1513 = HEAP8[$1512>>0]|0;
    $1514 = $1513&255;
    $1515 = $1514 << 8;
    $1516 = (($1515) + ($1509))|0;
    $1517 = $1509 & 256;
    $1518 = (($1516) - ($1517))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1518,$52)|0);
    $1519 = (($$in) + 2)|0;
    $1520 = ($1516>>>0)<(2048);
    if ($1520) {
     $1521 = $a$0125 & $x$0124;
     $1522 = $1516 >>> 8;
     $1523 = (($1522) + 1)|0;
     $1524 = $1521 & $1523;
     $1525 = $1524&255;
     $1526 = (((($this)) + 164|0) + ($1516)|0);
     HEAP8[$1526>>0] = $1525;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1519;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    }
    $1527 = ($1516|0)==(8199);
    $1528 = $1516 >>> 8;
    $1529 = (($1528) + 1)|0;
    $1530 = $x$0124 & 255;
    $1531 = $1530 & $a$0125;
    $1532 = $1531 & $1529;
    if ($1527) {
     __ZN8Nes_Core14cpu_write_2007Ei($this,$1532);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1519;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    } else {
     __ZN8Nes_Core9cpu_writeEjil($this,$1516,$1532,$52);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1519;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    }
    break;
   }
   case 159:  {
    $1533 = (($69) + ($y$0123))|0;
    $1534 = (($$in) + 2)|0;
    $1535 = (($67) + ($1534)|0);
    $1536 = HEAP8[$1535>>0]|0;
    $1537 = $1536&255;
    $1538 = $1537 << 8;
    $1539 = (($1538) + ($1533))|0;
    $1540 = $1533 & 256;
    $1541 = (($1539) - ($1540))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1541,$52)|0);
    $1542 = (($$in) + 3)|0;
    $1543 = ($1539>>>0)<(2048);
    if ($1543) {
     $1544 = $a$0125 & $x$0124;
     $1545 = $1539 >>> 8;
     $1546 = (($1545) + 1)|0;
     $1547 = $1544 & $1546;
     $1548 = $1547&255;
     $1549 = (((($this)) + 164|0) + ($1539)|0);
     HEAP8[$1549>>0] = $1548;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1542;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    }
    $1550 = ($1539|0)==(8199);
    $1551 = $1539 >>> 8;
    $1552 = (($1551) + 1)|0;
    $1553 = $x$0124 & 255;
    $1554 = $1553 & $a$0125;
    $1555 = $1554 & $1552;
    if ($1550) {
     __ZN8Nes_Core14cpu_write_2007Ei($this,$1555);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1542;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    } else {
     __ZN8Nes_Core9cpu_writeEjil($this,$1539,$1555,$52);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1542;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    }
    break;
   }
   case 158:  {
    $1556 = (($69) + ($y$0123))|0;
    $1557 = (($$in) + 2)|0;
    $1558 = (($67) + ($1557)|0);
    $1559 = HEAP8[$1558>>0]|0;
    $1560 = $1559&255;
    $1561 = $1560 << 8;
    $1562 = (($1561) + ($1556))|0;
    $1563 = $1556 & 256;
    $1564 = (($1562) - ($1563))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1564,$52)|0);
    $1565 = (($$in) + 3)|0;
    $1566 = ($1563|0)==(0);
    if ($1566) {
     $1567 = ($1562>>>0)<(2048);
     if ($1567) {
      $1568 = $1562 >>> 8;
      $1569 = (($1568) + 1)|0;
      $1570 = $1569 & $x$0124;
      $1571 = $1570&255;
      $1572 = (((($this)) + 164|0) + ($1562)|0);
      HEAP8[$1572>>0] = $1571;
      $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1565;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
      break L9;
     }
     $1573 = ($1562|0)==(8199);
     $1574 = $1562 >>> 8;
     $1575 = (($1574) + 1)|0;
     $1576 = $x$0124 & 255;
     $1577 = $1576 & $1575;
     if ($1573) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1577);
      $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1565;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
      break L9;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$1562,$1577,$52);
      $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1565;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
      break L9;
     }
    } else {
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1565;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 156:  {
    $1578 = (($69) + ($x$0124))|0;
    $1579 = (($$in) + 2)|0;
    $1580 = (($67) + ($1579)|0);
    $1581 = HEAP8[$1580>>0]|0;
    $1582 = $1581&255;
    $1583 = $1582 << 8;
    $1584 = (($1583) + ($1578))|0;
    $1585 = $1578 & 256;
    $1586 = (($1584) - ($1585))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1586,$52)|0);
    $1587 = (($$in) + 3)|0;
    $1588 = ($1585|0)==(0);
    if ($1588) {
     $1589 = ($1584>>>0)<(2048);
     if ($1589) {
      $1590 = $1584 >>> 8;
      $1591 = (($1590) + 1)|0;
      $1592 = $1591 & $y$0123;
      $1593 = $1592&255;
      $1594 = (((($this)) + 164|0) + ($1584)|0);
      HEAP8[$1594>>0] = $1593;
      $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1587;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
      break L9;
     }
     $1595 = ($1584|0)==(8199);
     $1596 = $1584 >>> 8;
     $1597 = (($1596) + 1)|0;
     $1598 = $y$0123 & 255;
     $1599 = $1598 & $1597;
     if ($1595) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1599);
      $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1587;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
      break L9;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$1584,$1599,$52);
      $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1587;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
      break L9;
     }
    } else {
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1587;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 155:  {
    $1600 = (($69) + ($y$0123))|0;
    $1601 = (($$in) + 2)|0;
    $1602 = (($67) + ($1601)|0);
    $1603 = HEAP8[$1602>>0]|0;
    $1604 = $1603&255;
    $1605 = $1604 << 8;
    $1606 = (($1605) + ($1600))|0;
    $1607 = $1600 & 256;
    $1608 = (($1606) - ($1607))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1608,$52)|0);
    $1609 = (($$in) + 3)|0;
    $1610 = $a$0125 & $x$0124;
    $1611 = (($1610) + 1)|0;
    $1612 = $1611 | 256;
    $1613 = ($1606>>>0)<(2048);
    if ($1613) {
     $1614 = $1606 >>> 8;
     $1615 = (($1614) + 1)|0;
     $1616 = $1615 & $1610;
     $1617 = $1616&255;
     $1618 = (((($this)) + 164|0) + ($1606)|0);
     HEAP8[$1618>>0] = $1617;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1609;$sp$0$be = $1612;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    }
    $1619 = ($1606|0)==(8199);
    $1620 = $1606 >>> 8;
    $1621 = (($1620) + 1)|0;
    $1622 = $1610 & 255;
    $1623 = $1622 & $1621;
    if ($1619) {
     __ZN8Nes_Core14cpu_write_2007Ei($this,$1623);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1609;$sp$0$be = $1612;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    } else {
     __ZN8Nes_Core9cpu_writeEjil($this,$1606,$1623,$52);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1609;$sp$0$be = $1612;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break L9;
    }
    break;
   }
   case 187:  {
    $1624 = (($69) + ($y$0123))|0;
    $1625 = $1624 >>> 8;
    $1626 = (($1625) + ($52))|0;
    $1627 = (($$in) + 2)|0;
    $1628 = (($67) + ($1627)|0);
    $1629 = HEAP8[$1628>>0]|0;
    $1630 = $1629&255;
    $1631 = $1630 << 8;
    $1632 = (($1631) + ($1624))|0;
    $1633 = $1624 & 256;
    $1634 = ($1633|0)==(0);
    if (!($1634)) {
     $1635 = (($1632) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$1635,$1626)|0);
    }
    $1636 = (($$in) + 3)|0;
    $1637 = (($sp$0126) + 255)|0;
    $1638 = $1637 & 255;
    $1639 = (__ZN8Nes_Core8cpu_readEjl($this,$1632,$1626)|0);
    $1640 = $1638 & $1639;
    $1641 = (($1640) + 1)|0;
    $1642 = $1641 | 256;
    $a$0$be = $1640;$c$0$be = $c$0119;$clock_count$0$be = $1626;$nz$0$be = $nz$0118;$pc$1$be = $1636;$sp$0$be = $1642;$status$0$be = $status$0122;$x$0$be = $1640;$y$0$be = $y$0123;
    break;
   }
   case 242:  {
    $1643 = ($61>>>0)>(65536);
    if ($1643) {
     $1644 = $$in & 65535;
     $1645 = (($52) + -2)|0;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $1645;$nz$0$be = $nz$0118;$pc$1$be = $1644;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     label = 385;
    }
    break;
   }
   default: {
    label = 385;
   }
   }
  } while(0);
  switch (label|0) {
   case 5: {
    label = 0;
    $51 = (($52) + -1)|0;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $51;$nz$0$be = $nz$0118;$pc$1$be = $pc$0;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 9: {
    label = 0;
    $72 = (((($this)) + 164|0) + ($data$0)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = (($$in) + 2)|0;
    $a$0$be = $74;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $74;$pc$1$be = $75;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 21: {
    label = 0;
    $144 = (((($this)) + 164|0) + ($data$1)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $clock_count$2 = $52;$data$4 = $146;$pc$3 = $61;
    label = 27;
    break;
   }
   case 23: {
    label = 0;
    $data$2 = (($x$0$pn15) + ($69))|0;
    $147 = $data$2 >>> 8;
    $148 = (($147) + ($52))|0;
    $149 = (($$in) + 2)|0;
    $150 = (($67) + ($149)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $153 = $152 << 8;
    $154 = (($153) + ($data$2))|0;
    $155 = $data$2 & 256;
    $156 = ($155|0)==(0);
    if ($156) {
     $clock_count$1 = $148;$data$3 = $154;$pc$2 = $149;
     label = 26;
    } else {
     $157 = (($154) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$157,$148)|0);
     $clock_count$1 = $148;$data$3 = $154;$pc$2 = $149;
     label = 26;
    }
    break;
   }
   case 33: {
    label = 0;
    $193 = (($$in) + 2)|0;
    $194 = $a$0125&255;
    $195 = (((($this)) + 164|0) + ($data$5)|0);
    HEAP8[$195>>0] = $194;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $193;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 36: {
    label = 0;
    $a$0$be = $y$1;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $y$1;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$1;
    break;
   }
   case 44: {
    label = 0;
    $data$6 = (($x$0$pn14) + ($69))|0;
    $228 = (($$in) + 2)|0;
    $229 = (($67) + ($228)|0);
    $230 = HEAP8[$229>>0]|0;
    $231 = $230&255;
    $232 = $231 << 8;
    $233 = (($232) + ($data$6))|0;
    $234 = $data$6 & 256;
    $235 = (($233) - ($234))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$235,$52)|0);
    $data$7 = $233;$pc$4 = $228;
    label = 46;
    break;
   }
   case 53: {
    label = 0;
    $250 = (($$in) + 2)|0;
    $251 = (($67) + ($250)|0);
    $252 = HEAP8[$251>>0]|0;
    $253 = $252&255;
    $254 = (($data$8) + ($x$0124))|0;
    $255 = (($$in) + 3)|0;
    $256 = $254 >>> 8;
    $257 = (($256) + ($52))|0;
    $258 = $253 << 8;
    $259 = (($258) + ($254))|0;
    $260 = $259 & 65535;
    $261 = $260 >>> 11;
    $262 = (($this) + ($261<<2)|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = (($263) + ($260)|0);
    $265 = HEAP8[$264>>0]|0;
    $266 = $265&255;
    $267 = (($259) + -8192)|0;
    $268 = ($267>>>0)>(24575);
    if ($268) {
     $a$0$be = $266;$c$0$be = $c$0119;$clock_count$0$be = $257;$nz$0$be = $266;$pc$1$be = $255;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $269 = $254 & 256;
     $270 = ($269|0)==(0);
     if (!($270)) {
      $271 = (($259) + -256)|0;
      (__ZN8Nes_Core8cpu_readEjl($this,$271,$257)|0);
     }
     $272 = (__ZN8Nes_Core8cpu_readEjl($this,$259,$257)|0);
     $a$0$be = $272;$c$0$be = $c$0119;$clock_count$0$be = $257;$nz$0$be = $272;$pc$1$be = $255;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 71: {
    label = 0;
    $360 = (($$in) + 2)|0;
    $361 = $y$0123&255;
    $362 = (((($this)) + 164|0) + ($data$9)|0);
    HEAP8[$362>>0] = $361;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $360;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 73: {
    label = 0;
    $365 = (($$in) + 2)|0;
    $366 = $x$0124&255;
    $367 = (((($this)) + 164|0) + ($data$10)|0);
    HEAP8[$367>>0] = $366;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $365;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 75: {
    label = 0;
    $370 = (((($this)) + 164|0) + ($data$11)|0);
    $371 = HEAP8[$370>>0]|0;
    $372 = $371&255;
    $data$12 = $372;
    label = 76;
    break;
   }
   case 78: {
    label = 0;
    $376 = (((($this)) + 164|0) + ($data$13)|0);
    $377 = HEAP8[$376>>0]|0;
    $378 = $377&255;
    $data$14 = $378;
    label = 79;
    break;
   }
   case 83: {
    label = 0;
    $408 = (($$in) + 2)|0;
    $409 = (($67) + ($408)|0);
    $410 = HEAP8[$409>>0]|0;
    $411 = $410&255;
    $412 = $411 << 8;
    $413 = (($412) + ($data$15))|0;
    $414 = $data$15 & 256;
    $415 = ($414|0)==(0);
    if (!($415)) {
     $416 = (($413) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$416,$clock_count$3)|0);
    }
    $417 = (($$in) + 3)|0;
    $418 = (__ZN8Nes_Core8cpu_readEjl($this,$413,$clock_count$3)|0);
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $clock_count$3;$nz$0$be = $418;$pc$1$be = $417;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $418;
    break;
   }
   case 87: {
    label = 0;
    $422 = (($$in) + 2)|0;
    $423 = (($67) + ($422)|0);
    $424 = HEAP8[$423>>0]|0;
    $425 = $424&255;
    $426 = $425 << 8;
    $427 = (($426) + ($data$16))|0;
    $428 = (($$in) + 3)|0;
    $429 = $data$16 & 256;
    $430 = ($429|0)==(0);
    if (!($430)) {
     $431 = (($427) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$431,$clock_count$4)|0);
    }
    $432 = (__ZN8Nes_Core8cpu_readEjl($this,$427,$clock_count$4)|0);
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $clock_count$4;$nz$0$be = $432;$pc$1$be = $428;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $432;$y$0$be = $y$0123;
    break;
   }
   case 91: {
    label = 0;
    $433 = HEAP16[$66>>1]|0;
    $434 = $433&65535;
    $435 = ($433&65535)<(2048);
    do {
     if ($435) {
      $436 = $temp28$0&255;
      $437 = (((($this)) + 164|0) + ($434)|0);
      HEAP8[$437>>0] = $436;
     } else {
      $438 = ($433<<16>>16)==(8199);
      if ($438) {
       __ZN8Nes_Core14cpu_write_2007Ei($this,$temp28$0);
       break;
      } else {
       __ZN8Nes_Core9cpu_writeEjil($this,$434,$temp28$0,$52);
       break;
      }
     }
    } while(0);
    $439 = (($$in) + 3)|0;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $439;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 99: {
    label = 0;
    $447 = (($x$0124) - ($data$17))|0;
    $448 = (($pc$5) + 1)|0;
    $449 = $447 ^ -1;
    $450 = $447 & 255;
    $a$0$be = $a$0125;$c$0$be = $449;$clock_count$0$be = $52;$nz$0$be = $450;$pc$1$be = $448;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 102: {
    label = 0;
    $458 = (($y$0123) - ($data$18))|0;
    $459 = (($pc$6) + 1)|0;
    $460 = $458 ^ -1;
    $461 = $458 & 255;
    $a$0$be = $a$0125;$c$0$be = $460;$clock_count$0$be = $52;$nz$0$be = $461;$pc$1$be = $459;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 107: {
    label = 0;
    $492 = (((($this)) + 164|0) + ($data$19)|0);
    $493 = HEAP8[$492>>0]|0;
    $494 = $493&255;
    $clock_count$6 = $52;$data$22 = $494;$pc$8 = $61;
    label = 113;
    break;
   }
   case 109: {
    label = 0;
    $data$20 = (($x$0$pn13) + ($69))|0;
    $495 = $data$20 >>> 8;
    $496 = (($495) + ($52))|0;
    $497 = (($$in) + 2)|0;
    $498 = (($67) + ($497)|0);
    $499 = HEAP8[$498>>0]|0;
    $500 = $499&255;
    $501 = $500 << 8;
    $502 = (($501) + ($data$20))|0;
    $503 = $data$20 & 256;
    $504 = ($503|0)==(0);
    if ($504) {
     $clock_count$5 = $496;$data$21 = $502;$pc$7 = $497;
     label = 112;
    } else {
     $505 = (($502) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$505,$496)|0);
     $clock_count$5 = $496;$data$21 = $502;$pc$7 = $497;
     label = 112;
    }
    break;
   }
   case 118: {
    label = 0;
    $545 = (((($this)) + 164|0) + ($data$23)|0);
    $546 = HEAP8[$545>>0]|0;
    $547 = $546&255;
    $clock_count$8 = $52;$data$26 = $547;$pc$10 = $61;
    label = 124;
    break;
   }
   case 120: {
    label = 0;
    $data$24 = (($x$0$pn12) + ($69))|0;
    $548 = $data$24 >>> 8;
    $549 = (($548) + ($52))|0;
    $550 = (($$in) + 2)|0;
    $551 = (($67) + ($550)|0);
    $552 = HEAP8[$551>>0]|0;
    $553 = $552&255;
    $554 = $553 << 8;
    $555 = (($554) + ($data$24))|0;
    $556 = $data$24 & 256;
    $557 = ($556|0)==(0);
    if ($557) {
     $clock_count$7 = $549;$data$25 = $555;$pc$9 = $550;
     label = 123;
    } else {
     $558 = (($555) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$558,$549)|0);
     $clock_count$7 = $549;$data$25 = $555;$pc$9 = $550;
     label = 123;
    }
    break;
   }
   case 129: {
    label = 0;
    $598 = (((($this)) + 164|0) + ($data$27)|0);
    $599 = HEAP8[$598>>0]|0;
    $600 = $599&255;
    $clock_count$10 = $52;$data$30 = $600;$pc$12 = $61;
    label = 135;
    break;
   }
   case 131: {
    label = 0;
    $data$28 = (($x$0$pn11) + ($69))|0;
    $601 = $data$28 >>> 8;
    $602 = (($601) + ($52))|0;
    $603 = (($$in) + 2)|0;
    $604 = (($67) + ($603)|0);
    $605 = HEAP8[$604>>0]|0;
    $606 = $605&255;
    $607 = $606 << 8;
    $608 = (($607) + ($data$28))|0;
    $609 = $data$28 & 256;
    $610 = ($609|0)==(0);
    if ($610) {
     $clock_count$9 = $602;$data$29 = $608;$pc$11 = $603;
     label = 134;
    } else {
     $611 = (($608) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$611,$602)|0);
     $clock_count$9 = $602;$data$29 = $608;$pc$11 = $603;
     label = 134;
    }
    break;
   }
   case 149: {
    label = 0;
    $686 = (((($this)) + 164|0) + ($data$31)|0);
    $687 = HEAP8[$686>>0]|0;
    $688 = $687&255;
    $clock_count$12 = $52;$data$34 = $688;$pc$14 = $61;
    label = 155;
    break;
   }
   case 151: {
    label = 0;
    $data$32 = (($x$0$pn10) + ($69))|0;
    $689 = $data$32 >>> 8;
    $690 = (($689) + ($52))|0;
    $691 = (($$in) + 2)|0;
    $692 = (($67) + ($691)|0);
    $693 = HEAP8[$692>>0]|0;
    $694 = $693&255;
    $695 = $694 << 8;
    $696 = (($695) + ($data$32))|0;
    $697 = $data$32 & 256;
    $698 = ($697|0)==(0);
    if ($698) {
     $clock_count$11 = $690;$data$33 = $696;$pc$13 = $691;
     label = 154;
    } else {
     $699 = (($696) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$699,$690)|0);
     $clock_count$11 = $690;$data$33 = $696;$pc$13 = $691;
     label = 154;
    }
    break;
   }
   case 160: {
    label = 0;
    $738 = (((($this)) + 164|0) + ($data$35)|0);
    $739 = HEAP8[$738>>0]|0;
    $740 = $739&255;
    $c$1 = $c$0119;$clock_count$14 = $52;$data$38 = $740;$pc$16 = $61;
    label = 166;
    break;
   }
   case 162: {
    label = 0;
    $data$36 = (($x$0$pn9) + ($69))|0;
    $741 = $data$36 >>> 8;
    $742 = (($741) + ($52))|0;
    $743 = (($$in) + 2)|0;
    $744 = (($67) + ($743)|0);
    $745 = HEAP8[$744>>0]|0;
    $746 = $745&255;
    $747 = $746 << 8;
    $748 = (($747) + ($data$36))|0;
    $749 = $data$36 & 256;
    $750 = ($749|0)==(0);
    if ($750) {
     $clock_count$13 = $742;$data$37 = $748;$pc$15 = $743;
     label = 165;
    } else {
     $751 = (($748) + -256)|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$751,$742)|0);
     $clock_count$13 = $742;$data$37 = $748;$pc$15 = $743;
     label = 165;
    }
    break;
   }
   case 167: {
    label = 0;
    $a$2 = $a$1;$c$2 = 0;$pc$18 = $pc$17;
    label = 168;
    break;
   }
   case 173: {
    label = 0;
    $c$3 = 0;$data$40 = $data$39;
    label = 174;
    break;
   }
   case 189: {
    label = 0;
    $c$5 = 0;$data$43 = $data$42;
    label = 190;
    break;
   }
   case 200: {
    label = 0;
    $c$6 = 0;$data$45 = $data$44;
    label = 201;
    break;
   }
   case 204: {
    label = 0;
    $c$7 = 0;$data$47 = $data$46;
    label = 205;
    break;
   }
   case 210: {
    label = 0;
    $data$50 = $data$49;$nz$2 = -1;
    label = 211;
    break;
   }
   case 217: {
    label = 0;
    $891 = ($data$54>>>0)<(2048);
    if ($891) {
     $897 = (__ZN8Nes_Core8cpu_readEjl($this,$data$54,$52)|0);
     $898 = (($897) + ($nz$4))|0;
     $899 = (($$in) + 3)|0;
     $900 = $898&255;
     $901 = (((($this)) + 164|0) + ($data$54)|0);
     HEAP8[$901>>0] = $900;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $898;$pc$1$be = $899;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    }
    $892 = ($data$54|0)==(8199);
    $893 = (__ZN8Nes_Core8cpu_readEjl($this,$data$54,$52)|0);
    if ($892) {
     __ZN8Nes_Core14cpu_write_2007Ei($this,$893);
     $894 = (($893) + ($nz$4))|0;
     $895 = (($$in) + 3)|0;
     $896 = $894 & 255;
     __ZN8Nes_Core14cpu_write_2007Ei($this,$896);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $894;$pc$1$be = $895;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    } else {
     __ZN8Nes_Core9cpu_writeEjil($this,$data$54,$893,$52);
     $902 = (($893) + ($nz$4))|0;
     $903 = (($$in) + 3)|0;
     $904 = $902 & 255;
     __ZN8Nes_Core9cpu_writeEjil($this,$data$54,$904,$52);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $902;$pc$1$be = $903;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    }
    break;
   }
   case 223: {
    label = 0;
    $a$0$be = $x$1;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $x$1;$pc$1$be = $61;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$1;$y$0$be = $y$0123;
    break;
   }
   case 229: {
    label = 0;
    $945 = $status$1&255;
    HEAP8[$4>>0] = $945;
    $946 = HEAP32[$0>>2]|0;
    $947 = HEAP32[$1>>2]|0;
    $948 = ($946|0)>($947|0);
    $949 = $status$1 & 4;
    $950 = ($949|0)==(0);
    $or$cond = $950 & $948;
    $$19 = $or$cond ? $947 : $946;
    HEAP32[$8>>2] = $$19;
    $a$0$be = $a$0125;$c$0$be = $c$9;$clock_count$0$be = $52;$nz$0$be = $nz$5;$pc$1$be = $pc$20;$sp$0$be = $sp$1;$status$0$be = $status$1;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 242: {
    label = 0;
    $1029 = $status$2&255;
    HEAP8[$4>>0] = $1029;
    $1030 = HEAP32[$0>>2]|0;
    $1031 = ($52|0)<($1030|0);
    if (!($1031)) {
     $$lcssa192 = $61;$$lcssa195 = $52;$a$0125$lcssa186 = $a$0125;$c$10$lcssa = $c$10;$nz$6$lcssa = $nz$6;$sp$2$lcssa = $sp$2;$status$2$lcssa = $status$2;$x$0124$lcssa188 = $x$0124;$y$0123$lcssa190 = $y$0123;
     label = 247;
     break L7;
    }
    $1032 = HEAP32[$1>>2]|0;
    $1033 = ($1030|0)>($1032|0);
    if ($1033) {
     $1034 = ($52|0)<($1032|0);
     if ($1034) {
      $1036 = $1032;
     } else {
      $1035 = (($52) + 1)|0;
      HEAP32[$1>>2] = $1035;
      $1036 = $1035;
     }
     HEAP32[$8>>2] = $1036;
     $a$0$be = $a$0125;$c$0$be = $c$10;$clock_count$0$be = $52;$nz$0$be = $nz$6;$pc$1$be = $61;$sp$0$be = $sp$2;$status$0$be = $status$2;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $a$0$be = $a$0125;$c$0$be = $c$10;$clock_count$0$be = $52;$nz$0$be = $nz$6;$pc$1$be = $61;$sp$0$be = $sp$2;$status$0$be = $status$2;$x$0$be = $x$0124;$y$0$be = $y$0123;
    }
    break;
   }
   case 250: {
    label = 0;
    $1040 = $status$3&255;
    HEAP8[$4>>0] = $1040;
    $1041 = HEAP32[$0>>2]|0;
    HEAP32[$8>>2] = $1041;
    $1042 = HEAP32[$1>>2]|0;
    $1043 = ($52|0)<($1042|0);
    if ($1043) {
     $a$0$be = $a$0125;$c$0$be = $c$11;$clock_count$0$be = $52;$nz$0$be = $nz$7;$pc$1$be = $61;$sp$0$be = $sp$3;$status$0$be = $status$3;$x$0$be = $x$0124;$y$0$be = $y$0123;
    } else {
     $$lcssa = $61;$$lcssa194 = $52;$a$0125$lcssa = $a$0125;$c$11$lcssa = $c$11;$nz$7$lcssa = $nz$7;$sp$3$lcssa = $sp$3;$status$3$lcssa = $status$3;$x$0124$lcssa = $x$0124;$y$0123$lcssa = $y$0123;
     label = 251;
     break L7;
    }
    break;
   }
   case 255: {
    label = 0;
    $1053 = (($$in) + 2)|0;
    $clock_count$16 = $clock_count$15;$pc$21 = $1053;
    label = 256;
    break;
   }
   case 261: {
    label = 0;
    $data$55 = (($x$0$pn8) + ($69))|0;
    $1082 = (($$in) + 2)|0;
    $1083 = (($67) + ($1082)|0);
    $1084 = HEAP8[$1083>>0]|0;
    $1085 = $1084&255;
    $1086 = $1085 << 8;
    $1087 = (($1086) + ($data$55))|0;
    $1088 = $data$55 & 256;
    $1089 = (($1087) - ($1088))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1089,$52)|0);
    $data$56 = $1087;$pc$22 = $1082;
    label = 263;
    break;
   }
   case 273: {
    label = 0;
    $data$57 = (($x$0$pn7) + ($69))|0;
    $1140 = (($$in) + 2)|0;
    $1141 = (($67) + ($1140)|0);
    $1142 = HEAP8[$1141>>0]|0;
    $1143 = $1142&255;
    $1144 = $1143 << 8;
    $1145 = (($1144) + ($data$57))|0;
    $1146 = $data$57 & 256;
    $1147 = (($1145) - ($1146))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1147,$52)|0);
    $data$58 = $1145;$pc$23 = $1140;
    label = 275;
    break;
   }
   case 285: {
    label = 0;
    $data$59 = (($x$0$pn6) + ($69))|0;
    $1195 = (($$in) + 2)|0;
    $1196 = (($67) + ($1195)|0);
    $1197 = HEAP8[$1196>>0]|0;
    $1198 = $1197&255;
    $1199 = $1198 << 8;
    $1200 = (($1199) + ($data$59))|0;
    $1201 = $data$59 & 256;
    $1202 = (($1200) - ($1201))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1202,$52)|0);
    $data$60 = $1200;$pc$24 = $1195;
    label = 287;
    break;
   }
   case 297: {
    label = 0;
    $data$61 = (($x$0$pn5) + ($69))|0;
    $1260 = (($$in) + 2)|0;
    $1261 = (($67) + ($1260)|0);
    $1262 = HEAP8[$1261>>0]|0;
    $1263 = $1262&255;
    $1264 = $1263 << 8;
    $1265 = (($1264) + ($data$61))|0;
    $1266 = $data$61 & 256;
    $1267 = (($1265) - ($1266))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1267,$52)|0);
    $data$62 = $1265;$pc$25 = $1260;
    label = 299;
    break;
   }
   case 309: {
    label = 0;
    $data$63 = (($x$0$pn4) + ($69))|0;
    $1320 = (($$in) + 2)|0;
    $1321 = (($67) + ($1320)|0);
    $1322 = HEAP8[$1321>>0]|0;
    $1323 = $1322&255;
    $1324 = $1323 << 8;
    $1325 = (($1324) + ($data$63))|0;
    $1326 = $data$63 & 256;
    $1327 = (($1325) - ($1326))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1327,$52)|0);
    $data$64 = $1325;$pc$26 = $1320;
    label = 311;
    break;
   }
   case 321: {
    label = 0;
    $data$65 = (($x$0$pn) + ($69))|0;
    $1376 = (($$in) + 2)|0;
    $1377 = (($67) + ($1376)|0);
    $1378 = HEAP8[$1377>>0]|0;
    $1379 = $1378&255;
    $1380 = $1379 << 8;
    $1381 = (($1380) + ($data$65))|0;
    $1382 = $data$65 & 256;
    $1383 = (($1381) - ($1382))|0;
    (__ZN8Nes_Core8cpu_readEjl($this,$1383,$52)|0);
    $data$66 = $1381;$pc$27 = $1376;
    label = 323;
    break;
   }
   case 337: {
    label = 0;
    $1450 = (((($this)) + 164|0) + ($data$67)|0);
    $1451 = HEAP8[$1450>>0]|0;
    $1452 = $1451&255;
    $clock_count$18 = $52;$data$69 = $1452;$pc$29 = $61;
    label = 342;
    break;
   }
   case 341: {
    label = 0;
    $1471 = (__ZN8Nes_Core8cpu_readEjl($this,$data$68,$clock_count$17)|0);
    $clock_count$18 = $clock_count$17;$data$69 = $1471;$pc$29 = $pc$28;
    label = 342;
    break;
   }
   case 346: {
    label = 0;
    $1493 = ($data$70>>>0)<(2048);
    if ($1493) {
     $data$7091 = $data$70;$pc$3093 = $pc$30;
     label = 347;
    } else {
     $1497 = ($data$70|0)==(8199);
     $1498 = $a$0125 & $x$0124;
     if ($1497) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1498);
      $pc$3092 = $pc$30;
      label = 351;
      break;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$data$70,$1498,$52);
      $pc$3092 = $pc$30;
      label = 351;
      break;
     }
    }
    break;
   }
   case 385: {
    label = 0;
    $1646 = $63 >>> 2;
    $1647 = $1646 & 7;
    $1648 = (840137 + ($1647)|0);
    $1649 = HEAP8[$1648>>0]|0;
    $1650 = $1649&255;
    $1651 = $63 << 1;
    $1652 = $1651 & 6;
    $1653 = $1650 >>> $1652;
    $1654 = $1653 & 3;
    $1655 = ($794<<24>>24)==(-100);
    $$op = (($1654) + -1)|0;
    $1656 = $1655 ? 2 : $$op;
    $1657 = (($1656) + ($61))|0;
    $1658 = HEAP32[$44>>2]|0;
    $1659 = (($1658) + 1)|0;
    HEAP32[$44>>2] = $1659;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1657;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
  }
  switch (label|0) {
   case 26: {
    label = 0;
    $164 = (__ZN8Nes_Core8cpu_readEjl($this,$data$3,$clock_count$1)|0);
    $clock_count$2 = $clock_count$1;$data$4 = $164;$pc$3 = $pc$2;
    label = 27;
    break;
   }
   case 46: {
    label = 0;
    $242 = (($pc$4) + 1)|0;
    $243 = ($data$7>>>0)<(2048);
    if ($243) {
     $244 = $a$0125&255;
     $245 = (((($this)) + 164|0) + ($data$7)|0);
     HEAP8[$245>>0] = $244;
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $242;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    }
    $246 = ($data$7|0)==(8199);
    if ($246) {
     __ZN8Nes_Core14cpu_write_2007Ei($this,$a$0125);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $242;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    } else {
     __ZN8Nes_Core9cpu_writeEjil($this,$data$7,$a$0125,$52);
     $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $242;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    }
    break;
   }
   case 76: {
    label = 0;
    $373 = (($$in) + 2)|0;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $data$12;$pc$1$be = $373;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $data$12;$y$0$be = $y$0123;
    break;
   }
   case 79: {
    label = 0;
    $379 = (($$in) + 2)|0;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $data$14;$pc$1$be = $379;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $data$14;
    break;
   }
   case 112: {
    label = 0;
    $512 = (__ZN8Nes_Core8cpu_readEjl($this,$data$21,$clock_count$5)|0);
    $clock_count$6 = $clock_count$5;$data$22 = $512;$pc$8 = $pc$7;
    label = 113;
    break;
   }
   case 123: {
    label = 0;
    $565 = (__ZN8Nes_Core8cpu_readEjl($this,$data$25,$clock_count$7)|0);
    $clock_count$8 = $clock_count$7;$data$26 = $565;$pc$10 = $pc$9;
    label = 124;
    break;
   }
   case 134: {
    label = 0;
    $618 = (__ZN8Nes_Core8cpu_readEjl($this,$data$29,$clock_count$9)|0);
    $clock_count$10 = $clock_count$9;$data$30 = $618;$pc$12 = $pc$11;
    label = 135;
    break;
   }
   case 154: {
    label = 0;
    $706 = (__ZN8Nes_Core8cpu_readEjl($this,$data$33,$clock_count$11)|0);
    $clock_count$12 = $clock_count$11;$data$34 = $706;$pc$14 = $pc$13;
    label = 155;
    break;
   }
   case 165: {
    label = 0;
    $758 = (__ZN8Nes_Core8cpu_readEjl($this,$data$37,$clock_count$13)|0);
    $c$1 = $c$0119;$clock_count$14 = $clock_count$13;$data$38 = $758;$pc$16 = $pc$15;
    label = 166;
    break;
   }
   case 168: {
    label = 0;
    $773 = $c$2 >>> 1;
    $774 = $773 & 128;
    $775 = $a$2 << 8;
    $776 = $a$2 >> 1;
    $777 = $774 | $776;
    $a$0$be = $777;$c$0$be = $775;$clock_count$0$be = $52;$nz$0$be = $777;$pc$1$be = $pc$18;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 174: {
    label = 0;
    $787 = (($$in) + 2)|0;
    $788 = (($67) + ($787)|0);
    $789 = HEAP8[$788>>0]|0;
    $790 = $789&255;
    $791 = $790 << 8;
    $792 = (($791) + ($data$40))|0;
    $793 = $794 & -33;
    $795 = ($793<<24>>24)==(30);
    if ($795) {
     $796 = $data$40 & 256;
     $797 = (($792) - ($796))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$797,$52)|0);
    }
    $798 = ($792>>>0)<(2048);
    do {
     if ($798) {
      $799 = (__ZN8Nes_Core8cpu_readEjl($this,$792,$52)|0);
      $800 = $799&255;
      $801 = (((($this)) + 164|0) + ($792)|0);
      HEAP8[$801>>0] = $800;
      $temp49$0 = $799;
     } else {
      $802 = ($792|0)==(8199);
      $803 = (__ZN8Nes_Core8cpu_readEjl($this,$792,$52)|0);
      if ($802) {
       __ZN8Nes_Core14cpu_write_2007Ei($this,$803);
       $temp49$0 = $803;
       break;
      } else {
       __ZN8Nes_Core9cpu_writeEjil($this,$792,$803,$52);
       $temp49$0 = $803;
       break;
      }
     }
    } while(0);
    $804 = $c$3 >>> 8;
    $805 = $804 & 1;
    $806 = $temp49$0 << 1;
    $807 = $806 | $805;
    $c$4 = $806;$data$41 = $792;$nz$1 = $807;$pc$19 = $787;
    label = 182;
    break;
   }
   case 190: {
    label = 0;
    $816 = (($$in) + 2)|0;
    $817 = (($67) + ($816)|0);
    $818 = HEAP8[$817>>0]|0;
    $819 = $818&255;
    $820 = $819 << 8;
    $821 = (($820) + ($data$43))|0;
    $822 = $794 & -33;
    $823 = ($822<<24>>24)==(94);
    if ($823) {
     $824 = $data$43 & 256;
     $825 = (($821) - ($824))|0;
     (__ZN8Nes_Core8cpu_readEjl($this,$825,$52)|0);
    }
    $826 = ($821>>>0)<(2048);
    do {
     if ($826) {
      $827 = (__ZN8Nes_Core8cpu_readEjl($this,$821,$52)|0);
      $828 = $827&255;
      $829 = (((($this)) + 164|0) + ($821)|0);
      HEAP8[$829>>0] = $828;
      $temp50$0 = $827;
     } else {
      $830 = ($821|0)==(8199);
      $831 = (__ZN8Nes_Core8cpu_readEjl($this,$821,$52)|0);
      if ($830) {
       __ZN8Nes_Core14cpu_write_2007Ei($this,$831);
       $temp50$0 = $831;
       break;
      } else {
       __ZN8Nes_Core9cpu_writeEjil($this,$821,$831,$52);
       $temp50$0 = $831;
       break;
      }
     }
    } while(0);
    $832 = $c$5 >>> 1;
    $833 = $832 & 128;
    $834 = $temp50$0 >> 1;
    $835 = $834 | $833;
    $836 = $temp50$0 << 8;
    $c$4 = $836;$data$41 = $821;$nz$1 = $835;$pc$19 = $816;
    label = 182;
    break;
   }
   case 201: {
    label = 0;
    $841 = (((($this)) + 164|0) + ($data$45)|0);
    $842 = HEAP8[$841>>0]|0;
    $843 = $842&255;
    $844 = $c$6 >>> 1;
    $845 = $844 & 128;
    $846 = $843 >>> 1;
    $847 = $846 | $845;
    $848 = $843 << 8;
    $c$8 = $848;$data$51 = $data$45;$nz$3 = $847;
    label = 212;
    break;
   }
   case 205: {
    label = 0;
    $853 = $c$7 >>> 8;
    $854 = $853 & 1;
    $855 = (((($this)) + 164|0) + ($data$47)|0);
    $856 = HEAP8[$855>>0]|0;
    $857 = $856&255;
    $858 = $857 << 1;
    $859 = $858 | $854;
    $c$8 = $858;$data$51 = $data$47;$nz$3 = $859;
    label = 212;
    break;
   }
   case 211: {
    label = 0;
    $868 = (((($this)) + 164|0) + ($data$50)|0);
    $869 = HEAP8[$868>>0]|0;
    $870 = $869&255;
    $871 = (($870) + ($nz$2))|0;
    $c$8 = $c$0119;$data$51 = $data$50;$nz$3 = $871;
    label = 212;
    break;
   }
   case 256: {
    label = 0;
    $1054 = (($pc$21) + 1)|0;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $clock_count$16;$nz$0$be = $nz$0118;$pc$1$be = $1054;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 263: {
    label = 0;
    $1096 = ($data$56>>>0)<(2048);
    if ($1096) {
     $data$5623 = $data$56;$pc$2226 = $pc$22;
     label = 265;
    } else {
     $1097 = ($data$56|0)==(8199);
     $1098 = (__ZN8Nes_Core8cpu_readEjl($this,$data$56,$52)|0);
     if ($1097) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1098);
      $1104 = (($1098) + 255)|0;
      $1105 = $1104 & 255;
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1105);
      $1110 = $1105;$pc$222529 = $pc$22;
      label = 268;
      break;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$data$56,$1098,$52);
      $1106 = (($1098) + 255)|0;
      $1107 = $1106 & 255;
      __ZN8Nes_Core9cpu_writeEjil($this,$data$56,$1107,$52);
      $1110 = $1107;$pc$222529 = $pc$22;
      label = 268;
      break;
     }
    }
    break;
   }
   case 275: {
    label = 0;
    $1154 = ($data$58>>>0)<(2048);
    if ($1154) {
     $data$5834 = $data$58;$pc$2337 = $pc$23;
     label = 277;
    } else {
     $1155 = ($data$58|0)==(8199);
     $1156 = (__ZN8Nes_Core8cpu_readEjl($this,$data$58,$52)|0);
     if ($1155) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1156);
      $1162 = (($1156) + 1)|0;
      $1163 = $1162 & 255;
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1163);
      $1167 = $1163;$pc$233640 = $pc$23;
      label = 280;
      break;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$data$58,$1156,$52);
      $1164 = (($1156) + 1)|0;
      $1165 = $1164 & 255;
      __ZN8Nes_Core9cpu_writeEjil($this,$data$58,$1165,$52);
      $1167 = $1165;$pc$233640 = $pc$23;
      label = 280;
      break;
     }
    }
    break;
   }
   case 287: {
    label = 0;
    $1209 = ($data$60>>>0)<(2048);
    if ($1209) {
     $data$6045 = $data$60;$pc$2448 = $pc$24;
     label = 291;
    } else {
     $1210 = ($data$60|0)==(8199);
     $1211 = (__ZN8Nes_Core8cpu_readEjl($this,$data$60,$52)|0);
     if ($1210) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1211);
      $1212 = $1211 << 1;
      $1213 = $1212 & 254;
      $1214 = $c$0119 >>> 8;
      $1215 = $1214 & 1;
      $1216 = $1213 | $1215;
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1216);
      $1232 = $1216;$1677 = $1212;$pc$244751 = $pc$24;
      label = 292;
      break;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$data$60,$1211,$52);
      $1217 = $1211 << 1;
      $1218 = $1217 & 254;
      $1219 = $c$0119 >>> 8;
      $1220 = $1219 & 1;
      $1221 = $1218 | $1220;
      __ZN8Nes_Core9cpu_writeEjil($this,$data$60,$1221,$52);
      $1232 = $1221;$1677 = $1217;$pc$244751 = $pc$24;
      label = 292;
      break;
     }
    }
    break;
   }
   case 299: {
    label = 0;
    $1274 = ($data$62>>>0)<(2048);
    if ($1274) {
     $data$6256 = $data$62;$pc$2559 = $pc$25;
     label = 303;
    } else {
     $1275 = ($data$62|0)==(8199);
     $1276 = (__ZN8Nes_Core8cpu_readEjl($this,$data$62,$52)|0);
     if ($1275) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1276);
      $1277 = $c$0119 >>> 1;
      $1278 = $1277 & 128;
      $1279 = $1276 >> 1;
      $1280 = $1279 | $1278;
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1280);
      $1678 = $1280;$pc$255862 = $pc$25;$temp73$065 = $1276;
      label = 304;
      break;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$data$62,$1276,$52);
      $1281 = $c$0119 >>> 1;
      $1282 = $1281 & 128;
      $1283 = $1276 >> 1;
      $1284 = $1283 | $1282;
      __ZN8Nes_Core9cpu_writeEjil($this,$data$62,$1284,$52);
      $1678 = $1284;$pc$255862 = $pc$25;$temp73$065 = $1276;
      label = 304;
      break;
     }
    }
    break;
   }
   case 311: {
    label = 0;
    $1334 = ($data$64>>>0)<(2048);
    if ($1334) {
     $data$6469 = $data$64;$pc$2672 = $pc$26;
     label = 313;
    } else {
     $1335 = ($data$64|0)==(8199);
     $1336 = (__ZN8Nes_Core8cpu_readEjl($this,$data$64,$52)|0);
     if ($1335) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1336);
      $1342 = $1336 << 1;
      $1343 = $1342 & 254;
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1343);
      $1347 = $1343;$1679 = $1342;$pc$267175 = $pc$26;
      label = 316;
      break;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$data$64,$1336,$52);
      $1344 = $1336 << 1;
      $1345 = $1344 & 254;
      __ZN8Nes_Core9cpu_writeEjil($this,$data$64,$1345,$52);
      $1347 = $1345;$1679 = $1344;$pc$267175 = $pc$26;
      label = 316;
      break;
     }
    }
    break;
   }
   case 323: {
    label = 0;
    $1390 = ($data$66>>>0)<(2048);
    if ($1390) {
     $data$6680 = $data$66;$pc$2783 = $pc$27;
     label = 325;
    } else {
     $1391 = ($data$66|0)==(8199);
     $1392 = (__ZN8Nes_Core8cpu_readEjl($this,$data$66,$52)|0);
     if ($1391) {
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1392);
      $1397 = $1392 >> 1;
      __ZN8Nes_Core14cpu_write_2007Ei($this,$1397);
      $$in163 = $1392;$1401 = $1397;$pc$278286 = $pc$27;
      label = 328;
      break;
     } else {
      __ZN8Nes_Core9cpu_writeEjil($this,$data$66,$1392,$52);
      $1398 = $1392 >> 1;
      __ZN8Nes_Core9cpu_writeEjil($this,$data$66,$1398,$52);
      $$in163 = $1392;$1401 = $1398;$pc$278286 = $pc$27;
      label = 328;
      break;
     }
    }
    break;
   }
   case 342: {
    label = 0;
    $1472 = (($pc$29) + 1)|0;
    $a$0$be = $data$69;$c$0$be = $c$0119;$clock_count$0$be = $clock_count$18;$nz$0$be = $data$69;$pc$1$be = $1472;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $data$69;$y$0$be = $y$0123;
    break;
   }
   case 347: {
    label = 0;
    $1494 = $a$0125 & $x$0124;
    $1495 = $1494&255;
    $1496 = (((($this)) + 164|0) + ($data$7091)|0);
    HEAP8[$1496>>0] = $1495;
    $pc$3092 = $pc$3093;
    label = 351;
    break;
   }
  }
  switch (label|0) {
   case 27: {
    label = 0;
    $165 = (($a$0125) - ($data$4))|0;
    $166 = (($pc$3) + 1)|0;
    $167 = $165 ^ -1;
    $168 = $165 & 255;
    $a$0$be = $a$0125;$c$0$be = $167;$clock_count$0$be = $clock_count$2;$nz$0$be = $168;$pc$1$be = $166;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 113: {
    label = 0;
    $513 = $data$22 & $a$0125;
    $514 = (($pc$8) + 1)|0;
    $a$0$be = $513;$c$0$be = $c$0119;$clock_count$0$be = $clock_count$6;$nz$0$be = $513;$pc$1$be = $514;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 124: {
    label = 0;
    $566 = $data$26 ^ $a$0125;
    $567 = (($pc$10) + 1)|0;
    $a$0$be = $566;$c$0$be = $c$0119;$clock_count$0$be = $clock_count$8;$nz$0$be = $566;$pc$1$be = $567;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 135: {
    label = 0;
    $619 = $data$30 | $a$0125;
    $620 = (($pc$12) + 1)|0;
    $a$0$be = $619;$c$0$be = $c$0119;$clock_count$0$be = $clock_count$10;$nz$0$be = $619;$pc$1$be = $620;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 155: {
    label = 0;
    $707 = $data$34 ^ 255;
    $c$1 = $c$0119;$clock_count$14 = $clock_count$12;$data$38 = $707;$pc$16 = $pc$14;
    label = 166;
    break;
   }
   case 182: {
    label = 0;
    $808 = (($pc$19) + 1)|0;
    $809 = ($data$41>>>0)<(2048);
    if ($809) {
     $810 = $nz$1&255;
     $811 = (((($this)) + 164|0) + ($data$41)|0);
     HEAP8[$811>>0] = $810;
     $a$0$be = $a$0125;$c$0$be = $c$4;$clock_count$0$be = $52;$nz$0$be = $nz$1;$pc$1$be = $808;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    }
    $812 = ($data$41|0)==(8199);
    $813 = $nz$1 & 255;
    if ($812) {
     __ZN8Nes_Core14cpu_write_2007Ei($this,$813);
     $a$0$be = $a$0125;$c$0$be = $c$4;$clock_count$0$be = $52;$nz$0$be = $nz$1;$pc$1$be = $808;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    } else {
     __ZN8Nes_Core9cpu_writeEjil($this,$data$41,$813,$52);
     $a$0$be = $a$0125;$c$0$be = $c$4;$clock_count$0$be = $52;$nz$0$be = $nz$1;$pc$1$be = $808;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
     break;
    }
    break;
   }
   case 212: {
    label = 0;
    $872 = (($$in) + 2)|0;
    $873 = $nz$3&255;
    $874 = (((($this)) + 164|0) + ($data$51)|0);
    HEAP8[$874>>0] = $873;
    $a$0$be = $a$0125;$c$0$be = $c$8;$clock_count$0$be = $52;$nz$0$be = $nz$3;$pc$1$be = $872;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
   case 265: {
    label = 0;
    $1099 = (__ZN8Nes_Core8cpu_readEjl($this,$data$5623,$52)|0);
    $1100 = (($1099) + 255)|0;
    $1101 = $1100 & 255;
    $1102 = $1100&255;
    $1103 = (((($this)) + 164|0) + ($data$5623)|0);
    HEAP8[$1103>>0] = $1102;
    $1110 = $1101;$pc$222529 = $pc$2226;
    label = 268;
    break;
   }
   case 277: {
    label = 0;
    $1157 = (__ZN8Nes_Core8cpu_readEjl($this,$data$5834,$52)|0);
    $1158 = (($1157) + 1)|0;
    $1159 = $1158 & 255;
    $1160 = $1158&255;
    $1161 = (((($this)) + 164|0) + ($data$5834)|0);
    HEAP8[$1161>>0] = $1160;
    $1167 = $1159;$pc$233640 = $pc$2337;
    label = 280;
    break;
   }
   case 291: {
    label = 0;
    $1222 = (__ZN8Nes_Core8cpu_readEjl($this,$data$6045,$52)|0);
    $1223 = (((($this)) + 164|0) + ($data$6045)|0);
    $1224 = $1222 << 1;
    $1225 = $1224 & 254;
    $1226 = $c$0119 >>> 8;
    $1227 = $1226 & 1;
    $1228 = $1225 | $1227;
    $1229 = $1228&255;
    HEAP8[$1223>>0] = $1229;
    $1232 = $1228;$1677 = $1224;$pc$244751 = $pc$2448;
    label = 292;
    break;
   }
   case 303: {
    label = 0;
    $1285 = (__ZN8Nes_Core8cpu_readEjl($this,$data$6256,$52)|0);
    $1286 = (((($this)) + 164|0) + ($data$6256)|0);
    $1287 = $c$0119 >>> 1;
    $1288 = $1287 & 128;
    $1289 = $1285 >> 1;
    $1290 = $1289 | $1288;
    $1291 = $1290&255;
    HEAP8[$1286>>0] = $1291;
    $1678 = $1290;$pc$255862 = $pc$2559;$temp73$065 = $1285;
    label = 304;
    break;
   }
   case 313: {
    label = 0;
    $1337 = (__ZN8Nes_Core8cpu_readEjl($this,$data$6469,$52)|0);
    $1338 = $1337 << 1;
    $1339 = $1338 & 254;
    $1340 = $1338&255;
    $1341 = (((($this)) + 164|0) + ($data$6469)|0);
    HEAP8[$1341>>0] = $1340;
    $1347 = $1339;$1679 = $1338;$pc$267175 = $pc$2672;
    label = 316;
    break;
   }
   case 325: {
    label = 0;
    $1393 = (__ZN8Nes_Core8cpu_readEjl($this,$data$6680,$52)|0);
    $1394 = $1393 >> 1;
    $1395 = $1394&255;
    $1396 = (((($this)) + 164|0) + ($data$6680)|0);
    HEAP8[$1396>>0] = $1395;
    $$in163 = $1393;$1401 = $1394;$pc$278286 = $pc$2783;
    label = 328;
    break;
   }
   case 351: {
    label = 0;
    $1499 = (($pc$3092) + 1)|0;
    $a$0$be = $a$0125;$c$0$be = $c$0119;$clock_count$0$be = $52;$nz$0$be = $nz$0118;$pc$1$be = $1499;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
    break;
   }
  }
  if ((label|0) == 268) {
   label = 0;
   $1108 = (($pc$222529) + 1)|0;
   $1109 = (($a$0125) - ($1110))|0;
   $1111 = $1109 ^ -1;
   $1112 = $1109 & 255;
   $a$0$be = $a$0125;$c$0$be = $1111;$clock_count$0$be = $52;$nz$0$be = $1112;$pc$1$be = $1108;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
  }
  else if ((label|0) == 280) {
   label = 0;
   $1166 = $1167 ^ 255;
   $c$1 = $c$0119;$clock_count$14 = $52;$data$38 = $1166;$pc$16 = $pc$233640;
   label = 166;
  }
  else if ((label|0) == 292) {
   label = 0;
   $1230 = (($pc$244751) + 1)|0;
   $1231 = $1232 & $a$0125;
   $a$0$be = $1231;$c$0$be = $1677;$clock_count$0$be = $52;$nz$0$be = $1231;$pc$1$be = $1230;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
  }
  else if ((label|0) == 304) {
   label = 0;
   $1292 = $temp73$065 << 8;
   $c$1 = $1292;$clock_count$14 = $52;$data$38 = $1678;$pc$16 = $pc$255862;
   label = 166;
  }
  else if ((label|0) == 316) {
   label = 0;
   $1346 = $1347 | $a$0125;
   $1348 = (($pc$267175) + 1)|0;
   $a$0$be = $1346;$c$0$be = $1679;$clock_count$0$be = $52;$nz$0$be = $1346;$pc$1$be = $1348;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
  }
  else if ((label|0) == 328) {
   label = 0;
   $1399 = $$in163 << 8;
   $1400 = $1401 ^ $a$0125;
   $1402 = (($pc$278286) + 1)|0;
   $a$0$be = $1400;$c$0$be = $1399;$clock_count$0$be = $52;$nz$0$be = $1400;$pc$1$be = $1402;$sp$0$be = $sp$0126;$status$0$be = $status$0122;$x$0$be = $x$0124;$y$0$be = $y$0123;
  }
  if ((label|0) == 166) {
   label = 0;
   $759 = $c$1 >>> 8;
   $760 = $759 & 1;
   $761 = $a$0125 ^ 128;
   $sext = $data$38 << 24;
   $762 = $sext >> 24;
   $763 = (($762) + ($761))|0;
   $764 = (($763) + ($760))|0;
   $765 = $status$0122 & -65;
   $766 = $764 >>> 2;
   $767 = $766 & 64;
   $768 = $767 | $765;
   $769 = (($data$38) + ($a$0125))|0;
   $770 = (($769) + ($760))|0;
   $771 = (($pc$16) + 1)|0;
   $772 = $770 & 255;
   $a$0$be = $772;$c$0$be = $770;$clock_count$0$be = $clock_count$14;$nz$0$be = $770;$pc$1$be = $771;$sp$0$be = $sp$0126;$status$0$be = $768;$x$0$be = $x$0124;$y$0$be = $y$0123;
  }
  $53 = $pc$1$be >>> 11;
  $54 = (($this) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($pc$1$be)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = HEAP32[$8>>2]|0;
  $60 = ($clock_count$0$be|0)<($59|0);
  if ($60) {
   $$in = $pc$1$be;$63 = $58;$67 = $55;$794 = $57;$a$0125 = $a$0$be;$c$0119 = $c$0$be;$clock_count$0128 = $clock_count$0$be;$nz$0118 = $nz$0$be;$sp$0126 = $sp$0$be;$status$0122 = $status$0$be;$x$0124 = $x$0$be;$y$0123 = $y$0$be;
  } else {
   $a$0108 = $a$0$be;$c$12 = $c$0$be;$clock_count$19 = $clock_count$0$be;$nz$13 = $nz$0$be;$pc$31 = $pc$1$be;$sp$4 = $sp$0$be;$status$4 = $status$0$be;$x$0105 = $x$0$be;$y$0102 = $y$0$be;
   label = 386;
   break;
  }
 }
 if ((label|0) == 247) {
  $result = 2;
  $a$0108 = $a$0125$lcssa186;$c$12 = $c$10$lcssa;$clock_count$19 = $$lcssa195;$nz$13 = $nz$6$lcssa;$pc$31 = $$lcssa192;$sp$4 = $sp$2$lcssa;$status$4 = $status$2$lcssa;$x$0105 = $x$0124$lcssa188;$y$0102 = $y$0123$lcssa190;
  $1660 = $status$4 & 76;
  $1661 = $c$12 >>> 8;
  $1662 = $1661 & 1;
  $1663 = $1660 | $1662;
  $1664 = $nz$13 & 2176;
  $1665 = ($1664|0)==(0);
  $1666 = $1663 | 128;
  $$18 = $1665 ? $1663 : $1666;
  $1667 = $nz$13 & 255;
  $1668 = ($1667|0)==(0);
  $1669 = $$18 | 2;
  $temp90$1 = $1668 ? $1669 : $$18;
  $1670 = $temp90$1&255;
  HEAP8[$4>>0] = $1670;
  HEAP32[$9>>2] = $clock_count$19;
  HEAP32[$11>>2] = $pc$31;
  $1671 = (($sp$4) + 255)|0;
  $1672 = $1671&255;
  HEAP8[$13>>0] = $1672;
  $1673 = $a$0108&255;
  HEAP8[$18>>0] = $1673;
  $1674 = $x$0105&255;
  HEAP8[$21>>0] = $1674;
  $1675 = $y$0102&255;
  HEAP8[$24>>0] = $1675;
  HEAP32[$1>>2] = 1073741824;
  $1676 = $result;
  STACKTOP = sp;return ($1676|0);
 }
 else if ((label|0) == 251) {
  $result = 1;
  $a$0108 = $a$0125$lcssa;$c$12 = $c$11$lcssa;$clock_count$19 = $$lcssa194;$nz$13 = $nz$7$lcssa;$pc$31 = $$lcssa;$sp$4 = $sp$3$lcssa;$status$4 = $status$3$lcssa;$x$0105 = $x$0124$lcssa;$y$0102 = $y$0123$lcssa;
  $1660 = $status$4 & 76;
  $1661 = $c$12 >>> 8;
  $1662 = $1661 & 1;
  $1663 = $1660 | $1662;
  $1664 = $nz$13 & 2176;
  $1665 = ($1664|0)==(0);
  $1666 = $1663 | 128;
  $$18 = $1665 ? $1663 : $1666;
  $1667 = $nz$13 & 255;
  $1668 = ($1667|0)==(0);
  $1669 = $$18 | 2;
  $temp90$1 = $1668 ? $1669 : $$18;
  $1670 = $temp90$1&255;
  HEAP8[$4>>0] = $1670;
  HEAP32[$9>>2] = $clock_count$19;
  HEAP32[$11>>2] = $pc$31;
  $1671 = (($sp$4) + 255)|0;
  $1672 = $1671&255;
  HEAP8[$13>>0] = $1672;
  $1673 = $a$0108&255;
  HEAP8[$18>>0] = $1673;
  $1674 = $x$0105&255;
  HEAP8[$21>>0] = $1674;
  $1675 = $y$0102&255;
  HEAP8[$24>>0] = $1675;
  HEAP32[$1>>2] = 1073741824;
  $1676 = $result;
  STACKTOP = sp;return ($1676|0);
 }
 else if ((label|0) == 386) {
  $1660 = $status$4 & 76;
  $1661 = $c$12 >>> 8;
  $1662 = $1661 & 1;
  $1663 = $1660 | $1662;
  $1664 = $nz$13 & 2176;
  $1665 = ($1664|0)==(0);
  $1666 = $1663 | 128;
  $$18 = $1665 ? $1663 : $1666;
  $1667 = $nz$13 & 255;
  $1668 = ($1667|0)==(0);
  $1669 = $$18 | 2;
  $temp90$1 = $1668 ? $1669 : $$18;
  $1670 = $temp90$1&255;
  HEAP8[$4>>0] = $1670;
  HEAP32[$9>>2] = $clock_count$19;
  HEAP32[$11>>2] = $pc$31;
  $1671 = (($sp$4) + 255)|0;
  $1672 = $1671&255;
  HEAP8[$13>>0] = $1672;
  $1673 = $a$0108&255;
  HEAP8[$18>>0] = $1673;
  $1674 = $x$0105&255;
  HEAP8[$21>>0] = $1674;
  $1675 = $y$0102&255;
  HEAP8[$24>>0] = $1675;
  HEAP32[$1>>2] = 1073741824;
  $1676 = $result;
  STACKTOP = sp;return ($1676|0);
 }
 return (0)|0;
}
function __ZN11nes_block_t4swapEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = $0 >>> 24;
 $2 = $1&255;
 HEAP8[$this>>0] = $2;
 $3 = $0 >>> 16;
 $4 = $3&255;
 $5 = ((($this)) + 1|0);
 HEAP8[$5>>0] = $4;
 $6 = $0 >>> 8;
 $7 = $6&255;
 $8 = ((($this)) + 2|0);
 HEAP8[$8>>0] = $7;
 $9 = $0&255;
 $10 = ((($this)) + 3|0);
 HEAP8[$10>>0] = $9;
 return;
}
function __ZN11nes_state_t4swapEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11cpu_state_t4swapEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11ppu_state_t4swapEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11apu_state_t4swapEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14joypad_state_t4swapEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN7Nes_EmuC2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296916);
 $0 = ((($this)) + 28|0);
 __ZN13Silent_BufferC2Ev($0);
 $1 = ((($this)) + 644|0);
 __THREW__ = 0;
 invoke_vi(340,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $$0 = $24;$$01 = $23;
  ___resumeException($$01|0);
  // unreachable;
 }
 $4 = ((($this)) + 664|0);
 __THREW__ = 0;
 invoke_vi(341,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($this)) + 96|0);
  $8 = ((($this)) + 4|0);
  HEAP32[$8>>2] = $7;
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = 242;
  $10 = ((($this)) + 16|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($this)) + 20|0);
  HEAP32[$11>>2] = $0;
  $12 = ((($this)) + 24|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($this)) + 64|0);
  ;HEAP32[$13>>2]=HEAP32[264176>>2]|0;HEAP32[$13+4>>2]=HEAP32[264176+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[264176+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[264176+12>>2]|0;
  $14 = ((($this)) + 80|0);
  HEAP32[$14>>2] = 0;
  $15 = ((($this)) + 84|0);
  HEAP8[$15>>0] = 0;
  $16 = ((($this)) + 88|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($this)) + 116|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($this)) + 112|0);
  HEAP32[$18>>2] = 0;
  $19 = ((($this)) + 3844|0);
  HEAP8[$19>>0] = 0;
  $20 = ((($this)) + 2972|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($this)) + 92|0);
  HEAP32[$21>>2] = 256;
  $22 = ((($this)) + 132|0);
  _memset(($22|0),0,512)|0;
  return;
 }
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 __THREW__ = 0;
 invoke_vi(342,($1|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $29 = ___cxa_find_matching_catch(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $$0 = $26;$$01 = $25;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN7Nes_Emu17set_palette_rangeEii($this,$begin,$end) {
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($begin) + 63)|0;
 $1 = $0 & -64;
 $2 = ((($this)) + 2972|0);
 HEAP32[$2>>2] = $1;
 $3 = (($end) - ($1))|0;
 $4 = ((($this)) + 92|0);
 HEAP32[$4>>2] = $3;
 return;
}
function __ZN7Nes_EmuD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296916);
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 3;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi($5|0,($1|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $14 = ___cxa_find_matching_catch()|0;
   $15 = tempRet0;
   $16 = ((($this)) + 664|0);
   __THREW__ = 0;
   invoke_vi(343,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $26 = ___cxa_find_matching_catch(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   } else {
    $$0 = $15;$$01 = $14;
   }
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = ((($this)) + 664|0);
   __THREW__ = 0;
   invoke_vi(343,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $$0 = $20;$$01 = $19;
    break;
   }
   $11 = ((($this)) + 644|0);
   __THREW__ = 0;
   invoke_vi(342,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    return;
   }
   $21 = ___cxa_find_matching_catch()|0;
   $22 = tempRet0;
   $$1 = $22;$$12 = $21;
   ___resumeException($$12|0);
   // unreachable;
  }
 } while(0);
 $23 = ((($this)) + 644|0);
 __THREW__ = 0;
 invoke_vi(342,($23|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $$1 = $$0;$$12 = $$01;
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN7Nes_EmuD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(109,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN7Nes_Emu5init_Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 664|0);
 $1 = (__ZN8Nes_Core4initEv($0)|0);
 return ($1|0);
}
function __ZN7Nes_Emu5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2900|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($this)) + 664|0);
 __ZN8Nes_Core5closeEv($3);
 $4 = ((($this)) + 644|0);
 __ZN8Nes_Cart5clearEv($4);
 return;
}
function __ZN7Nes_Emu8set_cartEPK8Nes_Cart($this,$new_cart) {
 $this = $this|0;
 $new_cart = $new_cart|0;
 var $$0 = 0, $$in$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $blip_eq$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $blip_eq$i = sp;
 $1 = ((($this)) + 2900|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($this)) + 664|0);
  __ZN8Nes_Core5closeEv($4);
  $5 = ((($this)) + 644|0);
  __ZN8Nes_Cart5clearEv($5);
 }
 $6 = ((($this)) + 3844|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 do {
  if ($8) {
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (FUNCTION_TABLE_ii[$11 & 511]($this)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    HEAP8[$6>>0] = 1;
    break;
   } else {
    $$0 = $12;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $14 = ((($this)) + 664|0);
 $15 = (__ZN8Nes_Core4openEPK8Nes_Cart($14,$new_cart)|0);
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($this)) + 2904|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 511]($18)|0);
 $23 = (($22) + 5)|0;
 $24 = ((($this)) + 80|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($this)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_iii[$29 & 511]($26,$23)|0);
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = HEAP32[$1>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  $34 = ((($this)) + 64|0);
  $35 = +HEAPF64[$34>>3];
  $36 = HEAP32[$25>>2]|0;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  HEAPF64[$blip_eq$i>>3] = $35;
  $39 = ((($blip_eq$i)) + 8|0);
  HEAP32[$39>>2] = 0;
  $40 = ((($blip_eq$i)) + 12|0);
  HEAP32[$40>>2] = $38;
  $41 = ((($blip_eq$i)) + 16|0);
  HEAP32[$41>>2] = 0;
  $42 = ((($this)) + 2876|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 8192|0);
  __ZN7Nes_Apu9treble_eqERK9blip_eq_t($44,$blip_eq$i);
  $45 = HEAP32[$17>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 52|0);
  $48 = HEAP32[$47>>2]|0;
  FUNCTION_TABLE_vii[$48 & 1023]($45,$blip_eq$i);
  $49 = HEAP32[$25>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($this)) + 72|0);
  $54 = HEAP32[$53>>2]|0;
  FUNCTION_TABLE_vii[$52 & 1023]($49,$54);
 }
 $55 = HEAP32[$24>>2]|0;
 $56 = ($55|0)>(0);
 if ($56) {
  $57 = ((($this)) + 2876|0);
  $$in$i = $55;
  while(1) {
   $58 = (($$in$i) + -1)|0;
   $59 = HEAP32[$25>>2]|0;
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   FUNCTION_TABLE_viii[$62 & 1023]($0,$59,$58);
   $63 = HEAP32[$0>>2]|0;
   $64 = ($$in$i|0)<(6);
   if ($64) {
    $70 = HEAP32[$57>>2]|0;
    $71 = (((($70)) + 8192|0) + ($58<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($72)) + 8|0);
    HEAP32[$73>>2] = $63;
    $74 = ($$in$i|0)>(1);
    if ($74) {
     $$in$i = $58;
     continue;
    } else {
     break;
    }
   } else {
    $65 = (($$in$i) + -6)|0;
    $66 = HEAP32[$17>>2]|0;
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($67)) + 48|0);
    $69 = HEAP32[$68>>2]|0;
    FUNCTION_TABLE_viii[$69 & 1023]($66,$65,$63);
    $$in$i = $58;
    continue;
   }
  }
 }
 $75 = HEAP32[$this>>2]|0;
 $76 = ((($75)) + 16|0);
 $77 = HEAP32[$76>>2]|0;
 FUNCTION_TABLE_viii[$77 & 1023]($this,1,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7Nes_Emu13set_equalizerERKNS_11equalizer_tE($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blip_eq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $blip_eq = sp;
 $0 = ((($this)) + 64|0);
 ;HEAP32[$0>>2]=HEAP32[$eq>>2]|0;HEAP32[$0+4>>2]=HEAP32[$eq+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$eq+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$eq+12>>2]|0;
 $1 = ((($this)) + 2900|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = +HEAPF64[$eq>>3];
 $5 = ((($this)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 HEAPF64[$blip_eq>>3] = $4;
 $9 = ((($blip_eq)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($blip_eq)) + 12|0);
 HEAP32[$10>>2] = $8;
 $11 = ((($blip_eq)) + 16|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($this)) + 2876|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8192|0);
 __ZN7Nes_Apu9treble_eqERK9blip_eq_t($14,$blip_eq);
 $15 = ((($this)) + 2904|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_vii[$19 & 1023]($16,$blip_eq);
 $20 = HEAP32[$5>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($this)) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_vii[$23 & 1023]($20,$25);
 STACKTOP = sp;return;
}
function __ZN7Nes_Emu5resetEbb($this,$full_reset,$erase_battery_ram) {
 $this = $this|0;
 $full_reset = $full_reset|0;
 $erase_battery_ram = $erase_battery_ram|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 13|0);
 HEAP8[$0>>0] = 0;
 $1 = ((($this)) + 12|0);
 HEAP8[$1>>0] = 1;
 $2 = ((($this)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($3);
 $7 = ((($this)) + 2912|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 664|0);
 __ZN8Nes_Core5resetEbb($8,$full_reset,$erase_battery_ram);
 return;
}
function __ZN7Nes_Emu13emulate_frameEii($this,$joypad1,$joypad2) {
 $this = $this|0;
 $joypad1 = $joypad1|0;
 $joypad2 = $joypad2|0;
 var $$in$i = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $joypad1 | -256;
 $2 = ((($this)) + 664|0);
 $3 = ((($this)) + 2888|0);
 HEAP32[$3>>2] = $1;
 $4 = $joypad2 | -256;
 $5 = ((($this)) + 2892|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($this)) + 3400|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 $14 = ((($this)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==($10|0);
 $17 = ((($this)) + 84|0);
 if ($16) {
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $13&1;
  $21 = ($19|0)==($20|0);
  if ($21) {
   $61 = $12;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$14>>2] = $10;
  $22 = $13&1;
  HEAP8[$17>>0] = $22;
  L5: do {
   if ($13) {
    $23 = ((($this)) + 80|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)>(0);
    if ($25) {
     $26 = ((($this)) + 2876|0);
     $27 = ((($this)) + 2904|0);
     $$in$i = $24;$30 = $8;
     while(1) {
      $28 = (($$in$i) + -1)|0;
      $29 = HEAP32[$30>>2]|0;
      $31 = ((($29)) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      FUNCTION_TABLE_viii[$32 & 1023]($0,$30,$28);
      $33 = HEAP32[$0>>2]|0;
      $34 = ($$in$i|0)<(6);
      if ($34) {
       $40 = HEAP32[$26>>2]|0;
       $41 = (((($40)) + 8192|0) + ($28<<2)|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ((($42)) + 8|0);
       HEAP32[$43>>2] = $33;
       $44 = ($$in$i|0)>(1);
       if (!($44)) {
        break L5;
       }
      } else {
       $35 = (($$in$i) + -6)|0;
       $36 = HEAP32[$27>>2]|0;
       $37 = HEAP32[$36>>2]|0;
       $38 = ((($37)) + 48|0);
       $39 = HEAP32[$38>>2]|0;
       FUNCTION_TABLE_viii[$39 & 1023]($36,$35,$33);
      }
      $$pre = HEAP32[$7>>2]|0;
      $$in$i = $28;$30 = $$pre;
     }
    }
   } else {
    $45 = ((($this)) + 2876|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 8192|0);
    __ZN7Nes_Apu6outputEP11Blip_Buffer($47,0);
    $48 = ((($this)) + 80|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)>(5);
    if ($50) {
     $51 = (($49) + -6)|0;
     $52 = ((($this)) + 2904|0);
     $57 = $51;
     while(1) {
      $53 = HEAP32[$52>>2]|0;
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($54)) + 48|0);
      $56 = HEAP32[$55>>2]|0;
      FUNCTION_TABLE_viii[$56 & 1023]($53,$57,0);
      $58 = (($57) + -1)|0;
      $59 = ($57|0)>(0);
      if ($59) {
       $57 = $58;
      } else {
       break;
      }
     }
    }
   }
  } while(0);
  $$pre2 = HEAP32[$11>>2]|0;
  $61 = $$pre2;
 }
 $60 = ($61|0)==(0|0);
 if ($60) {
  $125 = ((($this)) + 2976|0);
  HEAP32[$125>>2] = 0;
  (__ZN8Nes_Core13emulate_frameEv($2)|0);
  STACKTOP = sp;return (0|0);
 }
 $62 = ((($this)) + 92|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($this)) + 2976|0);
 HEAP32[$64>>2] = $63;
 $65 = ((($this)) + 2972|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (((($61)) + 36|0) + ($66<<1)|0);
 $68 = ((($this)) + 2968|0);
 HEAP32[$68>>2] = $67;
 $69 = ((($61)) + 540|0);
 HEAP16[$69>>1] = 15;
 $70 = ((($61)) + 544|0);
 HEAP16[$70>>1] = 48;
 $71 = ((($61)) + 546|0);
 HEAP16[$71>>1] = 15;
 $72 = ((($this)) + 88|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if (!($74)) {
  $75 = ((($this)) + 3404|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($61)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = Math_imul($78, $76)|0;
  $80 = (($73) + ($79)|0);
  HEAP32[$6>>2] = $80;
 }
 $81 = HEAP32[$7>>2]|0;
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($82)) + 40|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (FUNCTION_TABLE_ii[$84 & 511]($81)|0);
 $86 = ($85|0)==(0);
 if (!($86)) {
  $87 = ((($this)) + 13|0);
  HEAP8[$87>>0] = 0;
  $88 = ((($this)) + 12|0);
  HEAP8[$88>>0] = 1;
  $89 = HEAP32[$7>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 28|0);
  $92 = HEAP32[$91>>2]|0;
  FUNCTION_TABLE_vi[$92 & 1023]($89);
 }
 $93 = (__ZN8Nes_Core13emulate_frameEv($2)|0);
 $94 = HEAP32[$7>>2]|0;
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($95)) + 32|0);
 $97 = HEAP32[$96>>2]|0;
 FUNCTION_TABLE_viii[$97 & 1023]($94,$93,0);
 $98 = HEAP32[$11>>2]|0;
 $99 = HEAP32[$7>>2]|0;
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($100)) + 40|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (FUNCTION_TABLE_ii[$102 & 511]($99)|0);
 $104 = ((($98)) + 8|0);
 HEAP32[$104>>2] = $103;
 $105 = HEAP32[$7>>2]|0;
 $106 = ((($105)) + 16|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($98)) + 12|0);
 HEAP32[$108>>2] = $107;
 $109 = HEAP32[$65>>2]|0;
 $110 = ((($98)) + 28|0);
 HEAP32[$110>>2] = $109;
 $111 = ((($this)) + 2980|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($98)) + 32|0);
 HEAP32[$113>>2] = $112;
 $114 = ((($this)) + 2896|0);
 $115 = HEAP32[$114>>2]|0;
 HEAP32[$98>>2] = $115;
 $116 = ((($this)) + 3660|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($98)) + 4|0);
 HEAP32[$118>>2] = $117;
 $119 = ((($this)) + 3404|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ((($98)) + 24|0);
 HEAP32[$121>>2] = $120;
 $122 = HEAP32[$6>>2]|0;
 $123 = ((($122)) + 8|0);
 $124 = ((($98)) + 20|0);
 HEAP32[$124>>2] = $123;
 STACKTOP = sp;return (0|0);
}
function __ZN7Nes_Emu9load_inesE16Auto_File_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 2900|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$pre = ((($this)) + 644|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $4 = ((($this)) + 664|0);
  __ZN8Nes_Core5closeEv($4);
  $5 = ((($this)) + 644|0);
  __ZN8Nes_Cart5clearEv($5);
  $$pre$phiZ2D = $5;
 }
 $6 = HEAP32[$in>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($in)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $8;
 HEAP32[$in>>2] = 0;
 __THREW__ = 0;
 $10 = (invoke_iii(344,($$pre$phiZ2D|0),($0|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __THREW__ = 0;
  invoke_vi(328,($0|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $19 = ___cxa_find_matching_catch(0|0)|0;
   $20 = tempRet0;
   ___clang_call_terminate($19);
   // unreachable;
  } else {
   ___resumeException($14|0);
   // unreachable;
  }
 }
 __ZN16Auto_File_ReaderD2Ev($0);
 $13 = ($10|0)==(0|0);
 if (!($13)) {
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (__ZN7Nes_Emu8set_cartEPK8Nes_Cart($this,$$pre$phiZ2D)|0);
 $$0 = $18;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7Nes_Emu10load_stateE16Auto_File_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (__Znwj(21216)|0);
 __THREW__ = 0;
 invoke_vi(345,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($1);
  $$01 = $5;$$02 = $4;
  ___resumeException($$02|0);
  // unreachable;
 }
 $6 = HEAP32[$in>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($in)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $8;
 HEAP32[$in>>2] = 0;
 __THREW__ = 0;
 $10 = (invoke_iii(346,($1|0),($0|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  __THREW__ = 0;
  invoke_vi(328,($0|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $29 = ___cxa_find_matching_catch(0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  } else {
   $$01 = $26;$$02 = $25;
   ___resumeException($$02|0);
   // unreachable;
  }
 }
 __ZN16Auto_File_ReaderD2Ev($0);
 $13 = ($10|0)==(0|0);
 if (!($13)) {
  __ZdlPv($1);
  STACKTOP = sp;return ($10|0);
 }
 $14 = HEAP32[$this>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vii[$16 & 1023]($this,$1);
 $17 = ((($this)) + 13|0);
 HEAP8[$17>>0] = 0;
 $18 = ((($this)) + 12|0);
 HEAP8[$18>>0] = 1;
 $19 = ((($this)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($20);
 $24 = ((($this)) + 664|0);
 __ZN8Nes_Core10load_stateERK10Nes_State_($24,$1);
 __ZdlPv($1);
 STACKTOP = sp;return ($10|0);
}
function __ZNK7Nes_Emu10save_stateE16Auto_File_Writer($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (__Znwj(21216)|0);
 __THREW__ = 0;
 invoke_vi(345,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($1);
  $$01 = $5;$$02 = $4;
  ___resumeException($$02|0);
  // unreachable;
 }
 $6 = ((($this)) + 664|0);
 __ZNK8Nes_Core10save_stateEP9Nes_State($6,$1);
 $7 = HEAP32[$out>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = ((($out)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4|0);
 HEAP32[$10>>2] = $9;
 HEAP32[$out>>2] = 0;
 __THREW__ = 0;
 $11 = (invoke_iii(347,($1|0),($0|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  __ZN16Auto_File_WriterD2Ev($0);
  __ZdlPv($1);
  STACKTOP = sp;return ($11|0);
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 __THREW__ = 0;
 invoke_vi(330,($0|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $$01 = $15;$$02 = $14;
  ___resumeException($$02|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN7Nes_Emu15set_sample_rateEl($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $$0$i = 0, $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (__Znwj(60)|0);
   __THREW__ = 0;
   invoke_vi(348,($3|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $6 = ___cxa_find_matching_catch()|0;
    $7 = tempRet0;
    __ZdlPv($3);
    ___resumeException($6|0);
    // unreachable;
   } else {
    HEAP32[$0>>2] = $3;
    $20 = $3;
    break;
   }
  } else {
   $20 = $1;
  }
 } while(0);
 $8 = ((($this)) + 3844|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 do {
  if ($10) {
   $11 = HEAP32[$this>>2]|0;
   $12 = ((($11)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 511]($this)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP8[$8>>0] = 1;
    break;
   } else {
    $$0$i = $14;
    return ($$0$i|0);
   }
  }
 } while(0);
 $16 = ((($this)) + 2876|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 8192|0);
 __ZN7Nes_Apu6volumeEd($18,1.0);
 $19 = HEAP32[$20>>2]|0;
 $21 = ((($19)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_iiii[$22 & 1023]($20,$rate,20)|0);
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $$0$i = $23;
  return ($$0$i|0);
 }
 $25 = ((($this)) + 20|0);
 HEAP32[$25>>2] = $20;
 $26 = ((($this)) + 24|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$0>>2]|0;
 $28 = ($27|0)==($20|0);
 if ($28) {
  $34 = $20;
 } else {
  $29 = ($27|0)==(0|0);
  if ($29) {
   $$pre$i = $20;
  } else {
   $30 = HEAP32[$27>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vi[$32 & 1023]($27);
   $$pre$pre$i = HEAP32[$25>>2]|0;
   $$pre$i = $$pre$pre$i;
  }
  HEAP32[$0>>2] = 0;
  $34 = $$pre$i;
 }
 $33 = HEAP32[$34>>2]|0;
 $35 = ((($33)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_vii[$36 & 1023]($34,1789773);
 $$0$i = 0;
 return ($$0$i|0);
}
function __ZN7Nes_Emu12read_samplesEPsl($this,$out,$out_size) {
 $this = $this|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$11$i = 0, $$11$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mul$02$i = 0, $mul$02$i2 = 0, $n$03$i = 0, $n$03$i1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 1023]($1,$out,$out_size)|0);
 $6 = ((($this)) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  HEAP8[$6>>0] = 0;
  $9 = ($5|0)>(383);
  if ($9) {
   $$11$i = $out;$mul$02$i = 0;$n$03$i = 384;
   while(1) {
    $10 = (($n$03$i) + -1)|0;
    $11 = HEAP16[$$11$i>>1]|0;
    $12 = $11 << 16 >> 16;
    $13 = Math_imul($12, $mul$02$i)|0;
    $14 = $13 >>> 15;
    $15 = $14&65535;
    HEAP16[$$11$i>>1] = $15;
    $16 = ((($$11$i)) + 2|0);
    $17 = (($mul$02$i) + 85)|0;
    $18 = ($10|0)==(0);
    if ($18) {
     break;
    } else {
     $$11$i = $16;$mul$02$i = $17;$n$03$i = $10;
    }
   }
  }
 }
 $19 = ((($this)) + 13|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  return ($5|0);
 }
 HEAP8[$19>>0] = 0;
 HEAP8[$6>>0] = 1;
 $22 = ($5|0)>(383);
 if (!($22)) {
  return ($5|0);
 }
 $23 = (($5) + -384)|0;
 $24 = (($out) + ($23<<1)|0);
 $$11$i3 = $24;$mul$02$i2 = 32768;$n$03$i1 = 384;
 while(1) {
  $25 = (($n$03$i1) + -1)|0;
  $26 = HEAP16[$$11$i3>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = Math_imul($27, $mul$02$i2)|0;
  $29 = $28 >>> 15;
  $30 = $29&65535;
  HEAP16[$$11$i3>>1] = $30;
  $31 = ((($$11$i3)) + 2|0);
  $32 = (($mul$02$i2) + -85)|0;
  $33 = ($25|0)==(0);
  if ($33) {
   break;
  } else {
   $$11$i3 = $31;$mul$02$i2 = $32;$n$03$i1 = $25;
  }
 }
 return ($5|0);
}
function __ZN15Nes_File_WriterC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296952);
 $0 = ((($this)) + 4|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return;
}
function __ZN15Nes_File_WriterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296952);
 $0 = ((($this)) + 4|0);
 __ZN16Auto_File_WriterD2Ev($0);
 return;
}
function __ZN15Nes_File_WriterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296952);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vi(330,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN15Nes_File_Writer5beginE16Auto_File_Writerl($this,$dw,$tag) {
 $this = $this|0;
 $dw = $dw|0;
 $tag = $tag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h$i$i = sp;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$dw>>2]|0;
 HEAP32[$0>>2] = $1;
 $2 = ((($dw)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 8|0);
 HEAP32[$4>>2] = $3;
 HEAP32[$dw>>2] = 0;
 $5 = (__ZN16Auto_File_Writer9open_compEi($0,-1)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($this)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 HEAP32[$h$i$i>>2] = $tag;
 $10 = ((($h$i$i)) + 4|0);
 HEAP32[$10>>2] = -1;
 __ZN11nes_block_t4swapEv($h$i$i);
 $11 = ((($this)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iiii[$15 & 1023]($12,$h$i$i,8)|0);
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function __ZN15Nes_File_Writer11write_blockElPKvl($this,$tag,$data,$size) {
 $this = $this|0;
 $tag = $tag|0;
 $data = $data|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h$i$i = sp;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = $size;
 HEAP32[$h$i$i>>2] = $tag;
 $1 = ((($h$i$i)) + 4|0);
 HEAP32[$1>>2] = $size;
 __ZN11nes_block_t4swapEv($h$i$i);
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($3,$h$i$i,8)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$11 & 1023]($this,$data,$size)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function __ZN15Nes_File_Writer18write_block_headerEll($this,$tag,$size) {
 $this = $this|0;
 $tag = $tag|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $h$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h$i = sp;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = $size;
 HEAP32[$h$i>>2] = $tag;
 $1 = ((($h$i)) + 4|0);
 HEAP32[$1>>2] = $size;
 __ZN11nes_block_t4swapEv($h$i);
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($3,$h$i,8)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN15Nes_File_Writer5writeEPKvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) - ($s))|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 1023]($4,$p,$s)|0);
 return ($8|0);
}
function __ZN15Nes_File_Writer3endEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h$i$i = sp;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 HEAP32[$h$i$i>>2] = 1734700644;
 $3 = ((($h$i$i)) + 4|0);
 HEAP32[$3>>2] = 0;
 __ZN11nes_block_t4swapEv($h$i$i);
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 1023]($5,$h$i$i,8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN15Nes_File_ReaderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$this>>2] = (296972);
 $5 = ((($this)) + 16|0);
 $6 = ((($this)) + 32|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
 HEAP32[$6>>2] = 3;
 $7 = ((($this)) + 36|0);
 HEAP32[$7>>2] = -1;
 return;
}
function __ZN15Nes_File_ReaderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296972);
 $0 = ((($this)) + 16|0);
 __ZN16Auto_File_ReaderD2Ev($0);
 return;
}
function __ZN15Nes_File_ReaderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296972);
 $0 = ((($this)) + 16|0);
 __THREW__ = 0;
 invoke_vi(328,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  _free($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  _free($this);
  return;
 }
}
function __ZN15Nes_File_Reader15read_block_dataEPvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $$0 = 0, $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)<($s|0);
 $$s = $7 ? $3 : $s;
 $8 = (($3) - ($$s))|0;
 $9 = (__ZN11Data_Reader4readEPvi($this,$p,$$s)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $$0 = $9;
  return ($$0|0);
 }
 $11 = ($3|0)==($$s|0);
 if (!($11)) {
  $12 = (__ZN11Data_Reader4skipEi($this,$8)|0);
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $$0 = $12;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function __ZN15Nes_File_Reader5beginE16Auto_File_Reader($this,$dr) {
 $this = $this|0;
 $dr = $dr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN16Auto_File_Reader4openEv($dr)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = ((($this)) + 16|0);
 $3 = HEAP32[$dr>>2]|0;
 HEAP32[$2>>2] = $3;
 $4 = ((($dr)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 20|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$dr>>2] = 0;
 $7 = ((($this)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 24|0);
 $10 = (__ZN11Data_Reader4readEPvi($8,$9,8)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$0 = $10;
  return ($$0|0);
 }
 __ZN11nes_block_t4swapEv($9);
 $12 = ((($this)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($this)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(-1);
 if ($15) {
  HEAP32[$12>>2] = 1;
  HEAP32[$13>>2] = 0;
  $21 = 0;$30 = 1;
 } else {
  $21 = $14;$30 = 0;
 }
 $16 = HEAP32[$9>>2]|0;
 $17 = ($16|0)==(1734700644);
 if ($17) {
  HEAP32[$12>>2] = 2;
  HEAP32[$9>>2] = 0;
  $18 = ((($this)) + 8|0);
  $19 = $18;
  $20 = $19;
  HEAP32[$20>>2] = $21;
  $22 = (($19) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = 0;
  $$0 = 840145;
  return ($$0|0);
 }
 $24 = ((($this)) + 8|0);
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $21;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = ($30|0)==(1);
 if (!($29)) {
  $$0 = 840145;
  return ($$0|0);
 }
 HEAP32[$12>>2] = 3;
 $31 = ((($this)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 $$0 = 0;
 return ($$0|0);
}
function __ZN15Nes_File_Reader10next_blockEv($this) {
 $this = $this|0;
 var $$0 = 0, $$d$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d$0 = 0, $d$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 L1: do {
  switch ($1|0) {
  case 1:  {
   $2 = ((($this)) + 28|0);
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 24|0);
   $5 = ((($this)) + 8|0);
   $$pre = HEAP32[$2>>2]|0;
   $6 = $$pre;$d$0 = 1;
   while(1) {
    $7 = (__ZN11Data_Reader4skipEi($this,$6)|0);
    $8 = ($7|0)==(0|0);
    if (!($8)) {
     $$0 = $7;
     label = 17;
     break;
    }
    $9 = HEAP32[$3>>2]|0;
    $10 = (__ZN11Data_Reader4readEPvi($9,$4,8)|0);
    $11 = ($10|0)==(0|0);
    if (!($11)) {
     $$0 = $10;
     label = 17;
     break;
    }
    __ZN11nes_block_t4swapEv($4);
    HEAP32[$0>>2] = 0;
    $12 = HEAP32[$2>>2]|0;
    $13 = ($12|0)==(-1);
    if ($13) {
     HEAP32[$0>>2] = 1;
     HEAP32[$2>>2] = 0;
     $18 = 0;$47 = 1;
    } else {
     $18 = $12;$47 = 0;
    }
    $14 = HEAP32[$4>>2]|0;
    $15 = ($14|0)==(1734700644);
    if ($15) {
     HEAP32[$0>>2] = 2;
     HEAP32[$4>>2] = 0;
     $22 = 2;
    } else {
     $22 = $47;
    }
    $16 = $5;
    $17 = $16;
    HEAP32[$17>>2] = $18;
    $19 = (($16) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = 0;
    $21 = ($22|0)==(1);
    $23 = $21&1;
    $$d$0 = (($23) + ($d$0))|0;
    $24 = ($22|0)==(2);
    $25 = $24 << 31 >> 31;
    $d$2 = (($$d$0) + ($25))|0;
    $26 = ($d$2|0)>(0);
    if ($26) {
     $6 = $18;$d$0 = $d$2;
    } else {
     break L1;
    }
   }
   if ((label|0) == 17) {
    return ($$0|0);
   }
   break;
  }
  case 0:  {
   $27 = ((($this)) + 28|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (__ZN11Data_Reader4skipEi($this,$28)|0);
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    $$0 = $29;
    return ($$0|0);
   }
   break;
  }
  case 2:  {
   $$0 = 840164;
   return ($$0|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $31 = ((($this)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($this)) + 24|0);
 $34 = (__ZN11Data_Reader4readEPvi($32,$33,8)|0);
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  $$0 = $34;
  return ($$0|0);
 }
 __ZN11nes_block_t4swapEv($33);
 HEAP32[$0>>2] = 0;
 $36 = ((($this)) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(-1);
 if ($38) {
  HEAP32[$0>>2] = 1;
  HEAP32[$36>>2] = 0;
  $44 = 0;
 } else {
  $44 = $37;
 }
 $39 = HEAP32[$33>>2]|0;
 $40 = ($39|0)==(1734700644);
 if ($40) {
  HEAP32[$0>>2] = 2;
  HEAP32[$33>>2] = 0;
 }
 $41 = ((($this)) + 8|0);
 $42 = $41;
 $43 = $42;
 HEAP32[$43>>2] = $44;
 $45 = (($42) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function __ZN15Nes_File_Reader6skip_vEi($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($s>>>0);
 if ($2) {
  $$0 = 840195;
  return ($$0|0);
 }
 $3 = (($1) - ($s))|0;
 HEAP32[$0>>2] = $3;
 $4 = ((($this)) + 8|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZN11Data_Reader4skipEi($10,$s)|0);
 $$0 = $11;
 return ($$0|0);
}
function __ZN15Nes_File_Reader6read_vEPvi($this,$p,$n) {
 $this = $this|0;
 $p = $p|0;
 $n = $n|0;
 var $$n = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 $$n = $2 ? $1 : $n;
 $3 = (($1) - ($$n))|0;
 HEAP32[$0>>2] = $3;
 $4 = ((($this)) + 8|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZN11Data_Reader4readEPvi($10,$p,$$n)|0);
 return ($11|0);
}
function __ZN10Nes_MapperC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (296996);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 840226;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN10Nes_MapperD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Nes_MapperD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10Nes_Mapper19default_reset_stateEv($this) {
 $this = $this|0;
 var $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i1 = 0, $$pre$i$i2 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $24 = $3 & 1;
   $25 = ($24|0)==(0);
   $26 = ((($this)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 3104|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($27)) + 3028|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)<($29|0);
   if ($25) {
    if ($32) {
     $42 = ((($27)) + 2252|0);
     __ZN7Nes_Ppu16render_bg_until_El($42,$29);
     $$pre$i$i2 = HEAP32[$26>>2]|0;
     $44 = $$pre$i$i2;
    } else {
     $44 = $27;
    }
    $43 = ((($44)) + 2320|0);
    $45 = HEAP32[$43>>2]|0;
    $46 = ((($44)) + 2628|0);
    HEAP32[$46>>2] = $45;
    $47 = ((($44)) + 2632|0);
    HEAP32[$47>>2] = $45;
    $48 = ((($45)) + 1024|0);
    $49 = ((($44)) + 2636|0);
    HEAP32[$49>>2] = $48;
    $50 = ((($44)) + 2640|0);
    HEAP32[$50>>2] = $48;
    $$pre$phiZ2D = $26;
    break;
   } else {
    if ($32) {
     $33 = ((($27)) + 2252|0);
     __ZN7Nes_Ppu16render_bg_until_El($33,$29);
     $$pre$i$i1 = HEAP32[$26>>2]|0;
     $35 = $$pre$i$i1;
    } else {
     $35 = $27;
    }
    $34 = ((($35)) + 2320|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = ((($35)) + 2628|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($36)) + 1024|0);
    $39 = ((($35)) + 2632|0);
    HEAP32[$39>>2] = $38;
    $40 = ((($35)) + 2636|0);
    HEAP32[$40>>2] = $36;
    $41 = ((($35)) + 2640|0);
    HEAP32[$41>>2] = $38;
    $$pre$phiZ2D = $26;
    break;
   }
  } else {
   $6 = ((($this)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($7)) + 3104|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($7)) + 3028|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)<($9|0);
   if ($12) {
    $13 = ((($7)) + 2252|0);
    __ZN7Nes_Ppu16render_bg_until_El($13,$9);
    $$pre$i$i = HEAP32[$6>>2]|0;
    $15 = $$pre$i$i;
   } else {
    $15 = $7;
   }
   $14 = ((($15)) + 2320|0);
   $16 = HEAP32[$14>>2]|0;
   $17 = ((($15)) + 2628|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($16)) + 1024|0);
   $19 = ((($15)) + 2632|0);
   HEAP32[$19>>2] = $18;
   $20 = ((($16)) + 2048|0);
   $21 = ((($15)) + 2636|0);
   HEAP32[$21>>2] = $20;
   $22 = ((($16)) + 3072|0);
   $23 = ((($15)) + 2640|0);
   HEAP32[$23>>2] = $22;
   $$pre$phiZ2D = $6;
  }
 } while(0);
 $51 = HEAP32[$$pre$phiZ2D>>2]|0;
 $52 = ((($51)) + 3104|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($51)) + 3048|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)<($53|0);
 if ($56) {
  $57 = ((($51)) + 2252|0);
  __ZN7Nes_Ppu13render_until_El($57,$53);
  $$pre$i = HEAP32[$$pre$phiZ2D>>2]|0;
  $59 = $$pre$i;
 } else {
  $59 = $51;
 }
 $58 = ((($59)) + 2252|0);
 __ZN12Nes_Ppu_Impl12set_chr_bankEiil($58,0,8192,0);
 $60 = HEAP32[$0>>2]|0;
 $61 = HEAP32[$$pre$phiZ2D>>2]|0;
 $62 = HEAP32[$60>>2]|0;
 __ZN7Nes_Cpu8map_codeEjjPKv($61,32768,16384,$62);
 $63 = HEAP32[$0>>2]|0;
 $64 = ((($63)) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$$pre$phiZ2D>>2]|0;
 $67 = HEAP32[$63>>2]|0;
 $68 = (($65) + -16384)|0;
 $69 = $68 & -16384;
 $70 = (($67) + ($69)|0);
 __ZN7Nes_Cpu8map_codeEjjPKv($66,49152,16384,$70);
 $71 = HEAP32[$$pre$phiZ2D>>2]|0;
 __ZN8Nes_Core20add_mapper_interceptEjjbb($71,32768,32768,0,1);
 $72 = ((($this)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($this)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 _memset(($73|0),0,($75|0))|0;
 return;
}
function __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$addr,$bs,$bank) {
 $this = $this|0;
 $addr = $addr|0;
 $bs = $bs|0;
 $bank = $bank|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 3048|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($3|0);
 if ($6) {
  $7 = ((($1)) + 2252|0);
  __ZN7Nes_Ppu13render_until_El($7,$3);
  $$pre = HEAP32[$0>>2]|0;
  $9 = $$pre;
 } else {
  $9 = $1;
 }
 $8 = ((($9)) + 2252|0);
 $10 = 1 << $bs;
 $11 = $bank << $bs;
 __ZN12Nes_Ppu_Impl12set_chr_bankEiil($8,$addr,$10,$11);
 return;
}
function __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,$addr,$bs,$bank) {
 $this = $this|0;
 $addr = $addr|0;
 $bs = $bs|0;
 $bank = $bank|0;
 var $$1 = 0, $$bank = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 1 << $bs;
 $1 = ((($this)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >> $bs;
 $6 = ($bank|0)<(0);
 $7 = $6 ? $5 : 0;
 $$bank = (($7) + ($bank))|0;
 $8 = ($$bank|0)<($5|0);
 if ($8) {
  $$1 = $$bank;
 } else {
  $9 = (($$bank|0) % ($5|0))&-1;
  $$1 = $9;
 }
 $10 = ((($this)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = $$1 << $bs;
 $14 = (($12) + ($13)|0);
 __ZN7Nes_Cpu8map_codeEjjPKv($11,$addr,$0,$14);
 $15 = $addr & -8192;
 $16 = ($15|0)==(24576);
 if (!($16)) {
  return;
 }
 $17 = HEAP32[$10>>2]|0;
 __ZN8Nes_Core15enable_prg_6000Ev($17);
 return;
}
function __ZN10Nes_Mapper5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10Nes_Mapper19default_reset_stateEv($this);
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 1023]($this);
 $3 = HEAP32[$this>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($this);
 return;
}
function __ZN10Nes_Mapper10save_stateER14mapper_state_t($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$out>>2] = $3;
 $4 = ((($out)) + 8|0);
 _memcpy(($4|0),($1|0),($3|0))|0;
 return;
}
function __ZN10Nes_Mapper10load_stateERK14mapper_state_t($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10Nes_Mapper19default_reset_stateEv($this);
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$2 & 1023]($this,$in);
 $3 = HEAP32[$this>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($this);
 return;
}
function __ZN10Nes_Mapper10read_stateERK14mapper_state_t($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$s$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 _memset(($1|0),0,($3|0))|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$in>>2]|0;
 $7 = ($6|0)<($5|0);
 $$s$i = $7 ? $6 : $5;
 $8 = ((($in)) + 8|0);
 _memcpy(($4|0),($8|0),($$s$i|0))|0;
 $9 = HEAP32[$this>>2]|0;
 $10 = ((($9)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 1023]($this);
 return;
}
function __ZN10Nes_Mapper11irq_changedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN8Nes_Core11irq_changedEv($1);
 return;
}
function __ZN10Nes_Mapper8next_irqEl($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZN10Nes_Mapper11a12_clockedEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Nes_Mapper9run_untilEl($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Nes_Mapper9end_frameEl($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10Nes_Mapper11ppu_enabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 2253|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 8;
 $5 = ($4<<24>>24)!=(0);
 return ($5|0);
}
function __ZNK10Nes_Mapper13channel_countEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10Nes_Mapper15set_channel_bufEiP11Blip_Buffer($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Nes_Mapper10set_trebleERK9blip_eq_t($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Nes_Mapper13mirror_manualEiiii($this,$page0,$page1,$page2,$page3) {
 $this = $this|0;
 $page0 = $page0|0;
 $page1 = $page1|0;
 $page2 = $page2|0;
 $page3 = $page3|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 3028|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($3|0);
 if ($6) {
  $7 = ((($1)) + 2252|0);
  __ZN7Nes_Ppu16render_bg_until_El($7,$3);
  $$pre = HEAP32[$0>>2]|0;
  $9 = $$pre;
 } else {
  $9 = $1;
 }
 $8 = ((($9)) + 2320|0);
 $10 = HEAP32[$8>>2]|0;
 $11 = $page0 << 10;
 $12 = (($10) + ($11)|0);
 $13 = ((($9)) + 2628|0);
 HEAP32[$13>>2] = $12;
 $14 = $page1 << 10;
 $15 = (($10) + ($14)|0);
 $16 = ((($9)) + 2632|0);
 HEAP32[$16>>2] = $15;
 $17 = $page2 << 10;
 $18 = (($10) + ($17)|0);
 $19 = ((($9)) + 2636|0);
 HEAP32[$19>>2] = $18;
 $20 = $page3 << 10;
 $21 = (($10) + ($20)|0);
 $22 = ((($9)) + 2640|0);
 HEAP32[$22>>2] = $21;
 return;
}
function __ZN10Nes_Mapper6createEPK8Nes_CartP8Nes_Core($cart,$emu) {
 $cart = $cart|0;
 $emu = $emu|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$02$i = 0, $i$02$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cart)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 8;
 $3 = $2 & 240;
 $4 = $1 >>> 4;
 $5 = $4 & 15;
 $6 = $3 | $5;
 $7 = HEAP32[544016>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $i$02$i = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $9 = (297068 + ($i$02$i<<3)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==($6|0);
  if ($11) {
   $i$02$i$lcssa = $i$02$i;
   break;
  }
  $12 = (($i$02$i) + 1)|0;
  $13 = ($12|0)<($7|0);
  if ($13) {
   $i$02$i = $12;
  } else {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $14 = (((297068 + ($i$02$i$lcssa<<3)|0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = (FUNCTION_TABLE_i[$15 & 511]()|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$0 = 0;
  return ($$0|0);
 }
 $19 = ((($17)) + 16|0);
 HEAP32[$19>>2] = $cart;
 $20 = ((($17)) + 4|0);
 HEAP32[$20>>2] = $emu;
 $$0 = $17;
 return ($$0|0);
}
function __ZN10Nes_Mapper9make_nromEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(20)|0);
 __THREW__ = 0;
 invoke_vi(349,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (544028);
  return ($0|0);
 }
 return (0)|0;
}
function __ZN10Nes_Mapper10make_unromEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(24)|0);
 __THREW__ = 0;
 invoke_vi(349,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZdlPv($0);
  ___resumeException($6|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (544108);
  $3 = ((($0)) + 20|0);
  $4 = ((($0)) + 8|0);
  HEAP32[$4>>2] = $3;
  $5 = ((($0)) + 12|0);
  HEAP32[$5>>2] = 1;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN10Nes_Mapper10make_aoromEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(24)|0);
 __THREW__ = 0;
 invoke_vi(349,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZdlPv($0);
  ___resumeException($6|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (544188);
  $3 = ((($0)) + 20|0);
  $4 = ((($0)) + 8|0);
  HEAP32[$4>>2] = $3;
  $5 = ((($0)) + 12|0);
  HEAP32[$5>>2] = 1;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN10Nes_Mapper10make_cnromEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(24)|0);
 __THREW__ = 0;
 invoke_vi(349,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZdlPv($0);
  ___resumeException($6|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (544268);
  $3 = ((($0)) + 20|0);
  $4 = ((($0)) + 8|0);
  HEAP32[$4>>2] = $3;
  $5 = ((($0)) + 12|0);
  HEAP32[$5>>2] = 1;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN11Mapper_Mmc116register_changedEi($this,$reg) {
 $this = $this|0;
 $reg = $reg|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($reg|0)==(0);
 do {
  if ($0) {
   $1 = ((($this)) + 20|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = $2&255;
   $4 = $3 & 3;
   $5 = ($4>>>0)<(2);
   if ($5) {
    $6 = $3 & 1;
    __ZN10Nes_Mapper13mirror_manualEiiii($this,$6,$6,$6,$6);
    $$pre$phiZ2D = $this;
    label = 9;
    break;
   }
   $7 = ($4|0)==(2);
   if ($7) {
    __ZN10Nes_Mapper13mirror_manualEiiii($this,0,1,0,1);
    $$pre$phiZ2D = $this;
    label = 9;
    break;
   } else {
    __ZN10Nes_Mapper13mirror_manualEiiii($this,0,0,1,1);
    $$pre$phiZ2D = $this;
    label = 9;
    break;
   }
  } else {
   $8 = ($reg|0)<(3);
   if ($8) {
    $$pre$phiZ2D = $this;
    label = 9;
   }
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $9 = ((($this)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)>(0);
   if ($13) {
    $14 = ((($this)) + 20|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 & 16;
    $17 = ($16<<24>>24)==(0);
    $18 = ((($this)) + 21|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    if ($17) {
     $24 = $20 >>> 1;
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($$pre$phiZ2D,0,13,$24);
     break;
    } else {
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($$pre$phiZ2D,0,12,$20);
     $21 = ((($this)) + 22|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($$pre$phiZ2D,4096,12,$23);
     break;
    }
   }
  }
 } while(0);
 $25 = ((($this)) + 20|0);
 $26 = ((($this)) + 21|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 & 16;
 $30 = ((($this)) + 23|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 15;
 $34 = $33 | $29;
 $35 = HEAP8[$25>>0]|0;
 $36 = $35&255;
 $37 = $36 & 8;
 $38 = ($37|0)==(0);
 if ($38) {
  $39 = $34 >>> 1;
  __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,32768,15,$39);
  return;
 }
 $40 = $36 & 4;
 $41 = ($40|0)==(0);
 if ($41) {
  __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,32768,14,$29);
  __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,49152,14,$34);
  return;
 } else {
  __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,32768,14,$34);
  $42 = $29 | 15;
  __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,49152,14,$42);
  return;
 }
}
function __ZN10Nes_Mapper9make_mmc1Ev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(28)|0);
 __THREW__ = 0;
 invoke_vi(349,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZdlPv($0);
  ___resumeException($6|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (544348);
  $3 = ((($0)) + 20|0);
  $4 = ((($0)) + 8|0);
  HEAP32[$4>>2] = $3;
  $5 = ((($0)) + 12|0);
  HEAP32[$5>>2] = 6;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN11Mapper_Mmc39run_untilEl($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$lcssa = 0, $$lcssa16 = 0, $$lcssa17 = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$us = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK10Nes_Mapper11ppu_enabledEv($this)|0);
 $1 = ($end_time*3)|0;
 $2 = ((($this)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($1|0);
 $5 = ($3|0)<(88929);
 $or$cond1 = $4 & $5;
 if (!($or$cond1)) {
  return;
 }
 $6 = ((($this)) + 40|0);
 $7 = ((($this)) + 31|0);
 $8 = ((($this)) + 32|0);
 $9 = ((($this)) + 33|0);
 $10 = ((($this)) + 34|0);
 if ($0) {
  $$promoted = HEAP8[$7>>0]|0;
  $15 = $$promoted;$22 = $3;
  while(1) {
   $11 = HEAP32[$6>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = (($11) + -1)|0;
    HEAP32[$6>>2] = $13;
   }
   $14 = (($15) + -1)<<24>>24;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    $17 = HEAP8[$8>>0]|0;
    $19 = $17;
   } else {
    $19 = $14;
   }
   $18 = ($19<<24>>24)==(0);
   if ($18) {
    $20 = HEAP8[$9>>0]|0;
    HEAP8[$10>>0] = $20;
   }
   $21 = (($22) + 341)|0;
   $23 = ($21|0)<($1|0);
   $24 = ($21|0)<(88929);
   $or$cond$us = $23 & $24;
   if ($or$cond$us) {
    $15 = $19;$22 = $21;
   } else {
    $$lcssa16 = $19;$$lcssa17 = $21;
    break;
   }
  }
  HEAP8[$7>>0] = $$lcssa16;
  $$lcssa = $$lcssa17;
 } else {
  $26 = $3;
  while(1) {
   $25 = (($26) + 341)|0;
   $27 = ($25|0)<($1|0);
   $28 = ($25|0)<(88929);
   $or$cond = $27 & $28;
   if ($or$cond) {
    $26 = $25;
   } else {
    $$lcssa = $25;
    break;
   }
  }
 }
 HEAP32[$2>>2] = $$lcssa;
 return;
}
function __ZN11Mapper_Mmc35writeElji($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch$split12D = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr & 57345;
 $switch$split2D = ($0|0)<(40960);
 L1: do {
  if ($switch$split2D) {
   switch ($0|0) {
   case 32768:  {
    break;
   }
   case 32769:  {
    $49 = ((($this)) + 28|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = $51 & 7;
    $53 = $data&255;
    $54 = (((($this)) + 20|0) + ($52)|0);
    HEAP8[$54>>0] = $53;
    $55 = ($52>>>0)<(6);
    if ($55) {
     $56 = ((($this)) + 20|0);
     $57 = HEAP8[$49>>0]|0;
     $58 = $57&255;
     $59 = $58 >>> 7;
     $60 = $59 << 12;
     $61 = HEAP8[$56>>0]|0;
     $62 = $61&255;
     $63 = $62 >>> 1;
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$60,11,$63);
     $64 = $60 | 2048;
     $65 = ((($this)) + 21|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = $67 >>> 1;
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$64,11,$68);
     $69 = $60 ^ 4096;
     $70 = ((($this)) + 22|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$69,10,$72);
     $73 = $60 ^ 5120;
     $74 = ((($this)) + 23|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$73,10,$76);
     $77 = $60 ^ 6144;
     $78 = ((($this)) + 24|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$77,10,$80);
     $81 = $60 ^ 7168;
     $82 = ((($this)) + 25|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83&255;
     __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$81,10,$84);
     return;
    } else {
     $85 = ((($this)) + 27|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,40960,13,$87);
     $88 = HEAP8[$49>>0]|0;
     $89 = $88&255;
     $90 = $89 << 8;
     $91 = $90 & 16384;
     $92 = $91 | 32768;
     $93 = ((($this)) + 26|0);
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,$92,13,$95);
     $96 = $91 ^ 49152;
     __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,$96,13,-2);
     return;
    }
    break;
   }
   default: {
    break L1;
   }
   }
   $1 = ((($this)) + 28|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = $2&255;
   $4 = $3 ^ $data;
   $5 = $data&255;
   HEAP8[$1>>0] = $5;
   $6 = $4 & 128;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = ((($this)) + 20|0);
    $9 = $data << 5;
    $10 = $9 & 4096;
    $11 = HEAP8[$8>>0]|0;
    $12 = $11&255;
    $13 = $12 >>> 1;
    __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$10,11,$13);
    $14 = $10 | 2048;
    $15 = ((($this)) + 21|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = $17 >>> 1;
    __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$14,11,$18);
    $19 = $10 ^ 4096;
    $20 = ((($this)) + 22|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$19,10,$22);
    $23 = $10 ^ 5120;
    $24 = ((($this)) + 23|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$23,10,$26);
    $27 = $10 ^ 6144;
    $28 = ((($this)) + 24|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$27,10,$30);
    $31 = $10 ^ 7168;
    $32 = ((($this)) + 25|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$31,10,$34);
   }
   $35 = $4 & 64;
   $36 = ($35|0)==(0);
   if ($36) {
    return;
   }
   $37 = ((($this)) + 27|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,40960,13,$39);
   $40 = HEAP8[$1>>0]|0;
   $41 = $40&255;
   $42 = $41 << 8;
   $43 = $42 & 16384;
   $44 = $43 | 32768;
   $45 = ((($this)) + 26|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,$44,13,$47);
   $48 = $43 ^ 49152;
   __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,$48,13,-2);
   return;
  } else {
   switch ($0|0) {
   case 40960:  {
    break;
   }
   case 40961:  {
    $107 = $data&255;
    $108 = ((($this)) + 30|0);
    HEAP8[$108>>0] = $107;
    $109 = $data & 63;
    $110 = ($109|0)==(48);
    $111 = ((($this)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    if ($110) {
     __ZN8Nes_Core11enable_sramEbb($112,1,0);
     return;
    } else {
     $113 = $data & 128;
     $114 = ($113|0)!=(0);
     $115 = $data & 64;
     $116 = ($115|0)!=(0);
     __ZN8Nes_Core11enable_sramEbb($112,$114,$116);
     return;
    }
    break;
   }
   default: {
    break L1;
   }
   }
   $97 = $data&255;
   $98 = ((($this)) + 29|0);
   HEAP8[$98>>0] = $97;
   $99 = ((($this)) + 16|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $102 & 8;
   $104 = ($103|0)==(0);
   if (!($104)) {
    return;
   }
   $105 = $97 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    __ZN10Nes_Mapper13mirror_manualEiiii($this,0,1,0,1);
    return;
   } else {
    __ZN10Nes_Mapper13mirror_manualEiiii($this,0,0,1,1);
    return;
   }
  }
 } while(0);
 $117 = HEAP32[$this>>2]|0;
 $118 = ((($117)) + 36|0);
 $119 = HEAP32[$118>>2]|0;
 FUNCTION_TABLE_vii[$119 & 1023]($this,$time);
 $switch$split12D = ($0|0)<(57344);
 L36: do {
  if ($switch$split12D) {
   switch ($0|0) {
   case 49152:  {
    $120 = $data&255;
    $121 = ((($this)) + 32|0);
    HEAP8[$121>>0] = $120;
    break L36;
    break;
   }
   case 49153:  {
    $122 = ((($this)) + 40|0);
    HEAP32[$122>>2] = 2;
    $123 = ((($this)) + 31|0);
    HEAP8[$123>>0] = 0;
    break L36;
    break;
   }
   default: {
    break L36;
   }
   }
  } else {
   switch ($0|0) {
   case 57344:  {
    $124 = ((($this)) + 34|0);
    HEAP8[$124>>0] = 0;
    $125 = ((($this)) + 33|0);
    HEAP8[$125>>0] = 0;
    break L36;
    break;
   }
   case 57345:  {
    $126 = ((($this)) + 33|0);
    HEAP8[$126>>0] = 1;
    break L36;
    break;
   }
   default: {
    break L36;
   }
   }
  }
 } while(0);
 $127 = ((($this)) + 33|0);
 $128 = HEAP8[$127>>0]|0;
 $129 = ($128<<24>>24)==(0);
 if ($129) {
  return;
 }
 __ZN10Nes_Mapper11irq_changedEv($this);
 return;
}
function __ZN10Nes_Mapper9make_mmc3Ev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(44)|0);
 __THREW__ = 0;
 invoke_vi(349,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZdlPv($0);
  ___resumeException($6|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (297332);
  $3 = ((($0)) + 20|0);
  $4 = ((($0)) + 8|0);
  HEAP32[$4>>2] = $3;
  $5 = ((($0)) + 12|0);
  HEAP32[$5>>2] = 15;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN7Nes_Osc12clock_lengthEi($this,$halt_mask) {
 $this = $this|0;
 $halt_mask = $halt_mask|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = HEAP8[$this>>0]|0;
 $4 = $3&255;
 $5 = $4 & $halt_mask;
 $6 = ($5|0)==(0);
 if (!($6)) {
  return;
 }
 $7 = (($1) + -1)|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZN12Nes_Envelope14clock_envelopeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0&255;
 $2 = $1 & 15;
 $3 = ((($this)) + 7|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$3>>0] = 0;
  $6 = ((($this)) + 28|0);
  HEAP32[$6>>2] = $2;
  $7 = ((($this)) + 24|0);
  HEAP32[$7>>2] = 15;
  return;
 }
 $8 = ((($this)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[$8>>2] = $10;
 $11 = ($9|0)<(1);
 if (!($11)) {
  return;
 }
 HEAP32[$8>>2] = $2;
 $12 = ((($this)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1 & 32;
 $15 = $14 | $13;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 $17 = (($13) + 15)|0;
 $18 = $17 & 15;
 HEAP32[$12>>2] = $18;
 return;
}
function __ZN10Nes_Square11clock_sweepEi($this,$negative_adjust) {
 $this = $this|0;
 $negative_adjust = $negative_adjust|0;
 var $$ = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ($4|0)<(1);
 $7 = ((($this)) + 5|0);
 if ($6) {
  HEAP8[$7>>0] = 1;
  $8 = ((($this)) + 3|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 << 8;
  $12 = $11 & 1792;
  $13 = ((($this)) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $12 | $15;
  $17 = $2 & 7;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = $2 & 128;
   $20 = ($19|0)!=(0);
   $21 = ($16>>>0)>(7);
   $or$cond = $20 & $21;
   if ($or$cond) {
    $22 = $16 >>> $17;
    $23 = $2 & 8;
    $24 = ($23|0)==(0);
    $25 = (($negative_adjust) - ($22))|0;
    $$ = $24 ? $22 : $25;
    $26 = (($$) + ($16))|0;
    $27 = ($26|0)<(2048);
    if ($27) {
     $28 = $26&255;
     HEAP8[$13>>0] = $28;
     $29 = $10 & 248;
     $30 = $26 >>> 8;
     $31 = $30 & 7;
     $32 = $29 | $31;
     $33 = $32&255;
     HEAP8[$8>>0] = $33;
    }
   }
  }
 } else {
  $$pre = HEAP8[$7>>0]|0;
  $phitmp = ($$pre<<24>>24)==(0);
  if ($phitmp) {
   return;
  }
 }
 HEAP8[$7>>0] = 0;
 $34 = $2 >>> 4;
 $35 = $34 & 7;
 HEAP32[$3>>2] = $35;
 return;
}
function __ZN10Nes_Square3runEll($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa13 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $amp$1 = 0, $delta1$0 = 0, $delta1$1 = 0, $delta1$1$lcssa = 0, $or$cond = 0, $or$cond4 = 0, $phase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 3|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = $3 & 1792;
 $5 = ((($this)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = $8 << 1;
 $10 = (($9) + 2)|0;
 $11 = ((($this)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($this)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($time))|0;
  $17 = (($end_time) - ($16))|0;
  $18 = ($17|0)>(0);
  if ($18) {
   $19 = $9 | 1;
   $20 = (($17) + ($19))|0;
   $21 = (($20|0) / ($10|0))&-1;
   $22 = ((($this)) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($21))|0;
   $25 = $24 & 7;
   HEAP32[$22>>2] = $25;
   $26 = Math_imul($21, $10)|0;
   $27 = (($26) + ($16))|0;
   $$0$i = $27;
  } else {
   $$0$i = $16;
  }
  $28 = (($$0$i) - ($end_time))|0;
  HEAP32[$14>>2] = $28;
  return;
 }
 $29 = ((($this)) + 1|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ((($this)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if ($34) {
  label = 11;
 } else {
  $35 = HEAP8[$this>>0]|0;
  $36 = $35&255;
  $37 = $36 & 16;
  $38 = ($37|0)==(0);
  if ($38) {
   $40 = ((($this)) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $43 = $41;
  } else {
   $39 = $36 & 15;
   $43 = $39;
  }
  $42 = ($43|0)==(0);
  $44 = ($8>>>0)<(8);
  $or$cond = $44 | $42;
  if ($or$cond) {
   label = 11;
  } else {
   $45 = $31 & 8;
   $46 = ($45|0)!=(0);
   $47 = $31 & 7;
   $48 = $8 >>> $47;
   $$ = $46 ? 0 : $48;
   $49 = (($$) + ($8))|0;
   $50 = ($49|0)>(2047);
   if ($50) {
    label = 11;
   } else {
    $76 = $36 >>> 6;
    $77 = 1 << $76;
    $78 = ($76|0)==(3);
    $$2 = $78 ? $43 : 0;
    $$3 = $78 ? 2 : $77;
    $79 = ((($this)) + 32|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)<($$3|0);
    $82 = $81 ? $43 : 0;
    $amp$1 = $82 ^ $$2;
    $83 = ((($this)) + 20|0);
    $84 = HEAP32[$83>>2]|0;
    HEAP32[$83>>2] = $amp$1;
    $85 = ($amp$1|0)==($84|0);
    if (!($85)) {
     $86 = (($amp$1) - ($84))|0;
     $87 = ((($this)) + 40|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = HEAP32[$12>>2]|0;
     $90 = Math_imul($89, $time)|0;
     $91 = ((($12)) + 4|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($90) + ($92))|0;
     __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEmiP11Blip_Buffer($88,$93,$86,$12);
    }
    $94 = ((($this)) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + ($time))|0;
    $97 = ($96|0)<($end_time|0);
    if ($97) {
     $98 = HEAP32[$11>>2]|0;
     $99 = ((($this)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $amp$1 << 1;
     $102 = (($101) - ($43))|0;
     $103 = HEAP32[$79>>2]|0;
     $104 = ((($98)) + 4|0);
     $$0 = $96;$delta1$0 = $102;$phase$0 = $103;
     while(1) {
      $105 = (($phase$0) + 1)|0;
      $106 = $105 & 7;
      $107 = ($106|0)==(0);
      $108 = ($106|0)==($$3|0);
      $or$cond4 = $107 | $108;
      if ($or$cond4) {
       $109 = (0 - ($delta1$0))|0;
       $110 = HEAP32[$98>>2]|0;
       $111 = Math_imul($110, $$0)|0;
       $112 = HEAP32[$104>>2]|0;
       $113 = (($111) + ($112))|0;
       __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEmiP11Blip_Buffer($100,$113,$109,$98);
       $delta1$1 = $109;
      } else {
       $delta1$1 = $delta1$0;
      }
      $114 = (($$0) + ($10))|0;
      $115 = ($114|0)<($end_time|0);
      if ($115) {
       $$0 = $114;$delta1$0 = $delta1$1;$phase$0 = $106;
      } else {
       $$lcssa = $106;$$lcssa13 = $114;$delta1$1$lcssa = $delta1$1;
       break;
      }
     }
     $116 = (($delta1$1$lcssa) + ($43))|0;
     $117 = $116 >> 1;
     HEAP32[$83>>2] = $117;
     HEAP32[$79>>2] = $$lcssa;
     $$1 = $$lcssa13;$$pre$phiZ2D = $94;
    } else {
     $$1 = $96;$$pre$phiZ2D = $94;
    }
   }
  }
 }
 if ((label|0) == 11) {
  $51 = ((($this)) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if (!($53)) {
   $54 = ((($this)) + 40|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (0 - ($52))|0;
   $57 = HEAP32[$12>>2]|0;
   $58 = Math_imul($57, $time)|0;
   $59 = ((($12)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + ($60))|0;
   __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEmiP11Blip_Buffer($55,$61,$56,$12);
   HEAP32[$51>>2] = 0;
  }
  $62 = ((($this)) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($time))|0;
  $65 = (($end_time) - ($64))|0;
  $66 = ($65|0)>(0);
  if ($66) {
   $67 = $9 | 1;
   $68 = (($65) + ($67))|0;
   $69 = (($68|0) / ($10|0))&-1;
   $70 = ((($this)) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + ($69))|0;
   $73 = $72 & 7;
   HEAP32[$70>>2] = $73;
   $74 = Math_imul($69, $10)|0;
   $75 = (($74) + ($64))|0;
   $$1 = $75;$$pre$phiZ2D = $62;
  } else {
   $$1 = $64;$$pre$phiZ2D = $62;
  }
 }
 $118 = (($$1) - ($end_time))|0;
 HEAP32[$$pre$phiZ2D>>2] = $118;
 return;
}
function __ZN12Nes_Triangle20clock_linear_counterEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = ((($this)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = (($8) + -1)|0;
   HEAP32[$7>>2] = $10;
  }
 } else {
  $3 = HEAP8[$this>>0]|0;
  $4 = $3&255;
  $5 = $4 & 127;
  $6 = ((($this)) + 28|0);
  HEAP32[$6>>2] = $5;
 }
 $11 = HEAP8[$this>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  return;
 }
 HEAP8[$0>>0] = 0;
 return;
}
function __ZN12Nes_Triangle3runEll($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$ = 0, $$$i = 0, $$$i20 = 0, $$0 = 0, $$0$i = 0, $$1 = 0, $$4 = 0, $$lcssa = 0, $$phase$1 = 0, $$sum$i = 0, $$sum$i5 = 0, $$sum1$i = 0, $$sum1$i6 = 0, $$sum11$i = 0, $$sum11$i14 = 0, $$sum1213$i = 0, $$sum1213$i15 = 0, $$sum14$i = 0, $$sum14$i16 = 0, $$sum1516$i = 0;
 var $$sum1516$i17 = 0, $$sum17$i = 0, $$sum17$i18 = 0, $$sum18$i = 0, $$sum18$i19 = 0, $$sum2$i = 0, $$sum2$i7 = 0, $$sum3$i = 0, $$sum3$i8 = 0, $$sum45$i = 0, $$sum45$i9 = 0, $$sum6$i = 0, $$sum6$i10 = 0, $$sum7$i = 0, $$sum7$i11 = 0, $$sum8$i = 0, $$sum8$i12 = 0, $$sum910$i = 0, $$sum910$i13 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $phase$0 = 0, $phase$1 = 0, $phase$1$lcssa = 0, $volume$0 = 0, $volume$1 = 0, $volume$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 3|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = $3 & 1792;
 $5 = ((($this)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = (($8) + 1)|0;
 $10 = ((($this)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = ((($this)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($time))|0;
  HEAP32[$13>>2] = 0;
  $16 = ((($this)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   return;
  }
  $19 = ((($this)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0);
  $22 = ($8>>>0)>(1);
  $or$cond = $22 & $21;
  if (!($or$cond)) {
   return;
  }
  $23 = (($end_time) - ($15))|0;
  $24 = ($23|0)>(0);
  if ($24) {
   $25 = (($23) + ($8))|0;
   $26 = (($25|0) / ($9|0))&-1;
   $27 = ((($this)) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (1 - ($26))|0;
   $30 = (($29) + ($28))|0;
   $31 = $30 & 31;
   $32 = (($31) + 1)|0;
   HEAP32[$27>>2] = $32;
   $33 = Math_imul($26, $9)|0;
   $34 = (($33) + ($15))|0;
   $$0$i = $34;
  } else {
   $$0$i = $15;
  }
  $35 = (($$0$i) - ($end_time))|0;
  HEAP32[$13>>2] = $35;
  return;
 }
 $36 = ((($this)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (16 - ($37))|0;
 $39 = ($38|0)<(0);
 $40 = (($37) + -17)|0;
 $$$i20 = $39 ? $40 : $38;
 $41 = ((($this)) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$41>>2] = $$$i20;
 $43 = ($$$i20|0)==($42|0);
 if (!($43)) {
  $44 = (($$$i20) - ($42))|0;
  $45 = HEAP32[$11>>2]|0;
  $46 = Math_imul($45, $time)|0;
  $47 = ((($11)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + ($48))|0;
  $50 = ((($this)) + 580|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($51, $44)|0;
  $53 = $49 >>> 10;
  $54 = $53 & 63;
  $$sum$i5 = (64 - ($54))|0;
  $55 = (((($this)) + 32|0) + ($$sum$i5<<1)|0);
  $56 = ((($11)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $49 >>> 16;
  $59 = HEAP16[$55>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = Math_imul($60, $52)|0;
  $$sum1$i6 = (($58) + 4)|0;
  $62 = (($57) + ($$sum1$i6<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + ($63))|0;
  $$sum2$i7 = (($$sum$i5) + 64)|0;
  $65 = (((($this)) + 32|0) + ($$sum2$i7<<1)|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = Math_imul($67, $52)|0;
  $$sum3$i8 = (($58) + 5)|0;
  $69 = (($57) + ($$sum3$i8<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($68) + ($70))|0;
  $$sum45$i9 = $$sum$i5 | 128;
  $72 = (((($this)) + 32|0) + ($$sum45$i9<<1)|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  HEAP32[$62>>2] = $64;
  HEAP32[$69>>2] = $71;
  $75 = Math_imul($74, $52)|0;
  $$sum6$i10 = (($58) + 6)|0;
  $76 = (($57) + ($$sum6$i10<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + ($77))|0;
  $$sum7$i11 = (($$sum$i5) + 192)|0;
  $79 = (((($this)) + 32|0) + ($$sum7$i11<<1)|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80 << 16 >> 16;
  $82 = Math_imul($81, $52)|0;
  $$sum8$i12 = (($58) + 7)|0;
  $83 = (($57) + ($$sum8$i12<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($82) + ($84))|0;
  $86 = (((($this)) + 32|0) + ($54<<1)|0);
  $$sum910$i13 = $54 | 192;
  $87 = (((($this)) + 32|0) + ($$sum910$i13<<1)|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  HEAP32[$76>>2] = $78;
  HEAP32[$83>>2] = $85;
  $90 = Math_imul($89, $52)|0;
  $$sum11$i14 = (($58) + 8)|0;
  $91 = (($57) + ($$sum11$i14<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($90) + ($92))|0;
  $$sum1213$i15 = $54 | 128;
  $94 = (((($this)) + 32|0) + ($$sum1213$i15<<1)|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $95 << 16 >> 16;
  $97 = Math_imul($96, $52)|0;
  $$sum14$i16 = (($58) + 9)|0;
  $98 = (($57) + ($$sum14$i16<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + ($99))|0;
  $$sum1516$i17 = $54 | 64;
  $101 = (((($this)) + 32|0) + ($$sum1516$i17<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  HEAP32[$91>>2] = $93;
  HEAP32[$98>>2] = $100;
  $104 = Math_imul($103, $52)|0;
  $$sum17$i18 = (($58) + 10)|0;
  $105 = (($57) + ($$sum17$i18<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($104) + ($106))|0;
  $108 = HEAP16[$86>>1]|0;
  $109 = $108 << 16 >> 16;
  $110 = Math_imul($109, $52)|0;
  $$sum18$i19 = (($58) + 11)|0;
  $111 = (($57) + ($$sum18$i19<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + ($112))|0;
  HEAP32[$105>>2] = $107;
  HEAP32[$111>>2] = $113;
 }
 $114 = ((($this)) + 16|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = (($115) + ($time))|0;
 $117 = ((($this)) + 12|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(0);
 if ($119) {
  $$1 = $end_time;
 } else {
  $120 = ((($this)) + 28|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)==(0);
  $123 = ($9>>>0)<(3);
  $or$cond3 = $123 | $122;
  if ($or$cond3) {
   $$1 = $end_time;
  } else {
   $124 = ($116|0)<($end_time|0);
   if ($124) {
    $125 = ($37|0)>(16);
    $126 = (($37) + -16)|0;
    $$ = $125 ? $126 : $37;
    $$4 = $125 ? -1 : 1;
    $127 = ((($11)) + 4|0);
    $128 = ((($this)) + 580|0);
    $129 = ((($11)) + 8|0);
    $$0 = $116;$phase$0 = $$;$volume$0 = $$4;
    while(1) {
     $130 = (($phase$0) + -1)|0;
     $131 = ($130|0)==(0);
     if ($131) {
      $132 = (0 - ($volume$0))|0;
      $phase$1 = 16;$volume$1 = $132;
     } else {
      $133 = HEAP32[$11>>2]|0;
      $134 = Math_imul($133, $$0)|0;
      $135 = HEAP32[$127>>2]|0;
      $136 = (($134) + ($135))|0;
      $137 = HEAP32[$128>>2]|0;
      $138 = Math_imul($137, $volume$0)|0;
      $139 = $136 >>> 10;
      $140 = $139 & 63;
      $$sum$i = (64 - ($140))|0;
      $141 = (((($this)) + 32|0) + ($$sum$i<<1)|0);
      $142 = HEAP32[$129>>2]|0;
      $143 = $136 >>> 16;
      $144 = HEAP16[$141>>1]|0;
      $145 = $144 << 16 >> 16;
      $146 = Math_imul($145, $138)|0;
      $$sum1$i = (($143) + 4)|0;
      $147 = (($142) + ($$sum1$i<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (($146) + ($148))|0;
      $$sum2$i = (($$sum$i) + 64)|0;
      $150 = (((($this)) + 32|0) + ($$sum2$i<<1)|0);
      $151 = HEAP16[$150>>1]|0;
      $152 = $151 << 16 >> 16;
      $153 = Math_imul($152, $138)|0;
      $$sum3$i = (($143) + 5)|0;
      $154 = (($142) + ($$sum3$i<<2)|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($153) + ($155))|0;
      $$sum45$i = $$sum$i | 128;
      $157 = (((($this)) + 32|0) + ($$sum45$i<<1)|0);
      $158 = HEAP16[$157>>1]|0;
      $159 = $158 << 16 >> 16;
      HEAP32[$147>>2] = $149;
      HEAP32[$154>>2] = $156;
      $160 = Math_imul($159, $138)|0;
      $$sum6$i = (($143) + 6)|0;
      $161 = (($142) + ($$sum6$i<<2)|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (($160) + ($162))|0;
      $$sum7$i = (($$sum$i) + 192)|0;
      $164 = (((($this)) + 32|0) + ($$sum7$i<<1)|0);
      $165 = HEAP16[$164>>1]|0;
      $166 = $165 << 16 >> 16;
      $167 = Math_imul($166, $138)|0;
      $$sum8$i = (($143) + 7)|0;
      $168 = (($142) + ($$sum8$i<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (($167) + ($169))|0;
      $171 = (((($this)) + 32|0) + ($140<<1)|0);
      $$sum910$i = $140 | 192;
      $172 = (((($this)) + 32|0) + ($$sum910$i<<1)|0);
      $173 = HEAP16[$172>>1]|0;
      $174 = $173 << 16 >> 16;
      HEAP32[$161>>2] = $163;
      HEAP32[$168>>2] = $170;
      $175 = Math_imul($174, $138)|0;
      $$sum11$i = (($143) + 8)|0;
      $176 = (($142) + ($$sum11$i<<2)|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (($175) + ($177))|0;
      $$sum1213$i = $140 | 128;
      $179 = (((($this)) + 32|0) + ($$sum1213$i<<1)|0);
      $180 = HEAP16[$179>>1]|0;
      $181 = $180 << 16 >> 16;
      $182 = Math_imul($181, $138)|0;
      $$sum14$i = (($143) + 9)|0;
      $183 = (($142) + ($$sum14$i<<2)|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (($182) + ($184))|0;
      $$sum1516$i = $140 | 64;
      $186 = (((($this)) + 32|0) + ($$sum1516$i<<1)|0);
      $187 = HEAP16[$186>>1]|0;
      $188 = $187 << 16 >> 16;
      HEAP32[$176>>2] = $178;
      HEAP32[$183>>2] = $185;
      $189 = Math_imul($188, $138)|0;
      $$sum17$i = (($143) + 10)|0;
      $190 = (($142) + ($$sum17$i<<2)|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = (($189) + ($191))|0;
      $193 = HEAP16[$171>>1]|0;
      $194 = $193 << 16 >> 16;
      $195 = Math_imul($194, $138)|0;
      $$sum18$i = (($143) + 11)|0;
      $196 = (($142) + ($$sum18$i<<2)|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($195) + ($197))|0;
      HEAP32[$190>>2] = $192;
      HEAP32[$196>>2] = $198;
      $phase$1 = $130;$volume$1 = $volume$0;
     }
     $199 = (($$0) + ($9))|0;
     $200 = ($199|0)<($end_time|0);
     if ($200) {
      $$0 = $199;$phase$0 = $phase$1;$volume$0 = $volume$1;
     } else {
      $$lcssa = $199;$phase$1$lcssa = $phase$1;$volume$1$lcssa = $volume$1;
      break;
     }
    }
    $201 = ($volume$1$lcssa|0)<(0);
    $202 = (($phase$1$lcssa) + 16)|0;
    $$phase$1 = $201 ? $202 : $phase$1$lcssa;
    HEAP32[$36>>2] = $$phase$1;
    $203 = (16 - ($$phase$1))|0;
    $204 = ($203|0)<(0);
    $205 = (($$phase$1) + -17)|0;
    $$$i = $204 ? $205 : $203;
    HEAP32[$41>>2] = $$$i;
    $$1 = $$lcssa;
   } else {
    $$1 = $116;
   }
  }
 }
 $206 = (($$1) - ($end_time))|0;
 HEAP32[$114>>2] = $206;
 return;
}
function __ZN7Nes_Dmc5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 48|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 36|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($this)) + 40|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 44|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($this)) + 45|0);
 HEAP8[$6>>0] = 1;
 $7 = ((($this)) + 52|0);
 HEAP32[$7>>2] = 1073741824;
 $8 = ((($this)) + 57|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($this)) + 56|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($this)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($this)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($this)) + 28|0);
 HEAP32[$12>>2] = 428;
 return;
}
function __ZN7Nes_Dmc10recalc_irqEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $irq$0 = 1073741824;
 } else {
  $3 = ((($this)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $irq$0 = 1073741824;
  } else {
   $6 = ((($this)) + 68|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($7)) + 1916|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($this)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $4 << 3;
   $13 = ((($this)) + 36|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + -9)|0;
   $16 = (($15) + ($14))|0;
   $17 = ((($this)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = Math_imul($16, $18)|0;
   $20 = (($9) + 1)|0;
   $21 = (($20) + ($11))|0;
   $22 = (($21) + ($19))|0;
   $irq$0 = $22;
  }
 }
 $23 = ((($this)) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($irq$0|0)==($24|0);
 if ($25) {
  return;
 }
 HEAP32[$23>>2] = $irq$0;
 $26 = ((($this)) + 68|0);
 $27 = HEAP32[$26>>2]|0;
 __ZN7Nes_Apu11irq_changedEv($27);
 return;
}
function __ZN7Nes_Dmc14write_registerEii($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($addr|0) {
 case 0:  {
  $0 = $data & 15;
  $1 = ((($this)) + 58|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ((737528 + ($3<<5)|0) + ($0<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  $7 = ((($this)) + 28|0);
  HEAP32[$7>>2] = $6;
  $8 = $data & 192;
  $9 = ($8|0)==(128);
  $10 = ((($this)) + 56|0);
  $11 = $9&1;
  HEAP8[$10>>0] = $11;
  $12 = $9&1;
  $13 = ((($this)) + 57|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 & $12;
  $17 = $16&255;
  HEAP8[$13>>0] = $17;
  if ($9) {
   $18 = ((($this)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   if ($20) {
    $irq$0$i = 1073741824;
   } else {
    $21 = ((($this)) + 68|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 1916|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($this)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $19 << 3;
    $28 = ((($this)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + -9)|0;
    $31 = (($30) + ($29))|0;
    $32 = Math_imul($31, $6)|0;
    $33 = (($24) + 1)|0;
    $34 = (($33) + ($26))|0;
    $35 = (($34) + ($32))|0;
    $irq$0$i = $35;
   }
  } else {
   $irq$0$i = 1073741824;
  }
  $36 = ((($this)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($irq$0$i|0)==($37|0);
  if ($38) {
   return;
  }
  HEAP32[$36>>2] = $irq$0$i;
  $39 = ((($this)) + 68|0);
  $40 = HEAP32[$39>>2]|0;
  __ZN7Nes_Apu11irq_changedEv($40);
  return;
  break;
 }
 case 1:  {
  $41 = ((($this)) + 48|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $data & 127;
  HEAP32[$41>>2] = $43;
  $44 = ((($this)) + 59|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)==(0);
  if (!($46)) {
   return;
  }
  $47 = (840227 + ($43)|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (840227 + ($42)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($43) - ($49))|0;
  $54 = (($53) + ($52))|0;
  $55 = ((($this)) + 20|0);
  HEAP32[$55>>2] = $54;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZN7Nes_Dmc5startEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $irq$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 6;
 $4 = $3 | 16384;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($this)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 4;
 $10 = $9 | 1;
 $11 = ((($this)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($this)) + 44|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 do {
  if ($14) {
   $15 = ((($this)) + 60|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($this)) + 64|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $3 | 49152;
   $20 = (FUNCTION_TABLE_iii[$16 & 511]($18,$19)|0);
   $21 = ((($this)) + 32|0);
   HEAP32[$21>>2] = $20;
   $22 = HEAP32[$5>>2]|0;
   $23 = (($22) + 1)|0;
   $24 = $23 & 32767;
   HEAP32[$5>>2] = $24;
   HEAP8[$12>>0] = 1;
   $25 = HEAP32[$11>>2]|0;
   $26 = (($25) + -1)|0;
   HEAP32[$11>>2] = $26;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = HEAP8[$this>>0]|0;
    $29 = $28 & 64;
    $30 = ($29<<24>>24)==(0);
    if ($30) {
     $39 = ((($this)) + 68|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + 1940|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $42 & -17;
     HEAP32[$41>>2] = $43;
     $44 = ((($this)) + 56|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = ((($this)) + 57|0);
     HEAP8[$46>>0] = $45;
     $47 = ((($this)) + 52|0);
     HEAP32[$47>>2] = 1073741824;
     __ZN7Nes_Apu11irq_changedEv($40);
     break;
    } else {
     $31 = HEAP8[$0>>0]|0;
     $32 = $31&255;
     $33 = $32 << 6;
     $34 = $33 | 16384;
     HEAP32[$5>>2] = $34;
     $35 = HEAP8[$6>>0]|0;
     $36 = $35&255;
     $37 = $36 << 4;
     $38 = $37 | 1;
     HEAP32[$11>>2] = $38;
     break;
    }
   }
  }
 } while(0);
 $48 = ((($this)) + 56|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = ($49<<24>>24)==(0);
 if ($50) {
  $irq$0$i = 1073741824;
 } else {
  $51 = HEAP32[$11>>2]|0;
  $52 = ($51|0)==(0);
  if ($52) {
   $irq$0$i = 1073741824;
  } else {
   $53 = ((($this)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 1916|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($this)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $51 << 3;
   $60 = ((($this)) + 36|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + -9)|0;
   $63 = (($62) + ($61))|0;
   $64 = ((($this)) + 28|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = Math_imul($63, $65)|0;
   $67 = (($56) + 1)|0;
   $68 = (($67) + ($58))|0;
   $69 = (($68) + ($66))|0;
   $irq$0$i = $69;
  }
 }
 $70 = ((($this)) + 52|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($irq$0$i|0)==($71|0);
 if ($72) {
  return;
 }
 HEAP32[$70>>2] = $irq$0$i;
 $73 = ((($this)) + 68|0);
 $74 = HEAP32[$73>>2]|0;
 __ZN7Nes_Apu11irq_changedEv($74);
 return;
}
function __ZN7Nes_Dmc3runEll($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$0 = 0, $$0$us = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre22 = 0, $$pre23 = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum$i1$us = 0, $$sum1$i = 0, $$sum1$i2 = 0, $$sum1$i2$us = 0, $$sum11$i = 0, $$sum11$i10 = 0, $$sum11$i10$us = 0, $$sum1213$i = 0, $$sum1213$i11 = 0, $$sum1213$i11$us = 0;
 var $$sum14$i = 0, $$sum14$i12 = 0, $$sum14$i12$us = 0, $$sum1516$i = 0, $$sum1516$i13 = 0, $$sum1516$i13$us = 0, $$sum17$i = 0, $$sum17$i14 = 0, $$sum17$i14$us = 0, $$sum18$i = 0, $$sum18$i15 = 0, $$sum18$i15$us = 0, $$sum2$i = 0, $$sum2$i3 = 0, $$sum2$i3$us = 0, $$sum3$i = 0, $$sum3$i4 = 0, $$sum3$i4$us = 0, $$sum45$i = 0, $$sum45$i5 = 0;
 var $$sum45$i5$us = 0, $$sum6$i = 0, $$sum6$i6 = 0, $$sum6$i6$us = 0, $$sum7$i = 0, $$sum7$i7 = 0, $$sum7$i7$us = 0, $$sum8$i = 0, $$sum8$i8 = 0, $$sum8$i8$us = 0, $$sum910$i = 0, $$sum910$i9 = 0, $$sum910$i9$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0 = 0, $bits$0$us = 0, $bits$1 = 0, $bits$1$us = 0, $bits$2 = 0;
 var $bits$2$lcssa = 0, $bits$2$us = 0, $bits_remain$0 = 0, $bits_remain$0$us = 0, $bits_remain$1 = 0, $bits_remain$1$lcssa = 0, $bits_remain$1$us = 0, $bits_remain$2 = 0, $dac$0 = 0, $dac$0$us = 0, $dac$1 = 0, $dac$1$lcssa = 0, $dac$1$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 HEAP32[$2>>2] = $1;
 $5 = ((($this)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($this)) + 45|0);
  HEAP8[$8>>0] = 1;
 } else {
  $9 = ($1|0)==($3|0);
  if (!($9)) {
   $10 = HEAP32[$6>>2]|0;
   $11 = Math_imul($10, $time)|0;
   $12 = ((($6)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + ($13))|0;
   $15 = ((($this)) + 620|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = Math_imul($16, $4)|0;
   $18 = $14 >>> 10;
   $19 = $18 & 63;
   $$sum$i = (64 - ($19))|0;
   $20 = (((($this)) + 72|0) + ($$sum$i<<1)|0);
   $21 = ((($6)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $14 >>> 16;
   $24 = HEAP16[$20>>1]|0;
   $25 = $24 << 16 >> 16;
   $26 = Math_imul($25, $17)|0;
   $$sum1$i = (($23) + 4)|0;
   $27 = (($22) + ($$sum1$i<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + ($28))|0;
   $$sum2$i = (($$sum$i) + 64)|0;
   $30 = (((($this)) + 72|0) + ($$sum2$i<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31 << 16 >> 16;
   $33 = Math_imul($32, $17)|0;
   $$sum3$i = (($23) + 5)|0;
   $34 = (($22) + ($$sum3$i<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + ($35))|0;
   $$sum45$i = $$sum$i | 128;
   $37 = (((($this)) + 72|0) + ($$sum45$i<<1)|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 << 16 >> 16;
   HEAP32[$27>>2] = $29;
   HEAP32[$34>>2] = $36;
   $40 = Math_imul($39, $17)|0;
   $$sum6$i = (($23) + 6)|0;
   $41 = (($22) + ($$sum6$i<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + ($42))|0;
   $$sum7$i = (($$sum$i) + 192)|0;
   $44 = (((($this)) + 72|0) + ($$sum7$i<<1)|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = Math_imul($46, $17)|0;
   $$sum8$i = (($23) + 7)|0;
   $48 = (($22) + ($$sum8$i<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($47) + ($49))|0;
   $51 = (((($this)) + 72|0) + ($19<<1)|0);
   $$sum910$i = $19 | 192;
   $52 = (((($this)) + 72|0) + ($$sum910$i<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53 << 16 >> 16;
   HEAP32[$41>>2] = $43;
   HEAP32[$48>>2] = $50;
   $55 = Math_imul($54, $17)|0;
   $$sum11$i = (($23) + 8)|0;
   $56 = (($22) + ($$sum11$i<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + ($57))|0;
   $$sum1213$i = $19 | 128;
   $59 = (((($this)) + 72|0) + ($$sum1213$i<<1)|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = $60 << 16 >> 16;
   $62 = Math_imul($61, $17)|0;
   $$sum14$i = (($23) + 9)|0;
   $63 = (($22) + ($$sum14$i<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($62) + ($64))|0;
   $$sum1516$i = $19 | 64;
   $66 = (((($this)) + 72|0) + ($$sum1516$i<<1)|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   HEAP32[$56>>2] = $58;
   HEAP32[$63>>2] = $65;
   $69 = Math_imul($68, $17)|0;
   $$sum17$i = (($23) + 10)|0;
   $70 = (($22) + ($$sum17$i<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + ($71))|0;
   $73 = HEAP16[$51>>1]|0;
   $74 = $73 << 16 >> 16;
   $75 = Math_imul($74, $17)|0;
   $$sum18$i = (($23) + 11)|0;
   $76 = (($22) + ($$sum18$i<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($75) + ($77))|0;
   HEAP32[$70>>2] = $72;
   HEAP32[$76>>2] = $78;
  }
 }
 $79 = ((($this)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + ($time))|0;
 $82 = ($81|0)<($end_time|0);
 if (!($82)) {
  $$2 = $81;
  $341 = (($$2) - ($end_time))|0;
  HEAP32[$79>>2] = $341;
  return;
 }
 $83 = ((($this)) + 36|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($this)) + 45|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = ($86<<24>>24)==(0);
 $$pre23 = ((($this)) + 44|0);
 if ($87) {
  label = 9;
 } else {
  $88 = HEAP8[$$pre23>>0]|0;
  $89 = ($88<<24>>24)==(0);
  if ($89) {
   $90 = ((($this)) + 28|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($end_time) + -1)|0;
   $93 = (($92) - ($81))|0;
   $94 = (($93) + ($91))|0;
   $95 = (($94|0) / ($91|0))&-1;
   $96 = (($84) + 7)|0;
   $97 = (($95|0) % 8)&-1;
   $98 = (($96) - ($97))|0;
   $99 = (($98|0) % 8)&-1;
   $100 = (($99) + 1)|0;
   $101 = Math_imul($95, $91)|0;
   $102 = (($101) + ($81))|0;
   $$1 = $102;$bits_remain$2 = $100;
  } else {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $103 = ((($this)) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($this)) + 40|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($6)) + 4|0);
  $108 = ((($this)) + 620|0);
  $109 = ((($6)) + 8|0);
  $110 = ((($this)) + 32|0);
  $111 = ((($this)) + 12|0);
  $112 = ((($this)) + 60|0);
  $113 = ((($this)) + 64|0);
  $114 = ((($this)) + 24|0);
  $115 = ((($this)) + 68|0);
  $116 = ((($this)) + 56|0);
  $117 = ((($this)) + 57|0);
  $118 = ((($this)) + 52|0);
  $119 = ((($this)) + 2|0);
  $120 = ((($this)) + 3|0);
  L14: do {
   if ($7) {
    $$0$us = $81;$122 = $86;$bits$0$us = $106;$bits_remain$0$us = $84;$dac$0$us = $1;
    while(1) {
     $121 = ($122<<24>>24)==(0);
     if ($121) {
      $123 = $bits$0$us << 2;
      $124 = $123 & 4;
      $125 = (($124) + -2)|0;
      $126 = $bits$0$us >> 1;
      $127 = (($125) + ($dac$0$us))|0;
      $128 = ($127>>>0)<(128);
      if ($128) {
       $129 = HEAP32[$6>>2]|0;
       $130 = Math_imul($129, $$0$us)|0;
       $131 = HEAP32[$107>>2]|0;
       $132 = (($130) + ($131))|0;
       $133 = HEAP32[$108>>2]|0;
       $134 = Math_imul($133, $125)|0;
       $135 = $132 >>> 10;
       $136 = $135 & 63;
       $$sum$i1$us = (64 - ($136))|0;
       $137 = (((($this)) + 72|0) + ($$sum$i1$us<<1)|0);
       $138 = HEAP32[$109>>2]|0;
       $139 = $132 >>> 16;
       $140 = HEAP16[$137>>1]|0;
       $141 = $140 << 16 >> 16;
       $142 = Math_imul($141, $134)|0;
       $$sum1$i2$us = (($139) + 4)|0;
       $143 = (($138) + ($$sum1$i2$us<<2)|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = (($142) + ($144))|0;
       $$sum2$i3$us = (($$sum$i1$us) + 64)|0;
       $146 = (((($this)) + 72|0) + ($$sum2$i3$us<<1)|0);
       $147 = HEAP16[$146>>1]|0;
       $148 = $147 << 16 >> 16;
       $149 = Math_imul($148, $134)|0;
       $$sum3$i4$us = (($139) + 5)|0;
       $150 = (($138) + ($$sum3$i4$us<<2)|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (($149) + ($151))|0;
       $$sum45$i5$us = $$sum$i1$us | 128;
       $153 = (((($this)) + 72|0) + ($$sum45$i5$us<<1)|0);
       $154 = HEAP16[$153>>1]|0;
       $155 = $154 << 16 >> 16;
       HEAP32[$143>>2] = $145;
       HEAP32[$150>>2] = $152;
       $156 = Math_imul($155, $134)|0;
       $$sum6$i6$us = (($139) + 6)|0;
       $157 = (($138) + ($$sum6$i6$us<<2)|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = (($156) + ($158))|0;
       $$sum7$i7$us = (($$sum$i1$us) + 192)|0;
       $160 = (((($this)) + 72|0) + ($$sum7$i7$us<<1)|0);
       $161 = HEAP16[$160>>1]|0;
       $162 = $161 << 16 >> 16;
       $163 = Math_imul($162, $134)|0;
       $$sum8$i8$us = (($139) + 7)|0;
       $164 = (($138) + ($$sum8$i8$us<<2)|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($163) + ($165))|0;
       $167 = (((($this)) + 72|0) + ($136<<1)|0);
       $$sum910$i9$us = $136 | 192;
       $168 = (((($this)) + 72|0) + ($$sum910$i9$us<<1)|0);
       $169 = HEAP16[$168>>1]|0;
       $170 = $169 << 16 >> 16;
       HEAP32[$157>>2] = $159;
       HEAP32[$164>>2] = $166;
       $171 = Math_imul($170, $134)|0;
       $$sum11$i10$us = (($139) + 8)|0;
       $172 = (($138) + ($$sum11$i10$us<<2)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = (($171) + ($173))|0;
       $$sum1213$i11$us = $136 | 128;
       $175 = (((($this)) + 72|0) + ($$sum1213$i11$us<<1)|0);
       $176 = HEAP16[$175>>1]|0;
       $177 = $176 << 16 >> 16;
       $178 = Math_imul($177, $134)|0;
       $$sum14$i12$us = (($139) + 9)|0;
       $179 = (($138) + ($$sum14$i12$us<<2)|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = (($178) + ($180))|0;
       $$sum1516$i13$us = $136 | 64;
       $182 = (((($this)) + 72|0) + ($$sum1516$i13$us<<1)|0);
       $183 = HEAP16[$182>>1]|0;
       $184 = $183 << 16 >> 16;
       HEAP32[$172>>2] = $174;
       HEAP32[$179>>2] = $181;
       $185 = Math_imul($184, $134)|0;
       $$sum17$i14$us = (($139) + 10)|0;
       $186 = (($138) + ($$sum17$i14$us<<2)|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = (($185) + ($187))|0;
       $189 = HEAP16[$167>>1]|0;
       $190 = $189 << 16 >> 16;
       $191 = Math_imul($190, $134)|0;
       $$sum18$i15$us = (($139) + 11)|0;
       $192 = (($138) + ($$sum18$i15$us<<2)|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = (($191) + ($193))|0;
       HEAP32[$186>>2] = $188;
       HEAP32[$192>>2] = $194;
       $bits$1$us = $126;$dac$1$us = $127;
      } else {
       $bits$1$us = $126;$dac$1$us = $dac$0$us;
      }
     } else {
      $bits$1$us = $bits$0$us;$dac$1$us = $dac$0$us;
     }
     $195 = (($$0$us) + ($104))|0;
     $196 = (($bits_remain$0$us) + -1)|0;
     $197 = ($196|0)==(0);
     do {
      if ($197) {
       $198 = HEAP8[$$pre23>>0]|0;
       $199 = ($198<<24>>24)==(0);
       if ($199) {
        HEAP8[$85>>0] = 1;
        $bits$2$us = $bits$1$us;$bits_remain$1$us = 8;
        break;
       }
       $200 = HEAP32[$110>>2]|0;
       HEAP8[$$pre23>>0] = 0;
       HEAP8[$85>>0] = 1;
       $201 = HEAP32[$111>>2]|0;
       $202 = ($201|0)==(0);
       if ($202) {
        $bits$2$us = $200;$bits_remain$1$us = 8;
       } else {
        $203 = HEAP32[$112>>2]|0;
        $204 = HEAP32[$113>>2]|0;
        $205 = HEAP32[$114>>2]|0;
        $206 = (($205) + 32768)|0;
        $207 = (FUNCTION_TABLE_iii[$203 & 511]($204,$206)|0);
        HEAP32[$110>>2] = $207;
        $208 = HEAP32[$114>>2]|0;
        $209 = (($208) + 1)|0;
        $210 = $209 & 32767;
        HEAP32[$114>>2] = $210;
        HEAP8[$$pre23>>0] = 1;
        $211 = HEAP32[$111>>2]|0;
        $212 = (($211) + -1)|0;
        HEAP32[$111>>2] = $212;
        $213 = ($212|0)==(0);
        if ($213) {
         $214 = HEAP8[$this>>0]|0;
         $215 = $214 & 64;
         $216 = ($215<<24>>24)==(0);
         if ($216) {
          $225 = HEAP32[$115>>2]|0;
          $226 = ((($225)) + 1940|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = $227 & -17;
          HEAP32[$226>>2] = $228;
          $229 = HEAP8[$116>>0]|0;
          HEAP8[$117>>0] = $229;
          HEAP32[$118>>2] = 1073741824;
          __ZN7Nes_Apu11irq_changedEv($225);
          $bits$2$us = $200;$bits_remain$1$us = 8;
          break;
         } else {
          $217 = HEAP8[$119>>0]|0;
          $218 = $217&255;
          $219 = $218 << 6;
          $220 = $219 | 16384;
          HEAP32[$114>>2] = $220;
          $221 = HEAP8[$120>>0]|0;
          $222 = $221&255;
          $223 = $222 << 4;
          $224 = $223 | 1;
          HEAP32[$111>>2] = $224;
          $bits$2$us = $200;$bits_remain$1$us = 8;
          break;
         }
        } else {
         $bits$2$us = $200;$bits_remain$1$us = 8;
        }
       }
      } else {
       $bits$2$us = $bits$1$us;$bits_remain$1$us = $196;
      }
     } while(0);
     $230 = ($195|0)<($end_time|0);
     if (!($230)) {
      $$lcssa = $195;$bits$2$lcssa = $bits$2$us;$bits_remain$1$lcssa = $bits_remain$1$us;$dac$1$lcssa = $dac$1$us;
      break L14;
     }
     $$pre22 = HEAP8[$85>>0]|0;
     $$0$us = $195;$122 = $$pre22;$bits$0$us = $bits$2$us;$bits_remain$0$us = $bits_remain$1$us;$dac$0$us = $dac$1$us;
    }
   } else {
    $$0 = $81;$232 = $86;$bits$0 = $106;$bits_remain$0 = $84;$dac$0 = $1;
    while(1) {
     $231 = ($232<<24>>24)==(0);
     if ($231) {
      $233 = $bits$0 << 2;
      $234 = $233 & 4;
      $235 = (($234) + -2)|0;
      $236 = $bits$0 >> 1;
      $237 = (($235) + ($dac$0))|0;
      $238 = ($237>>>0)<(128);
      if ($238) {
       $239 = HEAP32[$6>>2]|0;
       $240 = Math_imul($239, $$0)|0;
       $241 = HEAP32[$107>>2]|0;
       $242 = (($240) + ($241))|0;
       $243 = HEAP32[$108>>2]|0;
       $244 = Math_imul($243, $235)|0;
       $245 = $242 >>> 10;
       $246 = $245 & 63;
       $$sum$i1 = (64 - ($246))|0;
       $247 = (((($this)) + 72|0) + ($$sum$i1<<1)|0);
       $248 = HEAP32[$109>>2]|0;
       $249 = $242 >>> 16;
       $250 = HEAP16[$247>>1]|0;
       $251 = $250 << 16 >> 16;
       $252 = Math_imul($251, $244)|0;
       $$sum1$i2 = (($249) + 4)|0;
       $253 = (($248) + ($$sum1$i2<<2)|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = (($252) + ($254))|0;
       $$sum2$i3 = (($$sum$i1) + 64)|0;
       $256 = (((($this)) + 72|0) + ($$sum2$i3<<1)|0);
       $257 = HEAP16[$256>>1]|0;
       $258 = $257 << 16 >> 16;
       $259 = Math_imul($258, $244)|0;
       $$sum3$i4 = (($249) + 5)|0;
       $260 = (($248) + ($$sum3$i4<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = (($259) + ($261))|0;
       $$sum45$i5 = $$sum$i1 | 128;
       $263 = (((($this)) + 72|0) + ($$sum45$i5<<1)|0);
       $264 = HEAP16[$263>>1]|0;
       $265 = $264 << 16 >> 16;
       HEAP32[$253>>2] = $255;
       HEAP32[$260>>2] = $262;
       $266 = Math_imul($265, $244)|0;
       $$sum6$i6 = (($249) + 6)|0;
       $267 = (($248) + ($$sum6$i6<<2)|0);
       $268 = HEAP32[$267>>2]|0;
       $269 = (($266) + ($268))|0;
       $$sum7$i7 = (($$sum$i1) + 192)|0;
       $270 = (((($this)) + 72|0) + ($$sum7$i7<<1)|0);
       $271 = HEAP16[$270>>1]|0;
       $272 = $271 << 16 >> 16;
       $273 = Math_imul($272, $244)|0;
       $$sum8$i8 = (($249) + 7)|0;
       $274 = (($248) + ($$sum8$i8<<2)|0);
       $275 = HEAP32[$274>>2]|0;
       $276 = (($273) + ($275))|0;
       $277 = (((($this)) + 72|0) + ($246<<1)|0);
       $$sum910$i9 = $246 | 192;
       $278 = (((($this)) + 72|0) + ($$sum910$i9<<1)|0);
       $279 = HEAP16[$278>>1]|0;
       $280 = $279 << 16 >> 16;
       HEAP32[$267>>2] = $269;
       HEAP32[$274>>2] = $276;
       $281 = Math_imul($280, $244)|0;
       $$sum11$i10 = (($249) + 8)|0;
       $282 = (($248) + ($$sum11$i10<<2)|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = (($281) + ($283))|0;
       $$sum1213$i11 = $246 | 128;
       $285 = (((($this)) + 72|0) + ($$sum1213$i11<<1)|0);
       $286 = HEAP16[$285>>1]|0;
       $287 = $286 << 16 >> 16;
       $288 = Math_imul($287, $244)|0;
       $$sum14$i12 = (($249) + 9)|0;
       $289 = (($248) + ($$sum14$i12<<2)|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = (($288) + ($290))|0;
       $$sum1516$i13 = $246 | 64;
       $292 = (((($this)) + 72|0) + ($$sum1516$i13<<1)|0);
       $293 = HEAP16[$292>>1]|0;
       $294 = $293 << 16 >> 16;
       HEAP32[$282>>2] = $284;
       HEAP32[$289>>2] = $291;
       $295 = Math_imul($294, $244)|0;
       $$sum17$i14 = (($249) + 10)|0;
       $296 = (($248) + ($$sum17$i14<<2)|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = (($295) + ($297))|0;
       $299 = HEAP16[$277>>1]|0;
       $300 = $299 << 16 >> 16;
       $301 = Math_imul($300, $244)|0;
       $$sum18$i15 = (($249) + 11)|0;
       $302 = (($248) + ($$sum18$i15<<2)|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = (($301) + ($303))|0;
       HEAP32[$296>>2] = $298;
       HEAP32[$302>>2] = $304;
       $bits$1 = $236;$dac$1 = $237;
      } else {
       $bits$1 = $236;$dac$1 = $dac$0;
      }
     } else {
      $bits$1 = $bits$0;$dac$1 = $dac$0;
     }
     $305 = (($$0) + ($104))|0;
     $306 = (($bits_remain$0) + -1)|0;
     $307 = ($306|0)==(0);
     do {
      if ($307) {
       $308 = HEAP8[$$pre23>>0]|0;
       $309 = ($308<<24>>24)==(0);
       if ($309) {
        HEAP8[$85>>0] = 1;
        $bits$2 = $bits$1;$bits_remain$1 = 8;
        break;
       }
       HEAP8[$85>>0] = 0;
       $310 = HEAP32[$110>>2]|0;
       HEAP8[$$pre23>>0] = 0;
       $311 = HEAP32[$111>>2]|0;
       $312 = ($311|0)==(0);
       if ($312) {
        $bits$2 = $310;$bits_remain$1 = 8;
       } else {
        $313 = HEAP32[$112>>2]|0;
        $314 = HEAP32[$113>>2]|0;
        $315 = HEAP32[$114>>2]|0;
        $316 = (($315) + 32768)|0;
        $317 = (FUNCTION_TABLE_iii[$313 & 511]($314,$316)|0);
        HEAP32[$110>>2] = $317;
        $318 = HEAP32[$114>>2]|0;
        $319 = (($318) + 1)|0;
        $320 = $319 & 32767;
        HEAP32[$114>>2] = $320;
        HEAP8[$$pre23>>0] = 1;
        $321 = HEAP32[$111>>2]|0;
        $322 = (($321) + -1)|0;
        HEAP32[$111>>2] = $322;
        $323 = ($322|0)==(0);
        if ($323) {
         $324 = HEAP8[$this>>0]|0;
         $325 = $324 & 64;
         $326 = ($325<<24>>24)==(0);
         if ($326) {
          $335 = HEAP32[$115>>2]|0;
          $336 = ((($335)) + 1940|0);
          $337 = HEAP32[$336>>2]|0;
          $338 = $337 & -17;
          HEAP32[$336>>2] = $338;
          $339 = HEAP8[$116>>0]|0;
          HEAP8[$117>>0] = $339;
          HEAP32[$118>>2] = 1073741824;
          __ZN7Nes_Apu11irq_changedEv($335);
          $bits$2 = $310;$bits_remain$1 = 8;
          break;
         } else {
          $327 = HEAP8[$119>>0]|0;
          $328 = $327&255;
          $329 = $328 << 6;
          $330 = $329 | 16384;
          HEAP32[$114>>2] = $330;
          $331 = HEAP8[$120>>0]|0;
          $332 = $331&255;
          $333 = $332 << 4;
          $334 = $333 | 1;
          HEAP32[$111>>2] = $334;
          $bits$2 = $310;$bits_remain$1 = 8;
          break;
         }
        } else {
         $bits$2 = $310;$bits_remain$1 = 8;
        }
       }
      } else {
       $bits$2 = $bits$1;$bits_remain$1 = $306;
      }
     } while(0);
     $340 = ($305|0)<($end_time|0);
     if (!($340)) {
      $$lcssa = $305;$bits$2$lcssa = $bits$2;$bits_remain$1$lcssa = $bits_remain$1;$dac$1$lcssa = $dac$1;
      break L14;
     }
     $$pre = HEAP8[$85>>0]|0;
     $$0 = $305;$232 = $$pre;$bits$0 = $bits$2;$bits_remain$0 = $bits_remain$1;$dac$0 = $dac$1;
    }
   }
  } while(0);
  HEAP32[$0>>2] = $dac$1$lcssa;
  HEAP32[$2>>2] = $dac$1$lcssa;
  HEAP32[$105>>2] = $bits$2$lcssa;
  $$1 = $$lcssa;$bits_remain$2 = $bits_remain$1$lcssa;
 }
 HEAP32[$83>>2] = $bits_remain$2;
 $$2 = $$1;
 $341 = (($$2) - ($end_time))|0;
 HEAP32[$79>>2] = $341;
 return;
}
function __ZN9Nes_Noise3runEll($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$0 = 0, $$1 = 0, $$lcssa = 0, $$lcssa23 = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum1$i = 0, $$sum1$i2 = 0, $$sum11$i = 0, $$sum11$i10 = 0, $$sum1213$i = 0, $$sum1213$i11 = 0, $$sum14$i = 0, $$sum14$i12 = 0, $$sum1516$i = 0, $$sum1516$i13 = 0, $$sum17$i = 0, $$sum17$i14 = 0, $$sum18$i = 0, $$sum18$i15 = 0;
 var $$sum2$i = 0, $$sum2$i3 = 0, $$sum3$i = 0, $$sum3$i4 = 0, $$sum45$i = 0, $$sum45$i5 = 0, $$sum6$i = 0, $$sum6$i6 = 0, $$sum7$i = 0, $$sum7$i7 = 0, $$sum8$i = 0, $$sum8$i8 = 0, $$sum910$i = 0, $$sum910$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta1$0 = 0, $delta1$1 = 0, $delta1$1$lcssa = 0, $noise$0 = 0, $rtime$0 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 15;
 $4 = (737592 + ($3<<1)|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = ((($this)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = ((($this)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($time))|0;
  $13 = (($end_time) + -1)|0;
  $14 = (($13) + ($6))|0;
  $15 = (($14) - ($12))|0;
  $16 = (($15|0) % ($6|0))&-1;
  $sum = (($16) + ($end_time))|0;
  $17 = (($12) - ($sum))|0;
  $18 = (($17) + ($15))|0;
  HEAP32[$10>>2] = $18;
  return;
 }
 $19 = ((($this)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $34 = 0;
  } else {
   $22 = HEAP8[$this>>0]|0;
   $23 = $22&255;
   $24 = $23 & 16;
   $25 = ($24|0)==(0);
   if ($25) {
    $27 = ((($this)) + 24|0);
    $28 = HEAP32[$27>>2]|0;
    $34 = $28;
    break;
   } else {
    $26 = $23 & 15;
    $34 = $26;
    break;
   }
  }
 } while(0);
 $29 = ((($this)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 1;
 $32 = ($31|0)!=(0);
 $33 = $32 ? $34 : 0;
 $35 = ((($this)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$35>>2] = $33;
 $37 = ($33|0)==($36|0);
 if (!($37)) {
  $38 = (($33) - ($36))|0;
  $39 = HEAP32[$8>>2]|0;
  $40 = Math_imul($39, $time)|0;
  $41 = ((($8)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + ($42))|0;
  $44 = ((($this)) + 588|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = Math_imul($45, $38)|0;
  $47 = $43 >>> 10;
  $48 = $47 & 63;
  $$sum$i1 = (64 - ($48))|0;
  $49 = (((($this)) + 40|0) + ($$sum$i1<<1)|0);
  $50 = ((($8)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $43 >>> 16;
  $53 = HEAP16[$49>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = Math_imul($54, $46)|0;
  $$sum1$i2 = (($52) + 4)|0;
  $56 = (($51) + ($$sum1$i2<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + ($57))|0;
  $$sum2$i3 = (($$sum$i1) + 64)|0;
  $59 = (((($this)) + 40|0) + ($$sum2$i3<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = Math_imul($61, $46)|0;
  $$sum3$i4 = (($52) + 5)|0;
  $63 = (($51) + ($$sum3$i4<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($62) + ($64))|0;
  $$sum45$i5 = $$sum$i1 | 128;
  $66 = (((($this)) + 40|0) + ($$sum45$i5<<1)|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  HEAP32[$56>>2] = $58;
  HEAP32[$63>>2] = $65;
  $69 = Math_imul($68, $46)|0;
  $$sum6$i6 = (($52) + 6)|0;
  $70 = (($51) + ($$sum6$i6<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + ($71))|0;
  $$sum7$i7 = (($$sum$i1) + 192)|0;
  $73 = (((($this)) + 40|0) + ($$sum7$i7<<1)|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74 << 16 >> 16;
  $76 = Math_imul($75, $46)|0;
  $$sum8$i8 = (($52) + 7)|0;
  $77 = (($51) + ($$sum8$i8<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) + ($78))|0;
  $80 = (((($this)) + 40|0) + ($48<<1)|0);
  $$sum910$i9 = $48 | 192;
  $81 = (((($this)) + 40|0) + ($$sum910$i9<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  HEAP32[$70>>2] = $72;
  HEAP32[$77>>2] = $79;
  $84 = Math_imul($83, $46)|0;
  $$sum11$i10 = (($52) + 8)|0;
  $85 = (($51) + ($$sum11$i10<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + ($86))|0;
  $$sum1213$i11 = $48 | 128;
  $88 = (((($this)) + 40|0) + ($$sum1213$i11<<1)|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = Math_imul($90, $46)|0;
  $$sum14$i12 = (($52) + 9)|0;
  $92 = (($51) + ($$sum14$i12<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + ($93))|0;
  $$sum1516$i13 = $48 | 64;
  $95 = (((($this)) + 40|0) + ($$sum1516$i13<<1)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96 << 16 >> 16;
  HEAP32[$85>>2] = $87;
  HEAP32[$92>>2] = $94;
  $98 = Math_imul($97, $46)|0;
  $$sum17$i14 = (($52) + 10)|0;
  $99 = (($51) + ($$sum17$i14<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + ($100))|0;
  $102 = HEAP16[$80>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = Math_imul($103, $46)|0;
  $$sum18$i15 = (($52) + 11)|0;
  $105 = (($51) + ($$sum18$i15<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($104) + ($106))|0;
  HEAP32[$99>>2] = $101;
  HEAP32[$105>>2] = $107;
 }
 $108 = ((($this)) + 16|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($109) + ($time))|0;
 $111 = ($110|0)<($end_time|0);
 do {
  if ($111) {
   $112 = ($34|0)==(0);
   if ($112) {
    $113 = (($end_time) + -1)|0;
    $114 = (($113) + ($6))|0;
    $115 = (($114) - ($110))|0;
    $116 = (($115|0) % ($6|0))&-1;
    $117 = (($115) - ($116))|0;
    $118 = (($117) + ($110))|0;
    $119 = HEAP8[$0>>0]|0;
    $120 = ($119<<24>>24)<(0);
    if ($120) {
     $$1 = $118;
     break;
    }
    $121 = $30 << 13;
    $122 = $30 << 14;
    $123 = $121 ^ $122;
    $124 = $123 & 16384;
    $125 = $30 >> 1;
    $126 = $124 | $125;
    HEAP32[$29>>2] = $126;
    $$1 = $118;
    break;
   }
   $127 = HEAP32[$8>>2]|0;
   $128 = Math_imul($127, $6)|0;
   $129 = Math_imul($127, $110)|0;
   $130 = ((($8)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + ($131))|0;
   $133 = $33 << 1;
   $134 = (($133) - ($34))|0;
   $135 = HEAP8[$0>>0]|0;
   $136 = ($135<<24>>24)<(0);
   $137 = $136 ? 8 : 13;
   $138 = ((($this)) + 588|0);
   $139 = ((($8)) + 8|0);
   $$0 = $110;$delta1$0 = $134;$noise$0 = $30;$rtime$0 = $132;
   while(1) {
    $140 = $noise$0 << $137;
    $141 = $noise$0 << 14;
    $142 = $140 ^ $141;
    $143 = (($$0) + ($6))|0;
    $144 = (($noise$0) + 1)|0;
    $145 = $144 & 2;
    $146 = ($145|0)==(0);
    if ($146) {
     $delta1$1 = $delta1$0;
    } else {
     $147 = (0 - ($delta1$0))|0;
     $148 = HEAP32[$138>>2]|0;
     $149 = Math_imul($148, $147)|0;
     $150 = $rtime$0 >>> 10;
     $151 = $150 & 63;
     $$sum$i = (64 - ($151))|0;
     $152 = (((($this)) + 40|0) + ($$sum$i<<1)|0);
     $153 = HEAP32[$139>>2]|0;
     $154 = $rtime$0 >>> 16;
     $155 = HEAP16[$152>>1]|0;
     $156 = $155 << 16 >> 16;
     $157 = Math_imul($156, $149)|0;
     $$sum1$i = (($154) + 4)|0;
     $158 = (($153) + ($$sum1$i<<2)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + ($159))|0;
     $$sum2$i = (($$sum$i) + 64)|0;
     $161 = (((($this)) + 40|0) + ($$sum2$i<<1)|0);
     $162 = HEAP16[$161>>1]|0;
     $163 = $162 << 16 >> 16;
     $164 = Math_imul($163, $149)|0;
     $$sum3$i = (($154) + 5)|0;
     $165 = (($153) + ($$sum3$i<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($164) + ($166))|0;
     $$sum45$i = $$sum$i | 128;
     $168 = (((($this)) + 40|0) + ($$sum45$i<<1)|0);
     $169 = HEAP16[$168>>1]|0;
     $170 = $169 << 16 >> 16;
     HEAP32[$158>>2] = $160;
     HEAP32[$165>>2] = $167;
     $171 = Math_imul($170, $149)|0;
     $$sum6$i = (($154) + 6)|0;
     $172 = (($153) + ($$sum6$i<<2)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = (($171) + ($173))|0;
     $$sum7$i = (($$sum$i) + 192)|0;
     $175 = (((($this)) + 40|0) + ($$sum7$i<<1)|0);
     $176 = HEAP16[$175>>1]|0;
     $177 = $176 << 16 >> 16;
     $178 = Math_imul($177, $149)|0;
     $$sum8$i = (($154) + 7)|0;
     $179 = (($153) + ($$sum8$i<<2)|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($178) + ($180))|0;
     $182 = (((($this)) + 40|0) + ($151<<1)|0);
     $$sum910$i = $151 | 192;
     $183 = (((($this)) + 40|0) + ($$sum910$i<<1)|0);
     $184 = HEAP16[$183>>1]|0;
     $185 = $184 << 16 >> 16;
     HEAP32[$172>>2] = $174;
     HEAP32[$179>>2] = $181;
     $186 = Math_imul($185, $149)|0;
     $$sum11$i = (($154) + 8)|0;
     $187 = (($153) + ($$sum11$i<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($186) + ($188))|0;
     $$sum1213$i = $151 | 128;
     $190 = (((($this)) + 40|0) + ($$sum1213$i<<1)|0);
     $191 = HEAP16[$190>>1]|0;
     $192 = $191 << 16 >> 16;
     $193 = Math_imul($192, $149)|0;
     $$sum14$i = (($154) + 9)|0;
     $194 = (($153) + ($$sum14$i<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (($193) + ($195))|0;
     $$sum1516$i = $151 | 64;
     $197 = (((($this)) + 40|0) + ($$sum1516$i<<1)|0);
     $198 = HEAP16[$197>>1]|0;
     $199 = $198 << 16 >> 16;
     HEAP32[$187>>2] = $189;
     HEAP32[$194>>2] = $196;
     $200 = Math_imul($199, $149)|0;
     $$sum17$i = (($154) + 10)|0;
     $201 = (($153) + ($$sum17$i<<2)|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = (($200) + ($202))|0;
     $204 = HEAP16[$182>>1]|0;
     $205 = $204 << 16 >> 16;
     $206 = Math_imul($205, $149)|0;
     $$sum18$i = (($154) + 11)|0;
     $207 = (($153) + ($$sum18$i<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = (($206) + ($208))|0;
     HEAP32[$201>>2] = $203;
     HEAP32[$207>>2] = $209;
     $delta1$1 = $147;
    }
    $210 = (($rtime$0) + ($128))|0;
    $211 = $142 & 16384;
    $212 = $noise$0 >> 1;
    $213 = $211 | $212;
    $214 = ($143|0)<($end_time|0);
    if ($214) {
     $$0 = $143;$delta1$0 = $delta1$1;$noise$0 = $213;$rtime$0 = $210;
    } else {
     $$lcssa = $143;$$lcssa23 = $213;$delta1$1$lcssa = $delta1$1;
     break;
    }
   }
   $215 = (($delta1$1$lcssa) + ($34))|0;
   $216 = $215 >> 1;
   HEAP32[$35>>2] = $216;
   HEAP32[$29>>2] = $$lcssa23;
   $$1 = $$lcssa;
  } else {
   $$1 = $110;
  }
 } while(0);
 $217 = (($$1) - ($end_time))|0;
 HEAP32[$108>>2] = $217;
 return;
}
function __ZN7Nes_Ppu16render_bg_until_El($this,$cpu_time) {
 $this = $this|0;
 $cpu_time = $cpu_time|0;
 var $$ = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $$pre2 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $next_ppu_time$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cpu_time*3)|0;
 $1 = ((($this)) + 752|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0))|0;
 $4 = ($3|0)>(89001);
 $$ = $4 ? 89001 : $3;
 $5 = ((($this)) + 792|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(2);
 if ($7) {
  $8 = ($6|0)<(1);
  if ($8) {
   HEAP32[$5>>2] = 1;
   $9 = ((($this)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 & 8;
   $12 = ($11<<24>>24)==(0);
   if (!($12)) {
    $13 = ((($this)) + 8|0);
    $14 = HEAP16[$13>>1]|0;
    $15 = ((($this)) + 6|0);
    HEAP16[$15>>1] = $14;
   }
  }
  $16 = ($$|0)<(7149);
  if ($16) {
   $17 = (7148 - ($2))|0;
   $18 = (($17|0) / 3)&-1;
   $19 = ((($this)) + 776|0);
   HEAP32[$19>>2] = $18;
   return;
  }
  HEAP32[$5>>2] = 2;
  $20 = ((($this)) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 & 8;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   label = 10;
  } else {
   $24 = ((($this)) + 748|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 2248|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 & 1;
   $29 = ($28|0)==(0);
   if ($29) {
    $$phi$trans$insert = ((($this)) + 744|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$pre$phiZ2D = $$phi$trans$insert;$41 = $$pre;
   } else {
    label = 10;
   }
  }
  if ((label|0) == 10) {
   $30 = ((($this)) + 768|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + -1)|0;
   HEAP32[$30>>2] = $32;
   $33 = ($31|0)<(1);
   if ($33) {
    HEAP32[$30>>2] = 2;
    $34 = ((($this)) + 764|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 1)|0;
    HEAP32[$34>>2] = $36;
   }
   $37 = ((($this)) + 744|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + -1)|0;
   HEAP32[$37>>2] = $39;
   $$pre$phiZ2D = $37;$41 = $39;
  }
  $40 = (($41) + 2)|0;
  $42 = (($40|0) % 3)&-1;
  HEAP32[$$pre$phiZ2D>>2] = $42;
 }
 $43 = ((($this)) + 780|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($$|0)>($44|0);
 if ($45) {
  $46 = (($$) + 341)|0;
  $47 = (($46) - ($44))|0;
  $48 = (($47|0) / 341)&-1;
  $49 = ((($this)) + 784|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)<($44|0);
  if ($51) {
   $52 = (($50) + 341)|0;
   HEAP32[$49>>2] = $52;
   __ZN12Nes_Ppu_Impl10run_hblankEi($this,1);
   $$pre1 = HEAP32[$43>>2]|0;
   $$pre2 = HEAP32[$49>>2]|0;
   $$pre$phi6Z2D = $this;$55 = $$pre1;$59 = $$pre2;
  } else {
   $$pre$phi6Z2D = $this;$55 = $44;$59 = $50;
  }
  $53 = ($48*341)|0;
  $54 = (($55) + ($53))|0;
  HEAP32[$43>>2] = $54;
  $56 = (($48) + -1)|0;
  $57 = ($56*341)|0;
  $58 = (($59) + ($57))|0;
  HEAP32[$49>>2] = $58;
  $60 = ((($this)) + 6|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = ((($this)) + 788|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($48))|0;
  HEAP32[$62>>2] = $64;
  __ZN17Nes_Ppu_Rendering15draw_backgroundEii($this,$63,$48);
  HEAP16[$60>>1] = $61;
  __ZN12Nes_Ppu_Impl10run_hblankEi($$pre$phi6Z2D,$56);
  $$pre$phi8Z2D = $49;
 } else {
  $$pre7 = ((($this)) + 784|0);
  $$pre$phi8Z2D = $$pre7;
 }
 $65 = HEAP32[$$pre$phi8Z2D>>2]|0;
 $66 = ($65|0)<($$|0);
 if ($66) {
  $67 = (($65) + 341)|0;
  HEAP32[$$pre$phi8Z2D>>2] = $67;
  __ZN12Nes_Ppu_Impl10run_hblankEi($this,1);
  $68 = HEAP32[$43>>2]|0;
  $next_ppu_time$0 = $68;
 } else {
  $next_ppu_time$0 = $65;
 }
 $69 = HEAP32[$1>>2]|0;
 $70 = (($next_ppu_time$0) - ($69))|0;
 $71 = (($70|0) / 3)&-1;
 $72 = ((($this)) + 776|0);
 HEAP32[$72>>2] = $71;
 return;
}
function __ZN7Nes_Ppu13render_until_El($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 776|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($time|0);
 if ($2) {
  __ZN7Nes_Ppu16render_bg_until_El($this,$time);
 }
 $3 = ((($this)) + 780|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 752|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = (($7|0) / 3)&-1;
 $9 = ((($this)) + 796|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($this)) + 484|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 $13 = ((($this)) + 800|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 788|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) - ($14))|0;
 $18 = ($17|0)>(0);
 if (!($18)) {
  return;
 }
 HEAP32[$13>>2] = $16;
 $19 = ((($this)) + 488|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = Math_imul($20, $14)|0;
 $22 = (($11) + ($21)|0);
 __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$14,$17,$22,$20,2);
 return;
}
function __ZN7Nes_Ppu17update_sprite_hitEl($this,$cpu_time) {
 $this = $this|0;
 $cpu_time = $cpu_time|0;
 var $$ = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, $tmp1 = 0;
 var $y$x$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 72|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((($this)) + 75|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (__ZNK12Nes_Ppu_Impl24first_opaque_sprite_lineEv($this)|0);
 $tmp = (($6) + ($2))|0;
 $tmp1 = ($tmp*341)|0;
 $7 = (($5) + 7500)|0;
 $8 = (($7) + ($tmp1))|0;
 $9 = ($cpu_time*3)|0;
 $10 = ((($this)) + 752|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9))|0;
 $13 = ((($this)) + 808|0);
 HEAP32[$13>>2] = 1073741824;
 $14 = ($12|0)<($8|0);
 if ($14) {
  $15 = (($8) - ($11))|0;
  $16 = (($15|0) / 3)&-1;
  HEAP32[$13>>2] = $16;
  return;
 }
 $17 = (($12) + -7500)|0;
 $18 = (($17) - ($5))|0;
 $19 = (($18|0) / 341)&-1;
 $20 = (($19) + 2)|0;
 $21 = ($20|0)>(240);
 $$ = $21 ? 240 : $20;
 $22 = ((($this)) + 788|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<($$|0);
 if ($24) {
  $25 = ((($this)) + 776|0);
  $54 = $23;
  while(1) {
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + 1)|0;
   $28 = ($27|0)>($cpu_time|0);
   $y$x$i = $28 ? $27 : $cpu_time;
   $29 = ($26|0)<($y$x$i|0);
   if ($29) {
    __ZN7Nes_Ppu16render_bg_until_El($this,$y$x$i);
    $$pre = HEAP32[$22>>2]|0;
    $31 = $$pre;
   } else {
    $31 = $54;
   }
   $30 = ($31|0)<($$|0);
   if ($30) {
    $54 = $31;
   } else {
    $$lcssa = $31;
    break;
   }
  }
 } else {
  $$lcssa = $23;
 }
 $32 = ((($this)) + 492|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)<(0);
 if ($34) {
  return;
 }
 $35 = ($33|0)==(0);
 if ($35) {
  $36 = HEAP8[$3>>0]|0;
  $37 = $36&255;
  $38 = ($$lcssa*341)|0;
  $39 = HEAP32[$10>>2]|0;
  $40 = (($38) + 7159)|0;
  $41 = (($40) + ($37))|0;
  $42 = (($41) - ($39))|0;
  $43 = (($42|0) / 3)&-1;
  HEAP32[$13>>2] = $43;
  return;
 }
 $44 = (($33) + 7159)|0;
 $45 = ($12|0)<($44|0);
 if ($45) {
  $46 = HEAP32[$10>>2]|0;
  $47 = (($44) - ($46))|0;
  $48 = (($47|0) / 3)&-1;
  HEAP32[$13>>2] = $48;
  return;
 } else {
  $49 = ((($this)) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 | 64;
  $53 = $52&255;
  HEAP8[$49>>0] = $53;
  return;
 }
}
function __ZN7Nes_Ppu9read_2002El($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $$ = 0, $$$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi5Z2D = 0, $$pre$phi7Z2D = 0, $$pre$phi9Z2D = 0, $$pre4 = 0, $$pre6 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp = 0;
 var $storemerge$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 804|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 2272;
 $2 = ((($this)) + 752|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 2272;
 } else {
  $5 = (($3) + 7)|0;
  $6 = $5 >>> 2;
  $7 = $6 & 1;
  $phitmp = $7 | 2272;
  $10 = $phitmp;
 }
 $8 = ($1|0)<($time|0);
 $9 = ($10|0)<($time|0);
 $or$cond = $8 & $9;
 do {
  if ($or$cond) {
   $11 = ((($this)) + 760|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($this)) + 2|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = $15 & $12;
   $17 = $16&255;
   HEAP8[$13>>0] = $17;
   HEAP32[$11>>2] = -1;
   $18 = ((($this)) + 808|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)<($time|0);
   if ($20) {
    __ZN7Nes_Ppu17update_sprite_hitEl($this,$time);
   }
   $21 = ((($this)) + 812|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)<($time|0);
   do {
    if ($23) {
     $24 = HEAP32[$11>>2]|0;
     $25 = HEAP8[$13>>0]|0;
     $26 = $25&255;
     $27 = $26 & $24;
     $28 = $27&255;
     HEAP8[$13>>0] = $28;
     HEAP32[$11>>2] = -1;
     $29 = ((($this)) + 820|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($time*577)|0;
     $32 = (($31) + -1398071)|0;
     $33 = $32 >>> 16;
     HEAP32[$29>>2] = $33;
     $34 = ((($this)) + 816|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35|0)==(0);
     if ($36) {
      $37 = ((($this)) + 1|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 & 24;
      $40 = ($39<<24>>24)==(0);
      if ($40) {
       $53 = $22;
       break;
      }
      $41 = (__ZN12Nes_Ppu_Impl17recalc_sprite_maxEi($this,$30)|0);
      $42 = ($41|0)>(0);
      $43 = (($41|0) / 3)&-1;
      $44 = (($43) + 2423)|0;
      $storemerge$i$i$i = $42 ? $44 : 1073741824;
      HEAP32[$34>>2] = $storemerge$i$i$i;
      HEAP32[$21>>2] = $storemerge$i$i$i;
      $147 = $storemerge$i$i$i;$46 = $storemerge$i$i$i;
     } else {
      $147 = $22;$46 = $35;
     }
     $45 = ($46|0)<($time|0);
     if ($45) {
      $47 = HEAP8[$13>>0]|0;
      $48 = $47&255;
      $49 = $48 | 32;
      $50 = $49&255;
      HEAP8[$13>>0] = $50;
      HEAP32[$21>>2] = 1073741824;
      $53 = 1073741824;
     } else {
      $53 = $147;
     }
    } else {
     $53 = $22;
    }
   } while(0);
   $51 = HEAP32[$18>>2]|0;
   $52 = ($51|0)>($53|0);
   $$ = $52 ? $53 : $51;
   HEAP32[$0>>2] = $$;
   $54 = ((($this)) + 44|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = ((($this)) + 46|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = ($55&65535)<($57&65535);
   $$$i = $58 ? $55 : $57;
   $59 = $$$i&65535;
   $60 = ($59|0)<($time|0);
   if ($60) {
    HEAP32[$0>>2] = $59;
    $61 = $55&65535;
    $62 = ($61|0)>($time|0);
    if (!($62)) {
     $63 = ((($this)) + 48|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $66 = $65 & 224;
     $67 = $66&255;
     HEAP8[$63>>0] = $67;
    }
    $68 = $57&65535;
    $69 = ($68|0)>($time|0);
    if ($69) {
     $77 = $59;
    } else {
     $70 = ((($this)) + 48|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = $72 & 31;
     $74 = $73&255;
     HEAP8[$70>>0] = $74;
     $77 = $59;
    }
   } else {
    $77 = $$;
   }
   $75 = ($time|0)>(29770);
   if ($75) {
    $76 = ($77|0)>(29770);
    if ($76) {
     HEAP32[$0>>2] = 29770;
    }
    $78 = ((($this)) + 772|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ($79<<24>>24)==(0);
    if ($80) {
     $81 = ((($this)) + 776|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)<($time|0);
     if ($83) {
      __ZN7Nes_Ppu16render_bg_until_El($this,$time);
     }
     $84 = ((($this)) + 764|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)>($time|0);
     if ($86) {
      $102 = $85;
     } else {
      $87 = HEAP8[$13>>0]|0;
      $88 = $87&255;
      $89 = $88 | 128;
      $90 = $89&255;
      HEAP8[$13>>0] = $90;
      HEAP8[$78>>0] = 1;
      $91 = HEAP8[$this>>0]|0;
      $92 = ($91<<24>>24)<(0);
      if ($92) {
       $93 = (($85) + 2)|0;
       $94 = ((($this)) + 768|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = $95 >> 1;
       $97 = (($93) - ($96))|0;
       $98 = ((($this)) + 756|0);
       HEAP32[$98>>2] = $97;
       $102 = $85;
      } else {
       $102 = $85;
      }
     }
    } else {
     $$phi$trans$insert = ((($this)) + 764|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $102 = $$pre;
    }
    $99 = HEAP32[$2>>2]|0;
    $100 = ($99|0)==(1);
    if ($100) {
     $104 = (($102) + -1)|0;
     $105 = ($104|0)==($time|0);
     if (!($105)) {
      $$pre$phi5Z2D = $13;$$pre$phi7Z2D = $56;$$pre$phi9Z2D = $54;
      break;
     }
     $106 = HEAP8[$13>>0]|0;
     $107 = $106&255;
     $108 = $107 & 127;
     $109 = $108&255;
     HEAP8[$13>>0] = $109;
     HEAP8[$78>>0] = 1;
     $110 = ((($this)) + 756|0);
     HEAP32[$110>>2] = 1073741824;
     $$pre$phi5Z2D = $13;$$pre$phi7Z2D = $56;$$pre$phi9Z2D = $54;
     break;
    } else {
     $101 = ($102|0)==($time|0);
     if (!($101)) {
      $$pre$phi5Z2D = $13;$$pre$phi7Z2D = $56;$$pre$phi9Z2D = $54;
      break;
     }
     $103 = ((($this)) + 756|0);
     HEAP32[$103>>2] = 1073741824;
     $$pre$phi5Z2D = $13;$$pre$phi7Z2D = $56;$$pre$phi9Z2D = $54;
     break;
    }
   } else {
    $$pre$phi5Z2D = $13;$$pre$phi7Z2D = $56;$$pre$phi9Z2D = $54;
   }
  } else {
   $$pre4 = ((($this)) + 2|0);
   $$pre6 = ((($this)) + 46|0);
   $$pre8 = ((($this)) + 44|0);
   $$pre$phi5Z2D = $$pre4;$$pre$phi7Z2D = $$pre6;$$pre$phi9Z2D = $$pre8;
  }
 } while(0);
 $111 = ((($this)) + 748|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = HEAP32[$0>>2]|0;
 $114 = (($113) + -1)|0;
 $115 = ((($112)) + 3108|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($114) - ($116))|0;
 $118 = ((($112)) + 3076|0);
 HEAP32[$118>>2] = $117;
 $119 = HEAP8[$$pre$phi5Z2D>>0]|0;
 $120 = $119&255;
 $121 = ((($this)) + 5|0);
 HEAP8[$121>>0] = 0;
 $122 = $120 & 127;
 $123 = $122&255;
 HEAP8[$$pre$phi5Z2D>>0] = $123;
 $124 = ((($this)) + 48|0);
 $125 = HEAP8[$124>>0]|0;
 $126 = $125&255;
 $127 = $126 & 31;
 $128 = $120 & 224;
 $129 = $127 | $128;
 $130 = $129&255;
 HEAP8[$124>>0] = $130;
 $131 = (($time) + 11366)|0;
 $132 = $131&65535;
 HEAP16[$$pre$phi7Z2D>>1] = $132;
 $133 = HEAP16[$$pre$phi9Z2D>>1]|0;
 $134 = $133&65535;
 $135 = ($134|0)>($time|0);
 if ($135) {
  $140 = $130;
 } else {
  $136 = $128&255;
  HEAP8[$124>>0] = $136;
  $140 = $136;
 }
 $137 = $131 & 65535;
 $138 = ($137|0)>($time|0);
 if ($138) {
  $144 = $140;
  $143 = $144&255;
  $145 = $143 & 31;
  $146 = $145 | $128;
  return ($146|0);
 }
 $139 = $140&255;
 $141 = $139 & 31;
 $142 = $141&255;
 HEAP8[$124>>0] = $142;
 $144 = $142;
 $143 = $144&255;
 $145 = $143 & 31;
 $146 = $145 | $128;
 return ($146|0);
}
function __ZN7Nes_Ppu11dma_spritesElPKv($this,$time,$in) {
 $this = $this|0;
 $time = $time|0;
 $in = $in|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 796|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($time|0);
 if ($2) {
  $3 = ((($this)) + 776|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($time|0);
  if ($5) {
   __ZN7Nes_Ppu16render_bg_until_El($this,$time);
  }
  $6 = ((($this)) + 780|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($this)) + 752|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) - ($9))|0;
  $11 = (($10|0) / 3)&-1;
  HEAP32[$0>>2] = $11;
  $12 = ((($this)) + 484|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = ((($this)) + 800|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($this)) + 788|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) - ($16))|0;
   $20 = ($19|0)>(0);
   if ($20) {
    HEAP32[$15>>2] = $18;
    $21 = ((($this)) + 488|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = Math_imul($22, $16)|0;
    $24 = (($13) + ($23)|0);
    __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$16,$19,$24,$22,2);
   }
  }
 }
 $25 = ((($this)) + 2|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 & 32;
 $28 = ($27<<24>>24)==(0);
 if (!($28)) {
  $59 = ((($this)) + 3|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (((($this)) + 72|0) + ($61)|0);
  $63 = (256 - ($61))|0;
  _memcpy(($62|0),($in|0),($63|0))|0;
  $64 = ((($this)) + 72|0);
  $65 = (($in) + ($63)|0);
  _memcpy(($64|0),($65|0),($61|0))|0;
  return;
 }
 $29 = ((($this)) + 812|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)<($time|0);
 do {
  if ($31) {
   $32 = ((($this)) + 760|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $26&255;
   $35 = $33 & $34;
   $36 = $35&255;
   HEAP8[$25>>0] = $36;
   HEAP32[$32>>2] = -1;
   $37 = ((($this)) + 820|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($time*577)|0;
   $40 = (($39) + -1398071)|0;
   $41 = $40 >>> 16;
   HEAP32[$37>>2] = $41;
   $42 = ((($this)) + 816|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = ((($this)) + 1|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 & 24;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $$pre$phi$iZ2D = $42;
     break;
    }
    $49 = (__ZN12Nes_Ppu_Impl17recalc_sprite_maxEi($this,$38)|0);
    $50 = ($49|0)>(0);
    $51 = (($49|0) / 3)&-1;
    $52 = (($51) + 2423)|0;
    $storemerge$i$i$i = $50 ? $52 : 1073741824;
    HEAP32[$42>>2] = $storemerge$i$i$i;
    HEAP32[$29>>2] = $storemerge$i$i$i;
    $54 = $storemerge$i$i$i;
   } else {
    $54 = $43;
   }
   $53 = ($54|0)<($time|0);
   if ($53) {
    $55 = HEAP8[$25>>0]|0;
    $56 = $55&255;
    $57 = $56 | 32;
    $58 = $57&255;
    HEAP8[$25>>0] = $58;
    HEAP32[$29>>2] = 1073741824;
    $$pre$phi$iZ2D = $42;
   } else {
    $$pre$phi$iZ2D = $42;
   }
  } else {
   $$pre$i = ((($this)) + 816|0);
   $$pre$phi$iZ2D = $$pre$i;
  }
 } while(0);
 HEAP32[$29>>2] = 2423;
 HEAP32[$$pre$phi$iZ2D>>2] = 0;
 $59 = ((($this)) + 3|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = (((($this)) + 72|0) + ($61)|0);
 $63 = (256 - ($61))|0;
 _memcpy(($62|0),($in|0),($63|0))|0;
 $64 = ((($this)) + 72|0);
 $65 = (($in) + ($63)|0);
 _memcpy(($64|0),($65|0),($61|0))|0;
 return;
}
function __ZN7Nes_Ppu4readEjl($this,$addr,$time) {
 $this = $this|0;
 $addr = $addr|0;
 $time = $time|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$addr$i$i = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr & 7;
 switch ($0|0) {
 case 2:  {
  $1 = (__ZN7Nes_Ppu9read_2002El($this,$time)|0);
  $$0 = $1;
  return ($$0|0);
  break;
 }
 case 4:  {
  $2 = ((($this)) + 3|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (((($this)) + 72|0) + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $4 & 3;
  $9 = ($8|0)==(2);
  $10 = $7 & 227;
  $$ = $9 ? $10 : $7;
  $11 = ((($this)) + 48|0);
  $12 = $$&255;
  HEAP8[$11>>0] = $12;
  $13 = (($time) + 11366)|0;
  $14 = $13&65535;
  $15 = ((($this)) + 44|0);
  HEAP16[$15>>1] = $14;
  $16 = ((($this)) + 46|0);
  HEAP16[$16>>1] = $14;
  $$0 = $$;
  return ($$0|0);
  break;
 }
 case 7:  {
  $17 = ((($this)) + 776|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<($time|0);
  if ($19) {
   __ZN7Nes_Ppu16render_bg_until_El($this,$time);
  }
  $20 = ((($this)) + 6|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = ((($this)) + 328|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + ($24))|0;
  $26 = $25&65535;
  HEAP16[$20>>1] = $26;
  $27 = $22 & 4096;
  $28 = $27 ^ 4096;
  $29 = $28 & $25;
  $30 = ($29|0)==(0);
  if ($30) {
   $addr1$0 = $22;
  } else {
   $31 = ((($this)) + 748|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 2240|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 56|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 1023]($34);
   $38 = HEAP16[$20>>1]|0;
   $39 = $38&65535;
   $40 = HEAP32[$23>>2]|0;
   $41 = (($39) - ($40))|0;
   $addr1$0 = $41;
  }
  $42 = $addr1$0 & 16383;
  $43 = ((($this)) + 4|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($42>>>0)<(8192);
  if ($46) {
   $47 = $42 >>> 10;
   $48 = (((($this)) + 344|0) + ($47<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($42))|0;
   $51 = ((($this)) + 392|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($50)|0);
   $54 = HEAP8[$53>>0]|0;
   HEAP8[$43>>0] = $54;
   $$0$i = $45;
  } else {
   $55 = $addr1$0 & 1023;
   $56 = $addr1$0 >>> 10;
   $57 = $56 & 3;
   $58 = (((($this)) + 376|0) + ($57<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($55)|0);
   $61 = HEAP8[$60>>0]|0;
   HEAP8[$43>>0] = $61;
   $62 = ($42>>>0)>(16127);
   if ($62) {
    $63 = $addr1$0 & 3;
    $64 = ($63|0)==(0);
    $65 = $addr1$0 & 15;
    $$addr$i$i = $64 ? $65 : $addr1$0;
    $66 = $$addr$i$i & 31;
    $67 = (((($this)) + 12|0) + ($66)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = ((($this)) + 48|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = $72 & 192;
    $74 = $73 | $69;
    $$0$i = $74;
   } else {
    $$0$i = $45;
   }
  }
  $75 = ($42>>>0)>(16127);
  $76 = $75 ? 63 : -1;
  $77 = ((($this)) + 48|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $76 ^ 255;
  $81 = $79 & $80;
  $82 = $$0$i & $76;
  $83 = $81 | $82;
  $84 = $83&255;
  HEAP8[$77>>0] = $84;
  $85 = (($time) + 11366)|0;
  $86 = $85&65535;
  $87 = ((($this)) + 44|0);
  HEAP16[$87>>1] = $86;
  $88 = ((($this)) + 46|0);
  HEAP16[$88>>1] = $86;
  $$0 = $$0$i;
  return ($$0|0);
  break;
 }
 default: {
  $89 = ((($this)) + 44|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90&65535;
  $92 = ($91|0)>($time|0);
  if (!($92)) {
   $93 = ((($this)) + 48|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = $95 & 224;
   $97 = $96&255;
   HEAP8[$93>>0] = $97;
  }
  $98 = ((($this)) + 46|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = ($100|0)>($time|0);
  $$phi$trans$insert = ((($this)) + 48|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  if ($101) {
   $106 = $$pre;
  } else {
   $102 = $$pre&255;
   $103 = $102 & 31;
   $104 = $103&255;
   HEAP8[$$phi$trans$insert>>0] = $104;
   $106 = $104;
  }
  $105 = $106&255;
  $$0 = $105;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN7Nes_Ppu5writeElji($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$i15 = 0, $$pre$i7 = 0, $$pre$phi$i10Z2D = 0, $$pre$phi$i18Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge$i$i$i = 0, $storemerge$i$i$i17 = 0, $storemerge$i$i$i9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr & 7;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1&255;
  $3 = $2 ^ $data;
  $4 = $3 & 40;
  $5 = ($4|0)==(0);
  do {
   if ($5) {
    $31 = $3 & 16;
    $32 = ($31|0)==(0);
    if (!($32)) {
     $33 = ((($this)) + 776|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)<($time|0);
     if (!($35)) {
      break;
     }
     __ZN7Nes_Ppu16render_bg_until_El($this,$time);
     break;
    }
    $36 = $data << 10;
    $37 = ((($this)) + 8|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38&65535;
    $40 = $39 ^ $36;
    $41 = $40 & 3072;
    $42 = ($41|0)==(0);
    if (!($42)) {
     $43 = ((($this)) + 776|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)<($time|0);
     if ($45) {
      __ZN7Nes_Ppu16render_bg_until_El($this,$time);
     }
    }
   } else {
    $6 = ((($this)) + 796|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)<($time|0);
    if ($8) {
     $9 = ((($this)) + 776|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)<($time|0);
     if ($11) {
      __ZN7Nes_Ppu16render_bg_until_El($this,$time);
     }
     $12 = ((($this)) + 780|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($this)) + 752|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) - ($15))|0;
     $17 = (($16|0) / 3)&-1;
     HEAP32[$6>>2] = $17;
     $18 = ((($this)) + 484|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)==(0|0);
     if (!($20)) {
      $21 = ((($this)) + 800|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($this)) + 788|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($24) - ($22))|0;
      $26 = ($25|0)>(0);
      if ($26) {
       HEAP32[$21>>2] = $24;
       $27 = ((($this)) + 488|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = Math_imul($28, $22)|0;
       $30 = (($19) + ($29)|0);
       __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$22,$25,$30,$28,2);
      }
     }
    }
   }
  } while(0);
  $46 = $3 & 128;
  $47 = ($46|0)==(0);
  if (!($47)) {
   $48 = ((($this)) + 752|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + 7)|0;
   $51 = $50 >>> 2;
   $52 = $51 & 1;
   $53 = $52 | 2272;
   $54 = ($53|0)<($time|0);
   if ($54) {
    $55 = ((($this)) + 760|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($this)) + 2|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $59 & $56;
    $61 = $60&255;
    HEAP8[$57>>0] = $61;
    HEAP32[$55>>2] = -1;
    $$pre$phiZ2D = $57;$64 = $61;
   } else {
    $$phi$trans$insert = ((($this)) + 2|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    $$pre$phiZ2D = $$phi$trans$insert;$64 = $$pre;
   }
   $62 = $data & 128;
   $63 = $64&255;
   $65 = $62 & $63;
   $66 = ($65|0)==(0);
   if (!($66)) {
    $67 = (($time) + 2)|0;
    $68 = ((($this)) + 756|0);
    HEAP32[$68>>2] = $67;
    $69 = ((($this)) + 748|0);
    $70 = HEAP32[$69>>2]|0;
    __ZN8Nes_Core13event_changedEv($70);
   }
   $71 = ($time|0)>(29769);
   if ($71) {
    $72 = (($time) + -1)|0;
    $73 = HEAP32[$48>>2]|0;
    $74 = $73 & 1;
    $75 = (($72) + ($74))|0;
    $76 = ((($this)) + 772|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ($77<<24>>24)==(0);
    if ($78) {
     $79 = ((($this)) + 776|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)<($75|0);
     if ($81) {
      __ZN7Nes_Ppu16render_bg_until_El($this,$75);
     }
     $82 = ((($this)) + 764|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)>($75|0);
     if (!($84)) {
      $85 = HEAP8[$$pre$phiZ2D>>0]|0;
      $86 = $85&255;
      $87 = $86 | 128;
      $88 = $87&255;
      HEAP8[$$pre$phiZ2D>>0] = $88;
      HEAP8[$76>>0] = 1;
      $89 = HEAP8[$this>>0]|0;
      $90 = ($89<<24>>24)<(0);
      if ($90) {
       $91 = (($83) + 2)|0;
       $92 = ((($this)) + 768|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = $93 >> 1;
       $95 = (($91) - ($94))|0;
       $96 = ((($this)) + 756|0);
       HEAP32[$96>>2] = $95;
      }
     }
    }
   }
  }
  $97 = ((($this)) + 8|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98&65535;
  $100 = $99 & 62463;
  $101 = $data << 10;
  $102 = $101 & 3072;
  $103 = $100 | $102;
  $104 = $103&65535;
  HEAP16[$97>>1] = $104;
  $105 = $3 & 32;
  $106 = ($105|0)==(0);
  if (!($106)) {
   $107 = ((($this)) + 2|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108 & 32;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $111 = ((($this)) + 812|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)<($time|0);
    do {
     if ($113) {
      $114 = ((($this)) + 760|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $108&255;
      $117 = $115 & $116;
      $118 = $117&255;
      HEAP8[$107>>0] = $118;
      HEAP32[$114>>2] = -1;
      $119 = ((($this)) + 820|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($time*577)|0;
      $122 = (($121) + -1398071)|0;
      $123 = $122 >>> 16;
      HEAP32[$119>>2] = $123;
      $124 = ((($this)) + 816|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)==(0);
      if ($126) {
       $127 = ((($this)) + 1|0);
       $128 = HEAP8[$127>>0]|0;
       $129 = $128 & 24;
       $130 = ($129<<24>>24)==(0);
       if ($130) {
        $$pre$phi$iZ2D = $124;
        break;
       }
       $131 = (__ZN12Nes_Ppu_Impl17recalc_sprite_maxEi($this,$120)|0);
       $132 = ($131|0)>(0);
       $133 = (($131|0) / 3)&-1;
       $134 = (($133) + 2423)|0;
       $storemerge$i$i$i = $132 ? $134 : 1073741824;
       HEAP32[$124>>2] = $storemerge$i$i$i;
       HEAP32[$111>>2] = $storemerge$i$i$i;
       $136 = $storemerge$i$i$i;
      } else {
       $136 = $125;
      }
      $135 = ($136|0)<($time|0);
      if ($135) {
       $137 = HEAP8[$107>>0]|0;
       $138 = $137&255;
       $139 = $138 | 32;
       $140 = $139&255;
       HEAP8[$107>>0] = $140;
       HEAP32[$111>>2] = 1073741824;
       $$pre$phi$iZ2D = $124;
      } else {
       $$pre$phi$iZ2D = $124;
      }
     } else {
      $$pre$i = ((($this)) + 816|0);
      $$pre$phi$iZ2D = $$pre$i;
     }
    } while(0);
    HEAP32[$111>>2] = 2423;
    HEAP32[$$pre$phi$iZ2D>>2] = 0;
   }
  }
  $141 = $data&255;
  HEAP8[$this>>0] = $141;
  $142 = $data & 4;
  $143 = ($142|0)!=(0);
  $144 = $143 ? 32 : 1;
  $145 = ((($this)) + 328|0);
  HEAP32[$145>>2] = $144;
  $402 = ((($this)) + 48|0);
  $403 = $data&255;
  HEAP8[$402>>0] = $403;
  $404 = (($time) + 11366)|0;
  $405 = $404&65535;
  $406 = ((($this)) + 44|0);
  HEAP16[$406>>1] = $405;
  $407 = ((($this)) + 46|0);
  HEAP16[$407>>1] = $405;
  return;
  break;
 }
 case 1:  {
  $146 = ((($this)) + 1|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147&255;
  $149 = $148 ^ $data;
  $150 = $149 & 225;
  $151 = ($150|0)==(0);
  if (!($151)) {
   $152 = (($time) + 1)|0;
   $153 = ((($this)) + 796|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ($154|0)<($152|0);
   if ($155) {
    $156 = ((($this)) + 776|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)<($152|0);
    if ($158) {
     __ZN7Nes_Ppu16render_bg_until_El($this,$152);
    }
    $159 = ((($this)) + 780|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ((($this)) + 752|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (($160) - ($162))|0;
    $164 = (($163|0) / 3)&-1;
    HEAP32[$153>>2] = $164;
    $165 = ((($this)) + 484|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==(0|0);
    if (!($167)) {
     $168 = ((($this)) + 800|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ((($this)) + 788|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (($171) - ($169))|0;
     $173 = ($172|0)>(0);
     if ($173) {
      HEAP32[$168>>2] = $171;
      $174 = ((($this)) + 488|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = Math_imul($175, $169)|0;
      $177 = (($166) + ($176)|0);
      __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$169,$172,$177,$175,2);
     }
    }
   }
   $178 = ((($this)) + 336|0);
   HEAP32[$178>>2] = 24;
  }
  $179 = $149 & 20;
  $180 = ($179|0)==(0);
  if ($180) {
   $207 = $149 & 10;
   $208 = ($207|0)==(0);
   if (!($208)) {
    $209 = (($time) + 1)|0;
    $210 = ((($this)) + 776|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ($211|0)<($209|0);
    if ($212) {
     __ZN7Nes_Ppu16render_bg_until_El($this,$209);
    }
   }
  } else {
   $181 = (($time) + 1)|0;
   $182 = ((($this)) + 796|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ($183|0)<($181|0);
   if ($184) {
    $185 = ((($this)) + 776|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = ($186|0)<($181|0);
    if ($187) {
     __ZN7Nes_Ppu16render_bg_until_El($this,$181);
    }
    $188 = ((($this)) + 780|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ((($this)) + 752|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = (($189) - ($191))|0;
    $193 = (($192|0) / 3)&-1;
    HEAP32[$182>>2] = $193;
    $194 = ((($this)) + 484|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($195|0)==(0|0);
    if (!($196)) {
     $197 = ((($this)) + 800|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ((($this)) + 788|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($200) - ($198))|0;
     $202 = ($201|0)>(0);
     if ($202) {
      HEAP32[$197>>2] = $200;
      $203 = ((($this)) + 488|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = Math_imul($204, $198)|0;
      $206 = (($195) + ($205)|0);
      __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$198,$201,$206,$204,2);
     }
    }
   }
  }
  $213 = $149 & 8;
  $214 = ($213|0)!=(0);
  if ($214) {
   $215 = ((($this)) + 748|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ((($216)) + 2240|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = HEAP32[$218>>2]|0;
   $220 = ((($219)) + 36|0);
   $221 = HEAP32[$220>>2]|0;
   FUNCTION_TABLE_vii[$221 & 1023]($218,$time);
  }
  $222 = HEAP8[$146>>0]|0;
  $223 = $222 & 24;
  $224 = ($223<<24>>24)==(0);
  $225 = $data & 24;
  $226 = ($225|0)==(0);
  $227 = $226 ^ $224;
  if ($227) {
   $228 = ((($this)) + 2|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229 & 32;
   $231 = ($230<<24>>24)==(0);
   if ($231) {
    $232 = ((($this)) + 812|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = ($233|0)<($time|0);
    do {
     if ($234) {
      $235 = ((($this)) + 760|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = $229&255;
      $238 = $236 & $237;
      $239 = $238&255;
      HEAP8[$228>>0] = $239;
      HEAP32[$235>>2] = -1;
      $240 = ((($this)) + 820|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = ($time*577)|0;
      $243 = (($242) + -1398071)|0;
      $244 = $243 >>> 16;
      HEAP32[$240>>2] = $244;
      $245 = ((($this)) + 816|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = ($246|0)==(0);
      if ($247) {
       if ($224) {
        $$pre$phi$i10Z2D = $245;
        break;
       }
       $248 = (__ZN12Nes_Ppu_Impl17recalc_sprite_maxEi($this,$241)|0);
       $249 = ($248|0)>(0);
       $250 = (($248|0) / 3)&-1;
       $251 = (($250) + 2423)|0;
       $storemerge$i$i$i9 = $249 ? $251 : 1073741824;
       HEAP32[$245>>2] = $storemerge$i$i$i9;
       HEAP32[$232>>2] = $storemerge$i$i$i9;
       $253 = $storemerge$i$i$i9;
      } else {
       $253 = $246;
      }
      $252 = ($253|0)<($time|0);
      if ($252) {
       $254 = HEAP8[$228>>0]|0;
       $255 = $254&255;
       $256 = $255 | 32;
       $257 = $256&255;
       HEAP8[$228>>0] = $257;
       HEAP32[$232>>2] = 1073741824;
       $$pre$phi$i10Z2D = $245;
      } else {
       $$pre$phi$i10Z2D = $245;
      }
     } else {
      $$pre$i7 = ((($this)) + 816|0);
      $$pre$phi$i10Z2D = $$pre$i7;
     }
    } while(0);
    HEAP32[$232>>2] = 2423;
    HEAP32[$$pre$phi$i10Z2D>>2] = 0;
   }
  }
  $258 = $data&255;
  HEAP8[$146>>0] = $258;
  if (!($214)) {
   $402 = ((($this)) + 48|0);
   $403 = $data&255;
   HEAP8[$402>>0] = $403;
   $404 = (($time) + 11366)|0;
   $405 = $404&65535;
   $406 = ((($this)) + 44|0);
   HEAP16[$406>>1] = $405;
   $407 = ((($this)) + 46|0);
   HEAP16[$407>>1] = $405;
   return;
  }
  $259 = ((($this)) + 748|0);
  $260 = HEAP32[$259>>2]|0;
  __ZN8Nes_Core11irq_changedEv($260);
  $402 = ((($this)) + 48|0);
  $403 = $data&255;
  HEAP8[$402>>0] = $403;
  $404 = (($time) + 11366)|0;
  $405 = $404&65535;
  $406 = ((($this)) + 44|0);
  HEAP16[$406>>1] = $405;
  $407 = ((($this)) + 46|0);
  HEAP16[$407>>1] = $405;
  return;
  break;
 }
 case 3:  {
  $261 = $data&255;
  $262 = ((($this)) + 3|0);
  HEAP8[$262>>0] = $261;
  $263 = ((($this)) + 48|0);
  HEAP8[$263>>0] = $261;
  $264 = (($time) + 11366)|0;
  $265 = $264&65535;
  $266 = ((($this)) + 44|0);
  HEAP16[$266>>1] = $265;
  $267 = ((($this)) + 46|0);
  HEAP16[$267>>1] = $265;
  $402 = ((($this)) + 48|0);
  $403 = $data&255;
  HEAP8[$402>>0] = $403;
  $404 = (($time) + 11366)|0;
  $405 = $404&65535;
  $406 = ((($this)) + 44|0);
  HEAP16[$406>>1] = $405;
  $407 = ((($this)) + 46|0);
  HEAP16[$407>>1] = $405;
  return;
  break;
 }
 case 4:  {
  $268 = ($time|0)>(2407);
  if ($268) {
   $269 = ((($this)) + 796|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = ($270|0)<($time|0);
   if ($271) {
    $272 = ((($this)) + 776|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ($273|0)<($time|0);
    if ($274) {
     __ZN7Nes_Ppu16render_bg_until_El($this,$time);
    }
    $275 = ((($this)) + 780|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = ((($this)) + 752|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = (($276) - ($278))|0;
    $280 = (($279|0) / 3)&-1;
    HEAP32[$269>>2] = $280;
    $281 = ((($this)) + 484|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = ($282|0)==(0|0);
    if (!($283)) {
     $284 = ((($this)) + 800|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ((($this)) + 788|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = (($287) - ($285))|0;
     $289 = ($288|0)>(0);
     if ($289) {
      HEAP32[$284>>2] = $287;
      $290 = ((($this)) + 488|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = Math_imul($291, $285)|0;
      $293 = (($282) + ($292)|0);
      __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$285,$288,$293,$291,2);
     }
    }
   }
   $294 = ((($this)) + 2|0);
   $295 = HEAP8[$294>>0]|0;
   $296 = $295 & 32;
   $297 = ($296<<24>>24)==(0);
   if ($297) {
    $298 = ((($this)) + 812|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = ($299|0)<($time|0);
    do {
     if ($300) {
      $301 = ((($this)) + 760|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $295&255;
      $304 = $302 & $303;
      $305 = $304&255;
      HEAP8[$294>>0] = $305;
      HEAP32[$301>>2] = -1;
      $306 = ((($this)) + 820|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = ($time*577)|0;
      $309 = (($308) + -1398071)|0;
      $310 = $309 >>> 16;
      HEAP32[$306>>2] = $310;
      $311 = ((($this)) + 816|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = ($312|0)==(0);
      if ($313) {
       $314 = ((($this)) + 1|0);
       $315 = HEAP8[$314>>0]|0;
       $316 = $315 & 24;
       $317 = ($316<<24>>24)==(0);
       if ($317) {
        $$pre$phi$i18Z2D = $311;
        break;
       }
       $318 = (__ZN12Nes_Ppu_Impl17recalc_sprite_maxEi($this,$307)|0);
       $319 = ($318|0)>(0);
       $320 = (($318|0) / 3)&-1;
       $321 = (($320) + 2423)|0;
       $storemerge$i$i$i17 = $319 ? $321 : 1073741824;
       HEAP32[$311>>2] = $storemerge$i$i$i17;
       HEAP32[$298>>2] = $storemerge$i$i$i17;
       $323 = $storemerge$i$i$i17;
      } else {
       $323 = $312;
      }
      $322 = ($323|0)<($time|0);
      if ($322) {
       $324 = HEAP8[$294>>0]|0;
       $325 = $324&255;
       $326 = $325 | 32;
       $327 = $326&255;
       HEAP8[$294>>0] = $327;
       HEAP32[$298>>2] = 1073741824;
       $$pre$phi$i18Z2D = $311;
      } else {
       $$pre$phi$i18Z2D = $311;
      }
     } else {
      $$pre$i15 = ((($this)) + 816|0);
      $$pre$phi$i18Z2D = $$pre$i15;
     }
    } while(0);
    HEAP32[$298>>2] = 2423;
    HEAP32[$$pre$phi$i18Z2D>>2] = 0;
   }
  }
  $328 = $data&255;
  $329 = ((($this)) + 3|0);
  $330 = HEAP8[$329>>0]|0;
  $331 = $330&255;
  $332 = (((($this)) + 72|0) + ($331)|0);
  HEAP8[$332>>0] = $328;
  $333 = (($331) + 1)|0;
  $334 = $333&255;
  HEAP8[$329>>0] = $334;
  $402 = ((($this)) + 48|0);
  $403 = $data&255;
  HEAP8[$402>>0] = $403;
  $404 = (($time) + 11366)|0;
  $405 = $404&65535;
  $406 = ((($this)) + 44|0);
  HEAP16[$406>>1] = $405;
  $407 = ((($this)) + 46|0);
  HEAP16[$407>>1] = $405;
  return;
  break;
 }
 case 5:  {
  $335 = ((($this)) + 776|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = ($336|0)<($time|0);
  if ($337) {
   __ZN7Nes_Ppu16render_bg_until_El($this,$time);
  }
  $338 = ((($this)) + 5|0);
  $339 = HEAP8[$338>>0]|0;
  $340 = $339&255;
  $341 = $340 ^ 1;
  $342 = $341&255;
  HEAP8[$338>>0] = $342;
  $343 = ($342<<24>>24)==(0);
  if ($343) {
   $354 = ((($this)) + 8|0);
   $355 = HEAP16[$354>>1]|0;
   $356 = $355&65535;
   $357 = $356 & 35871;
   $358 = $data << 12;
   $359 = $358 & 28672;
   $360 = $data << 2;
   $361 = $360 & 992;
   $362 = $361 | $359;
   $363 = $362 | $357;
   $364 = $363&65535;
   HEAP16[$354>>1] = $364;
   $402 = ((($this)) + 48|0);
   $403 = $data&255;
   HEAP8[$402>>0] = $403;
   $404 = (($time) + 11366)|0;
   $405 = $404&65535;
   $406 = ((($this)) + 44|0);
   HEAP16[$406>>1] = $405;
   $407 = ((($this)) + 46|0);
   HEAP16[$407>>1] = $405;
   return;
  } else {
   $344 = $data & 7;
   $345 = $344&255;
   $346 = ((($this)) + 10|0);
   HEAP8[$346>>0] = $345;
   $347 = ((($this)) + 8|0);
   $348 = HEAP16[$347>>1]|0;
   $349 = $348&65535;
   $350 = $349 & 65504;
   $351 = $data >>> 3;
   $352 = $350 | $351;
   $353 = $352&65535;
   HEAP16[$347>>1] = $353;
   $402 = ((($this)) + 48|0);
   $403 = $data&255;
   HEAP8[$402>>0] = $403;
   $404 = (($time) + 11366)|0;
   $405 = $404&65535;
   $406 = ((($this)) + 44|0);
   HEAP16[$406>>1] = $405;
   $407 = ((($this)) + 46|0);
   HEAP16[$407>>1] = $405;
   return;
  }
  break;
 }
 case 6:  {
  $365 = ((($this)) + 776|0);
  $366 = HEAP32[$365>>2]|0;
  $367 = ($366|0)<($time|0);
  if ($367) {
   __ZN7Nes_Ppu16render_bg_until_El($this,$time);
  }
  $368 = ((($this)) + 5|0);
  $369 = HEAP8[$368>>0]|0;
  $370 = $369&255;
  $371 = $370 ^ 1;
  $372 = $371&255;
  HEAP8[$368>>0] = $372;
  $373 = ($372<<24>>24)==(0);
  if (!($373)) {
   $374 = ((($this)) + 8|0);
   $375 = HEAP16[$374>>1]|0;
   $376 = $375&65535;
   $377 = $376 & 255;
   $378 = $data << 8;
   $379 = $378 & 16128;
   $380 = $377 | $379;
   $381 = $380&65535;
   HEAP16[$374>>1] = $381;
   $402 = ((($this)) + 48|0);
   $403 = $data&255;
   HEAP8[$402>>0] = $403;
   $404 = (($time) + 11366)|0;
   $405 = $404&65535;
   $406 = ((($this)) + 44|0);
   HEAP16[$406>>1] = $405;
   $407 = ((($this)) + 46|0);
   HEAP16[$407>>1] = $405;
   return;
  }
  $382 = ((($this)) + 6|0);
  $383 = HEAP16[$382>>1]|0;
  $384 = $383&65535;
  $385 = ((($this)) + 8|0);
  $386 = HEAP16[$385>>1]|0;
  $387 = $386&65535;
  $388 = $387 & 65280;
  $389 = $388 | $data;
  $390 = $389&65535;
  HEAP16[$385>>1] = $390;
  HEAP16[$382>>1] = $390;
  $391 = $384 & 4096;
  $392 = $391 ^ 4096;
  $393 = $392 & $387;
  $394 = ($393|0)==(0);
  if ($394) {
   $402 = ((($this)) + 48|0);
   $403 = $data&255;
   HEAP8[$402>>0] = $403;
   $404 = (($time) + 11366)|0;
   $405 = $404&65535;
   $406 = ((($this)) + 44|0);
   HEAP16[$406>>1] = $405;
   $407 = ((($this)) + 46|0);
   HEAP16[$407>>1] = $405;
   return;
  }
  $395 = ((($this)) + 748|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = ((($396)) + 2240|0);
  $398 = HEAP32[$397>>2]|0;
  $399 = HEAP32[$398>>2]|0;
  $400 = ((($399)) + 56|0);
  $401 = HEAP32[$400>>2]|0;
  FUNCTION_TABLE_vi[$401 & 1023]($398);
  $402 = ((($this)) + 48|0);
  $403 = $data&255;
  HEAP8[$402>>0] = $403;
  $404 = (($time) + 11366)|0;
  $405 = $404&65535;
  $406 = ((($this)) + 44|0);
  HEAP16[$406>>1] = $405;
  $407 = ((($this)) + 46|0);
  HEAP16[$407>>1] = $405;
  return;
  break;
 }
 default: {
  $402 = ((($this)) + 48|0);
  $403 = $data&255;
  HEAP8[$402>>0] = $403;
  $404 = (($time) + 11366)|0;
  $405 = $404&65535;
  $406 = ((($this)) + 44|0);
  HEAP16[$406>>1] = $405;
  $407 = ((($this)) + 46|0);
  HEAP16[$407>>1] = $405;
  return;
 }
 }
}
function __ZN7Nes_Ppu11begin_frameEl($this,$timestamp) {
 $this = $this|0;
 $timestamp = $timestamp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($timestamp|0) / 3)&-1;
 $1 = Math_imul($0, -3)|0;
 $2 = (($1) + ($timestamp))|0;
 $3 = ((($this)) + 752|0);
 HEAP32[$3>>2] = $2;
 $4 = (89341 - ($2))|0;
 $5 = (($4) + 2)|0;
 $6 = (($5|0) / 3)&-1;
 $7 = ((($this)) + 764|0);
 HEAP32[$7>>2] = $6;
 $8 = ($6*3)|0;
 $9 = (($8) - ($4))|0;
 $10 = ((($this)) + 768|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($this)) + 756|0);
 HEAP32[$11>>2] = 1073741824;
 $12 = HEAP8[$this>>0]|0;
 $13 = $12&255;
 $14 = $13 & 128;
 $15 = ((($this)) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 & $17;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = $2 >> 1;
  $21 = (2 - ($20))|0;
  HEAP32[$11>>2] = $21;
 }
 $22 = ((($this)) + 792|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($this)) + 788|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($this)) + 784|0);
 HEAP32[$24>>2] = 7413;
 $25 = ((($this)) + 780|0);
 HEAP32[$25>>2] = 7221;
 $26 = (7122 - ($2))|0;
 $27 = (($26|0) / 3)&-1;
 $28 = ((($this)) + 776|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($this)) + 800|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($this)) + 796|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($this)) + 772|0);
 HEAP8[$31>>0] = 0;
 $32 = ((($this)) + 760|0);
 HEAP32[$32>>2] = -225;
 $33 = ((($this)) + 804|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($this)) + 492|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($this)) + 808|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($this)) + 820|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($this)) + 812|0);
 HEAP32[$37>>2] = 2423;
 $38 = ((($this)) + 816|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($this)) + 44|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $42 = (($41) + ($0))|0;
 $43 = $42&65535;
 HEAP16[$39>>1] = $43;
 $44 = ((($this)) + 46|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = (($46) + ($0))|0;
 $48 = $47&65535;
 HEAP16[$44>>1] = $48;
 $49 = ((($this)) + 336|0);
 HEAP32[$49>>2] = 24;
 $50 = ((($this)) + 64|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($this)) + 56|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = Math_imul($52, 16843009)|0;
 $54 = ((($this)) + 332|0);
 HEAP32[$54>>2] = $53;
 $55 = $12 & 4;
 $56 = ($55<<24>>24)!=(0);
 $57 = $56 ? 32 : 1;
 $58 = ((($this)) + 328|0);
 HEAP32[$58>>2] = $57;
 return ($0|0);
}
function __ZN7Nes_Ppu9end_frameEl($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $storemerge$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 776|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($end_time|0);
 if ($2) {
  __ZN7Nes_Ppu16render_bg_until_El($this,$end_time);
 }
 $3 = ((($this)) + 796|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($end_time|0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)<($end_time|0);
  if ($7) {
   __ZN7Nes_Ppu16render_bg_until_El($this,$end_time);
  }
  $8 = ((($this)) + 780|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($this)) + 752|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) - ($11))|0;
  $13 = (($12|0) / 3)&-1;
  HEAP32[$3>>2] = $13;
  $14 = ((($this)) + 484|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($this)) + 800|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($this)) + 788|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) - ($18))|0;
   $22 = ($21|0)>(0);
   if ($22) {
    HEAP32[$17>>2] = $20;
    $23 = ((($this)) + 488|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = Math_imul($24, $18)|0;
    $26 = (($15) + ($25)|0);
    __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$18,$21,$26,$24,2);
   }
  }
 }
 $27 = ((($this)) + 760|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($this)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 & $28;
 $33 = $32&255;
 HEAP8[$29>>0] = $33;
 HEAP32[$27>>2] = -1;
 $34 = ((($this)) + 808|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)<($end_time|0);
 if ($36) {
  __ZN7Nes_Ppu17update_sprite_hitEl($this,$end_time);
 }
 $37 = ((($this)) + 812|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)<($end_time|0);
 do {
  if ($39) {
   $40 = HEAP32[$27>>2]|0;
   $41 = HEAP8[$29>>0]|0;
   $42 = $41&255;
   $43 = $42 & $40;
   $44 = $43&255;
   HEAP8[$29>>0] = $44;
   HEAP32[$27>>2] = -1;
   $45 = ((($this)) + 820|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($end_time*577)|0;
   $48 = (($47) + -1398071)|0;
   $49 = $48 >>> 16;
   HEAP32[$45>>2] = $49;
   $50 = ((($this)) + 816|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0);
   if ($52) {
    $53 = ((($this)) + 1|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 & 24;
    $56 = ($55<<24>>24)==(0);
    if ($56) {
     break;
    }
    $57 = (__ZN12Nes_Ppu_Impl17recalc_sprite_maxEi($this,$46)|0);
    $58 = ($57|0)>(0);
    $59 = (($57|0) / 3)&-1;
    $60 = (($59) + 2423)|0;
    $storemerge$i$i$i = $58 ? $60 : 1073741824;
    HEAP32[$50>>2] = $storemerge$i$i$i;
    HEAP32[$37>>2] = $storemerge$i$i$i;
    $62 = $storemerge$i$i$i;
   } else {
    $62 = $51;
   }
   $61 = ($62|0)<($end_time|0);
   if ($61) {
    $63 = HEAP8[$29>>0]|0;
    $64 = $63&255;
    $65 = $64 | 32;
    $66 = $65&255;
    HEAP8[$29>>0] = $66;
    HEAP32[$37>>2] = 1073741824;
   }
  }
 } while(0);
 $67 = ((($this)) + 772|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = ($68<<24>>24)==(0);
 if ($69) {
  $70 = HEAP32[$0>>2]|0;
  $71 = ($70|0)<($end_time|0);
  if ($71) {
   __ZN7Nes_Ppu16render_bg_until_El($this,$end_time);
  }
  $72 = ((($this)) + 764|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)>($end_time|0);
  if (!($74)) {
   $75 = HEAP8[$29>>0]|0;
   $76 = $75&255;
   $77 = $76 | 128;
   $78 = $77&255;
   HEAP8[$29>>0] = $78;
   HEAP8[$67>>0] = 1;
   $79 = HEAP8[$this>>0]|0;
   $80 = ($79<<24>>24)<(0);
   if ($80) {
    $81 = (($73) + 2)|0;
    $82 = ((($this)) + 768|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $83 >> 1;
    $85 = (($81) - ($84))|0;
    $86 = ((($this)) + 756|0);
    HEAP32[$86>>2] = $85;
   }
  }
 }
 $87 = ((($this)) + 44|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = $88&65535;
 $90 = ($89|0)>($end_time|0);
 if (!($90)) {
  $91 = ((($this)) + 48|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $93 & 224;
  $95 = $94&255;
  HEAP8[$91>>0] = $95;
 }
 $96 = ((($this)) + 46|0);
 $97 = HEAP16[$96>>1]|0;
 $98 = $97&65535;
 $99 = ($98|0)>($end_time|0);
 if (!($99)) {
  $100 = ((($this)) + 48|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = $102 & 31;
  $104 = $103&255;
  HEAP8[$100>>0] = $104;
 }
 $105 = (($89) - ($end_time))|0;
 $106 = $105&65535;
 HEAP16[$87>>1] = $106;
 $107 = (($98) - ($end_time))|0;
 $108 = $107&65535;
 HEAP16[$96>>1] = $108;
 $109 = ((($this)) + 1|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110 & 8;
 $112 = ($111<<24>>24)==(0);
 if (!($112)) {
  $113 = ((($this)) + 6|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114&65535;
  $116 = (($115) + 2)|0;
  $117 = $115 & 254;
  $118 = ($117>>>0)>(253);
  $119 = $115 ^ 1024;
  $120 = (($119) + 65506)|0;
  $a$0 = $118 ? $120 : $116;
  $121 = $a$0&65535;
  HEAP16[$113>>1] = $121;
 }
 $122 = $110 & 16;
 $123 = ($122<<24>>24)==(0);
 if ($123) {
  HEAP32[$0>>2] = 1073741824;
  HEAP32[$3>>2] = 1073741824;
  $125 = ((($this)) + 752|0);
  HEAP32[$125>>2] = 0;
  $126 = ((($this)) + 764|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($end_time) - ($127))|0;
  $129 = ($128*3)|0;
  $130 = ((($this)) + 768|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($129) + ($131))|0;
  return ($132|0);
 }
 $124 = ((($this)) + 3|0);
 HEAP8[$124>>0] = 0;
 HEAP32[$0>>2] = 1073741824;
 HEAP32[$3>>2] = 1073741824;
 $125 = ((($this)) + 752|0);
 HEAP32[$125>>2] = 0;
 $126 = ((($this)) + 764|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($end_time) - ($127))|0;
 $129 = ($128*3)|0;
 $130 = ((($this)) + 768|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($129) + ($131))|0;
 return ($132|0);
}
function __ZN12Nes_Ppu_ImplC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 68|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 392|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 400|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 404|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 60|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 412|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 11|0);
 HEAP8[$7>>0] = 0;
 return;
}
function __ZN12Nes_Ppu_ImplD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdaPv($1);
 }
 HEAP32[$0>>2] = 0;
 $3 = ((($this)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 __ZdlPv($4);
 return;
}
function __ZN12Nes_Ppu_Impl9close_chrEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdaPv($1);
 }
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN12Nes_Ppu_Impl8open_chrEPKhl($this,$new_chr,$chr_data_size) {
 $this = $this|0;
 $new_chr = $new_chr|0;
 $chr_data_size = $chr_data_size|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $index$01$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdaPv($1);
 }
 HEAP32[$0>>2] = 0;
 $3 = ((($this)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(16640)|0);
  HEAP32[$3>>2] = $6;
  $7 = ((($6)) + 4096|0);
  $8 = ((($this)) + 396|0);
  HEAP32[$8>>2] = $7;
  $14 = $6;
 } else {
  $14 = $4;
 }
 $9 = ((($this)) + 392|0);
 HEAP32[$9>>2] = $new_chr;
 $10 = ((($this)) + 400|0);
 HEAP32[$10>>2] = $chr_data_size;
 $11 = ((($this)) + 341|0);
 HEAP8[$11>>0] = 0;
 $12 = ($chr_data_size|0)==(0);
 if ($12) {
  $13 = ((($14)) + 4096|0);
  HEAP32[$9>>2] = $13;
  HEAP32[$10>>2] = 8192;
  HEAP8[$11>>0] = 1;
  $16 = 8192;$32 = 0;
 } else {
  $16 = $chr_data_size;$32 = 1;
 }
 $15 = (($16|0) / 16)&-1;
 $17 = $15 << 5;
 $18 = (($17) + 128)|0;
 $19 = (__Znaj($18)|0);
 HEAP32[$0>>2] = $19;
 $20 = $19;
 $21 = $20 & 127;
 $$sum = (128 - ($21))|0;
 $22 = (($19) + ($$sum)|0);
 $23 = ((($this)) + 404|0);
 HEAP32[$23>>2] = $22;
 $24 = (($22) + ($15<<4)|0);
 $25 = ((($this)) + 408|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($this)) + 340|0);
 HEAP8[$26>>0] = 1;
 $27 = ((($this)) + 416|0);
 dest=$27; stop=dest+64|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 if (!($32)) {
  return (0|0);
 }
 HEAP8[$26>>0] = 0;
 $28 = (($16) + 15)|0;
 $29 = $28 >>> 4;
 $30 = ($29|0)==(0);
 if ($30) {
  return (0|0);
 } else {
  $index$01$i = 0;
 }
 while(1) {
  __ZN12Nes_Ppu_Impl11update_tileEi($this,$index$01$i);
  $31 = (($index$01$i) + 1)|0;
  $exitcond$i = ($31|0)==($29|0);
  if ($exitcond$i) {
   break;
  } else {
   $index$01$i = $31;
  }
 }
 return (0|0);
}
function __ZN12Nes_Ppu_Impl12set_chr_bankEiil($this,$addr,$size,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $size = $size|0;
 $data = $data|0;
 var $$0 = 0, $$11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$02 = 0, $page$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($data) + ($size))|0;
 $1 = ((($this)) + 400|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)>($2|0);
 if ($3) {
  $4 = (($data|0) % ($2|0))&-1;
  $$0 = $4;
 } else {
  $$0 = $data;
 }
 $5 = $size >>> 10;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = $addr >>> 10;
 $$11 = $$0;$count$02 = $5;$page$03 = $7;
 while(1) {
  $8 = (($count$02) + -1)|0;
  $9 = $page$03 << 10;
  $10 = (($$11) - ($9))|0;
  $11 = (((($this)) + 344|0) + ($page$03<<2)|0);
  HEAP32[$11>>2] = $10;
  $12 = (($page$03) + 1)|0;
  $13 = (($$11) + 1024)|0;
  $14 = ($8|0)==(0);
  if ($14) {
   break;
  } else {
   $$11 = $13;$count$02 = $8;$page$03 = $12;
  }
 }
 return;
}
function __ZNK12Nes_Ppu_Impl10save_stateEP10Nes_State_($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($out)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 dest=$1; src=$this; stop=dest+52|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 $2 = ((($out)) + 52|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($out)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 72|0);
 _memcpy(($4|0),($5|0),256)|0;
 $6 = ((($out)) + 55|0);
 HEAP8[$6>>0] = 1;
 $7 = ((($out)) + 58|0);
 HEAP16[$7>>1] = 2048;
 $8 = ((($out)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this)) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 _memcpy(($9|0),($11|0),2048)|0;
 $12 = ((($this)) + 388|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$10>>2]|0;
 $15 = ((($14)) + 3072|0);
 $16 = ($13>>>0)<($15>>>0);
 if (!($16)) {
  HEAP16[$7>>1] = 4096;
  $17 = ((($out)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($14)) + 2048|0);
  _memcpy(($18|0),($19|0),2048)|0;
 }
 $20 = ((($out)) + 60|0);
 HEAP16[$20>>1] = 0;
 $21 = ((($this)) + 341|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  return;
 }
 $24 = ((($this)) + 400|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25&65535;
 HEAP16[$20>>1] = $26;
 $27 = ((($out)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$10>>2]|0;
 $30 = ((($29)) + 4096|0);
 $sext = $25 << 16;
 $31 = $sext >> 16;
 _memcpy(($28|0),($30|0),($31|0))|0;
 return;
}
function __ZN12Nes_Ppu_Impl10load_stateERK10Nes_State_($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 376|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($this)) + 380|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($this)) + 384|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($this)) + 388|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($this)) + 344|0);
 $7 = ((($in)) + 52|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;HEAP32[$6+20>>2]=0|0;HEAP32[$6+24>>2]=0|0;HEAP32[$6+28>>2]=0|0;
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $10 = ((($in)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  dest=$this; src=$11; stop=dest+52|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 }
 $12 = ((($in)) + 55|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if (!($14)) {
  $15 = ((($this)) + 72|0);
  $16 = ((($in)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  _memcpy(($15|0),($17|0),256)|0;
 }
 $18 = ((($in)) + 58|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ($19<<16>>16)>(2047);
 if ($20) {
  $21 = ($19<<16>>16)>(2048);
  if ($21) {
   $22 = ((($1)) + 2048|0);
   $23 = ((($in)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   _memcpy(($22|0),($24|0),2048)|0;
   $$pre = HEAP32[$0>>2]|0;
   $27 = $$pre;
  } else {
   $27 = $1;
  }
  $25 = ((($in)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  _memcpy(($27|0),($26|0),2048)|0;
 }
 $28 = ((($this)) + 341|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  return;
 }
 $31 = ((($in)) + 60|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = ($32<<16>>16)==(0);
 if ($33) {
  return;
 }
 $34 = HEAP32[$0>>2]|0;
 $35 = ((($34)) + 4096|0);
 $36 = ((($in)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $32 << 16 >> 16;
 _memcpy(($35|0),($37|0),($38|0))|0;
 $39 = ((($this)) + 340|0);
 HEAP8[$39>>0] = 1;
 $40 = ((($this)) + 416|0);
 dest=$40; stop=dest+64|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN12Nes_Ppu_Impl5resetEb($this,$full_reset) {
 $this = $this|0;
 $full_reset = $full_reset|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = ((($this)) + 1|0);
 HEAP8[$0>>0] = 0;
 $1 = ((($this)) + 2|0);
 HEAP8[$1>>0] = -128;
 $2 = ((($this)) + 4|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($this)) + 48|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($this)) + 44|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($this)) + 46|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($this)) + 5|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($this)) + 8|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($this)) + 10|0);
 HEAP8[$8>>0] = 0;
 if ($full_reset) {
  $9 = ((($this)) + 6|0);
  HEAP16[$9>>1] = 0;
  $10 = ((($this)) + 3|0);
  HEAP8[$10>>0] = 0;
  $11 = ((($this)) + 68|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 4096|0);
  _memset(($13|0),-1,8192)|0;
  $14 = HEAP32[$11>>2]|0;
  _memset(($14|0),-1,4096)|0;
  $15 = ((($this)) + 12|0);
  dest=$15; src=840355; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$pre$phiZ2D = $11;
 } else {
  $$pre = ((($this)) + 68|0);
  $$pre$phiZ2D = $$pre;
 }
 $16 = HEAP32[$$pre$phiZ2D>>2]|0;
 $17 = ((($this)) + 376|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($this)) + 380|0);
 HEAP32[$18>>2] = $16;
 $19 = ((($this)) + 384|0);
 HEAP32[$19>>2] = $16;
 $20 = ((($this)) + 388|0);
 HEAP32[$20>>2] = $16;
 $21 = ((($this)) + 344|0);
 $22 = ((($this)) + 72|0);
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;HEAP32[$21+16>>2]=0|0;HEAP32[$21+20>>2]=0|0;HEAP32[$21+24>>2]=0|0;HEAP32[$21+28>>2]=0|0;
 _memset(($22|0),-1,256)|0;
 $23 = ((($this)) + 340|0);
 HEAP8[$23>>0] = 1;
 $24 = ((($this)) + 416|0);
 dest=$24; stop=dest+64|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $25 = ((($this)) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)>(0);
 if (!($27)) {
  return;
 }
 $28 = ((($this)) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $26 << 1;
 _memset(($29|0),0,($30|0))|0;
 return;
}
function __ZN12Nes_Ppu_Impl15capture_paletteEv($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum1$1 = 0, $$sum1$2 = 0, $$sum1$3 = 0, $$sum1$4 = 0, $$sum1$5 = 0, $$sum1$6 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$04 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 64)|0;
 $3 = ((($this)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($4|0);
 if ($5) {
  return;
 }
 $6 = ((($this)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1))|0;
 $9 = Math_imul($8, 16843009)|0;
 $10 = ((($this)) + 332|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($this)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$0>>2] = $2;
 $13 = ((($this)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 1;
 $17 = $16 & 448;
 $18 = $15 & 1;
 $19 = ($18|0)!=(0);
 $20 = $19 ? 48 : 63;
 $i$04 = 0;
 while(1) {
  $21 = (((($this)) + 12|0) + ($i$04)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 & $20;
  $25 = $24 | $17;
  $26 = $25&65535;
  $$sum2 = (($i$04) + ($1))|0;
  $27 = (($12) + ($$sum2<<1)|0);
  HEAP16[$27>>1] = $26;
  $28 = (($i$04) + 1)|0;
  $exitcond = ($28|0)==(32);
  if ($exitcond) {
   break;
  } else {
   $i$04 = $28;
  }
 }
 $29 = (($12) + ($1<<1)|0);
 $30 = HEAP16[$29>>1]|0;
 $$sum1 = (($1) + 4)|0;
 $31 = (($12) + ($$sum1<<1)|0);
 HEAP16[$31>>1] = $30;
 $$sum1$1 = (($1) + 8)|0;
 $32 = (($12) + ($$sum1$1<<1)|0);
 HEAP16[$32>>1] = $30;
 $$sum1$2 = (($1) + 12)|0;
 $33 = (($12) + ($$sum1$2<<1)|0);
 HEAP16[$33>>1] = $30;
 $$sum1$3 = (($1) + 16)|0;
 $34 = (($12) + ($$sum1$3<<1)|0);
 HEAP16[$34>>1] = $30;
 $$sum1$4 = (($1) + 20)|0;
 $35 = (($12) + ($$sum1$4<<1)|0);
 HEAP16[$35>>1] = $30;
 $$sum1$5 = (($1) + 24)|0;
 $36 = (($12) + ($$sum1$5<<1)|0);
 HEAP16[$36>>1] = $30;
 $$sum1$6 = (($1) + 28)|0;
 $37 = (($12) + ($$sum1$6<<1)|0);
 HEAP16[$37>>1] = $30;
 $$sum = (($1) + 32)|0;
 $38 = (($12) + ($$sum<<1)|0);
 dest=$38; src=$29; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN12Nes_Ppu_Impl10run_hblankEi($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr$0$lcssa = 0, $addr$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 31712;
 $4 = ((($this)) + 8|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 & 1055;
 $8 = $7 | $3;
 $9 = $count << 12;
 $10 = (($8) + ($9))|0;
 $11 = ((($this)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 & 8;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  return;
 }
 $15 = ($10|0)>(32767);
 if ($15) {
  $addr$01 = $10;
  while(1) {
   $16 = (($addr$01) + 32)|0;
   $17 = $16 & 992;
   $18 = (($addr$01) + -32768)|0;
   $19 = $18 & -993;
   $20 = ($17|0)==(960);
   $$ = $20 ? 2048 : $17;
   $21 = $$ ^ $19;
   $22 = ($21|0)>(32767);
   if ($22) {
    $addr$01 = $21;
   } else {
    $addr$0$lcssa = $21;
    break;
   }
  }
 } else {
  $addr$0$lcssa = $10;
 }
 $23 = $addr$0$lcssa&65535;
 HEAP16[$0>>1] = $23;
 return;
}
function __ZN12Nes_Ppu_Impl12update_tilesEi($this,$first_tile) {
 $this = $this|0;
 $first_tile = $first_tile|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $chunk$0 = 0, $chunk$1 = 0, $chunk$2 = 0, $index$0 = 0, $modified$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 416|0);
 $chunk$0 = 0;
 while(1) {
  $1 = (($0) + ($chunk$0)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  L3: do {
   if ($3) {
    $5 = (($chunk$0) + 4)|0;
    $chunk$2 = $5;
   } else {
    $4 = $2&255;
    $7 = $4;$chunk$1 = $chunk$0;
    while(1) {
     $6 = ($7<<24>>24)==(0);
     if (!($6)) {
      $8 = (($0) + ($chunk$1)|0);
      $9 = $7&255;
      HEAP8[$8>>0] = 0;
      $10 = $chunk$1 << 3;
      $11 = (($10) + ($first_tile))|0;
      $index$0 = $11;$modified$0 = $9;
      while(1) {
       $12 = $modified$0 & 1;
       $13 = ($12|0)==(0);
       if (!($13)) {
        __ZN12Nes_Ppu_Impl11update_tileEi($this,$index$0);
       }
       $14 = (($index$0) + 1)|0;
       $15 = $modified$0 >> 1;
       $16 = ($15|0)==(0);
       if ($16) {
        break;
       } else {
        $index$0 = $14;$modified$0 = $15;
       }
      }
     }
     $17 = (($chunk$1) + 1)|0;
     $18 = $17 & 3;
     $19 = ($18|0)==(0);
     if ($19) {
      $chunk$2 = $17;
      break L3;
     }
     $$phi$trans$insert = (($0) + ($17)|0);
     $$pre = HEAP8[$$phi$trans$insert>>0]|0;
     $7 = $$pre;$chunk$1 = $17;
    }
   }
  } while(0);
  $20 = ($chunk$2|0)<(64);
  if ($20) {
   $chunk$0 = $chunk$2;
  } else {
   break;
  }
 }
 return;
}
function __ZN12Nes_Ppu_Impl17recalc_sprite_maxEi($this,$scanline) {
 $this = $this|0;
 $scanline = $scanline|0;
 var $$0 = 0, $$01 = 0, $$03$i = 0, $$05$i = 0, $$lcssa38 = 0, $$lcssa40 = 0, $$sum = 0, $$sum$i = 0, $$sum$i4 = 0, $$sum1$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $any_hits$0 = 0, $any_hits$02$i = 0, $any_hits$04$i = 0, $any_hits$1$i = 0, $any_hits$1$i5 = 0, $i$0 = 0, $i$1 = 0, $n$0 = 0;
 var $n$0$lcssa = 0, $n$01$i = 0, $n$03$i = 0, $offset$0 = 0, $pos$0 = 0, $pos$0$lcssa = 0, $remain$0 = 0, $remain$1 = 0, $sprite_max_scanlines = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sprite_max_scanlines = sp;
 $0 = (($sprite_max_scanlines) + ($scanline)|0);
 $1 = (240 - ($scanline))|0;
 _memset(($0|0),120,($1|0))|0;
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 32;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($this)) + 72|0);
 if ($4) {
  $30 = (247 - ($scanline))|0;
  $$03$i = $5;$any_hits$02$i = 0;$n$01$i = 64;
  while(1) {
   $31 = HEAP8[$$03$i>>0]|0;
   $32 = $31&255;
   $33 = ((($$03$i)) + 4|0);
   $34 = (239 - ($32))|0;
   $35 = ($34>>>0)<($30>>>0);
   if ($35) {
    $36 = (($sprite_max_scanlines) + ($32)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 16843009)|0;
    $$sum$i4 = (($32) + 4)|0;
    $39 = (($sprite_max_scanlines) + ($$sum$i4)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 16843009)|0;
    HEAP32[$36>>2] = $38;
    $42 = $38 | $any_hits$02$i;
    HEAP32[$39>>2] = $41;
    $43 = $42 | $41;
    $any_hits$1$i5 = $43;
   } else {
    $any_hits$1$i5 = $any_hits$02$i;
   }
   $44 = (($n$01$i) + -1)|0;
   $45 = ($44|0)==(0);
   if ($45) {
    $any_hits$0 = $any_hits$1$i5;
    break;
   } else {
    $$03$i = $33;$any_hits$02$i = $any_hits$1$i5;$n$01$i = $44;
   }
  }
 } else {
  $6 = (255 - ($scanline))|0;
  $$05$i = $5;$any_hits$04$i = 0;$n$03$i = 64;
  while(1) {
   $7 = HEAP8[$$05$i>>0]|0;
   $8 = $7&255;
   $9 = ((($$05$i)) + 4|0);
   $10 = (239 - ($8))|0;
   $11 = ($10>>>0)<($6>>>0);
   if ($11) {
    $12 = (($sprite_max_scanlines) + ($8)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 16843009)|0;
    $$sum$i = (($8) + 4)|0;
    $15 = (($sprite_max_scanlines) + ($$sum$i)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 16843009)|0;
    HEAP32[$12>>2] = $14;
    $18 = $14 | $any_hits$04$i;
    HEAP32[$15>>2] = $17;
    $19 = $18 | $17;
    $$sum1$i = (($8) + 8)|0;
    $20 = (($sprite_max_scanlines) + ($$sum1$i)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + 16843009)|0;
    $$sum2$i = (($8) + 12)|0;
    $23 = (($sprite_max_scanlines) + ($$sum2$i)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + 16843009)|0;
    HEAP32[$20>>2] = $22;
    $26 = $19 | $22;
    HEAP32[$23>>2] = $25;
    $27 = $26 | $25;
    $any_hits$1$i = $27;
   } else {
    $any_hits$1$i = $any_hits$04$i;
   }
   $28 = (($n$03$i) + -1)|0;
   $29 = ($28|0)==(0);
   if ($29) {
    $any_hits$0 = $any_hits$1$i;
    break;
   } else {
    $$05$i = $9;$any_hits$04$i = $any_hits$1$i;$n$03$i = $28;
   }
  }
 }
 $46 = ((($sprite_max_scanlines)) + 240|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($sprite_max_scanlines)) + 243|0);
 HEAP8[$47>>0] = -128;
 $48 = $any_hits$0 & -2139062144;
 $49 = ($48|0)==(0);
 if ($49) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = $2&255;
 $51 = $50 >>> 2;
 $52 = $51 & 8;
 $53 = (($52) + 8)|0;
 $54 = $sprite_max_scanlines;
 $$01 = $scanline;
 L18: while(1) {
  $55 = (($sprite_max_scanlines) + ($$01)|0);
  $pos$0 = $55;
  while(1) {
   $n$0 = HEAP32[$pos$0>>2]|0;
   $56 = $n$0 & -2139062144;
   $57 = ((($pos$0)) + 4|0);
   $58 = ($56|0)==(0);
   if ($58) {
    $pos$0 = $57;
   } else {
    $n$0$lcssa = $n$0;$pos$0$lcssa = $pos$0;
    break;
   }
  }
  $59 = $n$0$lcssa >>> 7;
  $60 = $59 & 1;
  $61 = (-3 - ($60))|0;
  $$sum = (($61) + 4)|0;
  $62 = (($pos$0$lcssa) + ($$sum)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $64 >>> 7;
  $66 = $65 ^ 1;
  $$sum2 = (($$sum) + ($66))|0;
  $67 = (($pos$0$lcssa) + ($$sum2)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $69 >>> 7;
  $71 = $70 ^ 1;
  $$sum3 = (($$sum2) + ($71))|0;
  $72 = (($pos$0$lcssa) + ($$sum3)|0);
  $73 = $72;
  $74 = (($73) - ($54))|0;
  $75 = ($74|0)>(239);
  if ($75) {
   $$0 = 0;
   label = 22;
   break;
  } else {
   $i$0 = 0;$remain$0 = 8;
  }
  while(1) {
   $76 = (((($this)) + 72|0) + ($i$0)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = (($74) - ($78))|0;
   $80 = (($i$0) + 4)|0;
   $81 = ($79>>>0)<($53>>>0);
   if ($81) {
    $82 = (($remain$0) + -1)|0;
    $83 = ($82|0)==(0);
    if ($83) {
     $i$1 = $80;$offset$0 = 0;
     label = 17;
     break;
    } else {
     $remain$1 = $82;
    }
   } else {
    $remain$1 = $remain$0;
   }
   $97 = ($80|0)<(256);
   if ($97) {
    $i$0 = $80;$remain$0 = $remain$1;
   } else {
    break;
   }
  }
  L28: do {
   if ((label|0) == 17) {
    while(1) {
     label = 0;
     $84 = ($i$1|0)<(256);
     if (!($84)) {
      break L28;
     }
     $85 = $offset$0 | $i$1;
     $86 = (((($this)) + 72|0) + ($85)|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = (($74) - ($88))|0;
     $90 = (($i$1) + 4)|0;
     $91 = (($offset$0) + 1)|0;
     $92 = $91 & 3;
     $93 = ($89>>>0)<($53>>>0);
     if ($93) {
      $$lcssa38 = $90;$$lcssa40 = $74;
      break L18;
     } else {
      $i$1 = $90;$offset$0 = $92;
      label = 17;
     }
    }
   }
  } while(0);
  $98 = (($74) + 1)|0;
  $$01 = $98;
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $94 = ($$lcssa40*341)|0;
 $95 = $$lcssa38 >>> 1;
 $96 = (($95) + ($94))|0;
 $$0 = $96;
 STACKTOP = sp;return ($$0|0);
}
function __ZN17Nes_Ppu_Rendering15fill_backgroundEi($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$ = 0, $$$v = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $fill$0 = 0, $pixels$03 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 500|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -256)|0;
 $3 = ((($this)) + 496|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 332|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 6|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 & 16128;
 $11 = ($10|0)==(16128);
 if ($11) {
  $12 = $9 & 3;
  $13 = ($12|0)==(0);
  $$$v = $13 ? 15 : 31;
  $$ = $$$v & $9;
  $14 = Math_imul($$, 16843009)|0;
  $15 = (($14) + ($6))|0;
  $fill$0 = $15;
 } else {
  $fill$0 = $6;
 }
 $16 = ($count|0)==(0);
 if ($16) {
  return;
 } else {
  $$in = $count;$pixels$03 = $4;
 }
 while(1) {
  $17 = (($$in) + -1)|0;
  HEAP32[$pixels$03>>2] = $fill$0;
  $18 = ((($pixels$03)) + 4|0);
  HEAP32[$18>>2] = $fill$0;
  $19 = ((($pixels$03)) + 8|0);
  HEAP32[$19>>2] = $fill$0;
  $20 = ((($pixels$03)) + 12|0);
  HEAP32[$20>>2] = $fill$0;
  $21 = ((($pixels$03)) + 16|0);
  HEAP32[$21>>2] = $fill$0;
  $22 = ((($pixels$03)) + 20|0);
  HEAP32[$22>>2] = $fill$0;
  $23 = ((($pixels$03)) + 24|0);
  HEAP32[$23>>2] = $fill$0;
  $24 = ((($pixels$03)) + 28|0);
  HEAP32[$24>>2] = $fill$0;
  $25 = ((($pixels$03)) + 32|0);
  HEAP32[$25>>2] = $fill$0;
  $26 = ((($pixels$03)) + 36|0);
  HEAP32[$26>>2] = $fill$0;
  $27 = ((($pixels$03)) + 40|0);
  HEAP32[$27>>2] = $fill$0;
  $28 = ((($pixels$03)) + 44|0);
  HEAP32[$28>>2] = $fill$0;
  $29 = ((($pixels$03)) + 48|0);
  HEAP32[$29>>2] = $fill$0;
  $30 = ((($pixels$03)) + 52|0);
  HEAP32[$30>>2] = $fill$0;
  $31 = ((($pixels$03)) + 56|0);
  HEAP32[$31>>2] = $fill$0;
  $32 = ((($pixels$03)) + 60|0);
  HEAP32[$32>>2] = $fill$0;
  $33 = ((($pixels$03)) + 64|0);
  HEAP32[$33>>2] = $fill$0;
  $34 = ((($pixels$03)) + 68|0);
  HEAP32[$34>>2] = $fill$0;
  $35 = ((($pixels$03)) + 72|0);
  HEAP32[$35>>2] = $fill$0;
  $36 = ((($pixels$03)) + 76|0);
  HEAP32[$36>>2] = $fill$0;
  $37 = ((($pixels$03)) + 80|0);
  HEAP32[$37>>2] = $fill$0;
  $38 = ((($pixels$03)) + 84|0);
  HEAP32[$38>>2] = $fill$0;
  $39 = ((($pixels$03)) + 88|0);
  HEAP32[$39>>2] = $fill$0;
  $40 = ((($pixels$03)) + 92|0);
  HEAP32[$40>>2] = $fill$0;
  $41 = ((($pixels$03)) + 96|0);
  HEAP32[$41>>2] = $fill$0;
  $42 = ((($pixels$03)) + 100|0);
  HEAP32[$42>>2] = $fill$0;
  $43 = ((($pixels$03)) + 104|0);
  HEAP32[$43>>2] = $fill$0;
  $44 = ((($pixels$03)) + 108|0);
  HEAP32[$44>>2] = $fill$0;
  $45 = ((($pixels$03)) + 112|0);
  HEAP32[$45>>2] = $fill$0;
  $46 = ((($pixels$03)) + 116|0);
  HEAP32[$46>>2] = $fill$0;
  $47 = ((($pixels$03)) + 120|0);
  HEAP32[$47>>2] = $fill$0;
  $48 = ((($pixels$03)) + 124|0);
  HEAP32[$48>>2] = $fill$0;
  $49 = ((($pixels$03)) + 128|0);
  HEAP32[$49>>2] = $fill$0;
  $50 = ((($pixels$03)) + 132|0);
  HEAP32[$50>>2] = $fill$0;
  $51 = ((($pixels$03)) + 136|0);
  HEAP32[$51>>2] = $fill$0;
  $52 = ((($pixels$03)) + 140|0);
  HEAP32[$52>>2] = $fill$0;
  $53 = ((($pixels$03)) + 144|0);
  HEAP32[$53>>2] = $fill$0;
  $54 = ((($pixels$03)) + 148|0);
  HEAP32[$54>>2] = $fill$0;
  $55 = ((($pixels$03)) + 152|0);
  HEAP32[$55>>2] = $fill$0;
  $56 = ((($pixels$03)) + 156|0);
  HEAP32[$56>>2] = $fill$0;
  $57 = ((($pixels$03)) + 160|0);
  HEAP32[$57>>2] = $fill$0;
  $58 = ((($pixels$03)) + 164|0);
  HEAP32[$58>>2] = $fill$0;
  $59 = ((($pixels$03)) + 168|0);
  HEAP32[$59>>2] = $fill$0;
  $60 = ((($pixels$03)) + 172|0);
  HEAP32[$60>>2] = $fill$0;
  $61 = ((($pixels$03)) + 176|0);
  HEAP32[$61>>2] = $fill$0;
  $62 = ((($pixels$03)) + 180|0);
  HEAP32[$62>>2] = $fill$0;
  $63 = ((($pixels$03)) + 184|0);
  HEAP32[$63>>2] = $fill$0;
  $64 = ((($pixels$03)) + 188|0);
  HEAP32[$64>>2] = $fill$0;
  $65 = ((($pixels$03)) + 192|0);
  HEAP32[$65>>2] = $fill$0;
  $66 = ((($pixels$03)) + 196|0);
  HEAP32[$66>>2] = $fill$0;
  $67 = ((($pixels$03)) + 200|0);
  HEAP32[$67>>2] = $fill$0;
  $68 = ((($pixels$03)) + 204|0);
  HEAP32[$68>>2] = $fill$0;
  $69 = ((($pixels$03)) + 208|0);
  HEAP32[$69>>2] = $fill$0;
  $70 = ((($pixels$03)) + 212|0);
  HEAP32[$70>>2] = $fill$0;
  $71 = ((($pixels$03)) + 216|0);
  HEAP32[$71>>2] = $fill$0;
  $72 = ((($pixels$03)) + 220|0);
  HEAP32[$72>>2] = $fill$0;
  $73 = ((($pixels$03)) + 224|0);
  HEAP32[$73>>2] = $fill$0;
  $74 = ((($pixels$03)) + 228|0);
  HEAP32[$74>>2] = $fill$0;
  $75 = ((($pixels$03)) + 232|0);
  HEAP32[$75>>2] = $fill$0;
  $76 = ((($pixels$03)) + 236|0);
  HEAP32[$76>>2] = $fill$0;
  $77 = ((($pixels$03)) + 240|0);
  HEAP32[$77>>2] = $fill$0;
  $78 = ((($pixels$03)) + 244|0);
  HEAP32[$78>>2] = $fill$0;
  $79 = ((($pixels$03)) + 248|0);
  HEAP32[$79>>2] = $fill$0;
  $80 = ((($pixels$03)) + 252|0);
  HEAP32[$80>>2] = $fill$0;
  $scevgep = ((($pixels$03)) + 256|0);
  $81 = (($scevgep) + ($2)|0);
  $82 = ($17|0)==(0);
  if ($82) {
   break;
  } else {
   $$in = $17;$pixels$03 = $81;
  }
 }
 return;
}
function __ZN17Nes_Ppu_Rendering16draw_background_Ei($this,$remain) {
 $this = $this|0;
 $remain = $remain|0;
 var $$ = 0, $$0 = 0, $$0$ = 0, $$6 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum54 = 0, $$sum55 = 0, $$sum56 = 0, $$sum57 = 0, $$sum58 = 0, $$sum59 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0;
 var $$sum64 = 0, $$sum65 = 0, $$sum66 = 0, $$sum67 = 0, $$sum85 = 0, $$sum86 = 0, $$sum87 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$0 = 0, $addr$0$lcssa = 0, $addr$0$ph = 0, $addr$1 = 0, $addr$1$lcssa = 0, $addr$1$ph = 0, $addr$1$ph$us = 0, $addr$1$us = 0, $addr$1$us$lcssa = 0, $attr_table$0 = 0, $attr_table$0$lcssa = 0, $attr_table$0$ph = 0, $attr_table$1 = 0, $attr_table$1$lcssa = 0;
 var $attr_table$1$ph = 0, $attr_table$1$ph$us = 0, $attr_table$1$us = 0, $attr_table$1$us$lcssa = 0, $count$0 = 0, $count$0$lcssa = 0, $count$0$ph = 0, $count$0$phi = 0, $count$1 = 0, $count$1$lcssa = 0, $count$1$ph = 0, $count$1$ph$us = 0, $count$1$phi = 0, $count$1$us = 0, $count$1$us$lcssa = 0, $count$1$us$phi = 0, $count2$1 = 0, $count2$1$lcssa = 0, $count2$1$ph = 0, $count2$2 = 0;
 var $count2$2$lcssa = 0, $count2$2$ph = 0, $count2$2$ph$us = 0, $count2$2$us = 0, $count2$2$us$lcssa = 0, $height$1 = 0, $indvars$iv = 0, $lines5$1$lcssa = 0, $lines5$1$lcssa$us = 0, $lines5$121 = 0, $lines5$121$us = 0, $n8$023 = 0, $n8$023$us = 0, $nametable$0 = 0, $nametable$0$lcssa = 0, $nametable$0$ph = 0, $nametable$1 = 0, $nametable$1$lcssa = 0, $nametable$1$ph = 0, $nametable$1$ph$us = 0;
 var $nametable$1$us = 0, $nametable$1$us$lcssa = 0, $not$ = 0, $p6$1$lcssa = 0, $p6$1$lcssa$us = 0, $p6$122 = 0, $p6$122$us = 0, $pixels$0$ph = 0, $pixels$1$ph = 0, $pixels$1$ph$us = 0, $row_pixels$0 = 0, $scevgep = 0, $scevgep46 = 0, $scevgep48 = 0, $scevgep49 = 0, $scevgep50$sum = 0, $scevgep51 = 0, $vram_addr$0 = 0, $vram_addr$2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 32767;
 $4 = ((($this)) + 496|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 10|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ((($this)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 >>> 1;
 $13 = $12 & 1;
 $14 = $13 ^ 1;
 $15 = $14 << 3;
 $$sum = (($15) - ($8))|0;
 $16 = (($5) + ($$sum)|0);
 $17 = ((($this)) + 8|0);
 $18 = ((($this)) + 500|0);
 $19 = ((($this)) + 332|0);
 $20 = ((($this)) + 404|0);
 $$0 = $remain;$row_pixels$0 = $16;$vram_addr$0 = $3;
 while(1) {
  $21 = $vram_addr$0 >> 12;
  $22 = (8 - ($21))|0;
  $23 = ($22|0)>($$0|0);
  $$0$ = $23 ? $$0 : $22;
  $24 = HEAP16[$17>>1]|0;
  $25 = $24&65535;
  $26 = $25 ^ $vram_addr$0;
  $27 = $26 & 1055;
  $28 = ($27|0)==(0);
  $29 = $27 ^ $vram_addr$0;
  $height$1 = $28 ? $$0$ : 1;
  $30 = (($$0) - ($height$1))|0;
  $31 = $height$1 << 12;
  $32 = (($31) + ($29))|0;
  $33 = $32 & 32768;
  $34 = ($33|0)==(0);
  if ($34) {
   $vram_addr$2 = $32;
  } else {
   $35 = (($32) + 32)|0;
   $36 = $35 & 992;
   $37 = $32 & 31775;
   $38 = ($36|0)==(960);
   $$ = $38 ? 2048 : $36;
   $39 = $$ ^ $37;
   $vram_addr$2 = $39;
  }
  $40 = $vram_addr$0 >>> 10;
  $41 = $40 & 3;
  $42 = (((($this)) + 376|0) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $41 ^ 1;
  $45 = (((($this)) + 376|0) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $vram_addr$0 & 31;
  $48 = (32 - ($47))|0;
  $49 = (($48) - ($14))|0;
  $50 = HEAP8[$6>>0]|0;
  $not$ = ($50<<24>>24)!=(0);
  $51 = $not$&1;
  $$6 = (($51) + ($47))|0;
  $52 = $vram_addr$0 >>> 4;
  $53 = $52 & 56;
  $54 = $53 | 960;
  $55 = (($43) + ($54)|0);
  $56 = HEAP8[$this>>0]|0;
  $57 = $56&255;
  $58 = $57 << 4;
  $59 = $58 & 256;
  $60 = (($vram_addr$0) + ($14))|0;
  $61 = HEAP32[$18>>2]|0;
  $62 = Math_imul($61, $height$1)|0;
  $63 = (($row_pixels$0) + ($62)|0);
  $64 = ($height$1|0)==(8);
  L6: do {
   if ($64) {
    $65 = $60 & 1023;
    $$sum4 = (($61) + 4)|0;
    $$sum5 = $61 << 1;
    $$sum56 = (($$sum5) + 4)|0;
    $$sum57 = ($61*3)|0;
    $$sum58 = (($$sum5) + ($$sum4))|0;
    $$sum59 = $61 << 2;
    $$sum61 = (($$sum59) + 4)|0;
    $$sum62 = ($61*5)|0;
    $$sum63 = (($$sum59) + ($$sum4))|0;
    $$sum64 = ($61*6)|0;
    $$sum65 = (($$sum64) + 4)|0;
    $$sum66 = ($61*7)|0;
    $$sum67 = (($$sum64) + ($$sum4))|0;
    $addr$0$ph = $65;$attr_table$0$ph = $55;$count$0$ph = $49;$count2$1$ph = $$6;$nametable$0$ph = $43;$pixels$0$ph = $row_pixels$0;
    while(1) {
     $addr$0 = $addr$0$ph;$attr_table$0 = $attr_table$0$ph;$count$0 = $count$0$ph;$count2$1 = $count2$1$ph;$nametable$0 = $nametable$0$ph;
     while(1) {
      $66 = ($count$0|0)==(0);
      if (!($66)) {
       $addr$0$lcssa = $addr$0;$attr_table$0$lcssa = $attr_table$0;$count$0$lcssa = $count$0;$count2$1$lcssa = $count2$1;$nametable$0$lcssa = $nametable$0;
       break;
      }
      $161 = (($addr$0) + -32)|0;
      $162 = $attr_table$0;
      $163 = $nametable$0;
      $164 = (($162) - ($163))|0;
      $165 = (($46) + ($164)|0);
      $166 = ($count2$1|0)==(0);
      if ($166) {
       break L6;
      } else {
       $count$0$phi = $count2$1;$addr$0 = $161;$attr_table$0 = $165;$count2$1 = 0;$nametable$0 = $46;$count$0 = $count$0$phi;
      }
     }
     $67 = $addr$0$lcssa >>> 2;
     $68 = $67 & 7;
     $69 = (($attr_table$0$lcssa) + ($68)|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70&255;
     $72 = $addr$0$lcssa >>> 4;
     $73 = $72 & 4;
     $74 = $addr$0$lcssa & 2;
     $75 = $73 | $74;
     $76 = $71 >>> $75;
     $77 = $76 & 3;
     $78 = Math_imul($77, 67372036)|0;
     $79 = HEAP32[$19>>2]|0;
     $80 = (($78) + ($79))|0;
     $81 = (($nametable$0$lcssa) + ($addr$0$lcssa)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $59;
     $85 = HEAP32[$20>>2]|0;
     $86 = $84 << 4;
     $87 = $84 >>> 6;
     $88 = (((($this)) + 344|0) + ($87<<2)|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (($86) + ($89))|0;
     $91 = (($85) + ($90)|0);
     $92 = (($addr$0$lcssa) + 1)|0;
     $$sum54 = (($90) + 4)|0;
     $93 = (($85) + ($$sum54)|0);
     $94 = HEAP32[$91>>2]|0;
     $95 = $94 >>> 4;
     $96 = $95 & 50529027;
     $97 = (($96) + ($80))|0;
     HEAP32[$pixels$0$ph>>2] = $97;
     $98 = $94 & 50529027;
     $99 = (($98) + ($80))|0;
     $100 = ((($pixels$0$ph)) + 4|0);
     HEAP32[$100>>2] = $99;
     $101 = (($pixels$0$ph) + ($61)|0);
     $102 = $94 >>> 6;
     $103 = $102 & 50529027;
     $104 = (($103) + ($80))|0;
     HEAP32[$101>>2] = $104;
     $105 = $94 >>> 2;
     $106 = $105 & 50529027;
     $107 = (($106) + ($80))|0;
     $108 = (($pixels$0$ph) + ($$sum4)|0);
     HEAP32[$108>>2] = $107;
     $109 = (($pixels$0$ph) + ($$sum5)|0);
     $$sum55 = (($90) + 8)|0;
     $110 = (($85) + ($$sum55)|0);
     $111 = HEAP32[$93>>2]|0;
     $112 = $111 >>> 4;
     $113 = $112 & 50529027;
     $114 = (($113) + ($80))|0;
     HEAP32[$109>>2] = $114;
     $115 = $111 & 50529027;
     $116 = (($115) + ($80))|0;
     $117 = (($pixels$0$ph) + ($$sum56)|0);
     HEAP32[$117>>2] = $116;
     $118 = (($pixels$0$ph) + ($$sum57)|0);
     $119 = $111 >>> 6;
     $120 = $119 & 50529027;
     $121 = (($120) + ($80))|0;
     HEAP32[$118>>2] = $121;
     $122 = $111 >>> 2;
     $123 = $122 & 50529027;
     $124 = (($123) + ($80))|0;
     $125 = (($pixels$0$ph) + ($$sum58)|0);
     HEAP32[$125>>2] = $124;
     $126 = (($pixels$0$ph) + ($$sum59)|0);
     $$sum60 = (($90) + 12)|0;
     $127 = (($85) + ($$sum60)|0);
     $128 = HEAP32[$110>>2]|0;
     $129 = $128 >>> 4;
     $130 = $129 & 50529027;
     $131 = (($130) + ($80))|0;
     HEAP32[$126>>2] = $131;
     $132 = $128 & 50529027;
     $133 = (($132) + ($80))|0;
     $134 = (($pixels$0$ph) + ($$sum61)|0);
     HEAP32[$134>>2] = $133;
     $135 = (($pixels$0$ph) + ($$sum62)|0);
     $136 = $128 >>> 6;
     $137 = $136 & 50529027;
     $138 = (($137) + ($80))|0;
     HEAP32[$135>>2] = $138;
     $139 = $128 >>> 2;
     $140 = $139 & 50529027;
     $141 = (($140) + ($80))|0;
     $142 = (($pixels$0$ph) + ($$sum63)|0);
     HEAP32[$142>>2] = $141;
     $143 = (($pixels$0$ph) + ($$sum64)|0);
     $144 = HEAP32[$127>>2]|0;
     $145 = $144 >>> 4;
     $146 = $145 & 50529027;
     $147 = (($146) + ($80))|0;
     HEAP32[$143>>2] = $147;
     $148 = $144 & 50529027;
     $149 = (($148) + ($80))|0;
     $150 = (($pixels$0$ph) + ($$sum65)|0);
     HEAP32[$150>>2] = $149;
     $151 = (($pixels$0$ph) + ($$sum66)|0);
     $152 = $144 >>> 6;
     $153 = $152 & 50529027;
     $154 = (($153) + ($80))|0;
     HEAP32[$151>>2] = $154;
     $155 = $144 >>> 2;
     $156 = $155 & 50529027;
     $157 = (($156) + ($80))|0;
     $158 = (($pixels$0$ph) + ($$sum67)|0);
     HEAP32[$158>>2] = $157;
     $159 = (($count$0$lcssa) + -1)|0;
     $160 = ((($pixels$0$ph)) + 8|0);
     $addr$0$ph = $92;$attr_table$0$ph = $attr_table$0$lcssa;$count$0$ph = $159;$count2$1$ph = $count2$1$lcssa;$nametable$0$ph = $nametable$0$lcssa;$pixels$0$ph = $160;
    }
   } else {
    $167 = $60 >>> 12;
    $168 = $60 & 1023;
    $169 = $167 & 1;
    $170 = (($height$1) - ($169))|0;
    $171 = $60 >> 13;
    $172 = ($169|0)==(0);
    $173 = $170 >> 1;
    $174 = ($173|0)==(0);
    $175 = $170 & 1;
    $176 = ($175|0)==(0);
    $$sum1 = (($61) + 4)|0;
    $$sum2 = $61 << 1;
    $$sum3 = (($171) + 1)|0;
    $177 = $61 << 1;
    $178 = Math_imul($177, $173)|0;
    if (!($172)) {
     $$sum85 = (($61) + ($178))|0;
     $$sum86 = (($$sum3) + ($173))|0;
     $addr$1$ph = $168;$attr_table$1$ph = $55;$count$1$ph = $49;$count2$2$ph = $$6;$nametable$1$ph = $43;$pixels$1$ph = $row_pixels$0;
     while(1) {
      $addr$1 = $addr$1$ph;$attr_table$1 = $attr_table$1$ph;$count$1 = $count$1$ph;$count2$2 = $count2$2$ph;$nametable$1 = $nametable$1$ph;
      while(1) {
       $245 = ($count$1|0)==(0);
       if (!($245)) {
        $addr$1$lcssa = $addr$1;$attr_table$1$lcssa = $attr_table$1;$count$1$lcssa = $count$1;$count2$2$lcssa = $count2$2;$nametable$1$lcssa = $nametable$1;
        break;
       }
       $312 = (($addr$1) + -32)|0;
       $313 = $attr_table$1;
       $314 = $nametable$1;
       $315 = (($313) - ($314))|0;
       $316 = (($46) + ($315)|0);
       $317 = ($count2$2|0)==(0);
       if ($317) {
        break L6;
       } else {
        $count$1$phi = $count2$2;$addr$1 = $312;$attr_table$1 = $316;$count2$2 = 0;$nametable$1 = $46;$count$1 = $count$1$phi;
       }
      }
      $246 = (($count$1$lcssa) + -1)|0;
      $247 = $addr$1$lcssa >>> 2;
      $248 = $247 & 7;
      $249 = (($attr_table$1$lcssa) + ($248)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = $addr$1$lcssa >>> 4;
      $253 = $252 & 4;
      $254 = $addr$1$lcssa & 2;
      $255 = $253 | $254;
      $256 = $251 >>> $255;
      $257 = $256 & 3;
      $258 = Math_imul($257, 67372036)|0;
      $259 = HEAP32[$19>>2]|0;
      $260 = (($258) + ($259))|0;
      $261 = (($nametable$1$lcssa) + ($addr$1$lcssa)|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $264 = $263 | $59;
      $265 = HEAP32[$20>>2]|0;
      $266 = $264 << 4;
      $267 = $264 >>> 6;
      $268 = (((($this)) + 344|0) + ($267<<2)|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = (($266) + ($269))|0;
      $271 = (($265) + ($270)|0);
      $272 = (($addr$1$lcssa) + 1)|0;
      $273 = ((($pixels$1$ph)) + 8|0);
      $274 = (($271) + ($171<<2)|0);
      $275 = (($271) + ($$sum3<<2)|0);
      $276 = HEAP32[$274>>2]|0;
      $277 = $276 >>> 6;
      $278 = $277 & 50529027;
      $279 = (($278) + ($260))|0;
      HEAP32[$pixels$1$ph>>2] = $279;
      $280 = $276 >>> 2;
      $281 = $280 & 50529027;
      $282 = (($281) + ($260))|0;
      $283 = ((($pixels$1$ph)) + 4|0);
      HEAP32[$283>>2] = $282;
      $284 = (($pixels$1$ph) + ($61)|0);
      if ($174) {
       $310 = $61;$lines5$1$lcssa = $275;$p6$1$lcssa = $284;
      } else {
       $scevgep = (($pixels$1$ph) + ($$sum85)|0);
       $lines5$121 = $275;$n8$023 = $173;$p6$122 = $284;
       while(1) {
        $285 = (($n8$023) + -1)|0;
        $286 = ((($lines5$121)) + 4|0);
        $287 = HEAP32[$lines5$121>>2]|0;
        $288 = $287 >>> 4;
        $289 = $288 & 50529027;
        $290 = (($289) + ($260))|0;
        HEAP32[$p6$122>>2] = $290;
        $291 = $287 & 50529027;
        $292 = (($291) + ($260))|0;
        $293 = ((($p6$122)) + 4|0);
        HEAP32[$293>>2] = $292;
        $294 = (($p6$122) + ($61)|0);
        $295 = $287 >>> 6;
        $296 = $295 & 50529027;
        $297 = (($296) + ($260))|0;
        HEAP32[$294>>2] = $297;
        $298 = $287 >>> 2;
        $299 = $298 & 50529027;
        $300 = (($299) + ($260))|0;
        $301 = (($p6$122) + ($$sum1)|0);
        HEAP32[$301>>2] = $300;
        $302 = (($p6$122) + ($$sum2)|0);
        $303 = ($285|0)==(0);
        if ($303) {
         break;
        } else {
         $lines5$121 = $286;$n8$023 = $285;$p6$122 = $302;
        }
       }
       $scevgep46 = (($271) + ($$sum86<<2)|0);
       $310 = $$sum85;$lines5$1$lcssa = $scevgep46;$p6$1$lcssa = $scevgep;
      }
      if ($176) {
       $addr$1$ph = $272;$attr_table$1$ph = $attr_table$1$lcssa;$count$1$ph = $246;$count2$2$ph = $count2$2$lcssa;$nametable$1$ph = $nametable$1$lcssa;$pixels$1$ph = $273;
       continue;
      }
      $304 = HEAP32[$lines5$1$lcssa>>2]|0;
      $305 = $304 >>> 4;
      $306 = $305 & 50529027;
      $307 = (($306) + ($260))|0;
      HEAP32[$p6$1$lcssa>>2] = $307;
      $308 = $304 & 50529027;
      $309 = (($308) + ($260))|0;
      $$sum87 = (($310) + 4)|0;
      $311 = (($pixels$1$ph) + ($$sum87)|0);
      HEAP32[$311>>2] = $309;
      $addr$1$ph = $272;$attr_table$1$ph = $attr_table$1$lcssa;$count$1$ph = $246;$count2$2$ph = $count2$2$lcssa;$nametable$1$ph = $nametable$1$lcssa;$pixels$1$ph = $273;
     }
    }
    $scevgep48 = (($row_pixels$0) + ($178)|0);
    $179 = (($173) + ($171))|0;
    $180 = $179 << 2;
    $addr$1$ph$us = $168;$attr_table$1$ph$us = $55;$count$1$ph$us = $49;$count2$2$ph$us = $$6;$indvars$iv = $scevgep48;$nametable$1$ph$us = $43;$pixels$1$ph$us = $row_pixels$0;
    while(1) {
     $addr$1$us = $addr$1$ph$us;$attr_table$1$us = $attr_table$1$ph$us;$count$1$us = $count$1$ph$us;$count2$2$us = $count2$2$ph$us;$nametable$1$us = $nametable$1$ph$us;
     while(1) {
      $242 = ($count$1$us|0)==(0);
      if (!($242)) {
       $addr$1$us$lcssa = $addr$1$us;$attr_table$1$us$lcssa = $attr_table$1$us;$count$1$us$lcssa = $count$1$us;$count2$2$us$lcssa = $count2$2$us;$nametable$1$us$lcssa = $nametable$1$us;
       break;
      }
      $236 = (($addr$1$us) + -32)|0;
      $237 = $attr_table$1$us;
      $238 = $nametable$1$us;
      $239 = (($237) - ($238))|0;
      $240 = (($46) + ($239)|0);
      $241 = ($count2$2$us|0)==(0);
      if ($241) {
       break L6;
      } else {
       $count$1$us$phi = $count2$2$us;$addr$1$us = $236;$attr_table$1$us = $240;$count2$2$us = 0;$nametable$1$us = $46;$count$1$us = $count$1$us$phi;
      }
     }
     $181 = (($count$1$us$lcssa) + -1)|0;
     $182 = $addr$1$us$lcssa >>> 2;
     $183 = $182 & 7;
     $184 = (($attr_table$1$us$lcssa) + ($183)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = $addr$1$us$lcssa >>> 4;
     $188 = $187 & 4;
     $189 = $addr$1$us$lcssa & 2;
     $190 = $188 | $189;
     $191 = $186 >>> $190;
     $192 = $191 & 3;
     $193 = Math_imul($192, 67372036)|0;
     $194 = HEAP32[$19>>2]|0;
     $195 = (($193) + ($194))|0;
     $196 = (($nametable$1$us$lcssa) + ($addr$1$us$lcssa)|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = $197&255;
     $199 = $198 | $59;
     $200 = HEAP32[$20>>2]|0;
     $201 = $199 << 4;
     $202 = $199 >>> 6;
     $203 = (((($this)) + 344|0) + ($202<<2)|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (($201) + ($204))|0;
     $206 = (($200) + ($205)|0);
     $207 = (($addr$1$us$lcssa) + 1)|0;
     $208 = ((($pixels$1$ph$us)) + 8|0);
     $209 = (($206) + ($171<<2)|0);
     if ($174) {
      $lines5$1$lcssa$us = $209;$p6$1$lcssa$us = $pixels$1$ph$us;
     } else {
      $243 = $199 << 4;
      $244 = (($204) + ($243))|0;
      $scevgep50$sum = (($180) + ($244))|0;
      $scevgep51 = (($200) + ($scevgep50$sum)|0);
      $lines5$121$us = $209;$n8$023$us = $173;$p6$122$us = $pixels$1$ph$us;
      while(1) {
       $210 = (($n8$023$us) + -1)|0;
       $211 = ((($lines5$121$us)) + 4|0);
       $212 = HEAP32[$lines5$121$us>>2]|0;
       $213 = $212 >>> 4;
       $214 = $213 & 50529027;
       $215 = (($214) + ($195))|0;
       HEAP32[$p6$122$us>>2] = $215;
       $216 = $212 & 50529027;
       $217 = (($216) + ($195))|0;
       $218 = ((($p6$122$us)) + 4|0);
       HEAP32[$218>>2] = $217;
       $219 = (($p6$122$us) + ($61)|0);
       $220 = $212 >>> 6;
       $221 = $220 & 50529027;
       $222 = (($221) + ($195))|0;
       HEAP32[$219>>2] = $222;
       $223 = $212 >>> 2;
       $224 = $223 & 50529027;
       $225 = (($224) + ($195))|0;
       $226 = (($p6$122$us) + ($$sum1)|0);
       HEAP32[$226>>2] = $225;
       $227 = (($p6$122$us) + ($$sum2)|0);
       $228 = ($210|0)==(0);
       if ($228) {
        break;
       } else {
        $lines5$121$us = $211;$n8$023$us = $210;$p6$122$us = $227;
       }
      }
      $lines5$1$lcssa$us = $scevgep51;$p6$1$lcssa$us = $indvars$iv;
     }
     if (!($176)) {
      $229 = HEAP32[$lines5$1$lcssa$us>>2]|0;
      $230 = $229 >>> 4;
      $231 = $230 & 50529027;
      $232 = (($231) + ($195))|0;
      HEAP32[$p6$1$lcssa$us>>2] = $232;
      $233 = $229 & 50529027;
      $234 = (($233) + ($195))|0;
      $235 = ((($p6$1$lcssa$us)) + 4|0);
      HEAP32[$235>>2] = $234;
     }
     $scevgep49 = ((($indvars$iv)) + 8|0);
     $addr$1$ph$us = $207;$attr_table$1$ph$us = $attr_table$1$us$lcssa;$count$1$ph$us = $181;$count2$2$ph$us = $count2$2$us$lcssa;$indvars$iv = $scevgep49;$nametable$1$ph$us = $nametable$1$us$lcssa;$pixels$1$ph$us = $208;
    }
   }
  } while(0);
  $318 = ($$0|0)==($height$1|0);
  if ($318) {
   break;
  } else {
   $$0 = $30;$row_pixels$0 = $63;$vram_addr$0 = $vram_addr$2;
  }
 }
 return;
}
function __ZN17Nes_Ppu_Rendering13draw_sprites_Eii($this,$begin,$end) {
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 var $$ = 0, $$$i = 0, $$$i25 = 0, $$in = 0, $$in47 = 0, $$neg37 = 0, $$pn = 0, $$sum = 0, $$sum1 = 0, $$sum1011 = 0, $$sum1213 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum2 = 0, $$sum22 = 0, $$sum23 = 0, $$sum23$pn = 0, $$sum24$pn = 0;
 var $$sum3 = 0, $$sum3132 = 0, $$sum3536 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum8$pn = 0, $$sum9 = 0, $$sum9$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dir$0 = 0, $dir49$0 = 0, $index$0 = 0, $line55$0 = 0, $line55$1 = 0, $line84$0 = 0, $line84$1 = 0, $lines$045 = 0, $lines$142 = 0, $lines48$0 = 0, $lines48$1 = 0, $lines48$2 = 0, $lines48$3 = 0, $neg_skip$0 = 0;
 var $next_row$0 = 0, $next_row46$0 = 0, $out$0 = 0, $out$146 = 0, $out$243 = 0, $out47$0 = 0, $out47$1 = 0, $out47$2 = 0, $out47$3 = 0, $out47$4 = 0, $scanlines$0 = 0, $scanlines$144 = 0, $scanlines$241 = 0, $scanlines50$0 = 0, $scanlines50$1 = 0, $scanlines50$2 = 0, $scanlines50$3 = 0, $scanlines50$4 = 0, $skip44$0 = 0, $tile$0$i$i = 0;
 var $tile$0$i$i27 = 0, $tiles$01$i = 0, $tiles$01$i26 = 0, $visible$1 = 0, $visible$2 = 0, $visible$3 = 0, $visible$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0&255;
 $2 = $1 >>> 2;
 $3 = $2 & 8;
 $4 = (($3) + 8)|0;
 $5 = (($end) + -1)|0;
 $6 = (($begin) + -1)|0;
 $7 = ((($this)) + 500|0);
 $8 = ((($this)) + 496|0);
 $9 = ((($this)) + 404|0);
 $10 = ((($this)) + 408|0);
 $11 = ((($this)) + 332|0);
 $12 = $4 >>> 1;
 $$neg37 = (1 - ($begin))|0;
 $index$0 = 0;
 while(1) {
  $13 = (((($this)) + 72|0) + ($index$0)|0);
  $14 = (($index$0) + 4)|0;
  $15 = HEAP8[$13>>0]|0;
  $16 = $15&255;
  $17 = (($5) - ($16))|0;
  $18 = ($17|0)<(1);
  L3: do {
   if (!($18)) {
    $19 = (($17) - ($4))|0;
    $20 = (($16) - ($6))|0;
    $21 = $19 | $20;
    $22 = ($21|0)>(-1);
    if ($22) {
     $$sum1011 = $index$0 | 2;
     $23 = (((($this)) + 72|0) + ($$sum1011)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = HEAP32[$7>>2]|0;
     $27 = (0 - ($26))|0;
     $28 = HEAP32[$8>>2]|0;
     $$sum1213 = $index$0 | 3;
     $29 = (((($this)) + 72|0) + ($$sum1213)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = Math_imul($26, $20)|0;
     $$sum14 = (($31) + ($32))|0;
     $33 = $24 & 64;
     $34 = ($33<<24>>24)==(0);
     $$$i25 = $34 ? $9 : $10;
     $tiles$01$i26 = HEAP32[$$$i25>>2]|0;
     $$sum3536 = $index$0 | 1;
     $35 = (((($this)) + 72|0) + ($$sum3536)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = HEAP8[$this>>0]|0;
     $39 = $38&255;
     $40 = $39 << 5;
     $41 = $40 & 256;
     $42 = $41 | $37;
     $43 = $39 & 32;
     $44 = ($43|0)==(0);
     if ($44) {
      $tile$0$i$i27 = $42;
     } else {
      $45 = $37 << 8;
      $46 = $45 & 256;
      $47 = $37 & 254;
      $48 = $46 | $47;
      $tile$0$i$i27 = $48;
     }
     $49 = $tile$0$i$i27 << 4;
     $50 = $tile$0$i$i27 >>> 6;
     $51 = $50 & 4194303;
     $52 = (((($this)) + 344|0) + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (($53) + ($49))|0;
     $55 = (($tiles$01$i26) + ($54)|0);
     $56 = $25 & 128;
     $57 = ($56|0)==(0);
     if ($57) {
      $$pn = 1;$$sum23$pn = $$sum14;$dir$0 = 1;$next_row$0 = $26;
     } else {
      $58 = Math_imul($26, $4)|0;
      $$sum22 = (($58) - ($26))|0;
      $$sum23 = (($$sum22) + ($$sum14))|0;
      $$pn = $4;$$sum23$pn = $$sum23;$dir$0 = -1;$next_row$0 = $27;
     }
     $$sum24$pn = (($$pn) + ($16))|0;
     $scanlines$0 = (((($this)) + 504|0) + ($$sum24$pn)|0);
     $out$0 = (($28) + ($$sum23$pn)|0);
     $59 = $25 & 3;
     $60 = Math_imul($59, 67372036)|0;
     $61 = HEAP32[$11>>2]|0;
     $62 = (($60) + 269488144)|0;
     $63 = (($62) + ($61))|0;
     $64 = $25 & 32;
     $65 = ($64|0)==(0);
     $$sum16 = (($next_row$0) + 4)|0;
     $$sum17 = $next_row$0 << 1;
     $$sum18 = $dir$0 << 1;
     if ($65) {
      $$in47 = $12;$lines$045 = $55;$out$146 = $out$0;$scanlines$144 = $scanlines$0;
      while(1) {
       $66 = (($$in47) + -1)|0;
       $67 = ((($lines$045)) + 4|0);
       $68 = HEAP32[$lines$045>>2]|0;
       $69 = HEAP8[$scanlines$144>>0]|0;
       $70 = $69&255;
       $71 = HEAP32[$out$146>>2]|0;
       $72 = $68 >>> 4;
       $73 = $72 & 50529027;
       $74 = $71 >>> 4;
       $75 = $74 & 50529027;
       $76 = (($75) + 2139062143)|0;
       $77 = (-2139062144 - ($73))|0;
       $78 = $77 & 2139062140;
       $79 = $78 & $76;
       $80 = $79 >>> 2;
       $81 = ((($out$146)) + 4|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = $68 & 50529027;
       $84 = $82 >>> 4;
       $85 = $84 & 50529027;
       $86 = (($85) + 2139062143)|0;
       $87 = (-2139062144 - ($83))|0;
       $88 = $87 & 2139062140;
       $89 = $88 & $86;
       $90 = $89 >>> 2;
       $91 = ($69&255)<(64);
       if ($91) {
        $92 = $90 ^ -1;
        $93 = $82 & $92;
        $94 = (($83) + ($63))|0;
        $95 = $90 & $94;
        $96 = $93 | $95;
        $97 = $80 ^ -1;
        $98 = $71 & $97;
        $99 = (($73) + ($63))|0;
        $100 = $80 & $99;
        $101 = $98 | $100;
        HEAP32[$out$146>>2] = $101;
        HEAP32[$81>>2] = $96;
       }
       $102 = (($out$146) + ($next_row$0)|0);
       $103 = (($70) + 1)|0;
       $104 = $103&255;
       HEAP8[$scanlines$144>>0] = $104;
       $105 = (($scanlines$144) + ($dir$0)|0);
       $106 = HEAP8[$105>>0]|0;
       $107 = $106&255;
       $108 = HEAP32[$102>>2]|0;
       $109 = $68 >>> 6;
       $110 = $109 & 50529027;
       $111 = $108 >>> 4;
       $112 = $111 & 50529027;
       $113 = (($112) + 2139062143)|0;
       $114 = (-2139062144 - ($110))|0;
       $115 = $114 & 2139062140;
       $116 = $115 & $113;
       $117 = $116 >>> 2;
       $118 = (($out$146) + ($$sum16)|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = $68 >>> 2;
       $121 = $120 & 50529027;
       $122 = $119 >>> 4;
       $123 = $122 & 50529027;
       $124 = (($123) + 2139062143)|0;
       $125 = (-2139062144 - ($121))|0;
       $126 = $125 & 2139062140;
       $127 = $126 & $124;
       $128 = $127 >>> 2;
       $129 = ($106&255)<(64);
       if ($129) {
        $130 = $128 ^ -1;
        $131 = $119 & $130;
        $132 = (($121) + ($63))|0;
        $133 = $128 & $132;
        $134 = $131 | $133;
        $135 = $117 ^ -1;
        $136 = $108 & $135;
        $137 = (($110) + ($63))|0;
        $138 = $117 & $137;
        $139 = $136 | $138;
        HEAP32[$102>>2] = $139;
        HEAP32[$118>>2] = $134;
       }
       $140 = (($out$146) + ($$sum17)|0);
       $141 = (($107) + 1)|0;
       $142 = $141&255;
       HEAP8[$105>>0] = $142;
       $143 = (($scanlines$144) + ($$sum18)|0);
       $144 = ($66|0)==(0);
       if ($144) {
        break L3;
       } else {
        $$in47 = $66;$lines$045 = $67;$out$146 = $140;$scanlines$144 = $143;
       }
      }
     } else {
      $$in = $12;$lines$142 = $55;$out$243 = $out$0;$scanlines$241 = $scanlines$0;
      while(1) {
       $145 = (($$in) + -1)|0;
       $146 = ((($lines$142)) + 4|0);
       $147 = HEAP32[$lines$142>>2]|0;
       $148 = HEAP8[$scanlines$241>>0]|0;
       $149 = $148&255;
       $150 = HEAP32[$out$243>>2]|0;
       $151 = $147 >>> 4;
       $152 = $151 & 50529027;
       $153 = $150 & 50529027;
       $154 = (-2139062144 - ($153))|0;
       $155 = (-2139062144 - ($152))|0;
       $156 = ((($out$243)) + 4|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = $147 & 50529027;
       $159 = $157 & 50529027;
       $160 = (-2139062144 - ($159))|0;
       $161 = (-2139062144 - ($158))|0;
       $162 = ($148&255)<(64);
       if ($162) {
        $163 = $160 | -1010580541;
        $164 = $163 & $157;
        $165 = $161 & 538976288;
        $166 = $164 | $165;
        $167 = $161 & $63;
        $168 = (($167) + ($158))|0;
        $169 = $160 >>> 2;
        $170 = $169 ^ -1;
        $171 = $168 & $170;
        $172 = $166 | $171;
        $173 = $154 | -1010580541;
        $174 = $173 & $150;
        $175 = $155 & 538976288;
        $176 = $174 | $175;
        $177 = $155 & $63;
        $178 = (($177) + ($152))|0;
        $179 = $154 >>> 2;
        $180 = $179 ^ -1;
        $181 = $178 & $180;
        $182 = $176 | $181;
        HEAP32[$out$243>>2] = $182;
        HEAP32[$156>>2] = $172;
       }
       $183 = (($out$243) + ($next_row$0)|0);
       $184 = (($149) + 1)|0;
       $185 = $184&255;
       HEAP8[$scanlines$241>>0] = $185;
       $186 = (($scanlines$241) + ($dir$0)|0);
       $187 = HEAP8[$186>>0]|0;
       $188 = $187&255;
       $189 = HEAP32[$183>>2]|0;
       $190 = $147 >>> 6;
       $191 = $190 & 50529027;
       $192 = $189 & 50529027;
       $193 = (-2139062144 - ($192))|0;
       $194 = (-2139062144 - ($191))|0;
       $195 = (($out$243) + ($$sum16)|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = $147 >>> 2;
       $198 = $197 & 50529027;
       $199 = $196 & 50529027;
       $200 = (-2139062144 - ($199))|0;
       $201 = (-2139062144 - ($198))|0;
       $202 = ($187&255)<(64);
       if ($202) {
        $203 = $200 | -1010580541;
        $204 = $203 & $196;
        $205 = $201 & 538976288;
        $206 = $204 | $205;
        $207 = $201 & $63;
        $208 = (($207) + ($198))|0;
        $209 = $200 >>> 2;
        $210 = $209 ^ -1;
        $211 = $208 & $210;
        $212 = $206 | $211;
        $213 = $193 | -1010580541;
        $214 = $213 & $189;
        $215 = $194 & 538976288;
        $216 = $214 | $215;
        $217 = $194 & $63;
        $218 = (($217) + ($191))|0;
        $219 = $193 >>> 2;
        $220 = $219 ^ -1;
        $221 = $218 & $220;
        $222 = $216 | $221;
        HEAP32[$183>>2] = $222;
        HEAP32[$195>>2] = $212;
       }
       $223 = (($out$243) + ($$sum17)|0);
       $224 = (($188) + 1)|0;
       $225 = $224&255;
       HEAP8[$186>>0] = $225;
       $226 = (($scanlines$241) + ($$sum18)|0);
       $227 = ($145|0)==(0);
       if ($227) {
        break L3;
       } else {
        $$in = $145;$lines$142 = $146;$out$243 = $223;$scanlines$241 = $226;
       }
      }
     }
    }
    $228 = ($19|0)>(0);
    $$ = $228 ? $4 : $17;
    $229 = ($20|0)>(0);
    $neg_skip$0 = $229 ? 0 : $20;
    $230 = (0 - ($neg_skip$0))|0;
    $231 = (($$) + ($neg_skip$0))|0;
    $232 = ($231|0)<(1);
    if (!($232)) {
     $$sum1 = $index$0 | 2;
     $233 = (((($this)) + 72|0) + ($$sum1)|0);
     $234 = HEAP8[$233>>0]|0;
     $235 = $234&255;
     $236 = HEAP32[$7>>2]|0;
     $237 = (0 - ($236))|0;
     $238 = HEAP32[$8>>2]|0;
     $$sum2 = $index$0 | 3;
     $239 = (((($this)) + 72|0) + ($$sum2)|0);
     $240 = HEAP8[$239>>0]|0;
     $241 = $240&255;
     $242 = (($16) + ($$neg37))|0;
     $243 = (($242) - ($neg_skip$0))|0;
     $244 = Math_imul($236, $243)|0;
     $$sum = (($241) + ($244))|0;
     $245 = $234 & 64;
     $246 = ($245<<24>>24)==(0);
     $$$i = $246 ? $9 : $10;
     $tiles$01$i = HEAP32[$$$i>>2]|0;
     $$sum3132 = $index$0 | 1;
     $247 = (((($this)) + 72|0) + ($$sum3132)|0);
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = HEAP8[$this>>0]|0;
     $251 = $250&255;
     $252 = $251 << 5;
     $253 = $252 & 256;
     $254 = $253 | $249;
     $255 = $251 & 32;
     $256 = ($255|0)==(0);
     if ($256) {
      $tile$0$i$i = $254;
     } else {
      $257 = $249 << 8;
      $258 = $257 & 256;
      $259 = $249 & 254;
      $260 = $258 | $259;
      $tile$0$i$i = $260;
     }
     $261 = $tile$0$i$i << 4;
     $262 = $tile$0$i$i >>> 6;
     $263 = $262 & 4194303;
     $264 = (((($this)) + 344|0) + ($263<<2)|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = (($265) + ($261))|0;
     $267 = (($tiles$01$i) + ($266)|0);
     $$sum3 = (($16) + 1)|0;
     $$sum4 = (($$sum3) - ($neg_skip$0))|0;
     $268 = $235 & 128;
     $269 = ($268|0)==(0);
     if ($269) {
      $$sum8$pn = $$sum;$$sum9$pn = $$sum4;$dir49$0 = 1;$next_row46$0 = $236;$skip44$0 = $230;
     } else {
      $270 = Math_imul($236, $231)|0;
      $$sum7 = (($270) - ($236))|0;
      $$sum8 = (($$sum7) + ($$sum))|0;
      $$sum9 = (($$) + ($16))|0;
      $271 = $251 >>> 2;
      $272 = $271 & 8;
      $273 = (($neg_skip$0) + 8)|0;
      $274 = (($273) - ($231))|0;
      $275 = (($274) + ($272))|0;
      $$sum8$pn = $$sum8;$$sum9$pn = $$sum9;$dir49$0 = -1;$next_row46$0 = $237;$skip44$0 = $275;
     }
     $scanlines50$0 = (((($this)) + 504|0) + ($$sum9$pn)|0);
     $out47$0 = (($238) + ($$sum8$pn)|0);
     $276 = $235 & 3;
     $277 = Math_imul($276, 67372036)|0;
     $278 = HEAP32[$11>>2]|0;
     $279 = (($277) + 269488144)|0;
     $280 = (($279) + ($278))|0;
     $281 = $235 & 32;
     $282 = ($281|0)==(0);
     $283 = $skip44$0 >> 1;
     $284 = (($267) + ($283<<2)|0);
     $$sum5 = (($283) + 1)|0;
     $285 = (($267) + ($$sum5<<2)|0);
     $286 = HEAP32[$284>>2]|0;
     $287 = $skip44$0 & 1;
     $288 = ($287|0)==(0);
     if ($282) {
      if ($288) {
       $line55$0 = $286;$lines48$0 = $285;$out47$1 = $out47$0;$scanlines50$1 = $scanlines50$0;$visible$1 = $231;
       label = 26;
      } else {
       $line55$1 = $286;$lines48$1 = $285;$out47$2 = $out47$0;$scanlines50$2 = $scanlines50$0;$visible$2 = $231;
      }
      while(1) {
       if ((label|0) == 26) {
        label = 0;
        $289 = HEAP8[$scanlines50$1>>0]|0;
        $290 = $289&255;
        $291 = HEAP32[$out47$1>>2]|0;
        $292 = $line55$0 >>> 4;
        $293 = $292 & 50529027;
        $294 = $291 >>> 4;
        $295 = $294 & 50529027;
        $296 = (($295) + 2139062143)|0;
        $297 = (-2139062144 - ($293))|0;
        $298 = $297 & 2139062140;
        $299 = $298 & $296;
        $300 = $299 >>> 2;
        $301 = ((($out47$1)) + 4|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = $line55$0 & 50529027;
        $304 = $302 >>> 4;
        $305 = $304 & 50529027;
        $306 = (($305) + 2139062143)|0;
        $307 = (-2139062144 - ($303))|0;
        $308 = $307 & 2139062140;
        $309 = $308 & $306;
        $310 = $309 >>> 2;
        $311 = ($289&255)<(64);
        if ($311) {
         $312 = $310 ^ -1;
         $313 = $302 & $312;
         $314 = (($303) + ($280))|0;
         $315 = $310 & $314;
         $316 = $313 | $315;
         $317 = $300 ^ -1;
         $318 = $291 & $317;
         $319 = (($293) + ($280))|0;
         $320 = $300 & $319;
         $321 = $318 | $320;
         HEAP32[$out47$1>>2] = $321;
         HEAP32[$301>>2] = $316;
        }
        $322 = (($visible$1) + -1)|0;
        $323 = (($out47$1) + ($next_row46$0)|0);
        $324 = (($290) + 1)|0;
        $325 = $324&255;
        HEAP8[$scanlines50$1>>0] = $325;
        $326 = (($scanlines50$1) + ($dir49$0)|0);
        $327 = ($322|0)==(0);
        if ($327) {
         break;
        } else {
         $line55$1 = $line55$0;$lines48$1 = $lines48$0;$out47$2 = $323;$scanlines50$2 = $326;$visible$2 = $322;
        }
       }
       $328 = HEAP8[$scanlines50$2>>0]|0;
       $329 = $328&255;
       $330 = HEAP32[$out47$2>>2]|0;
       $331 = $line55$1 >>> 6;
       $332 = $331 & 50529027;
       $333 = $330 >>> 4;
       $334 = $333 & 50529027;
       $335 = (($334) + 2139062143)|0;
       $336 = (-2139062144 - ($332))|0;
       $337 = $336 & 2139062140;
       $338 = $337 & $335;
       $339 = $338 >>> 2;
       $340 = ((($out47$2)) + 4|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = $line55$1 >>> 2;
       $343 = $342 & 50529027;
       $344 = $341 >>> 4;
       $345 = $344 & 50529027;
       $346 = (($345) + 2139062143)|0;
       $347 = (-2139062144 - ($343))|0;
       $348 = $347 & 2139062140;
       $349 = $348 & $346;
       $350 = $349 >>> 2;
       $351 = ($328&255)<(64);
       if ($351) {
        $352 = $350 ^ -1;
        $353 = $341 & $352;
        $354 = (($343) + ($280))|0;
        $355 = $350 & $354;
        $356 = $353 | $355;
        $357 = $339 ^ -1;
        $358 = $330 & $357;
        $359 = (($332) + ($280))|0;
        $360 = $339 & $359;
        $361 = $358 | $360;
        HEAP32[$out47$2>>2] = $361;
        HEAP32[$340>>2] = $356;
       }
       $362 = (($visible$2) + -1)|0;
       $363 = (($329) + 1)|0;
       $364 = $363&255;
       HEAP8[$scanlines50$2>>0] = $364;
       $365 = ($362|0)==(0);
       if ($365) {
        break L3;
       }
       $366 = (($scanlines50$2) + ($dir49$0)|0);
       $367 = (($out47$2) + ($next_row46$0)|0);
       $368 = ((($lines48$1)) + 4|0);
       $369 = HEAP32[$lines48$1>>2]|0;
       $line55$0 = $369;$lines48$0 = $368;$out47$1 = $367;$scanlines50$1 = $366;$visible$1 = $362;
       label = 26;
      }
     } else {
      if ($288) {
       $line84$0 = $286;$lines48$2 = $285;$out47$3 = $out47$0;$scanlines50$3 = $scanlines50$0;$visible$3 = $231;
       label = 34;
      } else {
       $line84$1 = $286;$lines48$3 = $285;$out47$4 = $out47$0;$scanlines50$4 = $scanlines50$0;$visible$4 = $231;
      }
      while(1) {
       if ((label|0) == 34) {
        label = 0;
        $370 = HEAP8[$scanlines50$3>>0]|0;
        $371 = $370&255;
        $372 = HEAP32[$out47$3>>2]|0;
        $373 = $line84$0 >>> 4;
        $374 = $373 & 50529027;
        $375 = $372 & 50529027;
        $376 = (-2139062144 - ($375))|0;
        $377 = (-2139062144 - ($374))|0;
        $378 = ((($out47$3)) + 4|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = $line84$0 & 50529027;
        $381 = $379 & 50529027;
        $382 = (-2139062144 - ($381))|0;
        $383 = (-2139062144 - ($380))|0;
        $384 = ($370&255)<(64);
        if ($384) {
         $385 = $382 | -1010580541;
         $386 = $385 & $379;
         $387 = $383 & 538976288;
         $388 = $386 | $387;
         $389 = $383 & $280;
         $390 = (($389) + ($380))|0;
         $391 = $382 >>> 2;
         $392 = $391 ^ -1;
         $393 = $390 & $392;
         $394 = $388 | $393;
         $395 = $376 | -1010580541;
         $396 = $395 & $372;
         $397 = $377 & 538976288;
         $398 = $396 | $397;
         $399 = $377 & $280;
         $400 = (($399) + ($374))|0;
         $401 = $376 >>> 2;
         $402 = $401 ^ -1;
         $403 = $400 & $402;
         $404 = $398 | $403;
         HEAP32[$out47$3>>2] = $404;
         HEAP32[$378>>2] = $394;
        }
        $405 = (($visible$3) + -1)|0;
        $406 = (($out47$3) + ($next_row46$0)|0);
        $407 = (($371) + 1)|0;
        $408 = $407&255;
        HEAP8[$scanlines50$3>>0] = $408;
        $409 = (($scanlines50$3) + ($dir49$0)|0);
        $410 = ($405|0)==(0);
        if ($410) {
         break;
        } else {
         $line84$1 = $line84$0;$lines48$3 = $lines48$2;$out47$4 = $406;$scanlines50$4 = $409;$visible$4 = $405;
        }
       }
       $411 = HEAP8[$scanlines50$4>>0]|0;
       $412 = $411&255;
       $413 = HEAP32[$out47$4>>2]|0;
       $414 = $line84$1 >>> 6;
       $415 = $414 & 50529027;
       $416 = $413 & 50529027;
       $417 = (-2139062144 - ($416))|0;
       $418 = (-2139062144 - ($415))|0;
       $419 = ((($out47$4)) + 4|0);
       $420 = HEAP32[$419>>2]|0;
       $421 = $line84$1 >>> 2;
       $422 = $421 & 50529027;
       $423 = $420 & 50529027;
       $424 = (-2139062144 - ($423))|0;
       $425 = (-2139062144 - ($422))|0;
       $426 = ($411&255)<(64);
       if ($426) {
        $427 = $424 | -1010580541;
        $428 = $427 & $420;
        $429 = $425 & 538976288;
        $430 = $428 | $429;
        $431 = $425 & $280;
        $432 = (($431) + ($422))|0;
        $433 = $424 >>> 2;
        $434 = $433 ^ -1;
        $435 = $432 & $434;
        $436 = $430 | $435;
        $437 = $417 | -1010580541;
        $438 = $437 & $413;
        $439 = $418 & 538976288;
        $440 = $438 | $439;
        $441 = $418 & $280;
        $442 = (($441) + ($415))|0;
        $443 = $417 >>> 2;
        $444 = $443 ^ -1;
        $445 = $442 & $444;
        $446 = $440 | $445;
        HEAP32[$out47$4>>2] = $446;
        HEAP32[$419>>2] = $436;
       }
       $447 = (($visible$4) + -1)|0;
       $448 = (($412) + 1)|0;
       $449 = $448&255;
       HEAP8[$scanlines50$4>>0] = $449;
       $450 = ($447|0)==(0);
       if ($450) {
        break L3;
       }
       $451 = (($scanlines50$4) + ($dir49$0)|0);
       $452 = (($out47$4) + ($next_row46$0)|0);
       $453 = ((($lines48$3)) + 4|0);
       $454 = HEAP32[$lines48$3>>2]|0;
       $line84$0 = $454;$lines48$2 = $453;$out47$3 = $452;$scanlines50$3 = $451;$visible$3 = $447;
       label = 34;
      }
     }
    }
   }
  } while(0);
  $455 = ($14|0)<(256);
  if ($455) {
   $index$0 = $14;
  } else {
   break;
  }
 }
 return;
}
function __ZN17Nes_Ppu_Rendering16check_sprite_hitEii($this,$begin,$end) {
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 var $$ = 0, $$$i = 0, $$lcssa = 0, $$skip$1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bg$0 = 0, $final$0 = 0, $quads = 0, $skip$0 = 0, $skip$1 = 0, $skip$1$lcssa = 0, $skip$2 = 0, $start_x$0 = 0, $tile$0$i$i = 0, $tiles$01$i = 0, $visible$0 = 0;
 var $x$0 = 0, $x$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $quads = sp;
 $0 = ((($this)) + 72|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + 1)|0;
 $4 = (($begin) - ($3))|0;
 $5 = ($4|0)<(0);
 $$ = $5 ? 0 : $4;
 $6 = (($$) + ($3))|0;
 $7 = (($end) - ($6))|0;
 $8 = ($7|0)<(1);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = HEAP8[$this>>0]|0;
 $10 = $9&255;
 $11 = $10 >>> 2;
 $12 = $11 & 8;
 $13 = (($12) + 8)|0;
 $14 = ($7|0)<($13|0);
 if ($14) {
  $visible$0 = $7;
 } else {
  $15 = ((($this)) + 492|0);
  HEAP32[$15>>2] = -1;
  $visible$0 = $13;
 }
 $16 = ((($this)) + 500|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($this)) + 496|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($this)) + 75|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($6) - ($begin))|0;
 $24 = Math_imul($17, $23)|0;
 $$sum = (($22) + ($24))|0;
 $25 = (($19) + ($$sum)|0);
 $26 = ((($this)) + 404|0);
 $27 = ((($this)) + 74|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 & 64;
 $30 = ($29<<24>>24)==(0);
 $31 = ((($this)) + 408|0);
 $$$i = $30 ? $26 : $31;
 $tiles$01$i = HEAP32[$$$i>>2]|0;
 $32 = ((($this)) + 73|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $10 << 5;
 $36 = $35 & 256;
 $37 = $36 | $34;
 $38 = $10 & 32;
 $39 = ($38|0)==(0);
 if ($39) {
  $tile$0$i$i = $37;
 } else {
  $40 = $34 << 8;
  $41 = $40 & 256;
  $42 = $34 & 254;
  $43 = $41 | $42;
  $tile$0$i$i = $43;
 }
 $44 = $tile$0$i$i << 4;
 $45 = $tile$0$i$i >>> 6;
 $46 = $45 & 4194303;
 $47 = (((($this)) + 344|0) + ($46<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + ($44))|0;
 $50 = (($tiles$01$i) + ($49)|0);
 $51 = ($21&255)<(8);
 do {
  if ($51) {
   $52 = ((($this)) + 1|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 & 30;
   $55 = ($54<<24>>24)==(30);
   if ($55) {
    $start_x$0 = 0;
   } else {
    $56 = ($21<<24>>24)==(0);
    if ($56) {
     STACKTOP = sp;return;
    } else {
     $57 = (8 - ($22))|0;
     $start_x$0 = $57;
     break;
    }
   }
  } else {
   $start_x$0 = 0;
  }
 } while(0);
 $58 = (($visible$0) + ($$))|0;
 $59 = ($28<<24>>24)<(0);
 if ($59) {
  $60 = $12 | 7;
  $61 = (($60) + ($$))|0;
  $62 = (($61) - ($visible$0))|0;
  $final$0 = $62;$skip$0 = $61;
 } else {
  $final$0 = $58;$skip$0 = $$;
 }
 $63 = ((($quads)) + 4|0);
 $bg$0 = $25;$skip$1 = $skip$0;
 L20: while(1) {
  $64 = $skip$1 >> 1;
  $65 = (($50) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$bg$0>>2]|0;
  $68 = ((($bg$0)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($bg$0) + ($17)|0);
  $71 = $skip$1 << 1;
  $72 = $71 & 2;
  $73 = $66 >>> $72;
  $74 = $73 >>> 1;
  $75 = $74 | $73;
  $76 = $67 >>> 1;
  $77 = $76 | $67;
  $78 = $75 >>> 4;
  $79 = $78 & $77;
  $80 = $69 >>> 1;
  $81 = $80 | $69;
  $82 = $81 & $75;
  $83 = $79 | $82;
  $84 = $83 & 16843009;
  $85 = ($84|0)==(0);
  L22: do {
   if (!($85)) {
    HEAP32[$quads>>2] = $79;
    HEAP32[$63>>2] = $82;
    $x$0 = $start_x$0;
    while(1) {
     $86 = (($quads) + ($x$0)|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     if (!($89)) {
      $x$0$lcssa = $x$0;
      break;
     }
     $98 = (($x$0) + 1)|0;
     $99 = ($x$0|0)<(7);
     if ($99) {
      $x$0 = $98;
     } else {
      break L22;
     }
    }
    $90 = (($22) + ($x$0$lcssa))|0;
    $91 = ($90|0)>(254);
    if (!($91)) {
     $$lcssa = $90;$skip$1$lcssa = $skip$1;
     break L20;
    }
   }
  } while(0);
  $100 = ($skip$1|0)>($final$0|0);
  $101 = (($skip$1) + -2)|0;
  $$skip$1 = $100 ? $101 : $skip$1;
  $102 = (($$skip$1) + 1)|0;
  $103 = ($102|0)==($final$0|0);
  if ($103) {
   label = 20;
   break;
  } else {
   $bg$0 = $70;$skip$1 = $102;
  }
 }
 if ((label|0) == 20) {
  STACKTOP = sp;return;
 }
 $92 = $12 | 7;
 $93 = (($92) - ($skip$1$lcssa))|0;
 $skip$2 = $59 ? $93 : $skip$1$lcssa;
 $94 = (($3) + ($skip$2))|0;
 $95 = ($94*341)|0;
 $96 = (($95) + ($$lcssa))|0;
 $97 = ((($this)) + 492|0);
 HEAP32[$97>>2] = $96;
 STACKTOP = sp;return;
}
function __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$start,$count,$pixels,$pitch,$mode) {
 $this = $this|0;
 $start = $start|0;
 $count = $count|0;
 $pixels = $pixels|0;
 $pitch = $pitch|0;
 $mode = $mode|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $clip_mode$0 = 0, $clip_mode$010 = 0, $in$02$i = 0;
 var $in$03$i = 0, $n$01$i = 0, $n$01$i8 = 0, $n$02$i = 0, $n$02$i3 = 0, $or$cond = 0, $out$02$i = 0, $out$03$i = 0, $p$01$i = 0, $p$01$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pixels)) + 8|0);
 $1 = ((($this)) + 496|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($this)) + 500|0);
 HEAP32[$2>>2] = $pitch;
 $3 = ((($this)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 >>> 3;
 $7 = $6 & 3;
 $8 = $5 >>> 1;
 $9 = $8 ^ 3;
 $10 = $9 & $7;
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $10 | 1;
  $14 = $mode & 1;
  $15 = ($14|0)==(0);
  if ($15) {
   $clip_mode$010 = $13;
  } else {
   __ZN17Nes_Ppu_Rendering15fill_backgroundEi($this,$count);
   $$pre$phiZ2D = $14;$clip_mode$0 = $13;
   label = 5;
  }
 } else {
  $$pre = $mode & 1;
  $$pre$phiZ2D = $$pre;$clip_mode$0 = $10;
  label = 5;
 }
 if ((label|0) == 5) {
  $16 = ($start|0)!=(0);
  $17 = ($$pre$phiZ2D|0)==(0);
  $or$cond = $16 | $17;
  if ($or$cond) {
   $clip_mode$010 = $clip_mode$0;
  } else {
   $18 = ((($this)) + 504|0);
   $19 = ((($this)) + 480|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (64 - ($20))|0;
   $22 = $21&255;
   _memset(($18|0),($22|0),240)|0;
   $clip_mode$010 = $clip_mode$0;
  }
 }
 $23 = $7 & $mode;
 $24 = ($23|0)==(0);
 if ($24) {
  HEAP32[$1>>2] = 0;
  return;
 }
 $25 = ((($this)) + 340|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = ((($this)) + 341|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)==(0);
  if (!($30)) {
   HEAP8[$25>>0] = 0;
   __ZN12Nes_Ppu_Impl12update_tilesEi($this,0);
  }
 }
 $31 = $23 & 1;
 $32 = ($31|0)==(0);
 if (!($32)) {
  __ZN17Nes_Ppu_Rendering16draw_background_Ei($this,$count);
  $33 = ($clip_mode$010|0)==(1);
  if ($33) {
   $34 = HEAP32[$2>>2]|0;
   $35 = ((($this)) + 332|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($count|0)==(0);
   if (!($37)) {
    $38 = HEAP32[$1>>2]|0;
    $n$02$i = $count;$p$01$i = $38;
    while(1) {
     $39 = (($n$02$i) + -1)|0;
     HEAP32[$p$01$i>>2] = $36;
     $40 = ((($p$01$i)) + 4|0);
     HEAP32[$40>>2] = $36;
     $41 = (($p$01$i) + ($34)|0);
     $42 = ($39|0)==(0);
     if ($42) {
      break;
     } else {
      $n$02$i = $39;$p$01$i = $41;
     }
    }
   }
  }
  $43 = (($count) + ($start))|0;
  $44 = ((($this)) + 492|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0);
  if ($46) {
   $47 = ((($this)) + 72|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = ($49|0)>($43|0);
   if (!($50)) {
    $51 = HEAP8[$3>>0]|0;
    $52 = $51 & 24;
    $53 = ($52<<24>>24)==(24);
    if ($53) {
     __ZN17Nes_Ppu_Rendering16check_sprite_hitEii($this,$start,$43);
    }
   }
  }
 }
 $54 = $23 & 2;
 $55 = ($54|0)==(0);
 if ($55) {
  HEAP32[$1>>2] = 0;
  return;
 }
 $56 = ($clip_mode$010|0)==(2);
 if ($56) {
  $57 = HEAP32[$2>>2]|0;
  $58 = ($count|0)==(0);
  if ($58) {
   __ZN17Nes_Ppu_Rendering13draw_sprites_Eii($this,$start,$start);
   HEAP32[$1>>2] = 0;
   return;
  }
  $59 = ((($this)) + 68|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 12288|0);
  $62 = HEAP32[$1>>2]|0;
  $in$03$i = $62;$n$01$i8 = $count;$out$02$i = $61;
  while(1) {
   $63 = (($n$01$i8) + -1)|0;
   $64 = HEAP32[$in$03$i>>2]|0;
   $65 = ((($in$03$i)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($in$03$i) + ($57)|0);
   HEAP32[$out$02$i>>2] = $64;
   $68 = ((($out$02$i)) + 4|0);
   HEAP32[$68>>2] = $66;
   $69 = ((($out$02$i)) + 8|0);
   $70 = ($63|0)==(0);
   if ($70) {
    break;
   } else {
    $in$03$i = $67;$n$01$i8 = $63;$out$02$i = $69;
   }
  }
  $71 = (($count) + ($start))|0;
  __ZN17Nes_Ppu_Rendering13draw_sprites_Eii($this,$start,$71);
  $72 = HEAP32[$2>>2]|0;
  $73 = HEAP32[$59>>2]|0;
  $74 = ((($73)) + 12288|0);
  $75 = HEAP32[$1>>2]|0;
  $in$02$i = $74;$n$01$i = $count;$out$03$i = $75;
  while(1) {
   $76 = (($n$01$i) + -1)|0;
   $77 = HEAP32[$in$02$i>>2]|0;
   $78 = ((($in$02$i)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($in$02$i)) + 8|0);
   HEAP32[$out$03$i>>2] = $77;
   $81 = ((($out$03$i)) + 4|0);
   HEAP32[$81>>2] = $79;
   $82 = (($out$03$i) + ($72)|0);
   $83 = ($76|0)==(0);
   if ($83) {
    break;
   } else {
    $in$02$i = $80;$n$01$i = $76;$out$03$i = $82;
   }
  }
 } else {
  $84 = (($count) + ($start))|0;
  __ZN17Nes_Ppu_Rendering13draw_sprites_Eii($this,$start,$84);
 }
 $85 = ($clip_mode$010|0)==(3);
 if (!($85)) {
  HEAP32[$1>>2] = 0;
  return;
 }
 $86 = HEAP32[$2>>2]|0;
 $87 = ((($this)) + 332|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($count|0)==(0);
 if ($89) {
  HEAP32[$1>>2] = 0;
  return;
 }
 $90 = HEAP32[$1>>2]|0;
 $n$02$i3 = $count;$p$01$i4 = $90;
 while(1) {
  $91 = (($n$02$i3) + -1)|0;
  HEAP32[$p$01$i4>>2] = $88;
  $92 = ((($p$01$i4)) + 4|0);
  HEAP32[$92>>2] = $88;
  $93 = (($p$01$i4) + ($86)|0);
  $94 = ($91|0)==(0);
  if ($94) {
   break;
  } else {
   $n$02$i3 = $91;$p$01$i4 = $93;
  }
 }
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN17Nes_Ppu_Rendering15draw_backgroundEii($this,$start,$count) {
 $this = $this|0;
 $start = $start|0;
 $count = $count|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x$y$i = 0, $x$y$i1 = 0, $y$x$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($count) + ($start))|0;
 $1 = ($0|0)>(239);
 if ($1) {
  $2 = ((($this)) + 64|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = ((($this)) + 336|0);
   $$pre$phiZ2D = $$pre;
   label = 5;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $5 = ((($this)) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ((($this)) + 336|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $7 & $9;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$pre$phiZ2D = $8;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$$pre$phiZ2D>>2] = 0;
  __ZN12Nes_Ppu_Impl15capture_paletteEv($this);
 }
 $12 = ((($this)) + 484|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = ((($this)) + 488|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = Math_imul($16, $start)|0;
  $18 = (($13) + ($17)|0);
  __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$start,$count,$18,$16,1);
  return;
 }
 $19 = ((($this)) + 492|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  return;
 }
 $22 = ((($this)) + 72|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = ($24|0)>($0|0);
 if ($25) {
  return;
 }
 $26 = ((($this)) + 1|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 & 24;
 $29 = ($28<<24>>24)==(24);
 if (!($29)) {
  return;
 }
 $30 = (1 - ($start))|0;
 $31 = (($30) + ($24))|0;
 $32 = ($31|0)<(0);
 $y$x$i = $32 ? 0 : $31;
 $33 = ($y$x$i|0)>($count|0);
 $x$y$i1 = $33 ? $count : $y$x$i;
 $34 = (($count) - ($x$y$i1))|0;
 $35 = HEAP8[$this>>0]|0;
 $36 = $35&255;
 $37 = $36 >>> 2;
 $38 = $37 & 8;
 $39 = (($38) + 8)|0;
 $40 = ($34|0)<($39|0);
 $x$y$i = $40 ? $34 : $39;
 $41 = ($x$y$i|0)>(0);
 if (!($41)) {
  return;
 }
 __ZN12Nes_Ppu_Impl10run_hblankEi($this,$x$y$i1);
 $42 = (($x$y$i1) + ($start))|0;
 $43 = ((($this)) + 68|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 12288|0);
 __ZN17Nes_Ppu_Rendering14draw_scanlinesEiiPhli($this,$42,$x$y$i,$45,272,3);
 return;
}
function __ZN9Nes_StateC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 64|0);
 $1 = ((($this)) + 28|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($this)) + 76|0);
 $3 = ((($this)) + 32|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($this)) + 88|0);
 $5 = ((($this)) + 36|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($this)) + 160|0);
 $7 = ((($this)) + 40|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($this)) + 216|0);
 $9 = ((($this)) + 44|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($this)) + 480|0);
 HEAP32[$this>>2] = $10;
 $11 = ((($this)) + 2528|0);
 $12 = ((($this)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($this)) + 10720|0);
 $14 = ((($this)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($this)) + 10976|0);
 $16 = ((($this)) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($this)) + 13024|0);
 $18 = ((($this)) + 16|0);
 HEAP32[$18>>2] = $17;
 return;
}
function __ZN10Nes_State_5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 1073741824;
 $6 = ((($this)) + 48|0);
 dest=$6; stop=dest+14|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZNK10Nes_State_12write_blocksER15Nes_File_Writer($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $s = 0, $s1 = 0, $s3 = 0, $s5 = 0, $s8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 8|0;
 $s1 = sp;
 $s3 = sp + 104|0;
 $s5 = sp + 32|0;
 $s8 = sp + 16|0;
 $0 = ((($this)) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 20|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $s;
  $11 = $10;
  HEAP32[$11>>2] = $6;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = $9;
  $14 = $6 & 65535;
  $15 = ($14*5)|0;
  $16 = $15&65535;
  HEAP16[$s>>1] = $16;
  __ZN11nes_state_t4swapEv($s);
  $17 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1414090053,$s,8)|0);
  __ZN11nes_state_t4swapEv($s);
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $$3 = $17;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $19 = ((($this)) + 49|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if (!($21)) {
  $22 = $s1;
  $23 = $22;
  HEAP32[$23>>2] = 0;
  $24 = (($22) + 4)|0;
  $25 = $24;
  HEAP32[$25>>2] = 0;
  $26 = ((($this)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = $28&65535;
  HEAP16[$s1>>1] = $29;
  $30 = ((($27)) + 8|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = ((($s1)) + 2|0);
  HEAP8[$32>>0] = $31;
  $33 = ((($27)) + 4|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ((($s1)) + 4|0);
  HEAP8[$35>>0] = $34;
  $36 = ((($27)) + 5|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = ((($s1)) + 5|0);
  HEAP8[$38>>0] = $37;
  $39 = ((($27)) + 6|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ((($s1)) + 6|0);
  HEAP8[$41>>0] = $40;
  $42 = ((($27)) + 7|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ((($s1)) + 3|0);
  HEAP8[$44>>0] = $43;
  __ZN11cpu_state_t4swapEv($s1);
  $45 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1129338194,$s1,8)|0);
  __ZN11cpu_state_t4swapEv($s1);
  $46 = ($45|0)==(0|0);
  if (!($46)) {
   $$3 = $45;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $47 = ((($this)) + 52|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = ($48<<24>>24)==(0);
 if (!($49)) {
  $50 = ((($this)) + 40|0);
  $51 = HEAP32[$50>>2]|0;
  dest=$s3; src=$51; stop=dest+52|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
  __ZN11ppu_state_t4swapEv($s3);
  $52 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1347442002,$s3,52)|0);
  __ZN11ppu_state_t4swapEv($s3);
  $53 = ($52|0)==(0|0);
  if (!($53)) {
   $$3 = $52;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $54 = ((($this)) + 51|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = ($55<<24>>24)==(0);
 if (!($56)) {
  $57 = ((($this)) + 36|0);
  $58 = HEAP32[$57>>2]|0;
  dest=$s5; src=$58; stop=dest+72|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
  __ZN11apu_state_t4swapEv($s5);
  $59 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1095783762,$s5,72)|0);
  __ZN11apu_state_t4swapEv($s5);
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $$3 = $59;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $61 = ((($this)) + 50|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = ((($this)) + 32|0);
  $65 = HEAP32[$64>>2]|0;
  ;HEAP32[$s8>>2]=HEAP32[$65>>2]|0;HEAP32[$s8+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$s8+8>>2]=HEAP32[$65+8>>2]|0;
  __ZN14joypad_state_t4swapEv($s8);
  $66 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1129599564,$s8,12)|0);
  __ZN14joypad_state_t4swapEv($s8);
  $67 = ($66|0)==(0|0);
  if (!($67)) {
   $$3 = $66;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $68 = ((($this)) + 53|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = ($69<<24>>24)==(0);
 if (!($70)) {
  $71 = ((($this)) + 44|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($72)) + 8|0);
  $74 = HEAP32[$72>>2]|0;
  $75 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1296126034,$73,$74)|0);
  $76 = ($75|0)==(0|0);
  if (!($76)) {
   $$3 = $75;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $77 = ((($this)) + 54|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[$this>>2]|0;
  $81 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1280459085,$80,2048)|0);
  $82 = ($81|0)==(0|0);
  if (!($82)) {
   $$3 = $81;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $83 = ((($this)) + 55|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = ($84<<24>>24)==(0);
 if (!($85)) {
  $86 = ((($this)) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1397772884,$87,256)|0);
  $89 = ($88|0)==(0|0);
  if (!($89)) {
   $$3 = $88;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $90 = ((($this)) + 58|0);
 $91 = HEAP16[$90>>1]|0;
 $92 = ($91<<16>>16)==(0);
 if (!($92)) {
  $93 = $91 << 16 >> 16;
  $94 = (__ZN15Nes_File_Writer18write_block_headerEll($out,1314144578,$93)|0);
  $95 = ($94|0)==(0|0);
  if (!($95)) {
   $$3 = $94;
   STACKTOP = sp;return ($$3|0);
  }
  $96 = HEAP32[$out>>2]|0;
  $97 = ((($96)) + 8|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($this)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_iiii[$98 & 1023]($out,$100,2048)|0);
  $102 = ($101|0)==(0|0);
  if (!($102)) {
   $$3 = $101;
   STACKTOP = sp;return ($$3|0);
  }
  $103 = HEAP16[$90>>1]|0;
  $104 = ($103<<16>>16)>(2048);
  if ($104) {
   $105 = HEAP32[$out>>2]|0;
   $106 = ((($105)) + 8|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ((($this)) + 16|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (FUNCTION_TABLE_iiii[$107 & 1023]($out,$109,2048)|0);
   $111 = ($110|0)==(0|0);
   if (!($111)) {
    $$3 = $110;
    STACKTOP = sp;return ($$3|0);
   }
  }
 }
 $112 = ((($this)) + 60|0);
 $113 = HEAP16[$112>>1]|0;
 $114 = ($113<<16>>16)==(0);
 if (!($114)) {
  $115 = ((($this)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $113 << 16 >> 16;
  $118 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1128813138,$116,$117)|0);
  $119 = ($118|0)==(0|0);
  if (!($119)) {
   $$3 = $118;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $120 = ((($this)) + 56|0);
 $121 = HEAP16[$120>>1]|0;
 $122 = ($121<<16>>16)==(0);
 if (!($122)) {
  $123 = ((($this)) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $121 << 16 >> 16;
  $126 = (__ZN15Nes_File_Writer11write_blockElPKvl($out,1397899597,$124,$125)|0);
  $127 = ($126|0)==(0|0);
  if (!($127)) {
   $$3 = $126;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $$3 = 0;
 STACKTOP = sp;return ($$3|0);
}
function __ZNK9Nes_State5writeE16Auto_File_Writer($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $writer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 32|0;
 $writer = sp + 8|0;
 $1 = sp;
 __ZN15Nes_File_WriterC2Ev($writer);
 HEAP32[$writer>>2] = (544428);
 $2 = HEAP32[$out>>2]|0;
 $3 = ((($out)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$out>>2] = 0;
 HEAP32[$0>>2] = $2;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $4;
 HEAP32[$1>>2] = 0;
 __THREW__ = 0;
 $7 = (invoke_iiii(350,($writer|0),($0|0),1313166163)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   __THREW__ = 0;
   invoke_vi(330,($0|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   } else {
    $eh$lpad$body$index2Z2D = $13;$eh$lpad$body$indexZ2D = $12;
    label = 9;
   }
  } else {
   __THREW__ = 0;
   invoke_vi(330,($0|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $23 = ___cxa_find_matching_catch()|0;
    $24 = tempRet0;
    $eh$lpad$body$index2Z2D = $24;$eh$lpad$body$indexZ2D = $23;
    label = 9;
    break;
   }
   __THREW__ = 0;
   invoke_vi(330,($1|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    $20 = ($7|0)==(0|0);
    if (!($20)) {
     $$02 = $7;
     __ZN15Nes_File_WriterD2Ev($writer);
     STACKTOP = sp;return ($$02|0);
    }
    __THREW__ = 0;
    $27 = (invoke_iii(351,($this|0),($writer|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ($27|0)==(0|0);
     if (!($30)) {
      $$02 = $27;
      __ZN15Nes_File_WriterD2Ev($writer);
      STACKTOP = sp;return ($$02|0);
     }
     __THREW__ = 0;
     $31 = (invoke_ii(352,($writer|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $$02 = $31;
      __ZN15Nes_File_WriterD2Ev($writer);
      STACKTOP = sp;return ($$02|0);
     }
    }
   }
   $21 = ___cxa_find_matching_catch()|0;
   $22 = tempRet0;
   $$0 = $22;$$01 = $21;
  }
 } while(0);
 if ((label|0) == 9) {
  __THREW__ = 0;
  invoke_vi(330,($1|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $36 = ___cxa_find_matching_catch(0|0)|0;
   $37 = tempRet0;
   ___clang_call_terminate($36);
   // unreachable;
  } else {
   $$0 = $eh$lpad$body$index2Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
 }
 __THREW__ = 0;
 invoke_vi(116,($writer|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN16Nes_State_ReaderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (297412);
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 __ZN15Nes_File_ReaderD2Ev($this);
 return;
}
function __ZN16Nes_State_ReaderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (297412);
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 __THREW__ = 0;
 invoke_vi(119,($this|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  _free($this);
  ___resumeException($5|0);
  // unreachable;
 } else {
  _free($this);
  return;
 }
}
function __ZN16Nes_State_Reader5beginE16Auto_File_ReaderP9Nes_State($this,$dr,$out) {
 $this = $this|0;
 $dr = $dr|0;
 $out = $out|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = $out;
 $2 = ($out|0)==(0|0);
 if ($2) {
  $3 = (__Znwj(21216)|0);
  $4 = ((($3)) + 64|0);
  $5 = ((($3)) + 28|0);
  HEAP32[$5>>2] = $4;
  $6 = ((($3)) + 76|0);
  $7 = ((($3)) + 32|0);
  HEAP32[$7>>2] = $6;
  $8 = ((($3)) + 88|0);
  $9 = ((($3)) + 36|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($3)) + 160|0);
  $11 = ((($3)) + 40|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($3)) + 216|0);
  $13 = ((($3)) + 44|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($3)) + 480|0);
  HEAP32[$3>>2] = $14;
  $15 = ((($3)) + 2528|0);
  $16 = ((($3)) + 4|0);
  HEAP32[$16>>2] = $15;
  $17 = ((($3)) + 10720|0);
  $18 = ((($3)) + 8|0);
  HEAP32[$18>>2] = $17;
  $19 = ((($3)) + 10976|0);
  $20 = ((($3)) + 12|0);
  HEAP32[$20>>2] = $19;
  $21 = ((($3)) + 13024|0);
  $22 = ((($3)) + 16|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($this)) + 40|0);
  HEAP32[$23>>2] = $3;
  HEAP32[$1>>2] = $3;
 }
 $24 = HEAP32[$dr>>2]|0;
 HEAP32[$0>>2] = $24;
 $25 = ((($dr)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 4|0);
 HEAP32[$27>>2] = $26;
 HEAP32[$dr>>2] = 0;
 __THREW__ = 0;
 $28 = (invoke_iii(353,($this|0),($0|0))|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  __THREW__ = 0;
  invoke_vi(328,($0|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $39 = ___cxa_find_matching_catch(0|0)|0;
   $40 = tempRet0;
   ___clang_call_terminate($39);
   // unreachable;
  } else {
   ___resumeException($32|0);
   // unreachable;
  }
 }
 __ZN16Auto_File_ReaderD2Ev($0);
 $31 = ($28|0)==(0|0);
 if (!($31)) {
  $$0 = $28;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = ((($this)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(1313166163);
 $$ = $38 ? 0 : 840387;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function __ZN9Nes_State4readE16Auto_File_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $reader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $reader = sp;
 $0 = sp + 48|0;
 __ZN15Nes_File_ReaderC2Ev($reader);
 HEAP32[$reader>>2] = (297412);
 $1 = ((($reader)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($reader)) + 40|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$in>>2]|0;
 HEAP32[$0>>2] = $3;
 $4 = ((($in)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$in>>2] = 0;
 __THREW__ = 0;
 $7 = (invoke_iiii(354,($reader|0),($0|0),($this|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  __THREW__ = 0;
  invoke_vi(328,($0|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  } else {
   $$01 = $20;$$02 = $19;
  }
 } else {
  __THREW__ = 0;
  invoke_vi(328,($0|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  L5: do {
   if ($11) {
    $17 = ___cxa_find_matching_catch()|0;
    $18 = tempRet0;
    $lpad$phi$index = $17;$lpad$phi$index2 = $18;
   } else {
    $12 = ($7|0)==(0|0);
    L8: do {
     if ($12) {
      $13 = ((($reader)) + 36|0);
      $14 = ((($reader)) + 32|0);
      while(1) {
       $23 = HEAP32[$13>>2]|0;
       $24 = ($23|0)==(0);
       if ($24) {
        $25 = HEAP32[$14>>2]|0;
        $26 = ($25|0)==(2);
        if ($26) {
         $$0 = 0;
         break L8;
        }
        $30 = HEAP32[$1>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_iii(356,($30|0),($reader|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         break;
        } else {
         $$0$i = $31;
        }
       } else {
        __THREW__ = 0;
        $27 = (invoke_ii(355,($reader|0))|0);
        $28 = __THREW__; __THREW__ = 0;
        $29 = $28&1;
        if ($29) {
         break;
        } else {
         $$0$i = $27;
        }
       }
       $34 = ($$0$i|0)==(0|0);
       if (!($34)) {
        $$0 = $$0$i;
        break L8;
       }
      }
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index2 = $16;
      break L5;
     } else {
      $$0 = $7;
     }
    } while(0);
    HEAP32[$reader>>2] = (297412);
    $35 = HEAP32[$2>>2]|0;
    $36 = ($35|0)==(0|0);
    if ($36) {
     __ZN15Nes_File_ReaderD2Ev($reader);
     STACKTOP = sp;return ($$0|0);
    }
    __ZdlPv($35);
    __ZN15Nes_File_ReaderD2Ev($reader);
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $$01 = $lpad$phi$index2;$$02 = $lpad$phi$index;
 }
 HEAP32[$reader>>2] = (297412);
 $37 = HEAP32[$2>>2]|0;
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  __ZdlPv($37);
 }
 __THREW__ = 0;
 invoke_vi(119,($reader|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $41 = ___cxa_find_matching_catch(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 } else {
  ___resumeException($$02|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10Nes_State_11read_blocksER15Nes_File_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div$i = 0, $s = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0;
 var $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 $0 = ((($in)) + 8|0);
 $1 = ((($this)) + 54|0);
 $2 = ((($this)) + 16|0);
 $3 = ((($this)) + 55|0);
 $4 = ((($this)) + 32|0);
 $5 = ((($this)) + 36|0);
 $6 = ((($this)) + 40|0);
 $7 = ((($this)) + 20|0);
 $8 = (__ZN15Nes_File_Reader10next_blockEv($in)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($in)) + 24|0);
 $11 = ((($this)) + 48|0);
 $12 = ((($this)) + 28|0);
 $13 = ((($s)) + 4|0);
 $14 = ((($this)) + 49|0);
 $15 = ((($this)) + 52|0);
 $16 = ((($this)) + 51|0);
 $17 = ((($this)) + 50|0);
 $18 = ((($this)) + 44|0);
 $19 = ((($this)) + 53|0);
 $20 = ((($this)) + 8|0);
 $21 = ((($this)) + 58|0);
 $22 = ((($this)) + 12|0);
 $23 = ((($this)) + 60|0);
 $24 = ((($this)) + 56|0);
 $25 = ((($this)) + 4|0);
 L4: while(1) {
  $26 = HEAP32[$10>>2]|0;
  $switch$split2D = ($26|0)<(1296126034);
  do {
   if ($switch$split2D) {
    $switch$split12D = ($26|0)<(1129338194);
    if ($switch$split12D) {
     $switch$split72D = ($26|0)<(1128813138);
     if (!($switch$split72D)) {
      switch ($26|0) {
      case 1128813138:  {
       break;
      }
      default: {
       $$0 = 0;
       label = 24;
       break L4;
      }
      }
      $110 = $0;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = $112&65535;
      HEAP16[$23>>1] = $116;
      $117 = HEAP32[$2>>2]|0;
      $118 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$117,8192)|0);
      $119 = ($118|0)==(0|0);
      if ($119) {
       break;
      } else {
       $$0 = $118;
       label = 24;
       break L4;
      }
     }
     switch ($26|0) {
     case 1095783762:  {
      break;
     }
     default: {
      $$0 = 0;
      label = 24;
      break L4;
     }
     }
     $69 = HEAP32[$5>>2]|0;
     dest=$69; stop=dest+72|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
     $70 = HEAP32[$5>>2]|0;
     $71 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$70,72)|0);
     __ZN11apu_state_t4swapEv($70);
     $72 = ($71|0)==(0|0);
     if (!($72)) {
      $$0 = $71;
      label = 24;
      break L4;
     }
     HEAP8[$16>>0] = 1;
     break;
    }
    $switch$split102D = ($26|0)<(1129599564);
    if ($switch$split102D) {
     switch ($26|0) {
     case 1129338194:  {
      break;
     }
     default: {
      $$0 = 0;
      label = 24;
      break L4;
     }
     }
     $40 = $s;
     $41 = $40;
     HEAP32[$41>>2] = 0;
     $42 = (($40) + 4)|0;
     $43 = $42;
     HEAP32[$43>>2] = 0;
     $44 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$s,8)|0);
     __ZN11cpu_state_t4swapEv($s);
     $45 = ($44|0)==(0|0);
     if (!($45)) {
      $$0 = $44;
      label = 24;
      break L4;
     }
     $46 = HEAP32[$s>>2]|0;
     $47 = $46 & 65535;
     $48 = HEAP32[$12>>2]|0;
     HEAP32[$48>>2] = $47;
     $49 = $46 >>> 16;
     $50 = $49&255;
     $51 = ((($48)) + 8|0);
     HEAP8[$51>>0] = $50;
     $52 = HEAP32[$13>>2]|0;
     $53 = $52&65535;
     $54 = $52&255;
     $55 = ((($48)) + 4|0);
     HEAP8[$55>>0] = $54;
     $56 = ($53&65535) >>> 8;
     $57 = $56&255;
     $58 = ((($48)) + 5|0);
     HEAP8[$58>>0] = $57;
     $59 = $52 >>> 16;
     $60 = $59&255;
     $61 = ((($48)) + 6|0);
     HEAP8[$61>>0] = $60;
     $62 = $46 >>> 24;
     $63 = $62&255;
     $64 = ((($48)) + 7|0);
     HEAP8[$64>>0] = $63;
     HEAP8[$14>>0] = 1;
     break;
    }
    $switch$split192D = ($26|0)<(1280459085);
    if (!($switch$split192D)) {
     switch ($26|0) {
     case 1280459085:  {
      break;
     }
     default: {
      $$0 = 0;
      label = 24;
      break L4;
     }
     }
     HEAP8[$1>>0] = 1;
     $107 = HEAP32[$this>>2]|0;
     $108 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$107,2048)|0);
     $109 = ($108|0)==(0|0);
     if ($109) {
      break;
     } else {
      $$0 = $108;
      label = 24;
      break L4;
     }
    }
    switch ($26|0) {
    case 1129599564:  {
     break;
    }
    default: {
     $$0 = 0;
     label = 24;
     break L4;
    }
    }
    $73 = HEAP32[$4>>2]|0;
    ;HEAP32[$73>>2]=0|0;HEAP32[$73+4>>2]=0|0;HEAP32[$73+8>>2]=0|0;
    $74 = HEAP32[$4>>2]|0;
    $75 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$74,12)|0);
    __ZN14joypad_state_t4swapEv($74);
    $76 = ($75|0)==(0|0);
    if (!($76)) {
     $$0 = $75;
     label = 24;
     break L4;
    }
    HEAP8[$17>>0] = 1;
   } else {
    $switch$split42D = ($26|0)<(1397772884);
    if (!($switch$split42D)) {
     $switch$split162D = ($26|0)<(1397899597);
     if ($switch$split162D) {
      switch ($26|0) {
      case 1397772884:  {
       break;
      }
      default: {
       $$0 = 0;
       label = 24;
       break L4;
      }
      }
      HEAP8[$3>>0] = 1;
      $87 = HEAP32[$20>>2]|0;
      $88 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$87,256)|0);
      $89 = ($88|0)==(0|0);
      if ($89) {
       break;
      } else {
       $$0 = $88;
       label = 24;
       break L4;
      }
     }
     $switch$split252D = ($26|0)<(1414090053);
     if ($switch$split252D) {
      switch ($26|0) {
      case 1397899597:  {
       break;
      }
      default: {
       $$0 = 0;
       label = 24;
       break L4;
      }
      }
      $120 = $0;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = $122&65535;
      HEAP16[$24>>1] = $126;
      $127 = HEAP32[$25>>2]|0;
      $128 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$127,8192)|0);
      $129 = ($128|0)==(0|0);
      if ($129) {
       break;
      } else {
       $$0 = $128;
       label = 24;
       break L4;
      }
     }
     switch ($26|0) {
     case 1414090053:  {
      break;
     }
     default: {
      $$0 = 0;
      label = 24;
      break L4;
     }
     }
     $27 = $7;
     $28 = $27;
     HEAP32[$28>>2] = 0;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     $31 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$7,8)|0);
     __ZN11nes_state_t4swapEv($7);
     $32 = ($31|0)==(0|0);
     if (!($32)) {
      $$0 = $31;
      label = 24;
      break L4;
     }
     $33 = $7;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = (($33) + 4)|0;
     $37 = $36;
     $38 = HEAP32[$37>>2]|0;
     $39 = $35&65535;
     $div$i = (($39&65535) / 5)&-1;
     HEAP16[$7>>1] = $div$i;
     HEAP8[$11>>0] = 1;
     break;
    }
    $switch$split132D = ($26|0)<(1314144578);
    if ($switch$split132D) {
     switch ($26|0) {
     case 1296126034:  {
      break;
     }
     default: {
      $$0 = 0;
      label = 24;
      break L4;
     }
     }
     $77 = $0;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = HEAP32[$18>>2]|0;
     HEAP32[$83>>2] = $79;
     $84 = ((($83)) + 8|0);
     $85 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$84,256)|0);
     $86 = ($85|0)==(0|0);
     if (!($86)) {
      $$0 = $85;
      label = 24;
      break L4;
     }
     HEAP8[$19>>0] = 1;
     break;
    }
    $switch$split222D = ($26|0)<(1347442002);
    if (!($switch$split222D)) {
     switch ($26|0) {
     case 1347442002:  {
      break;
     }
     default: {
      $$0 = 0;
      label = 24;
      break L4;
     }
     }
     $65 = HEAP32[$6>>2]|0;
     dest=$65; stop=dest+52|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
     $66 = HEAP32[$6>>2]|0;
     $67 = (__ZN15Nes_File_Reader15read_block_dataEPvl($in,$66,52)|0);
     __ZN11ppu_state_t4swapEv($66);
     $68 = ($67|0)==(0|0);
     if (!($68)) {
      $$0 = $67;
      label = 24;
      break L4;
     }
     HEAP8[$15>>0] = 1;
     break;
    }
    switch ($26|0) {
    case 1314144578:  {
     break;
    }
    default: {
     $$0 = 0;
     label = 24;
     break L4;
    }
    }
    $90 = $0;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = $92&65535;
    HEAP16[$21>>1] = $96;
    $97 = HEAP32[$22>>2]|0;
    $98 = (__ZN11Data_Reader4readEPvi($in,$97,2048)|0);
    $99 = ($98|0)==(0|0);
    if (!($99)) {
     $$0 = $98;
     label = 24;
     break L4;
    }
    $100 = HEAP16[$21>>1]|0;
    $101 = ($100<<16>>16)>(2048);
    if ($101) {
     $104 = HEAP32[$2>>2]|0;
     $105 = (__ZN11Data_Reader4readEPvi($in,$104,2048)|0);
     $106 = ($105|0)==(0|0);
     if (!($106)) {
      $$0 = $105;
      label = 24;
      break L4;
     }
    }
   }
  } while(0);
  $102 = (__ZN15Nes_File_Reader10next_blockEv($in)|0);
  $103 = ($102|0)==(0|0);
  if (!($103)) {
   $$0 = $102;
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN11Data_Reader4readEPvi($this,$p,$n) {
 $this = $this|0;
 $p = $p|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $$0 = 778160;
  return ($$0|0);
 }
 $1 = ($n|0)<(1);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($n|0)<(0);
 $3 = $2 << 31 >> 31;
 $4 = ((($this)) + 8|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($3>>>0)>($10>>>0);
 $12 = ($n>>>0)>($7>>>0);
 $13 = ($3|0)==($10|0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  $$0 = 778234;
  return ($$0|0);
 }
 $16 = HEAP32[$this>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_iiii[$18 & 1023]($this,$p,$n)|0);
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $$0 = $19;
  return ($$0|0);
 }
 $21 = $4;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_i64Subtract(($23|0),($26|0),($n|0),($3|0))|0);
 $28 = tempRet0;
 $29 = $4;
 $30 = $29;
 HEAP32[$30>>2] = $27;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $$0 = 0;
 return ($$0|0);
}
function __ZN11Data_Reader6skip_vEi($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $$01 = $count;
 while(1) {
  $0 = ($$01|0)==(0);
  if ($0) {
   $$0 = 0;
   label = 4;
   break;
  }
  $1 = ($$01|0)<(512);
  $2 = $1 ? $$01 : 512;
  $3 = (($$01) - ($2))|0;
  $4 = HEAP32[$this>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($this,$buf,$2)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$01 = $3;
  } else {
   $$0 = $7;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN11Data_Reader4skipEi($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $$0 = 778160;
  return ($$0|0);
 }
 $1 = ($n|0)<(1);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($n|0)<(0);
 $3 = $2 << 31 >> 31;
 $4 = ((($this)) + 8|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($3>>>0)>($10>>>0);
 $12 = ($n>>>0)>($7>>>0);
 $13 = ($3|0)==($10|0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  $$0 = 778234;
  return ($$0|0);
 }
 $16 = HEAP32[$this>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_iii[$18 & 511]($this,$n)|0);
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $$0 = $19;
  return ($$0|0);
 }
 $21 = $4;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_i64Subtract(($23|0),($26|0),($n|0),($3|0))|0);
 $28 = tempRet0;
 $29 = $4;
 $30 = $29;
 HEAP32[$30>>2] = $27;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $$0 = 0;
 return ($$0|0);
}
function __ZN11File_Reader6skip_vEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$this>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 16|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($this)) + 8|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_i64Add(($8|0),($11|0),($0|0),($1|0))|0);
 $20 = tempRet0;
 $21 = (_i64Subtract(($19|0),($20|0),($15|0),($18|0))|0);
 $22 = tempRet0;
 $23 = (FUNCTION_TABLE_iiii[$4 & 1023]($this,$21,$22)|0);
 return ($23|0);
}
function __ZN15Mem_File_ReaderC2EPKvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 16|0);
 HEAP32[$this>>2] = (297436);
 $2 = ((($this)) + 24|0);
 HEAP32[$2>>2] = $p;
 $3 = ($s|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = $1;
 $6 = $5;
 HEAP32[$6>>2] = $s;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 $9 = $0;
 $10 = $9;
 HEAP32[$10>>2] = $s;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $4;
 return;
}
function __ZN15Mem_File_Reader6read_vEPvi($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 16|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 8|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_i64Subtract(($5|0),($8|0),($12|0),($15|0))|0);
 $17 = tempRet0;
 $18 = (($1) + ($16)|0);
 _memcpy(($p|0),($18|0),($s|0))|0;
 return (0|0);
}
function __ZN15Mem_File_Reader6seek_vEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN15Std_File_ReaderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 16|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 HEAP32[$this>>2] = (297472);
 $10 = ((($this)) + 24|0);
 HEAP32[$10>>2] = 0;
 return;
}
function __ZN15Std_File_ReaderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (297472);
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 (_fclose($1)|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN15Std_File_ReaderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (297472);
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _free($this);
  return;
 }
 (_fclose($1)|0);
 _free($this);
 return;
}
function __ZN15Std_File_Reader4openEPKc($this,$path) {
 $this = $this|0;
 $path = $path|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$select = 0, $switch$select2 = 0, $switch$selectcmp = 0, $switch$selectcmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  (_fclose($1)|0);
  HEAP32[$0>>2] = 0;
 }
 $3 = (___errno_location()|0);
 HEAP32[$3>>2] = 0;
 $4 = (_fopen($path,840413)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[$3>>2]|0;
  $switch$selectcmp = ($6|0)==(12);
  $switch$select = $switch$selectcmp ? 778145 : 778196;
  $switch$selectcmp1 = ($6|0)==(2);
  $switch$select2 = $switch$selectcmp1 ? 778180 : $switch$select;
  $$0 = $switch$select2;
  return ($$0|0);
 }
 $7 = (_fseek($4,0,2)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (_ftell($4)|0);
  $10 = ($9|0)<(0);
  if (!($10)) {
   $11 = (_fseek($4,0,0)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP32[$0>>2] = $4;
    $13 = ($9|0)<(0);
    $14 = $13 << 31 >> 31;
    $15 = ((($this)) + 16|0);
    $16 = $15;
    $17 = $16;
    HEAP32[$17>>2] = $9;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP32[$19>>2] = $14;
    $20 = ((($this)) + 8|0);
    $21 = $20;
    $22 = $21;
    HEAP32[$22>>2] = $9;
    $23 = (($21) + 4)|0;
    $24 = $23;
    HEAP32[$24>>2] = $14;
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 (_fclose($4)|0);
 $$0 = 778216;
 return ($$0|0);
}
function __ZN15Std_File_Reader6read_vEPvi($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fread($p,1,$s,$1)|0);
 $3 = ($2|0)==($s|0);
 $$ = $3 ? 0 : 778216;
 return ($$|0);
}
function __ZN15Std_File_Reader6seek_vEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___fseeko($3,$0,0)|0);
 $5 = ($4|0)==(0);
 $$ = $5 ? 0 : 778216;
 return ($$|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEmiP11Blip_Buffer($this,$time,$delta,$blip_buf) {
 $this = $this|0;
 $time = $time|0;
 $delta = $delta|0;
 $blip_buf = $blip_buf|0;
 var $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1415 = 0, $$sum16 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2021 = 0, $$sum22 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum2627 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum45 = 0, $$sum6 = 0;
 var $$sum7 = 0, $$sum8 = 0, $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 804|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = Math_imul($1, $delta)|0;
 $3 = $time >>> 10;
 $4 = $3 & 63;
 $$sum = (64 - ($4))|0;
 $5 = (($this) + ($$sum<<1)|0);
 $6 = ((($blip_buf)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $time >>> 16;
 $9 = HEAP16[$5>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = Math_imul($10, $2)|0;
 $$sum1 = (($8) + 2)|0;
 $12 = (($7) + ($$sum1<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + ($13))|0;
 $$sum2 = (($$sum) + 64)|0;
 $15 = (($this) + ($$sum2<<1)|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $18 = Math_imul($17, $2)|0;
 $$sum3 = (($8) + 3)|0;
 $19 = (($7) + ($$sum3<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + ($20))|0;
 $$sum45 = $$sum | 128;
 $22 = (($this) + ($$sum45<<1)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 HEAP32[$12>>2] = $14;
 HEAP32[$19>>2] = $21;
 $25 = Math_imul($24, $2)|0;
 $$sum6 = (($8) + 4)|0;
 $26 = (($7) + ($$sum6<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + ($27))|0;
 $$sum7 = (($$sum) + 192)|0;
 $29 = (($this) + ($$sum7<<1)|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30 << 16 >> 16;
 $32 = Math_imul($31, $2)|0;
 $$sum8 = (($8) + 5)|0;
 $33 = (($7) + ($$sum8<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + ($34))|0;
 $$sum910 = $$sum | 256;
 $36 = (($this) + ($$sum910<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37 << 16 >> 16;
 HEAP32[$26>>2] = $28;
 HEAP32[$33>>2] = $35;
 $39 = Math_imul($38, $2)|0;
 $$sum11 = (($8) + 6)|0;
 $40 = (($7) + ($$sum11<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + ($41))|0;
 $$sum12 = (($$sum) + 320)|0;
 $43 = (($this) + ($$sum12<<1)|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 << 16 >> 16;
 $46 = Math_imul($45, $2)|0;
 $$sum13 = (($8) + 7)|0;
 $47 = (($7) + ($$sum13<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + ($48))|0;
 $50 = (($this) + ($4<<1)|0);
 $$sum1415 = $4 | 320;
 $51 = (($this) + ($$sum1415<<1)|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52 << 16 >> 16;
 HEAP32[$40>>2] = $42;
 HEAP32[$47>>2] = $49;
 $54 = Math_imul($53, $2)|0;
 $$sum16 = (($8) + 8)|0;
 $55 = (($7) + ($$sum16<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + ($56))|0;
 $$sum1718 = $4 | 256;
 $58 = (($this) + ($$sum1718<<1)|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59 << 16 >> 16;
 $61 = Math_imul($60, $2)|0;
 $$sum19 = (($8) + 9)|0;
 $62 = (($7) + ($$sum19<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + ($63))|0;
 $$sum2021 = $4 | 192;
 $65 = (($this) + ($$sum2021<<1)|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66 << 16 >> 16;
 HEAP32[$55>>2] = $57;
 HEAP32[$62>>2] = $64;
 $68 = Math_imul($67, $2)|0;
 $$sum22 = (($8) + 10)|0;
 $69 = (($7) + ($$sum22<<2)|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + ($70))|0;
 $$sum2324 = $4 | 128;
 $72 = (($this) + ($$sum2324<<1)|0);
 $73 = HEAP16[$72>>1]|0;
 $74 = $73 << 16 >> 16;
 $75 = Math_imul($74, $2)|0;
 $$sum25 = (($8) + 11)|0;
 $76 = (($7) + ($$sum25<<2)|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($75) + ($77))|0;
 $$sum2627 = $4 | 64;
 $79 = (($this) + ($$sum2627<<1)|0);
 $80 = HEAP16[$79>>1]|0;
 $81 = $80 << 16 >> 16;
 HEAP32[$69>>2] = $71;
 HEAP32[$76>>2] = $78;
 $82 = Math_imul($81, $2)|0;
 $$sum28 = (($8) + 12)|0;
 $83 = (($7) + ($$sum28<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + ($84))|0;
 $86 = HEAP16[$50>>1]|0;
 $87 = $86 << 16 >> 16;
 $88 = Math_imul($87, $2)|0;
 $$sum29 = (($8) + 13)|0;
 $89 = (($7) + ($$sum29<<2)|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + ($90))|0;
 HEAP32[$83>>2] = $85;
 HEAP32[$89>>2] = $91;
 return;
}
function __ZNK12Nes_Ppu_Impl24first_opaque_sprite_lineEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $line$0 = 0, $line$14 = 0, $p$0 = 0, $phitmp = 0, $tile$0$i = 0, $twice$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 73|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = HEAP8[$this>>0]|0;
 $4 = $3&255;
 $5 = $4 << 5;
 $6 = $5 & 256;
 $7 = $6 | $2;
 $8 = $4 & 32;
 $9 = ($8|0)==(0);
 if ($9) {
  $tile$0$i = $7;
 } else {
  $10 = $2 << 8;
  $11 = $10 & 256;
  $12 = $2 & 254;
  $13 = $11 | $12;
  $tile$0$i = $13;
 }
 $14 = $tile$0$i << 4;
 $15 = $tile$0$i >>> 6;
 $16 = $15 & 4194303;
 $17 = (((($this)) + 344|0) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($14))|0;
 $20 = ((($this)) + 392|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19)|0);
 $23 = $4 >>> 5;
 $24 = $23 & 1;
 $phitmp = (($24) + -1)|0;
 $line$0 = 0;$p$0 = $22;$twice$0 = $phitmp;
 while(1) {
  $25 = HEAP8[$p$0>>0]|0;
  $26 = ((($p$0)) + 8|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 | $25;
  $29 = ($28<<24>>24)==(0);
  if (!($29)) {
   $line$14 = $line$0;
   label = 6;
   break;
  }
  $30 = $line$0 | 1;
  $31 = ((($p$0)) + 1|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = ((($p$0)) + 9|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 | $32;
  $36 = ($35<<24>>24)==(0);
  if (!($36)) {
   $line$14 = $30;
   label = 6;
   break;
  }
  $37 = $line$0 | 2;
  $38 = ((($p$0)) + 2|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ((($p$0)) + 10|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 | $39;
  $43 = ($42<<24>>24)==(0);
  if (!($43)) {
   $line$14 = $37;
   label = 6;
   break;
  }
  $44 = $line$0 | 3;
  $45 = ((($p$0)) + 3|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = ((($p$0)) + 11|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48 | $46;
  $50 = ($49<<24>>24)==(0);
  if (!($50)) {
   $line$14 = $44;
   label = 6;
   break;
  }
  $51 = $line$0 | 4;
  $52 = ((($p$0)) + 4|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ((($p$0)) + 12|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55 | $53;
  $57 = ($56<<24>>24)==(0);
  if (!($57)) {
   $line$14 = $51;
   label = 6;
   break;
  }
  $58 = $line$0 | 5;
  $59 = ((($p$0)) + 5|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = ((($p$0)) + 13|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 | $60;
  $64 = ($63<<24>>24)==(0);
  if (!($64)) {
   $line$14 = $58;
   label = 6;
   break;
  }
  $65 = $line$0 | 6;
  $66 = ((($p$0)) + 6|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = ((($p$0)) + 14|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69 | $67;
  $71 = ($70<<24>>24)==(0);
  if (!($71)) {
   $line$14 = $65;
   label = 6;
   break;
  }
  $72 = $line$0 | 7;
  $73 = ((($p$0)) + 7|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = ((($p$0)) + 15|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76 | $74;
  $78 = ($77<<24>>24)==(0);
  if (!($78)) {
   $line$14 = $72;
   label = 6;
   break;
  }
  $79 = (($line$0) + 8)|0;
  $80 = ((($p$0)) + 16|0);
  $81 = ($twice$0|0)==(0);
  if ($81) {
   $line$0 = $79;$p$0 = $80;$twice$0 = -1;
  } else {
   $line$14 = $79;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($line$14|0);
 }
 return (0)|0;
}
function __ZN12Nes_Ppu_Impl11update_tileEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $flipped_out$01 = 0, $in$04 = 0, $n$03 = 0, $out$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 392|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $index << 4;
 $3 = (($1) + ($2)|0);
 $4 = ((($this)) + 404|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($index<<4)|0);
 $7 = ((($this)) + 408|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($index<<4)|0);
 $flipped_out$01 = $9;$in$04 = $3;$n$03 = 4;$out$02 = $6;
 while(1) {
  $10 = (($n$03) + -1)|0;
  $11 = HEAP8[$in$04>>0]|0;
  $12 = $11&255;
  $13 = $12 << 7;
  $14 = $13 | $12;
  $15 = $14 << 14;
  $16 = $15 | $14;
  $17 = $16 & 286331153;
  $18 = ((($in$04)) + 8|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 7;
  $22 = $21 | $20;
  $23 = $22 << 14;
  $24 = $23 | $22;
  $25 = $24 << 1;
  $26 = $25 & 572662306;
  $27 = $26 | $17;
  $28 = ((($in$04)) + 1|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 << 7;
  $32 = $31 | $30;
  $33 = $32 << 14;
  $34 = $33 | $32;
  $35 = $34 << 2;
  $36 = $35 & 1145324612;
  $37 = $27 | $36;
  $38 = ((($in$04)) + 9|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $40 << 7;
  $42 = $41 | $40;
  $43 = $42 << 14;
  $44 = $43 | $42;
  $45 = $44 << 3;
  $46 = $45 & -2004318072;
  $47 = $37 | $46;
  $48 = ((($in$04)) + 2|0);
  $49 = $47 >>> 24;
  $50 = $49&255;
  HEAP8[$out$02>>0] = $50;
  $51 = $47 >>> 16;
  $52 = $51&255;
  $53 = ((($out$02)) + 1|0);
  HEAP8[$53>>0] = $52;
  $54 = $47 >>> 8;
  $55 = $54&255;
  $56 = ((($out$02)) + 2|0);
  HEAP8[$56>>0] = $55;
  $57 = $47&255;
  $58 = ((($out$02)) + 3|0);
  HEAP8[$58>>0] = $57;
  $59 = ((($out$02)) + 4|0);
  $60 = $47 >>> 28;
  $61 = $47 >>> 20;
  $62 = $61 & 240;
  $63 = $62 | $60;
  $64 = $61 & 15;
  $65 = $47 >>> 12;
  $66 = $65 & 240;
  $67 = $64 | $66;
  $68 = $47 << 4;
  $69 = $68 & 983040;
  $70 = $47 << 12;
  $71 = $70 & 15728640;
  $72 = $69 | $71;
  $73 = $47 << 20;
  $74 = $73 & 251658240;
  $75 = $47 << 28;
  $76 = $74 | $75;
  $77 = $76 >>> 24;
  $78 = $77&255;
  HEAP8[$flipped_out$01>>0] = $78;
  $79 = $72 >>> 16;
  $80 = $79&255;
  $81 = ((($flipped_out$01)) + 1|0);
  HEAP8[$81>>0] = $80;
  $82 = $67&255;
  $83 = ((($flipped_out$01)) + 2|0);
  HEAP8[$83>>0] = $82;
  $84 = $63&255;
  $85 = ((($flipped_out$01)) + 3|0);
  HEAP8[$85>>0] = $84;
  $86 = ((($flipped_out$01)) + 4|0);
  $87 = ($10|0)==(0);
  if ($87) {
   break;
  } else {
   $flipped_out$01 = $86;$in$04 = $48;$n$03 = $10;$out$02 = $59;
  }
 }
 return;
}
function __ZN10Nes_Mapper4readElj($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZN10Nes_Mapper17write_interceptedElji($this,$0,$1,$2) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN12Multi_BufferD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11Mono_Buffer10clock_rateEl($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = ((($this)) + 48|0);
 HEAP32[$1>>2] = $rate;
 $2 = (__ZNK11Blip_Buffer17clock_rate_factorEl($0,$rate)|0);
 HEAP32[$0>>2] = $2;
 return;
}
function __ZN11Mono_Buffer9bass_freqEi($this,$freq) {
 $this = $this|0;
 $freq = $freq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 __ZN11Blip_Buffer9bass_freqEi($0,$freq);
 return;
}
function __ZN11Mono_Buffer5clearEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 __ZN11Blip_Buffer5clearEi($0,1);
 return;
}
function __ZN11Mono_Buffer12read_samplesEPsl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = (__ZN11Blip_Buffer12read_samplesEPsli($0,$p,$s,0)|0);
 return ($1|0);
}
function __ZNK11Mono_Buffer13samples_availEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 16;
 return ($2|0);
}
function __ZN7Nes_Emu13loading_stateERK9Nes_State($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Nes_Mapper11reset_stateEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11Mapper_Mmc3D0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN11Mapper_Mmc38next_irqEl($this,$present) {
 $this = $this|0;
 $present = $present|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remain$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$2 & 1023]($this,$present);
 $3 = ((($this)) + 33|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $$0 = 1073741823;
  return ($$0|0);
 }
 $6 = ((($this)) + 34|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (__ZNK10Nes_Mapper11ppu_enabledEv($this)|0);
 if (!($9)) {
  $$0 = 1073741823;
  return ($$0|0);
 }
 $10 = ((($this)) + 31|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($12) + -1)|0;
 $14 = ($11<<24>>24)==(0);
 if ($14) {
  $15 = ((($this)) + 32|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $remain$0 = $17;
 } else {
  $remain$0 = $13;
 }
 $18 = ($remain$0*341)|0;
 $19 = ((($this)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + ($20))|0;
 $22 = ($21|0)>(88928);
 if ($22) {
  $$0 = 1073741823;
  return ($$0|0);
 }
 $23 = (($21|0) / 3)&-1;
 $24 = (($23) + 1)|0;
 $$0 = $24;
 return ($$0|0);
}
function __ZN11Mapper_Mmc39end_frameEl($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$2 & 1023]($this,$end_time);
 $3 = ((($this)) + 36|0);
 HEAP32[$3>>2] = 7088;
 return;
}
function __ZN11Mapper_Mmc311a12_clockedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($1) + -1)|0;
  HEAP32[$0>>2] = $3;
 }
 $4 = ((($this)) + 31|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (($5) + -1)<<24>>24;
 HEAP8[$4>>0] = $6;
 $7 = ($5<<24>>24)==(0);
 if ($7) {
  $8 = ((($this)) + 32|0);
  $9 = HEAP8[$8>>0]|0;
  HEAP8[$4>>0] = $9;
  $11 = $9;
 } else {
  $11 = $6;
 }
 $10 = ($11<<24>>24)==(0);
 $12 = ((($this)) + 33|0);
 $13 = HEAP8[$12>>0]|0;
 if ($10) {
  $14 = ((($this)) + 34|0);
  HEAP8[$14>>0] = $13;
 }
 $15 = ($13<<24>>24)==(0);
 if ($15) {
  return;
 }
 __ZN10Nes_Mapper11irq_changedEv($this);
 return;
}
function __ZN11Mapper_Mmc313apply_mappingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 29|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 FUNCTION_TABLE_viiii[$2 & 1023]($this,0,40960,$5);
 $6 = HEAP32[$this>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 30|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 FUNCTION_TABLE_viiii[$8 & 1023]($this,0,40961,$11);
 $12 = ((($this)) + 20|0);
 $13 = ((($this)) + 28|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 >>> 7;
 $17 = $16 << 12;
 $18 = HEAP8[$12>>0]|0;
 $19 = $18&255;
 $20 = $19 >>> 1;
 __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$17,11,$20);
 $21 = $17 | 2048;
 $22 = ((($this)) + 21|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 >>> 1;
 __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$21,11,$25);
 $26 = $17 ^ 4096;
 $27 = ((($this)) + 22|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$26,10,$29);
 $30 = $17 ^ 5120;
 $31 = ((($this)) + 23|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$30,10,$33);
 $34 = $17 ^ 6144;
 $35 = ((($this)) + 24|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$34,10,$37);
 $38 = $17 ^ 7168;
 $39 = ((($this)) + 25|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,$38,10,$41);
 $42 = ((($this)) + 27|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,40960,13,$44);
 $45 = HEAP8[$13>>0]|0;
 $46 = $45&255;
 $47 = $46 << 8;
 $48 = $47 & 16384;
 $49 = $48 | 32768;
 $50 = ((($this)) + 26|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,$49,13,$52);
 $53 = $48 ^ 49152;
 __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,$53,13,-2);
 $54 = ((($this)) + 36|0);
 HEAP32[$54>>2] = 7088;
 return;
}
function __ZN11Mapper_Mmc311reset_stateEv($this) {
 $this = $this|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = $0;
 $2 = $1;
 HEAP8[$2>>0]=84148736&255;HEAP8[$2+1>>0]=(84148736>>8)&255;HEAP8[$2+2>>0]=(84148736>>16)&255;HEAP8[$2+3>>0]=84148736>>24;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP8[$4>>0]=16779014&255;HEAP8[$4+1>>0]=(16779014>>8)&255;HEAP8[$4+2>>0]=(16779014>>16)&255;HEAP8[$4+3>>0]=16779014>>24;
 $5 = ((($this)) + 40|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 36|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 29|0);
 $8 = ((($this)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1;
 $13 = $12 ^ 1;
 $$ = $13&255;
 HEAP8[$7>>0] = $$;
 return;
}
function __ZN11Data_ReaderD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN15Mem_File_ReaderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 return;
}
function __ZN11File_Reader6seek_vEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN16Nes_State_WriterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(116,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN11Mapper_Mmc1D0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN11Mapper_Mmc15writeElji($this,$0,$addr,$data) {
 $this = $this|0;
 $0 = $0|0;
 $addr = $addr|0;
 $data = $data|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $data & 128;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $20 = ((($this)) + 20|0);
  $21 = ((($this)) + 24|0);
  HEAP8[$21>>0] = 0;
  $22 = ((($this)) + 25|0);
  HEAP8[$22>>0] = 0;
  $23 = HEAP8[$20>>0]|0;
  $24 = $23&255;
  $25 = $24 | 12;
  $26 = $25&255;
  HEAP8[$20>>0] = $26;
  __ZN11Mapper_Mmc116register_changedEi($this,0);
  return;
 }
 $3 = $data & 1;
 $4 = ((($this)) + 24|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $3 << $6;
 $8 = ((($this)) + 25|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | $7;
 $12 = $11&255;
 HEAP8[$8>>0] = $12;
 $13 = (($5) + 1)<<24>>24;
 HEAP8[$4>>0] = $13;
 $14 = ($13&255)>(4);
 if (!($14)) {
  return;
 }
 $15 = $addr >>> 13;
 $16 = $15 & 3;
 $17 = $11 & 31;
 $18 = $17&255;
 $19 = (((($this)) + 20|0) + ($16)|0);
 HEAP8[$19>>0] = $18;
 HEAP8[$4>>0] = 0;
 HEAP8[$8>>0] = 0;
 __ZN11Mapper_Mmc116register_changedEi($this,$16);
 return;
}
function __ZN11Mapper_Mmc113apply_mappingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN8Nes_Core11enable_sramEbb($1,1,0);
 __ZN11Mapper_Mmc116register_changedEi($this,0);
 return;
}
function __ZN11Mapper_Mmc111reset_stateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 HEAP8[$0>>0] = 15;
 $1 = ((($this)) + 21|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 22|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($this)) + 23|0);
 HEAP8[$3>>0] = 0;
 return;
}
function __ZN12Mapper_CnromD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12Mapper_Cnrom5writeElji($this,$0,$addr,$data) {
 $this = $this|0;
 $0 = $0|0;
 $addr = $addr|0;
 $data = $data|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $data&255;
 $2 = ((($this)) + 20|0);
 HEAP8[$2>>0] = $1;
 $3 = $data & 7;
 __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,0,13,$3);
 return;
}
function __ZN12Mapper_Cnrom13apply_mappingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 7;
 __ZN10Nes_Mapper12set_chr_bankEjNS_11bank_size_tEi($this,0,13,$3);
 return;
}
function __ZN12Mapper_AoromD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12Mapper_Aorom5writeElji($this,$0,$1,$data) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $data = $data|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 20|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 ^ $data;
 $6 = $data&255;
 HEAP8[$2>>0] = $6;
 $7 = $5 & 16;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = $data >>> 4;
  $10 = $9 & 1;
  __ZN10Nes_Mapper13mirror_manualEiiii($this,$10,$10,$10,$10);
 }
 $11 = $5 & 15;
 $12 = ($11|0)==(0);
 if ($12) {
  return;
 }
 $13 = HEAP8[$2>>0]|0;
 $14 = $13&255;
 $15 = $14 & 7;
 __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,32768,15,$15);
 return;
}
function __ZN12Mapper_Aorom13apply_mappingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 ^ 255;
 $4 = $3&255;
 HEAP8[$0>>0] = $4;
 $5 = HEAP32[$this>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_viiii[$7 & 1023]($this,0,0,$2);
 return;
}
function __ZN12Mapper_UnromD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12Mapper_Unrom5writeElji($this,$0,$addr,$data) {
 $this = $this|0;
 $0 = $0|0;
 $addr = $addr|0;
 $data = $data|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $data&255;
 $2 = ((($this)) + 20|0);
 HEAP8[$2>>0] = $1;
 $3 = $data & 255;
 __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,32768,14,$3);
 return;
}
function __ZN12Mapper_Unrom13apply_mappingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN8Nes_Core11enable_sramEbb($1,1,0);
 $2 = ((($this)) + 20|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 __ZN10Nes_Mapper12set_prg_bankEjNS_11bank_size_tEi($this,32768,14,$4);
 return;
}
function __ZN11Mapper_NromD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN11Mapper_Nrom5writeElji($this,$0,$1,$2) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11Mapper_Nrom13apply_mappingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13Silent_BufferD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN13Silent_Buffer7channelEi($agg$result,$this,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($this)) + 20|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$1>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$1+8>>2]|0;
 return;
}
function __ZN13Silent_Buffer15set_sample_rateEli($this,$rate,$msec) {
 $this = $this|0;
 $rate = $rate|0;
 $msec = $msec|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = $rate;
 $1 = ((($this)) + 12|0);
 HEAP32[$1>>2] = $msec;
 return (0|0);
}
function __ZN13Silent_Buffer10clock_rateEl($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13Silent_Buffer9bass_freqEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13Silent_Buffer5clearEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13Silent_Buffer9end_frameElb($this,$0,$unused) {
 $this = $this|0;
 $0 = $0|0;
 $unused = $unused|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13Silent_Buffer12read_samplesEPsl($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK13Silent_Buffer13samples_availEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[544648>>2]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((544592|0),(357|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[544588>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(840879,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 511]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (544452);
   ___cxa_throw(($7|0),(264512|0),(195|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (840928|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(358,(840943|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(358,(840983|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(359);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(360)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[136110]|0;HEAP32[136110] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[544464>>2]|0;HEAP32[544464>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,264544,264560,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 1023]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $23 = $path_below;
   } else {
    $23 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $22 = ($23|0)==(1);
   $or$cond1 = $21 & $22;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L34: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L34;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,264544,264592,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[544596>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(841222,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[264528>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](264528,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[544596>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 511]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(841136,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[544596>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(841181,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(841260,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((544588|0),(361|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(841033,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[544588>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(841083,$vararg_buffer);
  // unreachable;
 }
}
function _emscripten_GetProcAddress($name_) {
 $name_ = $name_|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name_;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $4 = (($3) + 1)|0;
 $5 = (_malloc($4)|0);
 $name = $5;
 $6 = $name;
 $7 = $1;
 (_strcpy($6,$7)|0);
 $8 = $name;
 $9 = (_strstr($8,841281)|0);
 $end = $9;
 $10 = $end;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $end;
  HEAP8[$12>>0] = 0;
 }
 $13 = $name;
 $14 = (_strstr($13,841285)|0);
 $end = $14;
 $15 = $end;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $end;
  HEAP8[$17>>0] = 0;
 }
 $18 = $name;
 $19 = (_strstr($18,841289)|0);
 $end = $19;
 $20 = $end;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $end;
  HEAP8[$22>>0] = 0;
 }
 $23 = $name;
 $24 = (_strstr($23,841293)|0);
 $end = $24;
 $25 = $end;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $end;
  HEAP8[$27>>0] = 0;
 }
 $28 = $name;
 $29 = (_strcmp($28,841299)|0);
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = $name;
   $32 = (_strcmp($31,841337)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    $name = 841356;
    break;
   }
   $34 = $name;
   $35 = (_strcmp($34,841369)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    $name = 841390;
    break;
   }
   $37 = $name;
   $38 = (_strcmp($37,841405)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    $name = 841420;
    break;
   }
   $40 = $name;
   $41 = (_strcmp($40,841435)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    $name = 841450;
   }
  } else {
   $name = 841321;
  }
 } while(0);
 $43 = $name;
 $44 = (_strcmp($43,841465)|0);
 $45 = ($44|0)!=(0);
 do {
  if ($45) {
   $46 = $name;
   $47 = (_strcmp($46,841479)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    $0 = 363;
    break;
   }
   $49 = $name;
   $50 = (_strcmp($49,841491)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    $0 = 364;
    break;
   }
   $52 = $name;
   $53 = (_strcmp($52,841505)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    $0 = 365;
    break;
   }
   $55 = $name;
   $56 = (_strcmp($55,841517)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    $0 = 366;
    break;
   }
   $58 = $name;
   $59 = (_strcmp($58,841531)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    $0 = 367;
    break;
   }
   $61 = $name;
   $62 = (_strcmp($61,841545)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $0 = 368;
    break;
   }
   $64 = $name;
   $65 = (_strcmp($64,841562)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    $0 = 369;
    break;
   }
   $67 = $name;
   $68 = (_strcmp($67,841585)|0);
   $69 = ($68|0)!=(0);
   if (!($69)) {
    $0 = 370;
    break;
   }
   $70 = $name;
   $71 = (_strcmp($70,841611)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    $0 = 371;
    break;
   }
   $73 = $name;
   $74 = (_strcmp($73,841624)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    $0 = 372;
    break;
   }
   $76 = $name;
   $77 = (_strcmp($76,841640)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    $0 = 373;
    break;
   }
   $79 = $name;
   $80 = (_strcmp($79,841653)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    $0 = 374;
    break;
   }
   $82 = $name;
   $83 = (_strcmp($82,841667)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    $0 = 375;
    break;
   }
   $85 = $name;
   $86 = (_strcmp($85,841687)|0);
   $87 = ($86|0)!=(0);
   if (!($87)) {
    $0 = 376;
    break;
   }
   $88 = $name;
   $89 = (_strcmp($88,841707)|0);
   $90 = ($89|0)!=(0);
   if (!($90)) {
    $0 = 377;
    break;
   }
   $91 = $name;
   $92 = (_strcmp($91,841724)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    $0 = 378;
    break;
   }
   $94 = $name;
   $95 = (_strcmp($94,841741)|0);
   $96 = ($95|0)!=(0);
   if (!($96)) {
    $0 = 379;
    break;
   }
   $97 = $name;
   $98 = (_strcmp($97,841753)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    $0 = 380;
    break;
   }
   $100 = $name;
   $101 = (_strcmp($100,841766)|0);
   $102 = ($101|0)!=(0);
   if (!($102)) {
    $0 = 381;
    break;
   }
   $103 = $name;
   $104 = (_strcmp($103,841782)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    $0 = 382;
    break;
   }
   $106 = $name;
   $107 = (_strcmp($106,841805)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    $0 = 383;
    break;
   }
   $109 = $name;
   $110 = (_strcmp($109,841818)|0);
   $111 = ($110|0)!=(0);
   if (!($111)) {
    $0 = 384;
    break;
   }
   $112 = $name;
   $113 = (_strcmp($112,841834)|0);
   $114 = ($113|0)!=(0);
   if (!($114)) {
    $0 = 385;
    break;
   }
   $115 = $name;
   $116 = (_strcmp($115,841845)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    $0 = 386;
    break;
   }
   $118 = $name;
   $119 = (_strcmp($118,841864)|0);
   $120 = ($119|0)!=(0);
   if (!($120)) {
    $0 = 387;
    break;
   }
   $121 = $name;
   $122 = (_strcmp($121,841886)|0);
   $123 = ($122|0)!=(0);
   if (!($123)) {
    $0 = 388;
    break;
   }
   $124 = $name;
   $125 = (_strcmp($124,841905)|0);
   $126 = ($125|0)!=(0);
   if (!($126)) {
    $0 = 389;
    break;
   }
   $127 = $name;
   $128 = (_strcmp($127,841934)|0);
   $129 = ($128|0)!=(0);
   if (!($129)) {
    $0 = 390;
    break;
   }
   $130 = $name;
   $131 = (_strcmp($130,841951)|0);
   $132 = ($131|0)!=(0);
   if (!($132)) {
    $0 = 391;
    break;
   }
   $133 = $name;
   $134 = (_strcmp($133,841966)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    $0 = 392;
    break;
   }
   $136 = $name;
   $137 = (_strcmp($136,841981)|0);
   $138 = ($137|0)!=(0);
   if (!($138)) {
    $0 = 393;
    break;
   }
   $139 = $name;
   $140 = (_strcmp($139,842002)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    $0 = 394;
    break;
   }
   $142 = $name;
   $143 = (_strcmp($142,842022)|0);
   $144 = ($143|0)!=(0);
   if (!($144)) {
    $0 = 395;
    break;
   }
   $145 = $name;
   $146 = (_strcmp($145,842042)|0);
   $147 = ($146|0)!=(0);
   if (!($147)) {
    $0 = 396;
    break;
   }
   $148 = $name;
   $149 = (_strcmp($148,842068)|0);
   $150 = ($149|0)!=(0);
   if (!($150)) {
    $0 = 397;
    break;
   }
   $151 = $name;
   $152 = (_strcmp($151,842087)|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    $0 = 398;
    break;
   }
   $154 = $name;
   $155 = (_strcmp($154,842099)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    $0 = 399;
    break;
   }
   $157 = $name;
   $158 = (_strcmp($157,842111)|0);
   $159 = ($158|0)!=(0);
   if (!($159)) {
    $0 = 400;
    break;
   }
   $160 = $name;
   $161 = (_strcmp($160,842123)|0);
   $162 = ($161|0)!=(0);
   if (!($162)) {
    $0 = 401;
    break;
   }
   $163 = $name;
   $164 = (_strcmp($163,842135)|0);
   $165 = ($164|0)!=(0);
   if (!($165)) {
    $0 = 402;
    break;
   }
   $166 = $name;
   $167 = (_strcmp($166,842147)|0);
   $168 = ($167|0)!=(0);
   if (!($168)) {
    $0 = 403;
    break;
   }
   $169 = $name;
   $170 = (_strcmp($169,842159)|0);
   $171 = ($170|0)!=(0);
   if (!($171)) {
    $0 = 404;
    break;
   }
   $172 = $name;
   $173 = (_strcmp($172,842171)|0);
   $174 = ($173|0)!=(0);
   if (!($174)) {
    $0 = 405;
    break;
   }
   $175 = $name;
   $176 = (_strcmp($175,842183)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    $0 = 406;
    break;
   }
   $178 = $name;
   $179 = (_strcmp($178,842196)|0);
   $180 = ($179|0)!=(0);
   if (!($180)) {
    $0 = 407;
    break;
   }
   $181 = $name;
   $182 = (_strcmp($181,842209)|0);
   $183 = ($182|0)!=(0);
   if (!($183)) {
    $0 = 408;
    break;
   }
   $184 = $name;
   $185 = (_strcmp($184,842222)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    $0 = 409;
    break;
   }
   $187 = $name;
   $188 = (_strcmp($187,842235)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    $0 = 410;
    break;
   }
   $190 = $name;
   $191 = (_strcmp($190,842248)|0);
   $192 = ($191|0)!=(0);
   if (!($192)) {
    $0 = 411;
    break;
   }
   $193 = $name;
   $194 = (_strcmp($193,842261)|0);
   $195 = ($194|0)!=(0);
   if (!($195)) {
    $0 = 412;
    break;
   }
   $196 = $name;
   $197 = (_strcmp($196,842274)|0);
   $198 = ($197|0)!=(0);
   if (!($198)) {
    $0 = 413;
    break;
   }
   $199 = $name;
   $200 = (_strcmp($199,842287)|0);
   $201 = ($200|0)!=(0);
   if (!($201)) {
    $0 = 414;
    break;
   }
   $202 = $name;
   $203 = (_strcmp($202,842306)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    $0 = 415;
    break;
   }
   $205 = $name;
   $206 = (_strcmp($205,842325)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    $0 = 416;
    break;
   }
   $208 = $name;
   $209 = (_strcmp($208,842344)|0);
   $210 = ($209|0)!=(0);
   if (!($210)) {
    $0 = 417;
    break;
   }
   $211 = $name;
   $212 = (_strcmp($211,842357)|0);
   $213 = ($212|0)!=(0);
   if (!($213)) {
    $0 = 418;
    break;
   }
   $214 = $name;
   $215 = (_strcmp($214,842375)|0);
   $216 = ($215|0)!=(0);
   if (!($216)) {
    $0 = 419;
    break;
   }
   $217 = $name;
   $218 = (_strcmp($217,842393)|0);
   $219 = ($218|0)!=(0);
   if (!($219)) {
    $0 = 420;
    break;
   }
   $220 = $name;
   $221 = (_strcmp($220,842411)|0);
   $222 = ($221|0)!=(0);
   if (!($222)) {
    $0 = 421;
    break;
   }
   $223 = $name;
   $224 = (_strcmp($223,842429)|0);
   $225 = ($224|0)!=(0);
   if (!($225)) {
    $0 = 422;
    break;
   }
   $226 = $name;
   $227 = (_strcmp($226,842449)|0);
   $228 = ($227|0)!=(0);
   if (!($228)) {
    $0 = 423;
    break;
   }
   $229 = $name;
   $230 = (_strcmp($229,841390)|0);
   $231 = ($230|0)!=(0);
   if (!($231)) {
    $0 = 424;
    break;
   }
   $232 = $name;
   $233 = (_strcmp($232,842467)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    $0 = 425;
    break;
   }
   $235 = $name;
   $236 = (_strcmp($235,842482)|0);
   $237 = ($236|0)!=(0);
   if (!($237)) {
    $0 = 426;
    break;
   }
   $238 = $name;
   $239 = (_strcmp($238,842503)|0);
   $240 = ($239|0)!=(0);
   if (!($240)) {
    $0 = 427;
    break;
   }
   $241 = $name;
   $242 = (_strcmp($241,842518)|0);
   $243 = ($242|0)!=(0);
   if (!($243)) {
    $0 = 428;
    break;
   }
   $244 = $name;
   $245 = (_strcmp($244,842536)|0);
   $246 = ($245|0)!=(0);
   if (!($246)) {
    $0 = 429;
    break;
   }
   $247 = $name;
   $248 = (_strcmp($247,842552)|0);
   $249 = ($248|0)!=(0);
   if (!($249)) {
    $0 = 430;
    break;
   }
   $250 = $name;
   $251 = (_strcmp($250,842571)|0);
   $252 = ($251|0)!=(0);
   if (!($252)) {
    $0 = 431;
    break;
   }
   $253 = $name;
   $254 = (_strcmp($253,842585)|0);
   $255 = ($254|0)!=(0);
   if (!($255)) {
    $0 = 432;
    break;
   }
   $256 = $name;
   $257 = (_strcmp($256,842600)|0);
   $258 = ($257|0)!=(0);
   if (!($258)) {
    $0 = 433;
    break;
   }
   $259 = $name;
   $260 = (_strcmp($259,841321)|0);
   $261 = ($260|0)!=(0);
   if (!($261)) {
    $0 = 434;
    break;
   }
   $262 = $name;
   $263 = (_strcmp($262,842611)|0);
   $264 = ($263|0)!=(0);
   if (!($264)) {
    $0 = 435;
    break;
   }
   $265 = $name;
   $266 = (_strcmp($265,841420)|0);
   $267 = ($266|0)!=(0);
   if (!($267)) {
    $0 = 436;
    break;
   }
   $268 = $name;
   $269 = (_strcmp($268,841450)|0);
   $270 = ($269|0)!=(0);
   if (!($270)) {
    $0 = 437;
    break;
   }
   $271 = $name;
   $272 = (_strcmp($271,842627)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    $0 = 438;
    break;
   }
   $274 = $name;
   $275 = (_strcmp($274,842654)|0);
   $276 = ($275|0)!=(0);
   if (!($276)) {
    $0 = 439;
    break;
   }
   $277 = $name;
   $278 = (_strcmp($277,842668)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    $0 = 440;
    break;
   }
   $280 = $name;
   $281 = (_strcmp($280,841356)|0);
   $282 = ($281|0)!=(0);
   if (!($282)) {
    $0 = 441;
    break;
   }
   $283 = $name;
   $284 = (_strcmp($283,842688)|0);
   $285 = ($284|0)!=(0);
   if (!($285)) {
    $0 = 442;
    break;
   }
   $286 = $name;
   $287 = (_strcmp($286,842706)|0);
   $288 = ($287|0)!=(0);
   if (!($288)) {
    $0 = 443;
    break;
   }
   $289 = $name;
   $290 = (_strcmp($289,842718)|0);
   $291 = ($290|0)!=(0);
   if (!($291)) {
    $0 = 444;
    break;
   }
   $292 = $name;
   $293 = (_strcmp($292,842739)|0);
   $294 = ($293|0)!=(0);
   if (!($294)) {
    $0 = 445;
    break;
   }
   $295 = $name;
   $296 = (_strcmp($295,842757)|0);
   $297 = ($296|0)!=(0);
   if (!($297)) {
    $0 = 446;
    break;
   }
   $298 = $name;
   $299 = (_strcmp($298,842775)|0);
   $300 = ($299|0)!=(0);
   if (!($300)) {
    $0 = 447;
    break;
   }
   $301 = $name;
   $302 = (_strcmp($301,842796)|0);
   $303 = ($302|0)!=(0);
   if (!($303)) {
    $0 = 448;
    break;
   }
   $304 = $name;
   $305 = (_strcmp($304,842822)|0);
   $306 = ($305|0)!=(0);
   if (!($306)) {
    $0 = 449;
    break;
   }
   $307 = $name;
   $308 = (_strcmp($307,842845)|0);
   $309 = ($308|0)!=(0);
   if (!($309)) {
    $0 = 450;
    break;
   }
   $310 = $name;
   $311 = (_strcmp($310,842883)|0);
   $312 = ($311|0)!=(0);
   if (!($312)) {
    $0 = 451;
    break;
   }
   $313 = $name;
   $314 = (_strcmp($313,842899)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    $0 = 452;
    break;
   }
   $316 = $name;
   $317 = (_strcmp($316,842914)|0);
   $318 = ($317|0)!=(0);
   if (!($318)) {
    $0 = 453;
    break;
   }
   $319 = $name;
   $320 = (_strcmp($319,842937)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    $0 = 454;
    break;
   }
   $322 = $name;
   $323 = (_strcmp($322,842950)|0);
   $324 = ($323|0)!=(0);
   if (!($324)) {
    $0 = 455;
    break;
   }
   $325 = $name;
   $326 = (_strcmp($325,842964)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    $0 = 456;
    break;
   }
   $328 = $name;
   $329 = (_strcmp($328,842978)|0);
   $330 = ($329|0)!=(0);
   if (!($330)) {
    $0 = 457;
    break;
   }
   $331 = $name;
   $332 = (_strcmp($331,842998)|0);
   $333 = ($332|0)!=(0);
   if (!($333)) {
    $0 = 458;
    break;
   }
   $334 = $name;
   $335 = (_strcmp($334,843018)|0);
   $336 = ($335|0)!=(0);
   if (!($336)) {
    $0 = 459;
    break;
   }
   $337 = $name;
   $338 = (_strcmp($337,843034)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    $0 = 460;
    break;
   }
   $340 = $name;
   $341 = (_strcmp($340,843052)|0);
   $342 = ($341|0)!=(0);
   if (!($342)) {
    $0 = 461;
    break;
   }
   $343 = $name;
   $344 = (_strcmp($343,843068)|0);
   $345 = ($344|0)!=(0);
   if (!($345)) {
    $0 = 462;
    break;
   }
   $346 = $name;
   $347 = (_strcmp($346,843083)|0);
   $348 = ($347|0)!=(0);
   if (!($348)) {
    $0 = 463;
    break;
   }
   $349 = $name;
   $350 = (_strcmp($349,843105)|0);
   $351 = ($350|0)!=(0);
   if (!($351)) {
    $0 = 464;
    break;
   }
   $352 = $name;
   $353 = (_strcmp($352,843123)|0);
   $354 = ($353|0)!=(0);
   if (!($354)) {
    $0 = 465;
    break;
   }
   $355 = $name;
   $356 = (_strcmp($355,843144)|0);
   $357 = ($356|0)!=(0);
   if (!($357)) {
    $0 = 466;
    break;
   }
   $358 = $name;
   $359 = (_strcmp($358,843162)|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    $0 = 467;
    break;
   }
   $361 = $name;
   $362 = (_strcmp($361,843175)|0);
   $363 = ($362|0)!=(0);
   if (!($363)) {
    $0 = 468;
    break;
   }
   $364 = $name;
   $365 = (_strcmp($364,843190)|0);
   $366 = ($365|0)!=(0);
   if (!($366)) {
    $0 = 469;
    break;
   }
   $367 = $name;
   $368 = (_strcmp($367,843204)|0);
   $369 = ($368|0)!=(0);
   if (!($369)) {
    $0 = 470;
    break;
   }
   $370 = $name;
   $371 = (_strcmp($370,843214)|0);
   $372 = ($371|0)!=(0);
   if (!($372)) {
    $0 = 471;
    break;
   }
   $373 = $name;
   $374 = (_strcmp($373,843224)|0);
   $375 = ($374|0)!=(0);
   if (!($375)) {
    $0 = 472;
    break;
   }
   $376 = $name;
   $377 = (_strcmp($376,843246)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    $0 = 473;
    break;
   }
   $379 = $name;
   $380 = (_strcmp($379,843272)|0);
   $381 = ($380|0)!=(0);
   if (!($381)) {
    $0 = 474;
    break;
   }
   $382 = $name;
   $383 = (_strcmp($382,843299)|0);
   $384 = ($383|0)!=(0);
   if (!($384)) {
    $0 = 475;
    break;
   }
   $385 = $name;
   $386 = (_strcmp($385,843312)|0);
   $387 = ($386|0)!=(0);
   if (!($387)) {
    $0 = 476;
    break;
   }
   $388 = $name;
   $389 = (_strcmp($388,843327)|0);
   $390 = ($389|0)!=(0);
   if (!($390)) {
    $0 = 477;
    break;
   }
   $391 = $name;
   $392 = (_strcmp($391,843342)|0);
   $393 = ($392|0)!=(0);
   if (!($393)) {
    $0 = 478;
    break;
   }
   $394 = $name;
   $395 = (_strcmp($394,843366)|0);
   $396 = ($395|0)!=(0);
   if (!($396)) {
    $0 = 479;
    break;
   }
   $397 = $name;
   $398 = (_strcmp($397,843377)|0);
   $399 = ($398|0)!=(0);
   if (!($399)) {
    $0 = 480;
    break;
   }
   $400 = $name;
   $401 = (_strcmp($400,843399)|0);
   $402 = ($401|0)!=(0);
   if (!($402)) {
    $0 = 481;
    break;
   }
   $403 = $name;
   $404 = (_strcmp($403,843421)|0);
   $405 = ($404|0)!=(0);
   if (!($405)) {
    $0 = 482;
    break;
   }
   $406 = $name;
   $407 = (_strcmp($406,843445)|0);
   $408 = ($407|0)!=(0);
   if (!($408)) {
    $0 = 483;
    break;
   }
   $409 = $name;
   $410 = (_strcmp($409,843454)|0);
   $411 = ($410|0)!=(0);
   if (!($411)) {
    $0 = 484;
    break;
   }
   $412 = $name;
   $413 = (_strcmp($412,843462)|0);
   $414 = ($413|0)!=(0);
   if (!($414)) {
    $0 = 485;
    break;
   }
   $415 = $name;
   $416 = (_strcmp($415,843475)|0);
   $417 = ($416|0)!=(0);
   if (!($417)) {
    $0 = 486;
    break;
   }
   $418 = $name;
   $419 = (_strcmp($418,843489)|0);
   $420 = ($419|0)!=(0);
   if (!($420)) {
    $0 = 487;
    break;
   }
   $421 = $name;
   $422 = (_strcmp($421,843501)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    $0 = 488;
    break;
   }
   $424 = $name;
   $425 = (_strcmp($424,843510)|0);
   $426 = ($425|0)!=(0);
   if (!($426)) {
    $0 = 489;
    break;
   }
   $427 = $name;
   $428 = (_strcmp($427,843520)|0);
   $429 = ($428|0)!=(0);
   if (!($429)) {
    $0 = 490;
    break;
   }
   $430 = $name;
   $431 = (_strcmp($430,843532)|0);
   $432 = ($431|0)!=(0);
   if (!($432)) {
    $0 = 491;
    break;
   }
   $433 = $name;
   $434 = (_strcmp($433,843543)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    $0 = 492;
    break;
   }
   $436 = $name;
   $437 = (_strcmp($436,843551)|0);
   $438 = ($437|0)!=(0);
   if (!($438)) {
    $0 = 493;
    break;
   }
   $439 = $name;
   $440 = (_strcmp($439,843563)|0);
   $441 = ($440|0)!=(0);
   if (!($441)) {
    $0 = 494;
    break;
   }
   $442 = $name;
   $443 = (_strcmp($442,843578)|0);
   $444 = ($443|0)!=(0);
   if (!($444)) {
    $0 = 495;
    break;
   }
   $445 = $name;
   $446 = (_strcmp($445,843590)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    $0 = 496;
    break;
   }
   $448 = $name;
   $449 = (_strcmp($448,843604)|0);
   $450 = ($449|0)!=(0);
   if (!($450)) {
    $0 = 497;
    break;
   }
   $451 = $name;
   $452 = (_strcmp($451,843629)|0);
   $453 = ($452|0)!=(0);
   if (!($453)) {
    $0 = 498;
    break;
   }
   $454 = $name;
   $455 = (_strcmp($454,843646)|0);
   $456 = ($455|0)!=(0);
   if (!($456)) {
    $0 = 499;
    break;
   }
   $457 = $name;
   $458 = (_strcmp($457,843662)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    $0 = 500;
    break;
   }
   $460 = $name;
   $461 = (_strcmp($460,843678)|0);
   $462 = ($461|0)!=(0);
   if (!($462)) {
    $0 = 501;
    break;
   }
   $463 = $name;
   $464 = (_strcmp($463,843690)|0);
   $465 = ($464|0)!=(0);
   if (!($465)) {
    $0 = 502;
    break;
   }
   $466 = $name;
   $467 = (_strcmp($466,843702)|0);
   $468 = ($467|0)!=(0);
   if (!($468)) {
    $0 = 503;
    break;
   }
   $469 = $name;
   $470 = (_strcmp($469,843726)|0);
   $471 = ($470|0)!=(0);
   if (!($471)) {
    $0 = 504;
    break;
   }
   $472 = $name;
   $473 = (_strcmp($472,843739)|0);
   $474 = ($473|0)!=(0);
   if (!($474)) {
    $0 = 505;
    break;
   }
   $475 = $name;
   $476 = (_strcmp($475,843753)|0);
   $477 = ($476|0)!=(0);
   if (!($477)) {
    $0 = 506;
    break;
   }
   $478 = $name;
   $479 = (_strcmp($478,843775)|0);
   $480 = ($479|0)!=(0);
   if (!($480)) {
    $0 = 507;
    break;
   }
   $481 = $name;
   $482 = (_strcmp($481,843782)|0);
   $483 = ($482|0)!=(0);
   if (!($483)) {
    $0 = 508;
    break;
   }
   $484 = $name;
   $485 = (_strcmp($484,843798)|0);
   $486 = ($485|0)!=(0);
   if (!($486)) {
    $0 = 509;
    break;
   }
   $487 = $name;
   $488 = (_strcmp($487,843815)|0);
   $489 = ($488|0)!=(0);
   if (!($489)) {
    $0 = 510;
    break;
   }
   $490 = $name;
   $491 = (_strcmp($490,843832)|0);
   $492 = ($491|0)!=(0);
   if (!($492)) {
    $0 = 511;
    break;
   }
   $493 = $name;
   $494 = (_strcmp($493,843848)|0);
   $495 = ($494|0)!=(0);
   if (!($495)) {
    $0 = 512;
    break;
   }
   $496 = $name;
   $497 = (_strcmp($496,843864)|0);
   $498 = ($497|0)!=(0);
   if (!($498)) {
    $0 = 513;
    break;
   }
   $499 = $name;
   $500 = (_strcmp($499,843881)|0);
   $501 = ($500|0)!=(0);
   if (!($501)) {
    $0 = 514;
    break;
   }
   $502 = $name;
   $503 = (_strcmp($502,843895)|0);
   $504 = ($503|0)!=(0);
   if (!($504)) {
    $0 = 515;
    break;
   }
   $505 = $name;
   $506 = (_strcmp($505,843907)|0);
   $507 = ($506|0)!=(0);
   if (!($507)) {
    $0 = 516;
    break;
   }
   $508 = $name;
   $509 = (_strcmp($508,843918)|0);
   $510 = ($509|0)!=(0);
   if (!($510)) {
    $0 = 517;
    break;
   }
   $511 = $name;
   $512 = (_strcmp($511,843931)|0);
   $513 = ($512|0)!=(0);
   if (!($513)) {
    $0 = 518;
    break;
   }
   $514 = $name;
   $515 = (_strcmp($514,843941)|0);
   $516 = ($515|0)!=(0);
   if (!($516)) {
    $0 = 519;
    break;
   }
   $517 = $name;
   $518 = (_strcmp($517,843958)|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    $0 = 520;
    break;
   }
   $520 = $name;
   $521 = (_strcmp($520,843970)|0);
   $522 = ($521|0)!=(0);
   if (!($522)) {
    $0 = 521;
    break;
   }
   $523 = $name;
   $524 = (_strcmp($523,843992)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    $0 = 522;
    break;
   }
   $526 = $name;
   $527 = (_strcmp($526,844012)|0);
   $528 = ($527|0)!=(0);
   if (!($528)) {
    $0 = 523;
    break;
   }
   $529 = $name;
   $530 = (_strcmp($529,844025)|0);
   $531 = ($530|0)!=(0);
   if (!($531)) {
    $0 = 524;
    break;
   }
   $532 = $name;
   $533 = (_strcmp($532,844047)|0);
   $534 = ($533|0)!=(0);
   if (!($534)) {
    $0 = 525;
    break;
   }
   $535 = $name;
   $536 = (_strcmp($535,844067)|0);
   $537 = ($536|0)!=(0);
   if (!($537)) {
    $0 = 526;
    break;
   }
   $538 = $name;
   $539 = (_strcmp($538,844084)|0);
   $540 = ($539|0)!=(0);
   if (!($540)) {
    $0 = 527;
    break;
   }
   $541 = $name;
   $542 = (_strcmp($541,844101)|0);
   $543 = ($542|0)!=(0);
   if (!($543)) {
    $0 = 528;
    break;
   }
   $544 = $name;
   $545 = (_strcmp($544,844121)|0);
   $546 = ($545|0)!=(0);
   if ($546) {
    $547 = $1;
    $548 = $name;
    $549 = _emscripten_asm_const_2(0, ($547|0), ($548|0))|0;
    $0 = 0;
    break;
   } else {
    $0 = 529;
    break;
   }
  } else {
   $0 = 362;
  }
 } while(0);
 $550 = $0;
 STACKTOP = sp;return ($550|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i15$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0;
 var $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0;
 var $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0;
 var $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[544660>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (544700 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (544700 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[544660>>2] = $22;
     } else {
      $23 = HEAP32[(544676)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if (!($24)) {
       $25 = ((($18)) + 12|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==($16|0);
       if ($27) {
        HEAP32[$25>>2] = $14;
        HEAP32[$15>>2] = $18;
        break;
       }
      }
      _abort();
      // unreachable;
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    break;
   }
   $34 = HEAP32[(544668)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (544700 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (544700 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[544660>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(544676)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if (!($76)) {
        $77 = ((($70)) + 12|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ($78|0)==($68|0);
        if ($79) {
         HEAP32[$77>>2] = $66;
         HEAP32[$67>>2] = $70;
         $$pre = HEAP32[(544668)>>2]|0;
         $89 = $$pre;
         break;
        }
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(544680)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (544700 + ($92<<2)|0);
      $94 = HEAP32[544660>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[544660>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (544700 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (544700 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(544676)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(544668)>>2] = $81;
     HEAP32[(544680)>>2] = $84;
     $mem$0 = $69;
     break;
    }
    $106 = HEAP32[(544664)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
     label = 154;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (544964 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(544676)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if (!($150)) {
      $151 = (($v$0$i$lcssa) + ($4)|0);
      $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
      if ($152) {
       $153 = ((($v$0$i$lcssa)) + 24|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ((($v$0$i$lcssa)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($156|0)==($v$0$i$lcssa|0);
       do {
        if ($157) {
         $167 = ((($v$0$i$lcssa)) + 20|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          $170 = ((($v$0$i$lcssa)) + 16|0);
          $171 = HEAP32[$170>>2]|0;
          $172 = ($171|0)==(0|0);
          if ($172) {
           $R$1$i = 0;
           break;
          } else {
           $R$0$i = $171;$RP$0$i = $170;
          }
         } else {
          $R$0$i = $168;$RP$0$i = $167;
         }
         while(1) {
          $173 = ((($R$0$i)) + 20|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = ($174|0)==(0|0);
          if (!($175)) {
           $R$0$i = $174;$RP$0$i = $173;
           continue;
          }
          $176 = ((($R$0$i)) + 16|0);
          $177 = HEAP32[$176>>2]|0;
          $178 = ($177|0)==(0|0);
          if ($178) {
           $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
           break;
          } else {
           $R$0$i = $177;$RP$0$i = $176;
          }
         }
         $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
         if ($179) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i$lcssa>>2] = 0;
          $R$1$i = $R$0$i$lcssa;
          break;
         }
        } else {
         $158 = ((($v$0$i$lcssa)) + 8|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159>>>0)<($149>>>0);
         if (!($160)) {
          $161 = ((($159)) + 12|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==($v$0$i$lcssa|0);
          if ($163) {
           $164 = ((($156)) + 8|0);
           $165 = HEAP32[$164>>2]|0;
           $166 = ($165|0)==($v$0$i$lcssa|0);
           if ($166) {
            HEAP32[$161>>2] = $156;
            HEAP32[$164>>2] = $159;
            $R$1$i = $156;
            break;
           }
          }
         }
         _abort();
         // unreachable;
        }
       } while(0);
       $180 = ($154|0)==(0|0);
       do {
        if (!($180)) {
         $181 = ((($v$0$i$lcssa)) + 28|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = (544964 + ($182<<2)|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = ($v$0$i$lcssa|0)==($184|0);
         if ($185) {
          HEAP32[$183>>2] = $R$1$i;
          $cond$i = ($R$1$i|0)==(0|0);
          if ($cond$i) {
           $186 = 1 << $182;
           $187 = $186 ^ -1;
           $188 = HEAP32[(544664)>>2]|0;
           $189 = $188 & $187;
           HEAP32[(544664)>>2] = $189;
           break;
          }
         } else {
          $190 = HEAP32[(544676)>>2]|0;
          $191 = ($154>>>0)<($190>>>0);
          if ($191) {
           _abort();
           // unreachable;
          }
          $192 = ((($154)) + 16|0);
          $193 = HEAP32[$192>>2]|0;
          $194 = ($193|0)==($v$0$i$lcssa|0);
          if ($194) {
           HEAP32[$192>>2] = $R$1$i;
          } else {
           $195 = ((($154)) + 20|0);
           HEAP32[$195>>2] = $R$1$i;
          }
          $196 = ($R$1$i|0)==(0|0);
          if ($196) {
           break;
          }
         }
         $197 = HEAP32[(544676)>>2]|0;
         $198 = ($R$1$i>>>0)<($197>>>0);
         if ($198) {
          _abort();
          // unreachable;
         }
         $199 = ((($R$1$i)) + 24|0);
         HEAP32[$199>>2] = $154;
         $200 = ((($v$0$i$lcssa)) + 16|0);
         $201 = HEAP32[$200>>2]|0;
         $202 = ($201|0)==(0|0);
         do {
          if (!($202)) {
           $203 = ($201>>>0)<($197>>>0);
           if ($203) {
            _abort();
            // unreachable;
           } else {
            $204 = ((($R$1$i)) + 16|0);
            HEAP32[$204>>2] = $201;
            $205 = ((($201)) + 24|0);
            HEAP32[$205>>2] = $R$1$i;
            break;
           }
          }
         } while(0);
         $206 = ((($v$0$i$lcssa)) + 20|0);
         $207 = HEAP32[$206>>2]|0;
         $208 = ($207|0)==(0|0);
         if (!($208)) {
          $209 = HEAP32[(544676)>>2]|0;
          $210 = ($207>>>0)<($209>>>0);
          if ($210) {
           _abort();
           // unreachable;
          } else {
           $211 = ((($R$1$i)) + 20|0);
           HEAP32[$211>>2] = $207;
           $212 = ((($207)) + 24|0);
           HEAP32[$212>>2] = $R$1$i;
           break;
          }
         }
        }
       } while(0);
       $213 = ($rsize$0$i$lcssa>>>0)<(16);
       if ($213) {
        $214 = (($rsize$0$i$lcssa) + ($4))|0;
        $215 = $214 | 3;
        $216 = ((($v$0$i$lcssa)) + 4|0);
        HEAP32[$216>>2] = $215;
        $$sum4$i = (($214) + 4)|0;
        $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = $218 | 1;
        HEAP32[$217>>2] = $219;
       } else {
        $220 = $4 | 3;
        $221 = ((($v$0$i$lcssa)) + 4|0);
        HEAP32[$221>>2] = $220;
        $222 = $rsize$0$i$lcssa | 1;
        $$sum$i35 = $4 | 4;
        $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
        HEAP32[$223>>2] = $222;
        $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
        $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
        HEAP32[$224>>2] = $rsize$0$i$lcssa;
        $225 = HEAP32[(544668)>>2]|0;
        $226 = ($225|0)==(0);
        if (!($226)) {
         $227 = HEAP32[(544680)>>2]|0;
         $228 = $225 >>> 3;
         $229 = $228 << 1;
         $230 = (544700 + ($229<<2)|0);
         $231 = HEAP32[544660>>2]|0;
         $232 = 1 << $228;
         $233 = $231 & $232;
         $234 = ($233|0)==(0);
         if ($234) {
          $235 = $231 | $232;
          HEAP32[544660>>2] = $235;
          $$pre$i = (($229) + 2)|0;
          $$pre8$i = (544700 + ($$pre$i<<2)|0);
          $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
         } else {
          $$sum3$i = (($229) + 2)|0;
          $236 = (544700 + ($$sum3$i<<2)|0);
          $237 = HEAP32[$236>>2]|0;
          $238 = HEAP32[(544676)>>2]|0;
          $239 = ($237>>>0)<($238>>>0);
          if ($239) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$iZ2D = $236;$F1$0$i = $237;
          }
         }
         HEAP32[$$pre$phi$iZ2D>>2] = $227;
         $240 = ((($F1$0$i)) + 12|0);
         HEAP32[$240>>2] = $227;
         $241 = ((($227)) + 8|0);
         HEAP32[$241>>2] = $F1$0$i;
         $242 = ((($227)) + 12|0);
         HEAP32[$242>>2] = $230;
        }
        HEAP32[(544668)>>2] = $rsize$0$i$lcssa;
        HEAP32[(544680)>>2] = $151;
       }
       $243 = ((($v$0$i$lcssa)) + 8|0);
       $mem$0 = $243;
       break;
      }
     }
     _abort();
     // unreachable;
    }
   } else {
    $nb$0 = $4;
    label = 154;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
    label = 154;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(544664)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
     label = 154;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (544964 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L110: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L110;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        label = 154;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (544964 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
      label = 154;
     } else {
      $343 = HEAP32[(544668)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(544676)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if (!($347)) {
        $348 = (($v$3$lcssa$i) + ($246)|0);
        $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
        if ($349) {
         $350 = ((($v$3$lcssa$i)) + 24|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = ((($v$3$lcssa$i)) + 12|0);
         $353 = HEAP32[$352>>2]|0;
         $354 = ($353|0)==($v$3$lcssa$i|0);
         do {
          if ($354) {
           $364 = ((($v$3$lcssa$i)) + 20|0);
           $365 = HEAP32[$364>>2]|0;
           $366 = ($365|0)==(0|0);
           if ($366) {
            $367 = ((($v$3$lcssa$i)) + 16|0);
            $368 = HEAP32[$367>>2]|0;
            $369 = ($368|0)==(0|0);
            if ($369) {
             $R$1$i20 = 0;
             break;
            } else {
             $R$0$i18 = $368;$RP$0$i17 = $367;
            }
           } else {
            $R$0$i18 = $365;$RP$0$i17 = $364;
           }
           while(1) {
            $370 = ((($R$0$i18)) + 20|0);
            $371 = HEAP32[$370>>2]|0;
            $372 = ($371|0)==(0|0);
            if (!($372)) {
             $R$0$i18 = $371;$RP$0$i17 = $370;
             continue;
            }
            $373 = ((($R$0$i18)) + 16|0);
            $374 = HEAP32[$373>>2]|0;
            $375 = ($374|0)==(0|0);
            if ($375) {
             $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
             break;
            } else {
             $R$0$i18 = $374;$RP$0$i17 = $373;
            }
           }
           $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
           if ($376) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0$i17$lcssa>>2] = 0;
            $R$1$i20 = $R$0$i18$lcssa;
            break;
           }
          } else {
           $355 = ((($v$3$lcssa$i)) + 8|0);
           $356 = HEAP32[$355>>2]|0;
           $357 = ($356>>>0)<($346>>>0);
           if (!($357)) {
            $358 = ((($356)) + 12|0);
            $359 = HEAP32[$358>>2]|0;
            $360 = ($359|0)==($v$3$lcssa$i|0);
            if ($360) {
             $361 = ((($353)) + 8|0);
             $362 = HEAP32[$361>>2]|0;
             $363 = ($362|0)==($v$3$lcssa$i|0);
             if ($363) {
              HEAP32[$358>>2] = $353;
              HEAP32[$361>>2] = $356;
              $R$1$i20 = $353;
              break;
             }
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $377 = ($351|0)==(0|0);
         do {
          if (!($377)) {
           $378 = ((($v$3$lcssa$i)) + 28|0);
           $379 = HEAP32[$378>>2]|0;
           $380 = (544964 + ($379<<2)|0);
           $381 = HEAP32[$380>>2]|0;
           $382 = ($v$3$lcssa$i|0)==($381|0);
           if ($382) {
            HEAP32[$380>>2] = $R$1$i20;
            $cond$i21 = ($R$1$i20|0)==(0|0);
            if ($cond$i21) {
             $383 = 1 << $379;
             $384 = $383 ^ -1;
             $385 = HEAP32[(544664)>>2]|0;
             $386 = $385 & $384;
             HEAP32[(544664)>>2] = $386;
             break;
            }
           } else {
            $387 = HEAP32[(544676)>>2]|0;
            $388 = ($351>>>0)<($387>>>0);
            if ($388) {
             _abort();
             // unreachable;
            }
            $389 = ((($351)) + 16|0);
            $390 = HEAP32[$389>>2]|0;
            $391 = ($390|0)==($v$3$lcssa$i|0);
            if ($391) {
             HEAP32[$389>>2] = $R$1$i20;
            } else {
             $392 = ((($351)) + 20|0);
             HEAP32[$392>>2] = $R$1$i20;
            }
            $393 = ($R$1$i20|0)==(0|0);
            if ($393) {
             break;
            }
           }
           $394 = HEAP32[(544676)>>2]|0;
           $395 = ($R$1$i20>>>0)<($394>>>0);
           if ($395) {
            _abort();
            // unreachable;
           }
           $396 = ((($R$1$i20)) + 24|0);
           HEAP32[$396>>2] = $351;
           $397 = ((($v$3$lcssa$i)) + 16|0);
           $398 = HEAP32[$397>>2]|0;
           $399 = ($398|0)==(0|0);
           do {
            if (!($399)) {
             $400 = ($398>>>0)<($394>>>0);
             if ($400) {
              _abort();
              // unreachable;
             } else {
              $401 = ((($R$1$i20)) + 16|0);
              HEAP32[$401>>2] = $398;
              $402 = ((($398)) + 24|0);
              HEAP32[$402>>2] = $R$1$i20;
              break;
             }
            }
           } while(0);
           $403 = ((($v$3$lcssa$i)) + 20|0);
           $404 = HEAP32[$403>>2]|0;
           $405 = ($404|0)==(0|0);
           if (!($405)) {
            $406 = HEAP32[(544676)>>2]|0;
            $407 = ($404>>>0)<($406>>>0);
            if ($407) {
             _abort();
             // unreachable;
            } else {
             $408 = ((($R$1$i20)) + 20|0);
             HEAP32[$408>>2] = $404;
             $409 = ((($404)) + 24|0);
             HEAP32[$409>>2] = $R$1$i20;
             break;
            }
           }
          }
         } while(0);
         $410 = ($rsize$3$lcssa$i>>>0)<(16);
         L179: do {
          if ($410) {
           $411 = (($rsize$3$lcssa$i) + ($246))|0;
           $412 = $411 | 3;
           $413 = ((($v$3$lcssa$i)) + 4|0);
           HEAP32[$413>>2] = $412;
           $$sum18$i = (($411) + 4)|0;
           $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
           $415 = HEAP32[$414>>2]|0;
           $416 = $415 | 1;
           HEAP32[$414>>2] = $416;
          } else {
           $417 = $246 | 3;
           $418 = ((($v$3$lcssa$i)) + 4|0);
           HEAP32[$418>>2] = $417;
           $419 = $rsize$3$lcssa$i | 1;
           $$sum$i2334 = $246 | 4;
           $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
           HEAP32[$420>>2] = $419;
           $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
           $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
           HEAP32[$421>>2] = $rsize$3$lcssa$i;
           $422 = $rsize$3$lcssa$i >>> 3;
           $423 = ($rsize$3$lcssa$i>>>0)<(256);
           if ($423) {
            $424 = $422 << 1;
            $425 = (544700 + ($424<<2)|0);
            $426 = HEAP32[544660>>2]|0;
            $427 = 1 << $422;
            $428 = $426 & $427;
            $429 = ($428|0)==(0);
            if ($429) {
             $430 = $426 | $427;
             HEAP32[544660>>2] = $430;
             $$pre$i25 = (($424) + 2)|0;
             $$pre43$i = (544700 + ($$pre$i25<<2)|0);
             $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
            } else {
             $$sum17$i = (($424) + 2)|0;
             $431 = (544700 + ($$sum17$i<<2)|0);
             $432 = HEAP32[$431>>2]|0;
             $433 = HEAP32[(544676)>>2]|0;
             $434 = ($432>>>0)<($433>>>0);
             if ($434) {
              _abort();
              // unreachable;
             } else {
              $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             }
            }
            HEAP32[$$pre$phi$i26Z2D>>2] = $348;
            $435 = ((($F5$0$i)) + 12|0);
            HEAP32[$435>>2] = $348;
            $$sum15$i = (($246) + 8)|0;
            $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
            HEAP32[$436>>2] = $F5$0$i;
            $$sum16$i = (($246) + 12)|0;
            $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
            HEAP32[$437>>2] = $425;
            break;
           }
           $438 = $rsize$3$lcssa$i >>> 8;
           $439 = ($438|0)==(0);
           if ($439) {
            $I7$0$i = 0;
           } else {
            $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
            if ($440) {
             $I7$0$i = 31;
            } else {
             $441 = (($438) + 1048320)|0;
             $442 = $441 >>> 16;
             $443 = $442 & 8;
             $444 = $438 << $443;
             $445 = (($444) + 520192)|0;
             $446 = $445 >>> 16;
             $447 = $446 & 4;
             $448 = $447 | $443;
             $449 = $444 << $447;
             $450 = (($449) + 245760)|0;
             $451 = $450 >>> 16;
             $452 = $451 & 2;
             $453 = $448 | $452;
             $454 = (14 - ($453))|0;
             $455 = $449 << $452;
             $456 = $455 >>> 15;
             $457 = (($454) + ($456))|0;
             $458 = $457 << 1;
             $459 = (($457) + 7)|0;
             $460 = $rsize$3$lcssa$i >>> $459;
             $461 = $460 & 1;
             $462 = $461 | $458;
             $I7$0$i = $462;
            }
           }
           $463 = (544964 + ($I7$0$i<<2)|0);
           $$sum2$i = (($246) + 28)|0;
           $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
           HEAP32[$464>>2] = $I7$0$i;
           $$sum3$i27 = (($246) + 16)|0;
           $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
           $$sum4$i28 = (($246) + 20)|0;
           $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
           HEAP32[$466>>2] = 0;
           HEAP32[$465>>2] = 0;
           $467 = HEAP32[(544664)>>2]|0;
           $468 = 1 << $I7$0$i;
           $469 = $467 & $468;
           $470 = ($469|0)==(0);
           if ($470) {
            $471 = $467 | $468;
            HEAP32[(544664)>>2] = $471;
            HEAP32[$463>>2] = $348;
            $$sum5$i = (($246) + 24)|0;
            $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
            HEAP32[$472>>2] = $463;
            $$sum6$i = (($246) + 12)|0;
            $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
            HEAP32[$473>>2] = $348;
            $$sum7$i = (($246) + 8)|0;
            $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
            HEAP32[$474>>2] = $348;
            break;
           }
           $475 = HEAP32[$463>>2]|0;
           $476 = ((($475)) + 4|0);
           $477 = HEAP32[$476>>2]|0;
           $478 = $477 & -8;
           $479 = ($478|0)==($rsize$3$lcssa$i|0);
           L197: do {
            if ($479) {
             $T$0$lcssa$i = $475;
            } else {
             $480 = ($I7$0$i|0)==(31);
             $481 = $I7$0$i >>> 1;
             $482 = (25 - ($481))|0;
             $483 = $480 ? 0 : $482;
             $484 = $rsize$3$lcssa$i << $483;
             $K12$029$i = $484;$T$028$i = $475;
             while(1) {
              $491 = $K12$029$i >>> 31;
              $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
              $487 = HEAP32[$492>>2]|0;
              $493 = ($487|0)==(0|0);
              if ($493) {
               $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
               break;
              }
              $485 = $K12$029$i << 1;
              $486 = ((($487)) + 4|0);
              $488 = HEAP32[$486>>2]|0;
              $489 = $488 & -8;
              $490 = ($489|0)==($rsize$3$lcssa$i|0);
              if ($490) {
               $T$0$lcssa$i = $487;
               break L197;
              } else {
               $K12$029$i = $485;$T$028$i = $487;
              }
             }
             $494 = HEAP32[(544676)>>2]|0;
             $495 = ($$lcssa232>>>0)<($494>>>0);
             if ($495) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$lcssa232>>2] = $348;
              $$sum11$i = (($246) + 24)|0;
              $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
              HEAP32[$496>>2] = $T$028$i$lcssa;
              $$sum12$i = (($246) + 12)|0;
              $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
              HEAP32[$497>>2] = $348;
              $$sum13$i = (($246) + 8)|0;
              $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
              HEAP32[$498>>2] = $348;
              break L179;
             }
            }
           } while(0);
           $499 = ((($T$0$lcssa$i)) + 8|0);
           $500 = HEAP32[$499>>2]|0;
           $501 = HEAP32[(544676)>>2]|0;
           $502 = ($500>>>0)>=($501>>>0);
           $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
           $503 = $502 & $not$$i;
           if ($503) {
            $504 = ((($500)) + 12|0);
            HEAP32[$504>>2] = $348;
            HEAP32[$499>>2] = $348;
            $$sum8$i = (($246) + 8)|0;
            $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
            HEAP32[$505>>2] = $500;
            $$sum9$i = (($246) + 12)|0;
            $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
            HEAP32[$506>>2] = $T$0$lcssa$i;
            $$sum10$i = (($246) + 24)|0;
            $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
            HEAP32[$507>>2] = 0;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $508 = ((($v$3$lcssa$i)) + 8|0);
         $mem$0 = $508;
         break;
        }
       }
       _abort();
       // unreachable;
      } else {
       $nb$0 = $246;
       label = 154;
      }
     }
    }
   }
  }
 } while(0);
 L212: do {
  if ((label|0) == 154) {
   $509 = HEAP32[(544668)>>2]|0;
   $510 = ($509>>>0)<($nb$0>>>0);
   if (!($510)) {
    $511 = (($509) - ($nb$0))|0;
    $512 = HEAP32[(544680)>>2]|0;
    $513 = ($511>>>0)>(15);
    if ($513) {
     $514 = (($512) + ($nb$0)|0);
     HEAP32[(544680)>>2] = $514;
     HEAP32[(544668)>>2] = $511;
     $515 = $511 | 1;
     $$sum2 = (($nb$0) + 4)|0;
     $516 = (($512) + ($$sum2)|0);
     HEAP32[$516>>2] = $515;
     $517 = (($512) + ($509)|0);
     HEAP32[$517>>2] = $511;
     $518 = $nb$0 | 3;
     $519 = ((($512)) + 4|0);
     HEAP32[$519>>2] = $518;
    } else {
     HEAP32[(544668)>>2] = 0;
     HEAP32[(544680)>>2] = 0;
     $520 = $509 | 3;
     $521 = ((($512)) + 4|0);
     HEAP32[$521>>2] = $520;
     $$sum1 = (($509) + 4)|0;
     $522 = (($512) + ($$sum1)|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = $523 | 1;
     HEAP32[$522>>2] = $524;
    }
    $525 = ((($512)) + 8|0);
    $mem$0 = $525;
    break;
   }
   $526 = HEAP32[(544672)>>2]|0;
   $527 = ($526>>>0)>($nb$0>>>0);
   if ($527) {
    $528 = (($526) - ($nb$0))|0;
    HEAP32[(544672)>>2] = $528;
    $529 = HEAP32[(544684)>>2]|0;
    $530 = (($529) + ($nb$0)|0);
    HEAP32[(544684)>>2] = $530;
    $531 = $528 | 1;
    $$sum = (($nb$0) + 4)|0;
    $532 = (($529) + ($$sum)|0);
    HEAP32[$532>>2] = $531;
    $533 = $nb$0 | 3;
    $534 = ((($529)) + 4|0);
    HEAP32[$534>>2] = $533;
    $535 = ((($529)) + 8|0);
    $mem$0 = $535;
    break;
   }
   $536 = HEAP32[545132>>2]|0;
   $537 = ($536|0)==(0);
   if ($537) {
    _init_mparams();
   }
   $538 = (($nb$0) + 48)|0;
   $539 = HEAP32[(545140)>>2]|0;
   $540 = (($nb$0) + 47)|0;
   $541 = (($539) + ($540))|0;
   $542 = (0 - ($539))|0;
   $543 = $541 & $542;
   $544 = ($543>>>0)>($nb$0>>>0);
   if ($544) {
    $545 = HEAP32[(545100)>>2]|0;
    $546 = ($545|0)==(0);
    if (!($546)) {
     $547 = HEAP32[(545092)>>2]|0;
     $548 = (($547) + ($543))|0;
     $549 = ($548>>>0)<=($547>>>0);
     $550 = ($548>>>0)>($545>>>0);
     $or$cond1$i = $549 | $550;
     if ($or$cond1$i) {
      $mem$0 = 0;
      break;
     }
    }
    $551 = HEAP32[(545104)>>2]|0;
    $552 = $551 & 4;
    $553 = ($552|0)==(0);
    L231: do {
     if ($553) {
      $554 = HEAP32[(544684)>>2]|0;
      $555 = ($554|0)==(0|0);
      L233: do {
       if ($555) {
        label = 172;
       } else {
        $sp$0$i$i = (545108);
        while(1) {
         $556 = HEAP32[$sp$0$i$i>>2]|0;
         $557 = ($556>>>0)>($554>>>0);
         if (!($557)) {
          $558 = ((($sp$0$i$i)) + 4|0);
          $559 = HEAP32[$558>>2]|0;
          $560 = (($556) + ($559)|0);
          $561 = ($560>>>0)>($554>>>0);
          if ($561) {
           $$lcssa228 = $sp$0$i$i;$$lcssa230 = $558;
           break;
          }
         }
         $562 = ((($sp$0$i$i)) + 8|0);
         $563 = HEAP32[$562>>2]|0;
         $564 = ($563|0)==(0|0);
         if ($564) {
          label = 172;
          break L233;
         } else {
          $sp$0$i$i = $563;
         }
        }
        $587 = HEAP32[(544672)>>2]|0;
        $588 = (($541) - ($587))|0;
        $589 = $588 & $542;
        $590 = ($589>>>0)<(2147483647);
        if ($590) {
         $591 = (_sbrk(($589|0))|0);
         $592 = HEAP32[$$lcssa228>>2]|0;
         $593 = HEAP32[$$lcssa230>>2]|0;
         $594 = (($592) + ($593)|0);
         $595 = ($591|0)==($594|0);
         $$3$i = $595 ? $589 : 0;
         if ($595) {
          $596 = ($591|0)==((-1)|0);
          if ($596) {
           $tsize$0323944$i = $$3$i;
          } else {
           $tbase$255$i = $591;$tsize$254$i = $$3$i;
           label = 192;
           break L231;
          }
         } else {
          $br$0$ph$i = $591;$ssize$1$ph$i = $589;$tsize$0$ph$i = $$3$i;
          label = 182;
         }
        } else {
         $tsize$0323944$i = 0;
        }
       }
      } while(0);
      do {
       if ((label|0) == 172) {
        $565 = (_sbrk(0)|0);
        $566 = ($565|0)==((-1)|0);
        if ($566) {
         $tsize$0323944$i = 0;
        } else {
         $567 = $565;
         $568 = HEAP32[(545136)>>2]|0;
         $569 = (($568) + -1)|0;
         $570 = $569 & $567;
         $571 = ($570|0)==(0);
         if ($571) {
          $ssize$0$i = $543;
         } else {
          $572 = (($569) + ($567))|0;
          $573 = (0 - ($568))|0;
          $574 = $572 & $573;
          $575 = (($543) - ($567))|0;
          $576 = (($575) + ($574))|0;
          $ssize$0$i = $576;
         }
         $577 = HEAP32[(545092)>>2]|0;
         $578 = (($577) + ($ssize$0$i))|0;
         $579 = ($ssize$0$i>>>0)>($nb$0>>>0);
         $580 = ($ssize$0$i>>>0)<(2147483647);
         $or$cond$i30 = $579 & $580;
         if ($or$cond$i30) {
          $581 = HEAP32[(545100)>>2]|0;
          $582 = ($581|0)==(0);
          if (!($582)) {
           $583 = ($578>>>0)<=($577>>>0);
           $584 = ($578>>>0)>($581>>>0);
           $or$cond2$i = $583 | $584;
           if ($or$cond2$i) {
            $tsize$0323944$i = 0;
            break;
           }
          }
          $585 = (_sbrk(($ssize$0$i|0))|0);
          $586 = ($585|0)==($565|0);
          $ssize$0$$i = $586 ? $ssize$0$i : 0;
          if ($586) {
           $tbase$255$i = $565;$tsize$254$i = $ssize$0$$i;
           label = 192;
           break L231;
          } else {
           $br$0$ph$i = $585;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
           label = 182;
          }
         } else {
          $tsize$0323944$i = 0;
         }
        }
       }
      } while(0);
      L253: do {
       if ((label|0) == 182) {
        $597 = (0 - ($ssize$1$ph$i))|0;
        $598 = ($br$0$ph$i|0)!=((-1)|0);
        $599 = ($ssize$1$ph$i>>>0)<(2147483647);
        $or$cond5$i = $599 & $598;
        $600 = ($538>>>0)>($ssize$1$ph$i>>>0);
        $or$cond6$i = $600 & $or$cond5$i;
        do {
         if ($or$cond6$i) {
          $601 = HEAP32[(545140)>>2]|0;
          $602 = (($540) - ($ssize$1$ph$i))|0;
          $603 = (($602) + ($601))|0;
          $604 = (0 - ($601))|0;
          $605 = $603 & $604;
          $606 = ($605>>>0)<(2147483647);
          if ($606) {
           $607 = (_sbrk(($605|0))|0);
           $608 = ($607|0)==((-1)|0);
           if ($608) {
            (_sbrk(($597|0))|0);
            $tsize$0323944$i = $tsize$0$ph$i;
            break L253;
           } else {
            $609 = (($605) + ($ssize$1$ph$i))|0;
            $ssize$2$i = $609;
            break;
           }
          } else {
           $ssize$2$i = $ssize$1$ph$i;
          }
         } else {
          $ssize$2$i = $ssize$1$ph$i;
         }
        } while(0);
        $610 = ($br$0$ph$i|0)==((-1)|0);
        if ($610) {
         $tsize$0323944$i = $tsize$0$ph$i;
        } else {
         $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
         label = 192;
         break L231;
        }
       }
      } while(0);
      $611 = HEAP32[(545104)>>2]|0;
      $612 = $611 | 4;
      HEAP32[(545104)>>2] = $612;
      $tsize$1$i = $tsize$0323944$i;
      label = 189;
     } else {
      $tsize$1$i = 0;
      label = 189;
     }
    } while(0);
    if ((label|0) == 189) {
     $613 = ($543>>>0)<(2147483647);
     if ($613) {
      $614 = (_sbrk(($543|0))|0);
      $615 = (_sbrk(0)|0);
      $616 = ($614|0)!=((-1)|0);
      $617 = ($615|0)!=((-1)|0);
      $or$cond3$i = $616 & $617;
      $618 = ($614>>>0)<($615>>>0);
      $or$cond8$i = $618 & $or$cond3$i;
      if ($or$cond8$i) {
       $619 = $615;
       $620 = $614;
       $621 = (($619) - ($620))|0;
       $622 = (($nb$0) + 40)|0;
       $623 = ($621>>>0)>($622>>>0);
       $$tsize$1$i = $623 ? $621 : $tsize$1$i;
       if ($623) {
        $tbase$255$i = $614;$tsize$254$i = $$tsize$1$i;
        label = 192;
       }
      }
     }
    }
    if ((label|0) == 192) {
     $624 = HEAP32[(545092)>>2]|0;
     $625 = (($624) + ($tsize$254$i))|0;
     HEAP32[(545092)>>2] = $625;
     $626 = HEAP32[(545096)>>2]|0;
     $627 = ($625>>>0)>($626>>>0);
     if ($627) {
      HEAP32[(545096)>>2] = $625;
     }
     $628 = HEAP32[(544684)>>2]|0;
     $629 = ($628|0)==(0|0);
     L272: do {
      if ($629) {
       $630 = HEAP32[(544676)>>2]|0;
       $631 = ($630|0)==(0|0);
       $632 = ($tbase$255$i>>>0)<($630>>>0);
       $or$cond9$i = $631 | $632;
       if ($or$cond9$i) {
        HEAP32[(544676)>>2] = $tbase$255$i;
       }
       HEAP32[(545108)>>2] = $tbase$255$i;
       HEAP32[(545112)>>2] = $tsize$254$i;
       HEAP32[(545120)>>2] = 0;
       $633 = HEAP32[545132>>2]|0;
       HEAP32[(544696)>>2] = $633;
       HEAP32[(544692)>>2] = -1;
       $i$02$i$i = 0;
       while(1) {
        $634 = $i$02$i$i << 1;
        $635 = (544700 + ($634<<2)|0);
        $$sum$i13$i = (($634) + 3)|0;
        $636 = (544700 + ($$sum$i13$i<<2)|0);
        HEAP32[$636>>2] = $635;
        $$sum1$i14$i = (($634) + 2)|0;
        $637 = (544700 + ($$sum1$i14$i<<2)|0);
        HEAP32[$637>>2] = $635;
        $638 = (($i$02$i$i) + 1)|0;
        $exitcond$i$i = ($638|0)==(32);
        if ($exitcond$i$i) {
         break;
        } else {
         $i$02$i$i = $638;
        }
       }
       $639 = (($tsize$254$i) + -40)|0;
       $640 = ((($tbase$255$i)) + 8|0);
       $641 = $640;
       $642 = $641 & 7;
       $643 = ($642|0)==(0);
       $644 = (0 - ($641))|0;
       $645 = $644 & 7;
       $646 = $643 ? 0 : $645;
       $647 = (($tbase$255$i) + ($646)|0);
       $648 = (($639) - ($646))|0;
       HEAP32[(544684)>>2] = $647;
       HEAP32[(544672)>>2] = $648;
       $649 = $648 | 1;
       $$sum$i15$i = (($646) + 4)|0;
       $650 = (($tbase$255$i) + ($$sum$i15$i)|0);
       HEAP32[$650>>2] = $649;
       $$sum2$i16$i = (($tsize$254$i) + -36)|0;
       $651 = (($tbase$255$i) + ($$sum2$i16$i)|0);
       HEAP32[$651>>2] = 40;
       $652 = HEAP32[(545148)>>2]|0;
       HEAP32[(544688)>>2] = $652;
      } else {
       $sp$084$i = (545108);
       while(1) {
        $653 = HEAP32[$sp$084$i>>2]|0;
        $654 = ((($sp$084$i)) + 4|0);
        $655 = HEAP32[$654>>2]|0;
        $656 = (($653) + ($655)|0);
        $657 = ($tbase$255$i|0)==($656|0);
        if ($657) {
         $$lcssa222 = $653;$$lcssa224 = $654;$$lcssa226 = $655;$sp$084$i$lcssa = $sp$084$i;
         label = 202;
         break;
        }
        $658 = ((($sp$084$i)) + 8|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = ($659|0)==(0|0);
        if ($660) {
         break;
        } else {
         $sp$084$i = $659;
        }
       }
       if ((label|0) == 202) {
        $661 = ((($sp$084$i$lcssa)) + 12|0);
        $662 = HEAP32[$661>>2]|0;
        $663 = $662 & 8;
        $664 = ($663|0)==(0);
        if ($664) {
         $665 = ($628>>>0)>=($$lcssa222>>>0);
         $666 = ($628>>>0)<($tbase$255$i>>>0);
         $or$cond57$i = $666 & $665;
         if ($or$cond57$i) {
          $667 = (($$lcssa226) + ($tsize$254$i))|0;
          HEAP32[$$lcssa224>>2] = $667;
          $668 = HEAP32[(544672)>>2]|0;
          $669 = (($668) + ($tsize$254$i))|0;
          $670 = ((($628)) + 8|0);
          $671 = $670;
          $672 = $671 & 7;
          $673 = ($672|0)==(0);
          $674 = (0 - ($671))|0;
          $675 = $674 & 7;
          $676 = $673 ? 0 : $675;
          $677 = (($628) + ($676)|0);
          $678 = (($669) - ($676))|0;
          HEAP32[(544684)>>2] = $677;
          HEAP32[(544672)>>2] = $678;
          $679 = $678 | 1;
          $$sum$i17$i = (($676) + 4)|0;
          $680 = (($628) + ($$sum$i17$i)|0);
          HEAP32[$680>>2] = $679;
          $$sum2$i18$i = (($669) + 4)|0;
          $681 = (($628) + ($$sum2$i18$i)|0);
          HEAP32[$681>>2] = 40;
          $682 = HEAP32[(545148)>>2]|0;
          HEAP32[(544688)>>2] = $682;
          break;
         }
        }
       }
       $683 = HEAP32[(544676)>>2]|0;
       $684 = ($tbase$255$i>>>0)<($683>>>0);
       if ($684) {
        HEAP32[(544676)>>2] = $tbase$255$i;
        $748 = $tbase$255$i;
       } else {
        $748 = $683;
       }
       $685 = (($tbase$255$i) + ($tsize$254$i)|0);
       $sp$183$i = (545108);
       while(1) {
        $686 = HEAP32[$sp$183$i>>2]|0;
        $687 = ($686|0)==($685|0);
        if ($687) {
         $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
         label = 210;
         break;
        }
        $688 = ((($sp$183$i)) + 8|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = ($689|0)==(0|0);
        if ($690) {
         $sp$0$i$i$i = (545108);
         break;
        } else {
         $sp$183$i = $689;
        }
       }
       if ((label|0) == 210) {
        $691 = ((($sp$183$i$lcssa)) + 12|0);
        $692 = HEAP32[$691>>2]|0;
        $693 = $692 & 8;
        $694 = ($693|0)==(0);
        if ($694) {
         HEAP32[$$lcssa219>>2] = $tbase$255$i;
         $695 = ((($sp$183$i$lcssa)) + 4|0);
         $696 = HEAP32[$695>>2]|0;
         $697 = (($696) + ($tsize$254$i))|0;
         HEAP32[$695>>2] = $697;
         $698 = ((($tbase$255$i)) + 8|0);
         $699 = $698;
         $700 = $699 & 7;
         $701 = ($700|0)==(0);
         $702 = (0 - ($699))|0;
         $703 = $702 & 7;
         $704 = $701 ? 0 : $703;
         $705 = (($tbase$255$i) + ($704)|0);
         $$sum112$i = (($tsize$254$i) + 8)|0;
         $706 = (($tbase$255$i) + ($$sum112$i)|0);
         $707 = $706;
         $708 = $707 & 7;
         $709 = ($708|0)==(0);
         $710 = (0 - ($707))|0;
         $711 = $710 & 7;
         $712 = $709 ? 0 : $711;
         $$sum113$i = (($712) + ($tsize$254$i))|0;
         $713 = (($tbase$255$i) + ($$sum113$i)|0);
         $714 = $713;
         $715 = $705;
         $716 = (($714) - ($715))|0;
         $$sum$i19$i = (($704) + ($nb$0))|0;
         $717 = (($tbase$255$i) + ($$sum$i19$i)|0);
         $718 = (($716) - ($nb$0))|0;
         $719 = $nb$0 | 3;
         $$sum1$i20$i = (($704) + 4)|0;
         $720 = (($tbase$255$i) + ($$sum1$i20$i)|0);
         HEAP32[$720>>2] = $719;
         $721 = ($713|0)==($628|0);
         L297: do {
          if ($721) {
           $722 = HEAP32[(544672)>>2]|0;
           $723 = (($722) + ($718))|0;
           HEAP32[(544672)>>2] = $723;
           HEAP32[(544684)>>2] = $717;
           $724 = $723 | 1;
           $$sum42$i$i = (($$sum$i19$i) + 4)|0;
           $725 = (($tbase$255$i) + ($$sum42$i$i)|0);
           HEAP32[$725>>2] = $724;
          } else {
           $726 = HEAP32[(544680)>>2]|0;
           $727 = ($713|0)==($726|0);
           if ($727) {
            $728 = HEAP32[(544668)>>2]|0;
            $729 = (($728) + ($718))|0;
            HEAP32[(544668)>>2] = $729;
            HEAP32[(544680)>>2] = $717;
            $730 = $729 | 1;
            $$sum40$i$i = (($$sum$i19$i) + 4)|0;
            $731 = (($tbase$255$i) + ($$sum40$i$i)|0);
            HEAP32[$731>>2] = $730;
            $$sum41$i$i = (($729) + ($$sum$i19$i))|0;
            $732 = (($tbase$255$i) + ($$sum41$i$i)|0);
            HEAP32[$732>>2] = $729;
            break;
           }
           $$sum2$i21$i = (($tsize$254$i) + 4)|0;
           $$sum114$i = (($$sum2$i21$i) + ($712))|0;
           $733 = (($tbase$255$i) + ($$sum114$i)|0);
           $734 = HEAP32[$733>>2]|0;
           $735 = $734 & 3;
           $736 = ($735|0)==(1);
           if ($736) {
            $737 = $734 & -8;
            $738 = $734 >>> 3;
            $739 = ($734>>>0)<(256);
            L305: do {
             if ($739) {
              $$sum3738$i$i = $712 | 8;
              $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
              $740 = (($tbase$255$i) + ($$sum124$i)|0);
              $741 = HEAP32[$740>>2]|0;
              $$sum39$i$i = (($tsize$254$i) + 12)|0;
              $$sum125$i = (($$sum39$i$i) + ($712))|0;
              $742 = (($tbase$255$i) + ($$sum125$i)|0);
              $743 = HEAP32[$742>>2]|0;
              $744 = $738 << 1;
              $745 = (544700 + ($744<<2)|0);
              $746 = ($741|0)==($745|0);
              do {
               if (!($746)) {
                $747 = ($741>>>0)<($748>>>0);
                if (!($747)) {
                 $749 = ((($741)) + 12|0);
                 $750 = HEAP32[$749>>2]|0;
                 $751 = ($750|0)==($713|0);
                 if ($751) {
                  break;
                 }
                }
                _abort();
                // unreachable;
               }
              } while(0);
              $752 = ($743|0)==($741|0);
              if ($752) {
               $753 = 1 << $738;
               $754 = $753 ^ -1;
               $755 = HEAP32[544660>>2]|0;
               $756 = $755 & $754;
               HEAP32[544660>>2] = $756;
               break;
              }
              $757 = ($743|0)==($745|0);
              do {
               if ($757) {
                $$pre57$i$i = ((($743)) + 8|0);
                $$pre$phi58$i$iZ2D = $$pre57$i$i;
               } else {
                $758 = ($743>>>0)<($748>>>0);
                if (!($758)) {
                 $759 = ((($743)) + 8|0);
                 $760 = HEAP32[$759>>2]|0;
                 $761 = ($760|0)==($713|0);
                 if ($761) {
                  $$pre$phi58$i$iZ2D = $759;
                  break;
                 }
                }
                _abort();
                // unreachable;
               }
              } while(0);
              $762 = ((($741)) + 12|0);
              HEAP32[$762>>2] = $743;
              HEAP32[$$pre$phi58$i$iZ2D>>2] = $741;
             } else {
              $$sum34$i$i = $712 | 24;
              $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
              $763 = (($tbase$255$i) + ($$sum115$i)|0);
              $764 = HEAP32[$763>>2]|0;
              $$sum5$i$i = (($tsize$254$i) + 12)|0;
              $$sum116$i = (($$sum5$i$i) + ($712))|0;
              $765 = (($tbase$255$i) + ($$sum116$i)|0);
              $766 = HEAP32[$765>>2]|0;
              $767 = ($766|0)==($713|0);
              L324: do {
               if ($767) {
                $$sum67$i$i = $712 | 16;
                $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
                $777 = (($tbase$255$i) + ($$sum122$i)|0);
                $778 = HEAP32[$777>>2]|0;
                $779 = ($778|0)==(0|0);
                if ($779) {
                 $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
                 $780 = (($tbase$255$i) + ($$sum123$i)|0);
                 $781 = HEAP32[$780>>2]|0;
                 $782 = ($781|0)==(0|0);
                 if ($782) {
                  $R$1$i$i = 0;
                  break;
                 } else {
                  $R$0$i$i = $781;$RP$0$i$i = $780;
                 }
                } else {
                 $R$0$i$i = $778;$RP$0$i$i = $777;
                }
                while(1) {
                 $783 = ((($R$0$i$i)) + 20|0);
                 $784 = HEAP32[$783>>2]|0;
                 $785 = ($784|0)==(0|0);
                 if (!($785)) {
                  $R$0$i$i = $784;$RP$0$i$i = $783;
                  continue;
                 }
                 $786 = ((($R$0$i$i)) + 16|0);
                 $787 = HEAP32[$786>>2]|0;
                 $788 = ($787|0)==(0|0);
                 if ($788) {
                  $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                  break;
                 } else {
                  $R$0$i$i = $787;$RP$0$i$i = $786;
                 }
                }
                $789 = ($RP$0$i$i$lcssa>>>0)<($748>>>0);
                if ($789) {
                 _abort();
                 // unreachable;
                } else {
                 HEAP32[$RP$0$i$i$lcssa>>2] = 0;
                 $R$1$i$i = $R$0$i$i$lcssa;
                 break;
                }
               } else {
                $$sum3536$i$i = $712 | 8;
                $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
                $768 = (($tbase$255$i) + ($$sum117$i)|0);
                $769 = HEAP32[$768>>2]|0;
                $770 = ($769>>>0)<($748>>>0);
                do {
                 if (!($770)) {
                  $771 = ((($769)) + 12|0);
                  $772 = HEAP32[$771>>2]|0;
                  $773 = ($772|0)==($713|0);
                  if (!($773)) {
                   break;
                  }
                  $774 = ((($766)) + 8|0);
                  $775 = HEAP32[$774>>2]|0;
                  $776 = ($775|0)==($713|0);
                  if (!($776)) {
                   break;
                  }
                  HEAP32[$771>>2] = $766;
                  HEAP32[$774>>2] = $769;
                  $R$1$i$i = $766;
                  break L324;
                 }
                } while(0);
                _abort();
                // unreachable;
               }
              } while(0);
              $790 = ($764|0)==(0|0);
              if ($790) {
               break;
              }
              $$sum30$i$i = (($tsize$254$i) + 28)|0;
              $$sum118$i = (($$sum30$i$i) + ($712))|0;
              $791 = (($tbase$255$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = (544964 + ($792<<2)|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($713|0)==($794|0);
              do {
               if ($795) {
                HEAP32[$793>>2] = $R$1$i$i;
                $cond$i$i = ($R$1$i$i|0)==(0|0);
                if (!($cond$i$i)) {
                 break;
                }
                $796 = 1 << $792;
                $797 = $796 ^ -1;
                $798 = HEAP32[(544664)>>2]|0;
                $799 = $798 & $797;
                HEAP32[(544664)>>2] = $799;
                break L305;
               } else {
                $800 = HEAP32[(544676)>>2]|0;
                $801 = ($764>>>0)<($800>>>0);
                if ($801) {
                 _abort();
                 // unreachable;
                }
                $802 = ((($764)) + 16|0);
                $803 = HEAP32[$802>>2]|0;
                $804 = ($803|0)==($713|0);
                if ($804) {
                 HEAP32[$802>>2] = $R$1$i$i;
                } else {
                 $805 = ((($764)) + 20|0);
                 HEAP32[$805>>2] = $R$1$i$i;
                }
                $806 = ($R$1$i$i|0)==(0|0);
                if ($806) {
                 break L305;
                }
               }
              } while(0);
              $807 = HEAP32[(544676)>>2]|0;
              $808 = ($R$1$i$i>>>0)<($807>>>0);
              if ($808) {
               _abort();
               // unreachable;
              }
              $809 = ((($R$1$i$i)) + 24|0);
              HEAP32[$809>>2] = $764;
              $$sum3132$i$i = $712 | 16;
              $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
              $810 = (($tbase$255$i) + ($$sum119$i)|0);
              $811 = HEAP32[$810>>2]|0;
              $812 = ($811|0)==(0|0);
              do {
               if (!($812)) {
                $813 = ($811>>>0)<($807>>>0);
                if ($813) {
                 _abort();
                 // unreachable;
                } else {
                 $814 = ((($R$1$i$i)) + 16|0);
                 HEAP32[$814>>2] = $811;
                 $815 = ((($811)) + 24|0);
                 HEAP32[$815>>2] = $R$1$i$i;
                 break;
                }
               }
              } while(0);
              $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
              $816 = (($tbase$255$i) + ($$sum120$i)|0);
              $817 = HEAP32[$816>>2]|0;
              $818 = ($817|0)==(0|0);
              if ($818) {
               break;
              }
              $819 = HEAP32[(544676)>>2]|0;
              $820 = ($817>>>0)<($819>>>0);
              if ($820) {
               _abort();
               // unreachable;
              } else {
               $821 = ((($R$1$i$i)) + 20|0);
               HEAP32[$821>>2] = $817;
               $822 = ((($817)) + 24|0);
               HEAP32[$822>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum9$i$i = $737 | $712;
            $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
            $823 = (($tbase$255$i) + ($$sum121$i)|0);
            $824 = (($737) + ($718))|0;
            $oldfirst$0$i$i = $823;$qsize$0$i$i = $824;
           } else {
            $oldfirst$0$i$i = $713;$qsize$0$i$i = $718;
           }
           $825 = ((($oldfirst$0$i$i)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = $826 & -2;
           HEAP32[$825>>2] = $827;
           $828 = $qsize$0$i$i | 1;
           $$sum10$i$i = (($$sum$i19$i) + 4)|0;
           $829 = (($tbase$255$i) + ($$sum10$i$i)|0);
           HEAP32[$829>>2] = $828;
           $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
           $830 = (($tbase$255$i) + ($$sum11$i$i)|0);
           HEAP32[$830>>2] = $qsize$0$i$i;
           $831 = $qsize$0$i$i >>> 3;
           $832 = ($qsize$0$i$i>>>0)<(256);
           if ($832) {
            $833 = $831 << 1;
            $834 = (544700 + ($833<<2)|0);
            $835 = HEAP32[544660>>2]|0;
            $836 = 1 << $831;
            $837 = $835 & $836;
            $838 = ($837|0)==(0);
            do {
             if ($838) {
              $839 = $835 | $836;
              HEAP32[544660>>2] = $839;
              $$pre$i22$i = (($833) + 2)|0;
              $$pre56$i$i = (544700 + ($$pre$i22$i<<2)|0);
              $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $834;
             } else {
              $$sum29$i$i = (($833) + 2)|0;
              $840 = (544700 + ($$sum29$i$i<<2)|0);
              $841 = HEAP32[$840>>2]|0;
              $842 = HEAP32[(544676)>>2]|0;
              $843 = ($841>>>0)<($842>>>0);
              if (!($843)) {
               $$pre$phi$i23$iZ2D = $840;$F4$0$i$i = $841;
               break;
              }
              _abort();
              // unreachable;
             }
            } while(0);
            HEAP32[$$pre$phi$i23$iZ2D>>2] = $717;
            $844 = ((($F4$0$i$i)) + 12|0);
            HEAP32[$844>>2] = $717;
            $$sum27$i$i = (($$sum$i19$i) + 8)|0;
            $845 = (($tbase$255$i) + ($$sum27$i$i)|0);
            HEAP32[$845>>2] = $F4$0$i$i;
            $$sum28$i$i = (($$sum$i19$i) + 12)|0;
            $846 = (($tbase$255$i) + ($$sum28$i$i)|0);
            HEAP32[$846>>2] = $834;
            break;
           }
           $847 = $qsize$0$i$i >>> 8;
           $848 = ($847|0)==(0);
           do {
            if ($848) {
             $I7$0$i$i = 0;
            } else {
             $849 = ($qsize$0$i$i>>>0)>(16777215);
             if ($849) {
              $I7$0$i$i = 31;
              break;
             }
             $850 = (($847) + 1048320)|0;
             $851 = $850 >>> 16;
             $852 = $851 & 8;
             $853 = $847 << $852;
             $854 = (($853) + 520192)|0;
             $855 = $854 >>> 16;
             $856 = $855 & 4;
             $857 = $856 | $852;
             $858 = $853 << $856;
             $859 = (($858) + 245760)|0;
             $860 = $859 >>> 16;
             $861 = $860 & 2;
             $862 = $857 | $861;
             $863 = (14 - ($862))|0;
             $864 = $858 << $861;
             $865 = $864 >>> 15;
             $866 = (($863) + ($865))|0;
             $867 = $866 << 1;
             $868 = (($866) + 7)|0;
             $869 = $qsize$0$i$i >>> $868;
             $870 = $869 & 1;
             $871 = $870 | $867;
             $I7$0$i$i = $871;
            }
           } while(0);
           $872 = (544964 + ($I7$0$i$i<<2)|0);
           $$sum12$i$i = (($$sum$i19$i) + 28)|0;
           $873 = (($tbase$255$i) + ($$sum12$i$i)|0);
           HEAP32[$873>>2] = $I7$0$i$i;
           $$sum13$i$i = (($$sum$i19$i) + 16)|0;
           $874 = (($tbase$255$i) + ($$sum13$i$i)|0);
           $$sum14$i$i = (($$sum$i19$i) + 20)|0;
           $875 = (($tbase$255$i) + ($$sum14$i$i)|0);
           HEAP32[$875>>2] = 0;
           HEAP32[$874>>2] = 0;
           $876 = HEAP32[(544664)>>2]|0;
           $877 = 1 << $I7$0$i$i;
           $878 = $876 & $877;
           $879 = ($878|0)==(0);
           if ($879) {
            $880 = $876 | $877;
            HEAP32[(544664)>>2] = $880;
            HEAP32[$872>>2] = $717;
            $$sum15$i$i = (($$sum$i19$i) + 24)|0;
            $881 = (($tbase$255$i) + ($$sum15$i$i)|0);
            HEAP32[$881>>2] = $872;
            $$sum16$i$i = (($$sum$i19$i) + 12)|0;
            $882 = (($tbase$255$i) + ($$sum16$i$i)|0);
            HEAP32[$882>>2] = $717;
            $$sum17$i$i = (($$sum$i19$i) + 8)|0;
            $883 = (($tbase$255$i) + ($$sum17$i$i)|0);
            HEAP32[$883>>2] = $717;
            break;
           }
           $884 = HEAP32[$872>>2]|0;
           $885 = ((($884)) + 4|0);
           $886 = HEAP32[$885>>2]|0;
           $887 = $886 & -8;
           $888 = ($887|0)==($qsize$0$i$i|0);
           L385: do {
            if ($888) {
             $T$0$lcssa$i25$i = $884;
            } else {
             $889 = ($I7$0$i$i|0)==(31);
             $890 = $I7$0$i$i >>> 1;
             $891 = (25 - ($890))|0;
             $892 = $889 ? 0 : $891;
             $893 = $qsize$0$i$i << $892;
             $K8$051$i$i = $893;$T$050$i$i = $884;
             while(1) {
              $900 = $K8$051$i$i >>> 31;
              $901 = (((($T$050$i$i)) + 16|0) + ($900<<2)|0);
              $896 = HEAP32[$901>>2]|0;
              $902 = ($896|0)==(0|0);
              if ($902) {
               $$lcssa = $901;$T$050$i$i$lcssa = $T$050$i$i;
               break;
              }
              $894 = $K8$051$i$i << 1;
              $895 = ((($896)) + 4|0);
              $897 = HEAP32[$895>>2]|0;
              $898 = $897 & -8;
              $899 = ($898|0)==($qsize$0$i$i|0);
              if ($899) {
               $T$0$lcssa$i25$i = $896;
               break L385;
              } else {
               $K8$051$i$i = $894;$T$050$i$i = $896;
              }
             }
             $903 = HEAP32[(544676)>>2]|0;
             $904 = ($$lcssa>>>0)<($903>>>0);
             if ($904) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$lcssa>>2] = $717;
              $$sum23$i$i = (($$sum$i19$i) + 24)|0;
              $905 = (($tbase$255$i) + ($$sum23$i$i)|0);
              HEAP32[$905>>2] = $T$050$i$i$lcssa;
              $$sum24$i$i = (($$sum$i19$i) + 12)|0;
              $906 = (($tbase$255$i) + ($$sum24$i$i)|0);
              HEAP32[$906>>2] = $717;
              $$sum25$i$i = (($$sum$i19$i) + 8)|0;
              $907 = (($tbase$255$i) + ($$sum25$i$i)|0);
              HEAP32[$907>>2] = $717;
              break L297;
             }
            }
           } while(0);
           $908 = ((($T$0$lcssa$i25$i)) + 8|0);
           $909 = HEAP32[$908>>2]|0;
           $910 = HEAP32[(544676)>>2]|0;
           $911 = ($909>>>0)>=($910>>>0);
           $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($910>>>0);
           $912 = $911 & $not$$i26$i;
           if ($912) {
            $913 = ((($909)) + 12|0);
            HEAP32[$913>>2] = $717;
            HEAP32[$908>>2] = $717;
            $$sum20$i$i = (($$sum$i19$i) + 8)|0;
            $914 = (($tbase$255$i) + ($$sum20$i$i)|0);
            HEAP32[$914>>2] = $909;
            $$sum21$i$i = (($$sum$i19$i) + 12)|0;
            $915 = (($tbase$255$i) + ($$sum21$i$i)|0);
            HEAP32[$915>>2] = $T$0$lcssa$i25$i;
            $$sum22$i$i = (($$sum$i19$i) + 24)|0;
            $916 = (($tbase$255$i) + ($$sum22$i$i)|0);
            HEAP32[$916>>2] = 0;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $$sum1819$i$i = $704 | 8;
         $917 = (($tbase$255$i) + ($$sum1819$i$i)|0);
         $mem$0 = $917;
         break L212;
        } else {
         $sp$0$i$i$i = (545108);
        }
       }
       while(1) {
        $918 = HEAP32[$sp$0$i$i$i>>2]|0;
        $919 = ($918>>>0)>($628>>>0);
        if (!($919)) {
         $920 = ((($sp$0$i$i$i)) + 4|0);
         $921 = HEAP32[$920>>2]|0;
         $922 = (($918) + ($921)|0);
         $923 = ($922>>>0)>($628>>>0);
         if ($923) {
          $$lcssa215 = $918;$$lcssa216 = $921;$$lcssa217 = $922;
          break;
         }
        }
        $924 = ((($sp$0$i$i$i)) + 8|0);
        $925 = HEAP32[$924>>2]|0;
        $sp$0$i$i$i = $925;
       }
       $$sum$i$i = (($$lcssa216) + -47)|0;
       $$sum1$i$i = (($$lcssa216) + -39)|0;
       $926 = (($$lcssa215) + ($$sum1$i$i)|0);
       $927 = $926;
       $928 = $927 & 7;
       $929 = ($928|0)==(0);
       $930 = (0 - ($927))|0;
       $931 = $930 & 7;
       $932 = $929 ? 0 : $931;
       $$sum2$i$i = (($$sum$i$i) + ($932))|0;
       $933 = (($$lcssa215) + ($$sum2$i$i)|0);
       $934 = ((($628)) + 16|0);
       $935 = ($933>>>0)<($934>>>0);
       $936 = $935 ? $628 : $933;
       $937 = ((($936)) + 8|0);
       $938 = (($tsize$254$i) + -40)|0;
       $939 = ((($tbase$255$i)) + 8|0);
       $940 = $939;
       $941 = $940 & 7;
       $942 = ($941|0)==(0);
       $943 = (0 - ($940))|0;
       $944 = $943 & 7;
       $945 = $942 ? 0 : $944;
       $946 = (($tbase$255$i) + ($945)|0);
       $947 = (($938) - ($945))|0;
       HEAP32[(544684)>>2] = $946;
       HEAP32[(544672)>>2] = $947;
       $948 = $947 | 1;
       $$sum$i$i$i = (($945) + 4)|0;
       $949 = (($tbase$255$i) + ($$sum$i$i$i)|0);
       HEAP32[$949>>2] = $948;
       $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
       $950 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
       HEAP32[$950>>2] = 40;
       $951 = HEAP32[(545148)>>2]|0;
       HEAP32[(544688)>>2] = $951;
       $952 = ((($936)) + 4|0);
       HEAP32[$952>>2] = 27;
       ;HEAP32[$937>>2]=HEAP32[(545108)>>2]|0;HEAP32[$937+4>>2]=HEAP32[(545108)+4>>2]|0;HEAP32[$937+8>>2]=HEAP32[(545108)+8>>2]|0;HEAP32[$937+12>>2]=HEAP32[(545108)+12>>2]|0;
       HEAP32[(545108)>>2] = $tbase$255$i;
       HEAP32[(545112)>>2] = $tsize$254$i;
       HEAP32[(545120)>>2] = 0;
       HEAP32[(545116)>>2] = $937;
       $953 = ((($936)) + 28|0);
       HEAP32[$953>>2] = 7;
       $954 = ((($936)) + 32|0);
       $955 = ($954>>>0)<($$lcssa217>>>0);
       if ($955) {
        $957 = $953;
        while(1) {
         $956 = ((($957)) + 4|0);
         HEAP32[$956>>2] = 7;
         $958 = ((($957)) + 8|0);
         $959 = ($958>>>0)<($$lcssa217>>>0);
         if ($959) {
          $957 = $956;
         } else {
          break;
         }
        }
       }
       $960 = ($936|0)==($628|0);
       if (!($960)) {
        $961 = $936;
        $962 = $628;
        $963 = (($961) - ($962))|0;
        $964 = HEAP32[$952>>2]|0;
        $965 = $964 & -2;
        HEAP32[$952>>2] = $965;
        $966 = $963 | 1;
        $967 = ((($628)) + 4|0);
        HEAP32[$967>>2] = $966;
        HEAP32[$936>>2] = $963;
        $968 = $963 >>> 3;
        $969 = ($963>>>0)<(256);
        if ($969) {
         $970 = $968 << 1;
         $971 = (544700 + ($970<<2)|0);
         $972 = HEAP32[544660>>2]|0;
         $973 = 1 << $968;
         $974 = $972 & $973;
         $975 = ($974|0)==(0);
         if ($975) {
          $976 = $972 | $973;
          HEAP32[544660>>2] = $976;
          $$pre$i$i = (($970) + 2)|0;
          $$pre14$i$i = (544700 + ($$pre$i$i<<2)|0);
          $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $971;
         } else {
          $$sum4$i$i = (($970) + 2)|0;
          $977 = (544700 + ($$sum4$i$i<<2)|0);
          $978 = HEAP32[$977>>2]|0;
          $979 = HEAP32[(544676)>>2]|0;
          $980 = ($978>>>0)<($979>>>0);
          if ($980) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$i$iZ2D = $977;$F$0$i$i = $978;
          }
         }
         HEAP32[$$pre$phi$i$iZ2D>>2] = $628;
         $981 = ((($F$0$i$i)) + 12|0);
         HEAP32[$981>>2] = $628;
         $982 = ((($628)) + 8|0);
         HEAP32[$982>>2] = $F$0$i$i;
         $983 = ((($628)) + 12|0);
         HEAP32[$983>>2] = $971;
         break;
        }
        $984 = $963 >>> 8;
        $985 = ($984|0)==(0);
        if ($985) {
         $I1$0$i$i = 0;
        } else {
         $986 = ($963>>>0)>(16777215);
         if ($986) {
          $I1$0$i$i = 31;
         } else {
          $987 = (($984) + 1048320)|0;
          $988 = $987 >>> 16;
          $989 = $988 & 8;
          $990 = $984 << $989;
          $991 = (($990) + 520192)|0;
          $992 = $991 >>> 16;
          $993 = $992 & 4;
          $994 = $993 | $989;
          $995 = $990 << $993;
          $996 = (($995) + 245760)|0;
          $997 = $996 >>> 16;
          $998 = $997 & 2;
          $999 = $994 | $998;
          $1000 = (14 - ($999))|0;
          $1001 = $995 << $998;
          $1002 = $1001 >>> 15;
          $1003 = (($1000) + ($1002))|0;
          $1004 = $1003 << 1;
          $1005 = (($1003) + 7)|0;
          $1006 = $963 >>> $1005;
          $1007 = $1006 & 1;
          $1008 = $1007 | $1004;
          $I1$0$i$i = $1008;
         }
        }
        $1009 = (544964 + ($I1$0$i$i<<2)|0);
        $1010 = ((($628)) + 28|0);
        HEAP32[$1010>>2] = $I1$0$i$i;
        $1011 = ((($628)) + 20|0);
        HEAP32[$1011>>2] = 0;
        HEAP32[$934>>2] = 0;
        $1012 = HEAP32[(544664)>>2]|0;
        $1013 = 1 << $I1$0$i$i;
        $1014 = $1012 & $1013;
        $1015 = ($1014|0)==(0);
        if ($1015) {
         $1016 = $1012 | $1013;
         HEAP32[(544664)>>2] = $1016;
         HEAP32[$1009>>2] = $628;
         $1017 = ((($628)) + 24|0);
         HEAP32[$1017>>2] = $1009;
         $1018 = ((($628)) + 12|0);
         HEAP32[$1018>>2] = $628;
         $1019 = ((($628)) + 8|0);
         HEAP32[$1019>>2] = $628;
         break;
        }
        $1020 = HEAP32[$1009>>2]|0;
        $1021 = ((($1020)) + 4|0);
        $1022 = HEAP32[$1021>>2]|0;
        $1023 = $1022 & -8;
        $1024 = ($1023|0)==($963|0);
        L425: do {
         if ($1024) {
          $T$0$lcssa$i$i = $1020;
         } else {
          $1025 = ($I1$0$i$i|0)==(31);
          $1026 = $I1$0$i$i >>> 1;
          $1027 = (25 - ($1026))|0;
          $1028 = $1025 ? 0 : $1027;
          $1029 = $963 << $1028;
          $K2$07$i$i = $1029;$T$06$i$i = $1020;
          while(1) {
           $1036 = $K2$07$i$i >>> 31;
           $1037 = (((($T$06$i$i)) + 16|0) + ($1036<<2)|0);
           $1032 = HEAP32[$1037>>2]|0;
           $1038 = ($1032|0)==(0|0);
           if ($1038) {
            $$lcssa211 = $1037;$T$06$i$i$lcssa = $T$06$i$i;
            break;
           }
           $1030 = $K2$07$i$i << 1;
           $1031 = ((($1032)) + 4|0);
           $1033 = HEAP32[$1031>>2]|0;
           $1034 = $1033 & -8;
           $1035 = ($1034|0)==($963|0);
           if ($1035) {
            $T$0$lcssa$i$i = $1032;
            break L425;
           } else {
            $K2$07$i$i = $1030;$T$06$i$i = $1032;
           }
          }
          $1039 = HEAP32[(544676)>>2]|0;
          $1040 = ($$lcssa211>>>0)<($1039>>>0);
          if ($1040) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa211>>2] = $628;
           $1041 = ((($628)) + 24|0);
           HEAP32[$1041>>2] = $T$06$i$i$lcssa;
           $1042 = ((($628)) + 12|0);
           HEAP32[$1042>>2] = $628;
           $1043 = ((($628)) + 8|0);
           HEAP32[$1043>>2] = $628;
           break L272;
          }
         }
        } while(0);
        $1044 = ((($T$0$lcssa$i$i)) + 8|0);
        $1045 = HEAP32[$1044>>2]|0;
        $1046 = HEAP32[(544676)>>2]|0;
        $1047 = ($1045>>>0)>=($1046>>>0);
        $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1046>>>0);
        $1048 = $1047 & $not$$i$i;
        if ($1048) {
         $1049 = ((($1045)) + 12|0);
         HEAP32[$1049>>2] = $628;
         HEAP32[$1044>>2] = $628;
         $1050 = ((($628)) + 8|0);
         HEAP32[$1050>>2] = $1045;
         $1051 = ((($628)) + 12|0);
         HEAP32[$1051>>2] = $T$0$lcssa$i$i;
         $1052 = ((($628)) + 24|0);
         HEAP32[$1052>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      }
     } while(0);
     $1053 = HEAP32[(544672)>>2]|0;
     $1054 = ($1053>>>0)>($nb$0>>>0);
     if ($1054) {
      $1055 = (($1053) - ($nb$0))|0;
      HEAP32[(544672)>>2] = $1055;
      $1056 = HEAP32[(544684)>>2]|0;
      $1057 = (($1056) + ($nb$0)|0);
      HEAP32[(544684)>>2] = $1057;
      $1058 = $1055 | 1;
      $$sum$i32 = (($nb$0) + 4)|0;
      $1059 = (($1056) + ($$sum$i32)|0);
      HEAP32[$1059>>2] = $1058;
      $1060 = $nb$0 | 3;
      $1061 = ((($1056)) + 4|0);
      HEAP32[$1061>>2] = $1060;
      $1062 = ((($1056)) + 8|0);
      $mem$0 = $1062;
      break;
     }
    }
    $1063 = (___errno_location()|0);
    HEAP32[$1063>>2] = 12;
    $mem$0 = 0;
   } else {
    $mem$0 = 0;
   }
  }
 } while(0);
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 L1: do {
  if (!($0)) {
   $1 = ((($mem)) + -8|0);
   $2 = HEAP32[(544676)>>2]|0;
   $3 = ($1>>>0)<($2>>>0);
   L3: do {
    if (!($3)) {
     $4 = ((($mem)) + -4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = $5 & 3;
     $7 = ($6|0)==(1);
     if (!($7)) {
      $8 = $5 & -8;
      $$sum = (($8) + -8)|0;
      $9 = (($mem) + ($$sum)|0);
      $10 = $5 & 1;
      $11 = ($10|0)==(0);
      do {
       if ($11) {
        $12 = HEAP32[$1>>2]|0;
        $13 = ($6|0)==(0);
        if ($13) {
         break L1;
        }
        $$sum2 = (-8 - ($12))|0;
        $14 = (($mem) + ($$sum2)|0);
        $15 = (($12) + ($8))|0;
        $16 = ($14>>>0)<($2>>>0);
        if ($16) {
         break L3;
        }
        $17 = HEAP32[(544680)>>2]|0;
        $18 = ($14|0)==($17|0);
        if ($18) {
         $$sum3 = (($8) + -4)|0;
         $103 = (($mem) + ($$sum3)|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = $104 & 3;
         $106 = ($105|0)==(3);
         if (!($106)) {
          $p$0 = $14;$psize$0 = $15;
          break;
         }
         HEAP32[(544668)>>2] = $15;
         $107 = $104 & -2;
         HEAP32[$103>>2] = $107;
         $108 = $15 | 1;
         $$sum20 = (($$sum2) + 4)|0;
         $109 = (($mem) + ($$sum20)|0);
         HEAP32[$109>>2] = $108;
         HEAP32[$9>>2] = $15;
         break L1;
        }
        $19 = $12 >>> 3;
        $20 = ($12>>>0)<(256);
        if ($20) {
         $$sum30 = (($$sum2) + 8)|0;
         $21 = (($mem) + ($$sum30)|0);
         $22 = HEAP32[$21>>2]|0;
         $$sum31 = (($$sum2) + 12)|0;
         $23 = (($mem) + ($$sum31)|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = $19 << 1;
         $26 = (544700 + ($25<<2)|0);
         $27 = ($22|0)==($26|0);
         do {
          if (!($27)) {
           $28 = ($22>>>0)<($2>>>0);
           if (!($28)) {
            $29 = ((($22)) + 12|0);
            $30 = HEAP32[$29>>2]|0;
            $31 = ($30|0)==($14|0);
            if ($31) {
             break;
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $32 = ($24|0)==($22|0);
         if ($32) {
          $33 = 1 << $19;
          $34 = $33 ^ -1;
          $35 = HEAP32[544660>>2]|0;
          $36 = $35 & $34;
          HEAP32[544660>>2] = $36;
          $p$0 = $14;$psize$0 = $15;
          break;
         }
         $37 = ($24|0)==($26|0);
         do {
          if ($37) {
           $$pre60 = ((($24)) + 8|0);
           $$pre$phi61Z2D = $$pre60;
          } else {
           $38 = ($24>>>0)<($2>>>0);
           if (!($38)) {
            $39 = ((($24)) + 8|0);
            $40 = HEAP32[$39>>2]|0;
            $41 = ($40|0)==($14|0);
            if ($41) {
             $$pre$phi61Z2D = $39;
             break;
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $42 = ((($22)) + 12|0);
         HEAP32[$42>>2] = $24;
         HEAP32[$$pre$phi61Z2D>>2] = $22;
         $p$0 = $14;$psize$0 = $15;
         break;
        }
        $$sum22 = (($$sum2) + 24)|0;
        $43 = (($mem) + ($$sum22)|0);
        $44 = HEAP32[$43>>2]|0;
        $$sum23 = (($$sum2) + 12)|0;
        $45 = (($mem) + ($$sum23)|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($46|0)==($14|0);
        do {
         if ($47) {
          $$sum25 = (($$sum2) + 20)|0;
          $57 = (($mem) + ($$sum25)|0);
          $58 = HEAP32[$57>>2]|0;
          $59 = ($58|0)==(0|0);
          if ($59) {
           $$sum24 = (($$sum2) + 16)|0;
           $60 = (($mem) + ($$sum24)|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = ($61|0)==(0|0);
           if ($62) {
            $R$1 = 0;
            break;
           } else {
            $R$0 = $61;$RP$0 = $60;
           }
          } else {
           $R$0 = $58;$RP$0 = $57;
          }
          while(1) {
           $63 = ((($R$0)) + 20|0);
           $64 = HEAP32[$63>>2]|0;
           $65 = ($64|0)==(0|0);
           if (!($65)) {
            $R$0 = $64;$RP$0 = $63;
            continue;
           }
           $66 = ((($R$0)) + 16|0);
           $67 = HEAP32[$66>>2]|0;
           $68 = ($67|0)==(0|0);
           if ($68) {
            $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
            break;
           } else {
            $R$0 = $67;$RP$0 = $66;
           }
          }
          $69 = ($RP$0$lcssa>>>0)<($2>>>0);
          if ($69) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$RP$0$lcssa>>2] = 0;
           $R$1 = $R$0$lcssa;
           break;
          }
         } else {
          $$sum29 = (($$sum2) + 8)|0;
          $48 = (($mem) + ($$sum29)|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ($49>>>0)<($2>>>0);
          if (!($50)) {
           $51 = ((($49)) + 12|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = ($52|0)==($14|0);
           if ($53) {
            $54 = ((($46)) + 8|0);
            $55 = HEAP32[$54>>2]|0;
            $56 = ($55|0)==($14|0);
            if ($56) {
             HEAP32[$51>>2] = $46;
             HEAP32[$54>>2] = $49;
             $R$1 = $46;
             break;
            }
           }
          }
          _abort();
          // unreachable;
         }
        } while(0);
        $70 = ($44|0)==(0|0);
        if ($70) {
         $p$0 = $14;$psize$0 = $15;
        } else {
         $$sum26 = (($$sum2) + 28)|0;
         $71 = (($mem) + ($$sum26)|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (544964 + ($72<<2)|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($14|0)==($74|0);
         if ($75) {
          HEAP32[$73>>2] = $R$1;
          $cond = ($R$1|0)==(0|0);
          if ($cond) {
           $76 = 1 << $72;
           $77 = $76 ^ -1;
           $78 = HEAP32[(544664)>>2]|0;
           $79 = $78 & $77;
           HEAP32[(544664)>>2] = $79;
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         } else {
          $80 = HEAP32[(544676)>>2]|0;
          $81 = ($44>>>0)<($80>>>0);
          if ($81) {
           _abort();
           // unreachable;
          }
          $82 = ((($44)) + 16|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = ($83|0)==($14|0);
          if ($84) {
           HEAP32[$82>>2] = $R$1;
          } else {
           $85 = ((($44)) + 20|0);
           HEAP32[$85>>2] = $R$1;
          }
          $86 = ($R$1|0)==(0|0);
          if ($86) {
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         }
         $87 = HEAP32[(544676)>>2]|0;
         $88 = ($R$1>>>0)<($87>>>0);
         if ($88) {
          _abort();
          // unreachable;
         }
         $89 = ((($R$1)) + 24|0);
         HEAP32[$89>>2] = $44;
         $$sum27 = (($$sum2) + 16)|0;
         $90 = (($mem) + ($$sum27)|0);
         $91 = HEAP32[$90>>2]|0;
         $92 = ($91|0)==(0|0);
         do {
          if (!($92)) {
           $93 = ($91>>>0)<($87>>>0);
           if ($93) {
            _abort();
            // unreachable;
           } else {
            $94 = ((($R$1)) + 16|0);
            HEAP32[$94>>2] = $91;
            $95 = ((($91)) + 24|0);
            HEAP32[$95>>2] = $R$1;
            break;
           }
          }
         } while(0);
         $$sum28 = (($$sum2) + 20)|0;
         $96 = (($mem) + ($$sum28)|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = ($97|0)==(0|0);
         if ($98) {
          $p$0 = $14;$psize$0 = $15;
         } else {
          $99 = HEAP32[(544676)>>2]|0;
          $100 = ($97>>>0)<($99>>>0);
          if ($100) {
           _abort();
           // unreachable;
          } else {
           $101 = ((($R$1)) + 20|0);
           HEAP32[$101>>2] = $97;
           $102 = ((($97)) + 24|0);
           HEAP32[$102>>2] = $R$1;
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         }
        }
       } else {
        $p$0 = $1;$psize$0 = $8;
       }
      } while(0);
      $110 = ($p$0>>>0)<($9>>>0);
      if ($110) {
       $$sum19 = (($8) + -4)|0;
       $111 = (($mem) + ($$sum19)|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = $112 & 1;
       $114 = ($113|0)==(0);
       if (!($114)) {
        $115 = $112 & 2;
        $116 = ($115|0)==(0);
        if ($116) {
         $117 = HEAP32[(544684)>>2]|0;
         $118 = ($9|0)==($117|0);
         if ($118) {
          $119 = HEAP32[(544672)>>2]|0;
          $120 = (($119) + ($psize$0))|0;
          HEAP32[(544672)>>2] = $120;
          HEAP32[(544684)>>2] = $p$0;
          $121 = $120 | 1;
          $122 = ((($p$0)) + 4|0);
          HEAP32[$122>>2] = $121;
          $123 = HEAP32[(544680)>>2]|0;
          $124 = ($p$0|0)==($123|0);
          if (!($124)) {
           break L1;
          }
          HEAP32[(544680)>>2] = 0;
          HEAP32[(544668)>>2] = 0;
          break L1;
         }
         $125 = HEAP32[(544680)>>2]|0;
         $126 = ($9|0)==($125|0);
         if ($126) {
          $127 = HEAP32[(544668)>>2]|0;
          $128 = (($127) + ($psize$0))|0;
          HEAP32[(544668)>>2] = $128;
          HEAP32[(544680)>>2] = $p$0;
          $129 = $128 | 1;
          $130 = ((($p$0)) + 4|0);
          HEAP32[$130>>2] = $129;
          $131 = (($p$0) + ($128)|0);
          HEAP32[$131>>2] = $128;
          break L1;
         }
         $132 = $112 & -8;
         $133 = (($132) + ($psize$0))|0;
         $134 = $112 >>> 3;
         $135 = ($112>>>0)<(256);
         do {
          if ($135) {
           $136 = (($mem) + ($8)|0);
           $137 = HEAP32[$136>>2]|0;
           $$sum1718 = $8 | 4;
           $138 = (($mem) + ($$sum1718)|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = $134 << 1;
           $141 = (544700 + ($140<<2)|0);
           $142 = ($137|0)==($141|0);
           do {
            if (!($142)) {
             $143 = HEAP32[(544676)>>2]|0;
             $144 = ($137>>>0)<($143>>>0);
             if (!($144)) {
              $145 = ((($137)) + 12|0);
              $146 = HEAP32[$145>>2]|0;
              $147 = ($146|0)==($9|0);
              if ($147) {
               break;
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $148 = ($139|0)==($137|0);
           if ($148) {
            $149 = 1 << $134;
            $150 = $149 ^ -1;
            $151 = HEAP32[544660>>2]|0;
            $152 = $151 & $150;
            HEAP32[544660>>2] = $152;
            break;
           }
           $153 = ($139|0)==($141|0);
           do {
            if ($153) {
             $$pre58 = ((($139)) + 8|0);
             $$pre$phi59Z2D = $$pre58;
            } else {
             $154 = HEAP32[(544676)>>2]|0;
             $155 = ($139>>>0)<($154>>>0);
             if (!($155)) {
              $156 = ((($139)) + 8|0);
              $157 = HEAP32[$156>>2]|0;
              $158 = ($157|0)==($9|0);
              if ($158) {
               $$pre$phi59Z2D = $156;
               break;
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $159 = ((($137)) + 12|0);
           HEAP32[$159>>2] = $139;
           HEAP32[$$pre$phi59Z2D>>2] = $137;
          } else {
           $$sum5 = (($8) + 16)|0;
           $160 = (($mem) + ($$sum5)|0);
           $161 = HEAP32[$160>>2]|0;
           $$sum67 = $8 | 4;
           $162 = (($mem) + ($$sum67)|0);
           $163 = HEAP32[$162>>2]|0;
           $164 = ($163|0)==($9|0);
           do {
            if ($164) {
             $$sum9 = (($8) + 12)|0;
             $175 = (($mem) + ($$sum9)|0);
             $176 = HEAP32[$175>>2]|0;
             $177 = ($176|0)==(0|0);
             if ($177) {
              $$sum8 = (($8) + 8)|0;
              $178 = (($mem) + ($$sum8)|0);
              $179 = HEAP32[$178>>2]|0;
              $180 = ($179|0)==(0|0);
              if ($180) {
               $R7$1 = 0;
               break;
              } else {
               $R7$0 = $179;$RP9$0 = $178;
              }
             } else {
              $R7$0 = $176;$RP9$0 = $175;
             }
             while(1) {
              $181 = ((($R7$0)) + 20|0);
              $182 = HEAP32[$181>>2]|0;
              $183 = ($182|0)==(0|0);
              if (!($183)) {
               $R7$0 = $182;$RP9$0 = $181;
               continue;
              }
              $184 = ((($R7$0)) + 16|0);
              $185 = HEAP32[$184>>2]|0;
              $186 = ($185|0)==(0|0);
              if ($186) {
               $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
               break;
              } else {
               $R7$0 = $185;$RP9$0 = $184;
              }
             }
             $187 = HEAP32[(544676)>>2]|0;
             $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
             if ($188) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP9$0$lcssa>>2] = 0;
              $R7$1 = $R7$0$lcssa;
              break;
             }
            } else {
             $165 = (($mem) + ($8)|0);
             $166 = HEAP32[$165>>2]|0;
             $167 = HEAP32[(544676)>>2]|0;
             $168 = ($166>>>0)<($167>>>0);
             if (!($168)) {
              $169 = ((($166)) + 12|0);
              $170 = HEAP32[$169>>2]|0;
              $171 = ($170|0)==($9|0);
              if ($171) {
               $172 = ((($163)) + 8|0);
               $173 = HEAP32[$172>>2]|0;
               $174 = ($173|0)==($9|0);
               if ($174) {
                HEAP32[$169>>2] = $163;
                HEAP32[$172>>2] = $166;
                $R7$1 = $163;
                break;
               }
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $189 = ($161|0)==(0|0);
           if (!($189)) {
            $$sum12 = (($8) + 20)|0;
            $190 = (($mem) + ($$sum12)|0);
            $191 = HEAP32[$190>>2]|0;
            $192 = (544964 + ($191<<2)|0);
            $193 = HEAP32[$192>>2]|0;
            $194 = ($9|0)==($193|0);
            if ($194) {
             HEAP32[$192>>2] = $R7$1;
             $cond47 = ($R7$1|0)==(0|0);
             if ($cond47) {
              $195 = 1 << $191;
              $196 = $195 ^ -1;
              $197 = HEAP32[(544664)>>2]|0;
              $198 = $197 & $196;
              HEAP32[(544664)>>2] = $198;
              break;
             }
            } else {
             $199 = HEAP32[(544676)>>2]|0;
             $200 = ($161>>>0)<($199>>>0);
             if ($200) {
              _abort();
              // unreachable;
             }
             $201 = ((($161)) + 16|0);
             $202 = HEAP32[$201>>2]|0;
             $203 = ($202|0)==($9|0);
             if ($203) {
              HEAP32[$201>>2] = $R7$1;
             } else {
              $204 = ((($161)) + 20|0);
              HEAP32[$204>>2] = $R7$1;
             }
             $205 = ($R7$1|0)==(0|0);
             if ($205) {
              break;
             }
            }
            $206 = HEAP32[(544676)>>2]|0;
            $207 = ($R7$1>>>0)<($206>>>0);
            if ($207) {
             _abort();
             // unreachable;
            }
            $208 = ((($R7$1)) + 24|0);
            HEAP32[$208>>2] = $161;
            $$sum13 = (($8) + 8)|0;
            $209 = (($mem) + ($$sum13)|0);
            $210 = HEAP32[$209>>2]|0;
            $211 = ($210|0)==(0|0);
            do {
             if (!($211)) {
              $212 = ($210>>>0)<($206>>>0);
              if ($212) {
               _abort();
               // unreachable;
              } else {
               $213 = ((($R7$1)) + 16|0);
               HEAP32[$213>>2] = $210;
               $214 = ((($210)) + 24|0);
               HEAP32[$214>>2] = $R7$1;
               break;
              }
             }
            } while(0);
            $$sum14 = (($8) + 12)|0;
            $215 = (($mem) + ($$sum14)|0);
            $216 = HEAP32[$215>>2]|0;
            $217 = ($216|0)==(0|0);
            if (!($217)) {
             $218 = HEAP32[(544676)>>2]|0;
             $219 = ($216>>>0)<($218>>>0);
             if ($219) {
              _abort();
              // unreachable;
             } else {
              $220 = ((($R7$1)) + 20|0);
              HEAP32[$220>>2] = $216;
              $221 = ((($216)) + 24|0);
              HEAP32[$221>>2] = $R7$1;
              break;
             }
            }
           }
          }
         } while(0);
         $222 = $133 | 1;
         $223 = ((($p$0)) + 4|0);
         HEAP32[$223>>2] = $222;
         $224 = (($p$0) + ($133)|0);
         HEAP32[$224>>2] = $133;
         $225 = HEAP32[(544680)>>2]|0;
         $226 = ($p$0|0)==($225|0);
         if ($226) {
          HEAP32[(544668)>>2] = $133;
          break L1;
         } else {
          $psize$1 = $133;
         }
        } else {
         $227 = $112 & -2;
         HEAP32[$111>>2] = $227;
         $228 = $psize$0 | 1;
         $229 = ((($p$0)) + 4|0);
         HEAP32[$229>>2] = $228;
         $230 = (($p$0) + ($psize$0)|0);
         HEAP32[$230>>2] = $psize$0;
         $psize$1 = $psize$0;
        }
        $231 = $psize$1 >>> 3;
        $232 = ($psize$1>>>0)<(256);
        if ($232) {
         $233 = $231 << 1;
         $234 = (544700 + ($233<<2)|0);
         $235 = HEAP32[544660>>2]|0;
         $236 = 1 << $231;
         $237 = $235 & $236;
         $238 = ($237|0)==(0);
         if ($238) {
          $239 = $235 | $236;
          HEAP32[544660>>2] = $239;
          $$pre = (($233) + 2)|0;
          $$pre57 = (544700 + ($$pre<<2)|0);
          $$pre$phiZ2D = $$pre57;$F16$0 = $234;
         } else {
          $$sum11 = (($233) + 2)|0;
          $240 = (544700 + ($$sum11<<2)|0);
          $241 = HEAP32[$240>>2]|0;
          $242 = HEAP32[(544676)>>2]|0;
          $243 = ($241>>>0)<($242>>>0);
          if ($243) {
           _abort();
           // unreachable;
          } else {
           $$pre$phiZ2D = $240;$F16$0 = $241;
          }
         }
         HEAP32[$$pre$phiZ2D>>2] = $p$0;
         $244 = ((($F16$0)) + 12|0);
         HEAP32[$244>>2] = $p$0;
         $245 = ((($p$0)) + 8|0);
         HEAP32[$245>>2] = $F16$0;
         $246 = ((($p$0)) + 12|0);
         HEAP32[$246>>2] = $234;
         break L1;
        }
        $247 = $psize$1 >>> 8;
        $248 = ($247|0)==(0);
        if ($248) {
         $I18$0 = 0;
        } else {
         $249 = ($psize$1>>>0)>(16777215);
         if ($249) {
          $I18$0 = 31;
         } else {
          $250 = (($247) + 1048320)|0;
          $251 = $250 >>> 16;
          $252 = $251 & 8;
          $253 = $247 << $252;
          $254 = (($253) + 520192)|0;
          $255 = $254 >>> 16;
          $256 = $255 & 4;
          $257 = $256 | $252;
          $258 = $253 << $256;
          $259 = (($258) + 245760)|0;
          $260 = $259 >>> 16;
          $261 = $260 & 2;
          $262 = $257 | $261;
          $263 = (14 - ($262))|0;
          $264 = $258 << $261;
          $265 = $264 >>> 15;
          $266 = (($263) + ($265))|0;
          $267 = $266 << 1;
          $268 = (($266) + 7)|0;
          $269 = $psize$1 >>> $268;
          $270 = $269 & 1;
          $271 = $270 | $267;
          $I18$0 = $271;
         }
        }
        $272 = (544964 + ($I18$0<<2)|0);
        $273 = ((($p$0)) + 28|0);
        HEAP32[$273>>2] = $I18$0;
        $274 = ((($p$0)) + 16|0);
        $275 = ((($p$0)) + 20|0);
        HEAP32[$275>>2] = 0;
        HEAP32[$274>>2] = 0;
        $276 = HEAP32[(544664)>>2]|0;
        $277 = 1 << $I18$0;
        $278 = $276 & $277;
        $279 = ($278|0)==(0);
        L168: do {
         if ($279) {
          $280 = $276 | $277;
          HEAP32[(544664)>>2] = $280;
          HEAP32[$272>>2] = $p$0;
          $281 = ((($p$0)) + 24|0);
          HEAP32[$281>>2] = $272;
          $282 = ((($p$0)) + 12|0);
          HEAP32[$282>>2] = $p$0;
          $283 = ((($p$0)) + 8|0);
          HEAP32[$283>>2] = $p$0;
         } else {
          $284 = HEAP32[$272>>2]|0;
          $285 = ((($284)) + 4|0);
          $286 = HEAP32[$285>>2]|0;
          $287 = $286 & -8;
          $288 = ($287|0)==($psize$1|0);
          L171: do {
           if ($288) {
            $T$0$lcssa = $284;
           } else {
            $289 = ($I18$0|0)==(31);
            $290 = $I18$0 >>> 1;
            $291 = (25 - ($290))|0;
            $292 = $289 ? 0 : $291;
            $293 = $psize$1 << $292;
            $K19$052 = $293;$T$051 = $284;
            while(1) {
             $300 = $K19$052 >>> 31;
             $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
             $296 = HEAP32[$301>>2]|0;
             $302 = ($296|0)==(0|0);
             if ($302) {
              $$lcssa = $301;$T$051$lcssa = $T$051;
              break;
             }
             $294 = $K19$052 << 1;
             $295 = ((($296)) + 4|0);
             $297 = HEAP32[$295>>2]|0;
             $298 = $297 & -8;
             $299 = ($298|0)==($psize$1|0);
             if ($299) {
              $T$0$lcssa = $296;
              break L171;
             } else {
              $K19$052 = $294;$T$051 = $296;
             }
            }
            $303 = HEAP32[(544676)>>2]|0;
            $304 = ($$lcssa>>>0)<($303>>>0);
            if ($304) {
             _abort();
             // unreachable;
            } else {
             HEAP32[$$lcssa>>2] = $p$0;
             $305 = ((($p$0)) + 24|0);
             HEAP32[$305>>2] = $T$051$lcssa;
             $306 = ((($p$0)) + 12|0);
             HEAP32[$306>>2] = $p$0;
             $307 = ((($p$0)) + 8|0);
             HEAP32[$307>>2] = $p$0;
             break L168;
            }
           }
          } while(0);
          $308 = ((($T$0$lcssa)) + 8|0);
          $309 = HEAP32[$308>>2]|0;
          $310 = HEAP32[(544676)>>2]|0;
          $311 = ($309>>>0)>=($310>>>0);
          $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
          $312 = $311 & $not$;
          if ($312) {
           $313 = ((($309)) + 12|0);
           HEAP32[$313>>2] = $p$0;
           HEAP32[$308>>2] = $p$0;
           $314 = ((($p$0)) + 8|0);
           HEAP32[$314>>2] = $309;
           $315 = ((($p$0)) + 12|0);
           HEAP32[$315>>2] = $T$0$lcssa;
           $316 = ((($p$0)) + 24|0);
           HEAP32[$316>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        } while(0);
        $317 = HEAP32[(544692)>>2]|0;
        $318 = (($317) + -1)|0;
        HEAP32[(544692)>>2] = $318;
        $319 = ($318|0)==(0);
        if ($319) {
         $sp$0$in$i = (545116);
        } else {
         break L1;
        }
        while(1) {
         $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
         $320 = ($sp$0$i|0)==(0|0);
         $321 = ((($sp$0$i)) + 8|0);
         if ($320) {
          break;
         } else {
          $sp$0$in$i = $321;
         }
        }
        HEAP32[(544692)>>2] = -1;
        break L1;
       }
      }
     }
    }
   } while(0);
   _abort();
   // unreachable;
  }
 } while(0);
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($6)) + -4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 3;
  $11 = ($10|0)==(0);
  if (!($11)) {
   _memset(($6|0),0,($req$0|0))|0;
  }
 }
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   $5 = (($bytes) + 11)|0;
   $6 = $5 & -8;
   $7 = $4 ? 16 : $6;
   $8 = ((($oldmem)) + -8|0);
   $9 = (_try_realloc_chunk($8,$7)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = ((($9)) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = ((($oldmem)) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 return ($mem$0|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isgraph($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -33)|0;
 $1 = ($0>>>0)<(94);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _closedir($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dir>>2]|0;
 $1 = (_close($0)|0);
 _free($dir);
 return ($1|0);
}
function _opendir($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_open($name,589824,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = (_calloc(1,2072)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    HEAP32[$vararg_buffer1>>2] = $0;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$2>>2] = $0;
    $$0 = $2;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readdir($dir) {
 $dir = $dir|0;
 var $$0 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($dir)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dir)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 do {
  if ($4) {
   $14 = $1;
   label = 6;
  } else {
   $5 = HEAP32[$dir>>2]|0;
   $6 = ((($dir)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $6;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $7 = (___syscall220(220,($vararg_buffer|0))|0);
   $8 = ($7|0)<(1);
   if (!($8)) {
    HEAP32[$2>>2] = $7;
    HEAP32[$0>>2] = 0;
    $14 = 0;
    label = 6;
    break;
   }
   $9 = ($7|0)<(0);
   $10 = ($7|0)!=(-2);
   $or$cond = $9 & $10;
   if ($or$cond) {
    $11 = (0 - ($7))|0;
    $12 = (___errno_location()|0);
    HEAP32[$12>>2] = $11;
    $$0 = 0;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (((($dir)) + 24|0) + ($14)|0);
  $$sum = (($14) + 8)|0;
  $15 = (((($dir)) + 24|0) + ($$sum)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($17) + ($14))|0;
  HEAP32[$0>>2] = $18;
  $$sum2 = (($14) + 4)|0;
  $19 = (((($dir)) + 24|0) + ($$sum2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($dir)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$0 = $13;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[544600>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 545156;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (844237 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 844325;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 844325;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 844325;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $8 = (___syscall5(5,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (846129 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (847987 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $77 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $77 = $75;
      }
      $76 = ($77|0)==(40);
      if ($76) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $169 = 0;$171 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $159 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $159 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $158 = ($159|0)==(48);
           if ($158) {
            $154 = $156;$155 = $157;
           } else {
            $169 = 0;$171 = 0;$694 = $156;$695 = $157;$c$2$i = $159;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $169 = 0;$171 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $213 = $171;$214 = $694;$216 = $169;$217 = $695;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $171;$697 = $169;$698 = $171;$699 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $213 = $171;$214 = $694;$216 = $169;$217 = $695;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $168 = ($169|0)<(0);
          $170 = ($171>>>0)<(8);
          $172 = ($169|0)==(0);
          $173 = $172 & $170;
          $174 = $168 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($169|0)<(0);
            $178 = ($171>>>0)<(14);
            $179 = ($169|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($171|0),($169|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $169 = $699;$171 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $169 = $699;$171 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $212 = $211 ? $213 : $214;
        $215 = $211 ? $216 : $217;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($212|0),($215|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$394 = $708;$395 = $706;$397 = $709;$398 = $707;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$394 = 0;$395 = $700;$397 = 0;$398 = $701;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $393 = $392 ? $394 : $395;
        $396 = $392 ? $397 : $398;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $393;$717 = $396;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $393;$723 = $396;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($393|0),($396|0))|0);
        $415 = tempRet0;
        $427 = $414;$428 = $394;$430 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $427 = $716;$428 = $714;$430 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $427 = $722;$428 = $719;$430 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $426 = ($427|0)==($428|0);
        $429 = ($430|0)==($431|0);
        $432 = $426 & $429;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($430|0)>($446|0);
        $448 = ($427>>>0)>($444>>>0);
        $449 = ($430|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($430|0)<($458|0);
        $460 = ($427>>>0)<($456>>>0);
        $461 = ($430|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($427|0);
         $477 = ($427|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($427|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($427|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($427))|0;
           $489 = (545160 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($427, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($427) + -10)|0;
           $502 = (545160 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($427|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $427;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($427|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (545160 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $427;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $427;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $604 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $603 = ($604|0)==($a$5$i$lcssa|0);
          if (!($603)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $604;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($604) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $604;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (846138 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (846138 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$90 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $89 = ($90|0)<(0);
       $91 = $89 << 31 >> 31;
       $92 = $90 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $90;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($90|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$90 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $260 = $291;$262 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $260 = $289;$262 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (846395 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (846138 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (846138 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$155 = 0;$157 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$155 = 0;$157 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $154 = ($155>>>0)>($150>>>0);
      $156 = ($157>>>0)>($149>>>0);
      $158 = ($155|0)==($150|0);
      $159 = $158 & $156;
      $160 = $154 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $157;$293 = $155;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $157;$162 = $155;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (846138 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (846138 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (846138 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $206 = $295;$208 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $205 = ($206>>>0)>($204>>>0);
       $207 = ($208>>>0)>($203>>>0);
       $209 = ($206|0)==($204|0);
       $210 = $209 & $207;
       $211 = $205 | $210;
       if ($211) {
        $$122 = $$123;$292 = $208;$293 = $206;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($208|0),($206|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $208;$293 = $206;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (846138 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $206 = $223;$208 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (846138 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (846138 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $260 = $1;$262 = $0;$neg$1 = $neg$0$;
    } else {
     $260 = $293;$262 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $259 = ($260>>>0)<($1>>>0);
   $261 = ($262>>>0)<($0>>>0);
   $263 = ($260|0)==($1|0);
   $264 = $263 & $261;
   $265 = $259 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($260>>>0)>($1>>>0);
    $275 = ($262>>>0)>($0>>>0);
    $276 = ($260|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $262 ^ $neg$1;
   $283 = $260 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___procfdname($buf,$fd) {
 $buf = $buf|0;
 $fd = $fd|0;
 var $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$0 = 0, $i$13 = 0, $i$22 = 0, $j$04 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$0 = 0;
 while(1) {
  $0 = (846404 + ($i$0)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = (($buf) + ($i$0)|0);
  HEAP8[$2>>0] = $1;
  $3 = ($i$0|0)==(14);
  $4 = (($i$0) + 1)|0;
  if ($3) {
   break;
  } else {
   $i$0 = $4;
  }
 }
 $5 = ($fd|0)==(0);
 if ($5) {
  $scevgep = ((($buf)) + 14|0);
  HEAP8[$scevgep>>0] = 48;
  $6 = ((($buf)) + 15|0);
  HEAP8[$6>>0] = 0;
 } else {
  $i$13 = 14;$j$04 = $fd;
  while(1) {
   $7 = (($j$04>>>0) / 10)&-1;
   $8 = (($i$13) + 1)|0;
   $9 = ($j$04>>>0)<(10);
   if ($9) {
    $$lcssa = $8;
    break;
   } else {
    $i$13 = $8;$j$04 = $7;
   }
  }
  $10 = (($buf) + ($$lcssa)|0);
  HEAP8[$10>>0] = 0;
  $$01 = $fd;$i$22 = $$lcssa;
  while(1) {
   $11 = (($$01>>>0) % 10)&-1;
   $12 = $11 | 48;
   $13 = $12&255;
   $14 = (($i$22) + -1)|0;
   $15 = (($buf) + ($14)|0);
   HEAP8[$15>>0] = $13;
   $16 = (($$01>>>0) / 10)&-1;
   $17 = ($$01>>>0)<(10);
   if ($17) {
    break;
   } else {
    $$01 = $16;$i$22 = $14;
   }
  }
 }
 return;
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $28 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $28 = $41;
   }
   $27 = ($28|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($27)) {
    $29 = $28;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $94 = ($95|0)==($85|0);
        $96 = ($97|0)==($86|0);
        $98 = $94 & $96;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $95;$101 = $97;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $113 = ($114|0)==($85|0);
     $115 = ($116|0)==($86|0);
     $117 = $113 & $115;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $119 = $156;$121 = $155;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $118 = ($119>>>0)<(1048576);
    $120 = ($121>>>0)<(0);
    $122 = ($119|0)==(1048576);
    $123 = $122 & $120;
    $124 = $118 | $123;
    if ($124) {
     $126 = $121;$127 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$150 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$150 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _roundf($x) {
 $x = +$x;
 var $$0 = 0.0, $$x = 0.0, $$y$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 $3 = ($2>>>0)>(149);
 do {
  if ($3) {
   $$0 = $x;
  } else {
   $4 = ($0|0)<(0);
   $5 = -$x;
   $$x = $4 ? $5 : $x;
   $6 = ($2>>>0)<(126);
   if ($6) {
    $7 = $x * 0.0;
    $$0 = $7;
    break;
   }
   $8 = $$x + 8388608.0;
   $9 = $8 + -8388608.0;
   $10 = $9 - $$x;
   $11 = $10 > 0.5;
   if ($11) {
    $12 = $$x + $10;
    $13 = $12 + -1.0;
    $y$0 = $13;
   } else {
    $14 = !($10 <= -0.5);
    $15 = $$x + $10;
    if ($14) {
     $y$0 = $15;
    } else {
     $16 = $15 + 1.0;
     $y$0 = $16;
    }
   }
   $17 = -$y$0;
   $$y$0 = $4 ? $17 : $y$0;
   $$0 = $$y$0;
  }
 } while(0);
 return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _realpath($filename,$resolved) {
 $filename = $filename|0;
 $resolved = $resolved|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $st1 = 0, $st2 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $st1 = sp + 96|0;
 $st2 = sp + 20|0;
 $buf = sp + 4272|0;
 $tmp = sp + 176|0;
 $0 = ($filename|0)==(0|0);
 do {
  if ($0) {
   $1 = (___errno_location()|0);
   HEAP32[$1>>2] = 22;
   $$0 = 0;
  } else {
   HEAP32[$vararg_buffer>>2] = $filename;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 2656256;
   $2 = (___syscall5(5,($vararg_buffer|0))|0);
   $3 = (___syscall_ret($2)|0);
   $4 = ($3|0)<(0);
   if ($4) {
    $$0 = 0;
   } else {
    ___procfdname($buf,$3);
    $5 = (_readlink($buf,$tmp,4095)|0);
    $6 = ($5|0)<(0);
    if (!($6)) {
     $7 = (($tmp) + ($5)|0);
     HEAP8[$7>>0] = 0;
     (_fstat($3,$st1)|0);
     $8 = (_stat($tmp,$st2)|0);
     $9 = ($8|0)<(0);
     if (!($9)) {
      $10 = HEAP32[$st1>>2]|0;
      $11 = HEAP32[$st2>>2]|0;
      $12 = ($10|0)==($11|0);
      if ($12) {
       $13 = ((($st1)) + 72|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ((($st2)) + 72|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ($14|0)==($16|0);
       if ($17) {
        HEAP32[$vararg_buffer2>>2] = $3;
        (___syscall6(6,($vararg_buffer2|0))|0);
        $20 = ($resolved|0)==(0|0);
        if ($20) {
         $22 = (___strdup($tmp)|0);
         $$0 = $22;
         break;
        } else {
         $21 = (_strcpy($resolved,$tmp)|0);
         $$0 = $21;
         break;
        }
       }
      }
      $18 = ($8|0)==(0);
      if ($18) {
       $19 = (___errno_location()|0);
       HEAP32[$19>>2] = 40;
      }
     }
    }
    HEAP32[$vararg_buffer5>>2] = $3;
    (___syscall6(6,($vararg_buffer5|0))|0);
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _fstat($fd,$st) {
 $fd = $fd|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $st;
 $0 = (___syscall197(197,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-9);
 if ($1) {
  HEAP32[$vararg_buffer2>>2] = $fd;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $2 = (___syscall221(221,($vararg_buffer2|0))|0);
  $3 = ($2|0)<(0);
  if ($3) {
   label = 3;
  } else {
   ___procfdname($buf,$fd);
   HEAP32[$vararg_buffer6>>2] = $buf;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $st;
   $5 = (___syscall195(195,($vararg_buffer6|0))|0);
   $6 = (___syscall_ret($5)|0);
   $$0 = $6;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $4 = (___syscall_ret($0)|0);
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _stat($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $0 = (___syscall195(195,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(846419,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $13 = $$pre;
   }
   $12 = ($13<<24>>24)==(97);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 530;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 216;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 217;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 215;
   $34 = HEAP32[(544604)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((544628)|0));
   $37 = HEAP32[(544624)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(544624)>>2] = $4;
   ___unlock(((544628)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 1023]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[544600>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((531|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[544600>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((532|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 216;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((544628)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(544624)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(544624)>>2] = $14;
  }
  ___unlock(((544628)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 511]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[544656>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[544656>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((544628)|0));
   $$012 = HEAP32[(544624)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24|0)==(0);
     if (!($23)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((544628)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$048 = 0, $$05 = 0, $$lcssa14 = 0, $$old2 = 0, $$pre = 0, $$sum$pre$phiZZ2D = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $13 = $3;
 } else {
  $13 = 0;
 }
 $4 = (($n) + -1)|0;
 $5 = ($n|0)<(2);
 if ($5) {
  $6 = ((($f)) + 74|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($8) + 255)|0;
  $10 = $9 | $8;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $12 = ($13|0)==(0);
  if (!($12)) {
   ___unlockfile($f);
  }
  $14 = ($4|0)==(0);
  if ($14) {
   HEAP8[$s>>0] = 0;
   $$0 = $s;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($4|0)==(0);
  L11: do {
   if ($$old2) {
    $p$1 = $s;
    label = 18;
   } else {
    $15 = ((($f)) + 4|0);
    $16 = ((($f)) + 8|0);
    $$05 = $4;$p$0 = $s;
    while(1) {
     $17 = HEAP32[$15>>2]|0;
     $18 = HEAP32[$16>>2]|0;
     $19 = $18;
     $20 = $17;
     $21 = (($19) - ($20))|0;
     $22 = (_memchr($17,10,$21)|0);
     $23 = ($22|0)==(0|0);
     $24 = $22;
     $25 = (1 - ($20))|0;
     $26 = (($25) + ($24))|0;
     $27 = $23 ? $21 : $26;
     $28 = ($27>>>0)<($$05>>>0);
     $29 = $28 ? $27 : $$05;
     _memcpy(($p$0|0),($17|0),($29|0))|0;
     $30 = HEAP32[$15>>2]|0;
     $31 = (($30) + ($29)|0);
     HEAP32[$15>>2] = $31;
     $32 = (($p$0) + ($29)|0);
     $33 = (($$05) - ($29))|0;
     $or$cond = $23 & $28;
     if (!($or$cond)) {
      $p$1 = $32;
      label = 18;
      break L11;
     }
     $34 = HEAP32[$16>>2]|0;
     $35 = ($31>>>0)<($34>>>0);
     if ($35) {
      $$sum6 = (($29) + 1)|0;
      $36 = (($30) + ($$sum6)|0);
      HEAP32[$15>>2] = $36;
      $37 = HEAP8[$31>>0]|0;
      $38 = $37&255;
      $$sum$pre$phiZZ2D = $$sum6;$47 = $38;
     } else {
      $39 = (___uflow($f)|0);
      $40 = ($39|0)<(0);
      if ($40) {
       $$lcssa14 = $32;
       break;
      }
      $$pre = (($29) + 1)|0;
      $$sum$pre$phiZZ2D = $$pre;$47 = $39;
     }
     $45 = (($33) + -1)|0;
     $46 = $47&255;
     $48 = (($p$0) + ($$sum$pre$phiZZ2D)|0);
     HEAP8[$32>>0] = $46;
     $sext$mask = $47 & 255;
     $49 = ($sext$mask|0)!=(10);
     $50 = ($45|0)!=(0);
     $or$cond3 = $50 & $49;
     if ($or$cond3) {
      $$05 = $45;$p$0 = $48;
     } else {
      $p$1 = $48;
      label = 18;
      break L11;
     }
    }
    $41 = ($$lcssa14|0)==($s|0);
    if ($41) {
     $$048 = 0;
    } else {
     $42 = HEAP32[$f>>2]|0;
     $43 = $42 & 16;
     $44 = ($43|0)==(0);
     if ($44) {
      $$048 = 0;
     } else {
      $p$1 = $$lcssa14;
      label = 18;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   $51 = ($s|0)==(0|0);
   if ($51) {
    $$048 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $$048 = $s;
   }
  }
  $52 = ($13|0)==(0);
  if ($52) {
   $$0 = $$048;
  } else {
   ___unlockfile($f);
   $$0 = $$048;
  }
 }
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(846419,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $32 = $4;
 } else {
  $32 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 1023]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $31 = ($32|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($32|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 1023]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 1023]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $8;
   $9 = $6;
   $10 = (($7) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $8 = $6;
  } else {
   ___unlockfile($f);
   $8 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $8 = $4;
 }
 $7 = ($8|0)==($0|0);
 if ($7) {
  $10 = $nmemb;
 } else {
  $9 = (($8>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _getc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[544652>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[544652>>2]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $20 = $4;
 } else {
  $20 = 0;
 }
 $5 = (_fputs($s,$0)|0);
 $6 = ($5|0)<(0);
 do {
  if ($6) {
   $18 = 1;
  } else {
   $7 = ((($0)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(10);
   if (!($9)) {
    $10 = ((($0)) + 20|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $15 = ((($11)) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = 10;
     $18 = 0;
     break;
    }
   }
   $16 = (___overflow($0,10)|0);
   $phitmp = ($16|0)<(0);
   $18 = $phitmp;
  }
 } while(0);
 $17 = $18 << 31 >> 31;
 $19 = ($20|0)==(0);
 if (!($19)) {
  ___unlockfile($0);
 }
 return ($17|0);
}
function _remove($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall10(10,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $8 = 0;
 } else {
  $3 = (___errno_location()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(21);
  if ($5) {
   HEAP32[$vararg_buffer1>>2] = $path;
   $6 = (___syscall40(40,($vararg_buffer1|0))|0);
   $7 = (___syscall_ret($6)|0);
   $8 = $7;
  } else {
   $8 = $1;
  }
 }
 STACKTOP = sp;return ($8|0);
}
function _rewind($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  (___fseeko_unlocked($f,0,0)|0);
  $4 = HEAP32[$f>>2]|0;
  $5 = $4 & -33;
  HEAP32[$f>>2] = $5;
  if (!($phitmp)) {
   ___unlockfile($f);
  }
 } else {
  (___fseeko_unlocked($f,0,0)|0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & -33;
  HEAP32[$f>>2] = $7;
 }
 return;
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 1023]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $32 = ($33|0)==(0);
  if (!($32)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=545192; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i30 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$lcssa = 0, $$lcssa57 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i20 = 0, $$pre$i5 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i12 = 0, $$pre1$i27$pre = 0, $$pre1$i6 = 0, $$pre1$i9 = 0, $$sum = 0, $$sum2 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $8$phi = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$036 = 0;
 var $head$1$be = 0, $head$153 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond48 = 0, $or$cond4852 = 0, $or$cond51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$037 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$254 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $$sum = (($0) - ($width))|0;
  $6 = ((($lp)) + 4|0);
  HEAP32[$6>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $10 = $width;$8 = $width;$i$0 = 2;
  while(1) {
   $7 = (($8) + ($width))|0;
   $9 = (($7) + ($10))|0;
   $11 = (($lp) + ($i$0<<2)|0);
   HEAP32[$11>>2] = $9;
   $12 = ($9>>>0)<($0>>>0);
   $13 = (($i$0) + 1)|0;
   if ($12) {
    $8$phi = $10;$10 = $9;$i$0 = $13;$8 = $8$phi;
   } else {
    break;
   }
  }
  $14 = (0 - ($width))|0;
  $15 = (($base) + ($$sum)|0);
  $16 = ($$sum|0)>(0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($16) {
   $17 = $15;
   $19 = 1;$head$036 = $base;$pshift$037 = 1;
   while(1) {
    $18 = $19 & 3;
    $20 = ($18|0)==(3);
    do {
     if ($20) {
      _sift($head$036,$width,$cmp,$pshift$037,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $21 = $$pre$i >>> 2;
      $22 = $$pre1$i << 30;
      $23 = $22 | $21;
      HEAP32[$p>>2] = $23;
      $24 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $24;
      $25 = (($pshift$037) + 2)|0;
      $48 = $23;$pshift$1 = $25;
     } else {
      $26 = (($pshift$037) + -1)|0;
      $27 = (($lp) + ($26<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $head$036;
      $30 = (($17) - ($29))|0;
      $31 = ($28>>>0)<($30>>>0);
      if ($31) {
       _sift($head$036,$width,$cmp,$pshift$037,$lp);
      } else {
       _trinkle($head$036,$width,$cmp,$p,$pshift$037,0,$lp);
      }
      $32 = ($pshift$037|0)==(1);
      if ($32) {
       $$pre$i5 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i6 = HEAP32[$p>>2]|0;
       $33 = $$pre$i5 << 1;
       $34 = $$pre1$i6 >>> 31;
       $35 = $34 | $33;
       HEAP32[$$phi$trans$insert$i>>2] = $35;
       $36 = $$pre1$i6 << 1;
       HEAP32[$p>>2] = $36;
       $48 = $36;$pshift$1 = 0;
       break;
      }
      $37 = ($26>>>0)>(31);
      if ($37) {
       $38 = (($pshift$037) + -33)|0;
       $39 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $39;
       HEAP32[$p>>2] = 0;
       $$0$i = $38;$41 = $39;$44 = 0;
      } else {
       $$pre$i11 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i12 = HEAP32[$p>>2]|0;
       $$0$i = $26;$41 = $$pre$i11;$44 = $$pre1$i12;
      }
      $40 = $41 << $$0$i;
      $42 = (32 - ($$0$i))|0;
      $43 = $44 >>> $42;
      $45 = $43 | $40;
      HEAP32[$$phi$trans$insert$i>>2] = $45;
      $46 = $44 << $$0$i;
      HEAP32[$p>>2] = $46;
      $48 = $46;$pshift$1 = 1;
     }
    } while(0);
    $47 = $48 | 1;
    HEAP32[$p>>2] = $47;
    $49 = (($head$036) + ($width)|0);
    $50 = ($49>>>0)<($15>>>0);
    if ($50) {
     $19 = $47;$head$036 = $49;$pshift$037 = $pshift$1;
    } else {
     $head$0$lcssa = $49;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $51 = ((($p)) + 4|0);
  $52 = ($pshift$0$lcssa|0)==(1);
  $53 = HEAP32[$p>>2]|0;
  $54 = ($53|0)==(1);
  $or$cond51 = $52 & $54;
  $55 = HEAP32[$51>>2]|0;
  $56 = ($55|0)==(0);
  $or$cond4852 = $or$cond51 & $56;
  if (!($or$cond4852)) {
   $59 = $53;$head$153 = $head$0$lcssa;$pshift$254 = $pshift$0$lcssa;
   while(1) {
    $57 = ($pshift$254|0)<(2);
    if ($57) {
     $58 = (($59) + -1)|0;
     $60 = ($58|0)==(0);
     do {
      if ($60) {
       $81 = 32;
       label = 30;
      } else {
       $61 = $58 & 1;
       $62 = ($61|0)==(0);
       if ($62) {
        $$02$i$i = $58;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $63 = (($nTrailingZeros$03$i$i) + 1)|0;
         $64 = $$02$i$i >>> 1;
         $65 = $64 & 1;
         $66 = ($65|0)==(0);
         if ($66) {
          $$02$i$i = $64;$nTrailingZeros$03$i$i = $63;
         } else {
          $$lcssa = $63;
          break;
         }
        }
        $67 = ($$lcssa|0)==(0);
        if ($67) {
         label = 24;
        } else {
         $79 = $$lcssa;
        }
       } else {
        label = 24;
       }
       if ((label|0) == 24) {
        label = 0;
        $68 = HEAP32[$$phi$trans$insert$i>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         $81 = 64;
         label = 30;
         break;
        }
        $70 = $68 & 1;
        $71 = ($70|0)==(0);
        if ($71) {
         $$02$i3$i = $68;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        }
        while(1) {
         $72 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $73 = $$02$i3$i >>> 1;
         $74 = $73 & 1;
         $75 = ($74|0)==(0);
         if ($75) {
          $$02$i3$i = $73;$nTrailingZeros$03$i2$i = $72;
         } else {
          $$lcssa57 = $72;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $76 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $77 = ($$lcssa57|0)==(0);
        if ($77) {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        } else {
         $79 = $76;
        }
       }
       $78 = ($79>>>0)>(31);
       if ($78) {
        $81 = $79;
        label = 30;
       } else {
        $$pre1$i27$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
        $$0$i30 = $79;$84 = $59;$87 = $$pre1$i27$pre;$91 = $79;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $80 = (($81) + -32)|0;
      $82 = HEAP32[$$phi$trans$insert$i>>2]|0;
      HEAP32[$p>>2] = $82;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i30 = $80;$84 = $82;$87 = 0;$91 = $81;
     }
     $83 = $84 >>> $$0$i30;
     $85 = (32 - ($$0$i30))|0;
     $86 = $87 << $85;
     $88 = $86 | $83;
     HEAP32[$p>>2] = $88;
     $89 = $87 >>> $$0$i30;
     HEAP32[$$phi$trans$insert$i>>2] = $89;
     $90 = (($91) + ($pshift$254))|0;
     $$pre = (($head$153) + ($14)|0);
     $head$1$be = $$pre;$pshift$2$be = $90;
    } else {
     $$pre$i20 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $92 = $$pre$i20 << 2;
     $93 = $59 >>> 30;
     $94 = $93 | $92;
     $95 = (($pshift$254) + -2)|0;
     $96 = $59 << 1;
     $97 = $96 & 2147483646;
     $98 = $93 << 31;
     $99 = $97 | $98;
     $100 = $99 ^ 3;
     HEAP32[$p>>2] = $100;
     $101 = $94 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $101;
     $102 = (($lp) + ($95<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $sum = (($103) + ($width))|0;
     $$sum2 = (0 - ($sum))|0;
     $104 = (($head$153) + ($$sum2)|0);
     $105 = (($pshift$254) + -1)|0;
     _trinkle($104,$width,$cmp,$p,$105,1,$lp);
     $$pre$i8 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i9 = HEAP32[$p>>2]|0;
     $106 = $$pre$i8 << 1;
     $107 = $$pre1$i9 >>> 31;
     $108 = $107 | $106;
     HEAP32[$$phi$trans$insert$i>>2] = $108;
     $109 = $$pre1$i9 << 1;
     $110 = $109 | 1;
     HEAP32[$p>>2] = $110;
     $111 = (($head$153) + ($14)|0);
     _trinkle($111,$width,$cmp,$p,$95,1,$lp);
     $head$1$be = $111;$pshift$2$be = $95;
    }
    $112 = ($pshift$2$be|0)==(1);
    $113 = HEAP32[$p>>2]|0;
    $114 = ($113|0)==(1);
    $or$cond = $112 & $114;
    $115 = HEAP32[$51>>2]|0;
    $116 = ($115|0)==(0);
    $or$cond48 = $or$cond & $116;
    if ($or$cond48) {
     break;
    } else {
     $59 = $113;$head$153 = $head$1$be;$pshift$254 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox535($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox535($s,$p,$base,-1,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox535($s,$p,$base,-2147483648,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $6 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $6;$r$0$lcssa = $r$04;
     break L1;
    }
    $5 = ($6<<24>>24)==($3<<24>>24);
    if (!($5)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $6 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 3;
 } else {
  $2 = ((($c)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   label = 3;
  } else {
   ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = ((($$027)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$035 = $s;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($byteset) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$03$lcssa = $$035;
       break L7;
      }
      $32 = ((($$035)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$03$lcssa = $32;
       break;
      } else {
       $$035 = $32;$23 = $33;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
  }
 }
 if ((label|0) == 3) {
  $5 = $0 << 24 >> 24;
  $6 = (___strchrnul($s,$5)|0);
  $7 = $6;
  $8 = $s;
  $9 = (($7) - ($8))|0;
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ((($c)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $$03 = $s;
    while(1) {
     $5 = HEAP8[$$03>>0]|0;
     $6 = ($5<<24>>24)==($0<<24>>24);
     $7 = ((($$03)) + 1|0);
     if ($6) {
      $$03 = $7;
     } else {
      $$03$lcssa = $$03;
      break;
     }
    }
    $8 = $$03$lcssa;
    $9 = $s;
    $10 = (($8) - ($9))|0;
    $$0 = $10;
    break;
   } else {
    $$028 = $c;$14 = $0;
   }
   while(1) {
    $13 = $14 & 31;
    $15 = $13&255;
    $16 = 1 << $15;
    $div4 = ($14&255) >>> 5;
    $17 = $div4&255;
    $18 = (($byteset) + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 | $16;
    HEAP32[$18>>2] = $20;
    $21 = ((($$028)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     break;
    } else {
     $$028 = $21;$14 = $22;
    }
   }
   $11 = HEAP8[$s>>0]|0;
   $12 = ($11<<24>>24)==(0);
   L10: do {
    if ($12) {
     $$1$lcssa = $s;
    } else {
     $$16 = $s;$24 = $11;
     while(1) {
      $div = ($24&255) >>> 5;
      $25 = $div&255;
      $26 = (($byteset) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $24 & 31;
      $29 = $28&255;
      $30 = 1 << $29;
      $31 = $27 & $30;
      $32 = ($31|0)==(0);
      if ($32) {
       $$1$lcssa = $$16;
       break L10;
      }
      $33 = ((($$16)) + 1|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(0);
      if ($35) {
       $$1$lcssa = $33;
       break;
      } else {
       $$16 = $33;$24 = $34;
      }
     }
    }
   } while(0);
   $36 = $$1$lcssa;
   $37 = $s;
   $38 = (($36) - ($37))|0;
   $$0 = $38;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
 var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$32 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$32 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $31 = ($32<<24>>24)!=(0);
       $33 = $31 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i2 = $63 | $64;
          if ($or$cond$i2) {
           $$0$lcssa$i = $58;$$lcssa$i4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
         } else {
          $$02$i7 = $68;$hw$03$i6 = $94;
          while(1) {
           $96 = $hw$03$i6 << 8;
           $97 = ((($$02$i7)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i8 = $101 | $102;
           if ($or$cond$i8) {
            $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
            break;
           } else {
            $$02$i7 = $97;$hw$03$i6 = $100;
           }
          }
         }
         $103 = ($$lcssa$i10<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i11)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$080$i = 0;
        while(1) {
         $106 = (($3) + ($l$080$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$0$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div4$i = ($110&255) >>> 5;
         $113 = $div4$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$080$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$080$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa322>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
              L39: while(1) {
               $133 = $236;$k$059$i = 1;
               while(1) {
                $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                 break L39;
                }
                $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                $127 = (($k$059$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1365$i))|0;
                $128 = ($126>>>0)<($$lcssa322>>>0);
                if ($128) {
                 $133 = $126;$k$059$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa322>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1365$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                break L35;
               }
              }
              $140 = ($$lcssa304&255)>($$lcssa307&255);
              $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
              if (!($140)) {
               $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
               break;
              }
              $124 = (($$lcssa301) + 1)|0;
              $125 = ($124>>>0)<($$lcssa322>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa322>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
              L54: while(1) {
               $152 = $238;$k$139$i = 1;
               while(1) {
                $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                 break L54;
                }
                $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                $146 = (($k$139$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph944$i))|0;
                $147 = ($145>>>0)<($$lcssa322>>>0);
                if ($147) {
                 $152 = $145;$k$139$i = $146;
                } else {
                 $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa322>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph944$i = $156;
               } else {
                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                break L34;
               }
              }
              $159 = ($$lcssa284&255)<($$lcssa287&255);
              $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
              if (!($159)) {
               $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
               break;
              }
              $164 = (($$lcssa281) + 1)|0;
              $165 = ($164>>>0)<($$lcssa322>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
              } else {
               $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa322>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
             } else {
              $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa322 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa322) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa322>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$1$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa322>>>0);
              if ($189) {
               $$0$i = 0;
               break L32;
              } else {
               $z$1$i = $185;
               break;
              }
             }
            } else {
             $z$1$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa322)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa322) - ($203))|0;
           $205 = ($$lcssa322|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$338$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$338$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$338$i$lcssa = $k$338$i;
               break;
              }
              $218 = (($k$338$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$338$i = $218;
              }
             }
             $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$0$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
          }
         }
        } while(0);
        $$0 = $$0$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strtok_r($s,$sep,$p) {
 $s = $s|0;
 $sep = $sep|0;
 $p = $p|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $$01 = $1;
   label = 3;
  }
 } else {
  $$01 = $s;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $3 = (_strspn($$01,$sep)|0);
   $4 = (($$01) + ($3)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    HEAP32[$p>>2] = 0;
    $$0 = 0;
    break;
   }
   $7 = (_strcspn($4,$sep)|0);
   $$sum = (($7) + ($3))|0;
   $8 = (($$01) + ($$sum)|0);
   HEAP32[$p>>2] = $8;
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    HEAP32[$p>>2] = 0;
    $$0 = $4;
    break;
   } else {
    $$sum2 = (($$sum) + 1)|0;
    $11 = (($$01) + ($$sum2)|0);
    HEAP32[$p>>2] = $11;
    HEAP8[$8>>0] = 0;
    $$0 = $4;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall6(6,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-4);
 $$ = $1 ? -115 : $0;
 $2 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($2|0);
}
function _getpid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall20(20,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _readlink($path,$buf,$bufsize) {
 $path = $path|0;
 $buf = $buf|0;
 $bufsize = $bufsize|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $bufsize;
 $0 = (___syscall85(85,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _init_mparams() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[545132>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(545140)>>2] = $2;
    HEAP32[(545136)>>2] = $2;
    HEAP32[(545144)>>2] = -1;
    HEAP32[(545148)>>2] = -1;
    HEAP32[(545152)>>2] = 0;
    HEAP32[(545104)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[545132>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 return;
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(544676)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if ($or$cond30) {
  $$sum2728 = $2 | 4;
  $7 = (($p) + ($$sum2728)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 1;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = ($5|0)==(0);
   do {
    if ($11) {
     $12 = ($nb>>>0)<(256);
     if ($12) {
      $newp$0 = 0;
     } else {
      $13 = (($nb) + 4)|0;
      $14 = ($2>>>0)<($13>>>0);
      if (!($14)) {
       $15 = (($2) - ($nb))|0;
       $16 = HEAP32[(545140)>>2]|0;
       $17 = $16 << 1;
       $18 = ($15>>>0)>($17>>>0);
       if (!($18)) {
        $newp$0 = $p;
        break;
       }
      }
      $newp$0 = 0;
     }
    } else {
     $19 = ($2>>>0)<($nb>>>0);
     if (!($19)) {
      $20 = (($2) - ($nb))|0;
      $21 = ($20>>>0)>(15);
      if (!($21)) {
       $newp$0 = $p;
       break;
      }
      $22 = (($p) + ($nb)|0);
      $23 = $1 & 1;
      $24 = $23 | $nb;
      $25 = $24 | 2;
      HEAP32[$0>>2] = $25;
      $$sum23 = (($nb) + 4)|0;
      $26 = (($p) + ($$sum23)|0);
      $27 = $20 | 3;
      HEAP32[$26>>2] = $27;
      $28 = HEAP32[$7>>2]|0;
      $29 = $28 | 1;
      HEAP32[$7>>2] = $29;
      _dispose_chunk($22,$20);
      $newp$0 = $p;
      break;
     }
     $30 = HEAP32[(544684)>>2]|0;
     $31 = ($3|0)==($30|0);
     if ($31) {
      $32 = HEAP32[(544672)>>2]|0;
      $33 = (($32) + ($2))|0;
      $34 = ($33>>>0)>($nb>>>0);
      if (!($34)) {
       $newp$0 = 0;
       break;
      }
      $35 = (($33) - ($nb))|0;
      $36 = (($p) + ($nb)|0);
      $37 = $1 & 1;
      $38 = $37 | $nb;
      $39 = $38 | 2;
      HEAP32[$0>>2] = $39;
      $$sum22 = (($nb) + 4)|0;
      $40 = (($p) + ($$sum22)|0);
      $41 = $35 | 1;
      HEAP32[$40>>2] = $41;
      HEAP32[(544684)>>2] = $36;
      HEAP32[(544672)>>2] = $35;
      $newp$0 = $p;
      break;
     }
     $42 = HEAP32[(544680)>>2]|0;
     $43 = ($3|0)==($42|0);
     if ($43) {
      $44 = HEAP32[(544668)>>2]|0;
      $45 = (($44) + ($2))|0;
      $46 = ($45>>>0)<($nb>>>0);
      if ($46) {
       $newp$0 = 0;
       break;
      }
      $47 = (($45) - ($nb))|0;
      $48 = ($47>>>0)>(15);
      if ($48) {
       $49 = (($p) + ($nb)|0);
       $50 = (($p) + ($45)|0);
       $51 = $1 & 1;
       $52 = $51 | $nb;
       $53 = $52 | 2;
       HEAP32[$0>>2] = $53;
       $$sum19 = (($nb) + 4)|0;
       $54 = (($p) + ($$sum19)|0);
       $55 = $47 | 1;
       HEAP32[$54>>2] = $55;
       HEAP32[$50>>2] = $47;
       $$sum20 = (($45) + 4)|0;
       $56 = (($p) + ($$sum20)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = $57 & -2;
       HEAP32[$56>>2] = $58;
       $storemerge = $49;$storemerge21 = $47;
      } else {
       $59 = $1 & 1;
       $60 = $59 | $45;
       $61 = $60 | 2;
       HEAP32[$0>>2] = $61;
       $$sum17 = (($45) + 4)|0;
       $62 = (($p) + ($$sum17)|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $63 | 1;
       HEAP32[$62>>2] = $64;
       $storemerge = 0;$storemerge21 = 0;
      }
      HEAP32[(544668)>>2] = $storemerge21;
      HEAP32[(544680)>>2] = $storemerge;
      $newp$0 = $p;
      break;
     }
     $65 = $8 & 2;
     $66 = ($65|0)==(0);
     if ($66) {
      $67 = $8 & -8;
      $68 = (($67) + ($2))|0;
      $69 = ($68>>>0)<($nb>>>0);
      if ($69) {
       $newp$0 = 0;
      } else {
       $70 = (($68) - ($nb))|0;
       $71 = $8 >>> 3;
       $72 = ($8>>>0)<(256);
       do {
        if ($72) {
         $$sum15 = (($2) + 8)|0;
         $73 = (($p) + ($$sum15)|0);
         $74 = HEAP32[$73>>2]|0;
         $$sum16 = (($2) + 12)|0;
         $75 = (($p) + ($$sum16)|0);
         $76 = HEAP32[$75>>2]|0;
         $77 = $71 << 1;
         $78 = (544700 + ($77<<2)|0);
         $79 = ($74|0)==($78|0);
         do {
          if (!($79)) {
           $80 = ($74>>>0)<($4>>>0);
           if (!($80)) {
            $81 = ((($74)) + 12|0);
            $82 = HEAP32[$81>>2]|0;
            $83 = ($82|0)==($3|0);
            if ($83) {
             break;
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $84 = ($76|0)==($74|0);
         if ($84) {
          $85 = 1 << $71;
          $86 = $85 ^ -1;
          $87 = HEAP32[544660>>2]|0;
          $88 = $87 & $86;
          HEAP32[544660>>2] = $88;
          break;
         }
         $89 = ($76|0)==($78|0);
         do {
          if ($89) {
           $$pre = ((($76)) + 8|0);
           $$pre$phiZ2D = $$pre;
          } else {
           $90 = ($76>>>0)<($4>>>0);
           if (!($90)) {
            $91 = ((($76)) + 8|0);
            $92 = HEAP32[$91>>2]|0;
            $93 = ($92|0)==($3|0);
            if ($93) {
             $$pre$phiZ2D = $91;
             break;
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $94 = ((($74)) + 12|0);
         HEAP32[$94>>2] = $76;
         HEAP32[$$pre$phiZ2D>>2] = $74;
        } else {
         $$sum = (($2) + 24)|0;
         $95 = (($p) + ($$sum)|0);
         $96 = HEAP32[$95>>2]|0;
         $$sum2 = (($2) + 12)|0;
         $97 = (($p) + ($$sum2)|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = ($98|0)==($3|0);
         do {
          if ($99) {
           $$sum4 = (($2) + 20)|0;
           $109 = (($p) + ($$sum4)|0);
           $110 = HEAP32[$109>>2]|0;
           $111 = ($110|0)==(0|0);
           if ($111) {
            $$sum3 = (($2) + 16)|0;
            $112 = (($p) + ($$sum3)|0);
            $113 = HEAP32[$112>>2]|0;
            $114 = ($113|0)==(0|0);
            if ($114) {
             $R$1 = 0;
             break;
            } else {
             $R$0 = $113;$RP$0 = $112;
            }
           } else {
            $R$0 = $110;$RP$0 = $109;
           }
           while(1) {
            $115 = ((($R$0)) + 20|0);
            $116 = HEAP32[$115>>2]|0;
            $117 = ($116|0)==(0|0);
            if (!($117)) {
             $R$0 = $116;$RP$0 = $115;
             continue;
            }
            $118 = ((($R$0)) + 16|0);
            $119 = HEAP32[$118>>2]|0;
            $120 = ($119|0)==(0|0);
            if ($120) {
             $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
             break;
            } else {
             $R$0 = $119;$RP$0 = $118;
            }
           }
           $121 = ($RP$0$lcssa>>>0)<($4>>>0);
           if ($121) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0$lcssa>>2] = 0;
            $R$1 = $R$0$lcssa;
            break;
           }
          } else {
           $$sum14 = (($2) + 8)|0;
           $100 = (($p) + ($$sum14)|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = ($101>>>0)<($4>>>0);
           if (!($102)) {
            $103 = ((($101)) + 12|0);
            $104 = HEAP32[$103>>2]|0;
            $105 = ($104|0)==($3|0);
            if ($105) {
             $106 = ((($98)) + 8|0);
             $107 = HEAP32[$106>>2]|0;
             $108 = ($107|0)==($3|0);
             if ($108) {
              HEAP32[$103>>2] = $98;
              HEAP32[$106>>2] = $101;
              $R$1 = $98;
              break;
             }
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $122 = ($96|0)==(0|0);
         if (!($122)) {
          $$sum11 = (($2) + 28)|0;
          $123 = (($p) + ($$sum11)|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = (544964 + ($124<<2)|0);
          $126 = HEAP32[$125>>2]|0;
          $127 = ($3|0)==($126|0);
          if ($127) {
           HEAP32[$125>>2] = $R$1;
           $cond = ($R$1|0)==(0|0);
           if ($cond) {
            $128 = 1 << $124;
            $129 = $128 ^ -1;
            $130 = HEAP32[(544664)>>2]|0;
            $131 = $130 & $129;
            HEAP32[(544664)>>2] = $131;
            break;
           }
          } else {
           $132 = HEAP32[(544676)>>2]|0;
           $133 = ($96>>>0)<($132>>>0);
           if ($133) {
            _abort();
            // unreachable;
           }
           $134 = ((($96)) + 16|0);
           $135 = HEAP32[$134>>2]|0;
           $136 = ($135|0)==($3|0);
           if ($136) {
            HEAP32[$134>>2] = $R$1;
           } else {
            $137 = ((($96)) + 20|0);
            HEAP32[$137>>2] = $R$1;
           }
           $138 = ($R$1|0)==(0|0);
           if ($138) {
            break;
           }
          }
          $139 = HEAP32[(544676)>>2]|0;
          $140 = ($R$1>>>0)<($139>>>0);
          if ($140) {
           _abort();
           // unreachable;
          }
          $141 = ((($R$1)) + 24|0);
          HEAP32[$141>>2] = $96;
          $$sum12 = (($2) + 16)|0;
          $142 = (($p) + ($$sum12)|0);
          $143 = HEAP32[$142>>2]|0;
          $144 = ($143|0)==(0|0);
          do {
           if (!($144)) {
            $145 = ($143>>>0)<($139>>>0);
            if ($145) {
             _abort();
             // unreachable;
            } else {
             $146 = ((($R$1)) + 16|0);
             HEAP32[$146>>2] = $143;
             $147 = ((($143)) + 24|0);
             HEAP32[$147>>2] = $R$1;
             break;
            }
           }
          } while(0);
          $$sum13 = (($2) + 20)|0;
          $148 = (($p) + ($$sum13)|0);
          $149 = HEAP32[$148>>2]|0;
          $150 = ($149|0)==(0|0);
          if (!($150)) {
           $151 = HEAP32[(544676)>>2]|0;
           $152 = ($149>>>0)<($151>>>0);
           if ($152) {
            _abort();
            // unreachable;
           } else {
            $153 = ((($R$1)) + 20|0);
            HEAP32[$153>>2] = $149;
            $154 = ((($149)) + 24|0);
            HEAP32[$154>>2] = $R$1;
            break;
           }
          }
         }
        }
       } while(0);
       $155 = ($70>>>0)<(16);
       if ($155) {
        $156 = $1 & 1;
        $157 = $68 | $156;
        $158 = $157 | 2;
        HEAP32[$0>>2] = $158;
        $$sum910 = $68 | 4;
        $159 = (($p) + ($$sum910)|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = $160 | 1;
        HEAP32[$159>>2] = $161;
        $newp$0 = $p;
        break;
       } else {
        $162 = (($p) + ($nb)|0);
        $163 = $1 & 1;
        $164 = $163 | $nb;
        $165 = $164 | 2;
        HEAP32[$0>>2] = $165;
        $$sum5 = (($nb) + 4)|0;
        $166 = (($p) + ($$sum5)|0);
        $167 = $70 | 3;
        HEAP32[$166>>2] = $167;
        $$sum78 = $68 | 4;
        $168 = (($p) + ($$sum78)|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = $169 | 1;
        HEAP32[$168>>2] = $170;
        _dispose_chunk($162,$70);
        $newp$0 = $p;
        break;
       }
      }
     } else {
      $newp$0 = 0;
     }
    }
   } while(0);
   return ($newp$0|0);
  }
 }
 _abort();
 // unreachable;
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = (0 - ($5))|0;
    $9 = (($p) + ($8)|0);
    $10 = (($5) + ($psize))|0;
    $11 = HEAP32[(544676)>>2]|0;
    $12 = ($9>>>0)<($11>>>0);
    if ($12) {
     _abort();
     // unreachable;
    }
    $13 = HEAP32[(544680)>>2]|0;
    $14 = ($9|0)==($13|0);
    if ($14) {
     $$sum = (($psize) + 4)|0;
     $99 = (($p) + ($$sum)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $100 & 3;
     $102 = ($101|0)==(3);
     if (!($102)) {
      $$0 = $9;$$02 = $10;
      label = 54;
      break;
     }
     HEAP32[(544668)>>2] = $10;
     $103 = $100 & -2;
     HEAP32[$99>>2] = $103;
     $104 = $10 | 1;
     $$sum14 = (4 - ($5))|0;
     $105 = (($p) + ($$sum14)|0);
     HEAP32[$105>>2] = $104;
     HEAP32[$0>>2] = $10;
     break;
    }
    $15 = $5 >>> 3;
    $16 = ($5>>>0)<(256);
    if ($16) {
     $$sum24 = (8 - ($5))|0;
     $17 = (($p) + ($$sum24)|0);
     $18 = HEAP32[$17>>2]|0;
     $$sum25 = (12 - ($5))|0;
     $19 = (($p) + ($$sum25)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = $15 << 1;
     $22 = (544700 + ($21<<2)|0);
     $23 = ($18|0)==($22|0);
     do {
      if (!($23)) {
       $24 = ($18>>>0)<($11>>>0);
       if (!($24)) {
        $25 = ((($18)) + 12|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = ($26|0)==($9|0);
        if ($27) {
         break;
        }
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $28 = ($20|0)==($18|0);
     if ($28) {
      $29 = 1 << $15;
      $30 = $29 ^ -1;
      $31 = HEAP32[544660>>2]|0;
      $32 = $31 & $30;
      HEAP32[544660>>2] = $32;
      $$0 = $9;$$02 = $10;
      label = 54;
      break;
     }
     $33 = ($20|0)==($22|0);
     do {
      if ($33) {
       $$pre51 = ((($20)) + 8|0);
       $$pre$phi52Z2D = $$pre51;
      } else {
       $34 = ($20>>>0)<($11>>>0);
       if (!($34)) {
        $35 = ((($20)) + 8|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = ($36|0)==($9|0);
        if ($37) {
         $$pre$phi52Z2D = $35;
         break;
        }
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $38 = ((($18)) + 12|0);
     HEAP32[$38>>2] = $20;
     HEAP32[$$pre$phi52Z2D>>2] = $18;
     $$0 = $9;$$02 = $10;
     label = 54;
     break;
    }
    $$sum16 = (24 - ($5))|0;
    $39 = (($p) + ($$sum16)|0);
    $40 = HEAP32[$39>>2]|0;
    $$sum17 = (12 - ($5))|0;
    $41 = (($p) + ($$sum17)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==($9|0);
    do {
     if ($43) {
      $$sum18 = (16 - ($5))|0;
      $$sum19 = (($$sum18) + 4)|0;
      $53 = (($p) + ($$sum19)|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)==(0|0);
      if ($55) {
       $56 = (($p) + ($$sum18)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        $R$1 = 0;
        break;
       } else {
        $R$0 = $57;$RP$0 = $56;
       }
      } else {
       $R$0 = $54;$RP$0 = $53;
      }
      while(1) {
       $59 = ((($R$0)) + 20|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0|0);
       if (!($61)) {
        $R$0 = $60;$RP$0 = $59;
        continue;
       }
       $62 = ((($R$0)) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0 = $63;$RP$0 = $62;
       }
      }
      $65 = ($RP$0$lcssa>>>0)<($11>>>0);
      if ($65) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP$0$lcssa>>2] = 0;
       $R$1 = $R$0$lcssa;
       break;
      }
     } else {
      $$sum23 = (8 - ($5))|0;
      $44 = (($p) + ($$sum23)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45>>>0)<($11>>>0);
      if (!($46)) {
       $47 = ((($45)) + 12|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($48|0)==($9|0);
       if ($49) {
        $50 = ((($42)) + 8|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==($9|0);
        if ($52) {
         HEAP32[$47>>2] = $42;
         HEAP32[$50>>2] = $45;
         $R$1 = $42;
         break;
        }
       }
      }
      _abort();
      // unreachable;
     }
    } while(0);
    $66 = ($40|0)==(0|0);
    if ($66) {
     $$0 = $9;$$02 = $10;
     label = 54;
    } else {
     $$sum20 = (28 - ($5))|0;
     $67 = (($p) + ($$sum20)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (544964 + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($9|0)==($70|0);
     if ($71) {
      HEAP32[$69>>2] = $R$1;
      $cond = ($R$1|0)==(0|0);
      if ($cond) {
       $72 = 1 << $68;
       $73 = $72 ^ -1;
       $74 = HEAP32[(544664)>>2]|0;
       $75 = $74 & $73;
       HEAP32[(544664)>>2] = $75;
       $$0 = $9;$$02 = $10;
       label = 54;
       break;
      }
     } else {
      $76 = HEAP32[(544676)>>2]|0;
      $77 = ($40>>>0)<($76>>>0);
      if ($77) {
       _abort();
       // unreachable;
      }
      $78 = ((($40)) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==($9|0);
      if ($80) {
       HEAP32[$78>>2] = $R$1;
      } else {
       $81 = ((($40)) + 20|0);
       HEAP32[$81>>2] = $R$1;
      }
      $82 = ($R$1|0)==(0|0);
      if ($82) {
       $$0 = $9;$$02 = $10;
       label = 54;
       break;
      }
     }
     $83 = HEAP32[(544676)>>2]|0;
     $84 = ($R$1>>>0)<($83>>>0);
     if ($84) {
      _abort();
      // unreachable;
     }
     $85 = ((($R$1)) + 24|0);
     HEAP32[$85>>2] = $40;
     $$sum21 = (16 - ($5))|0;
     $86 = (($p) + ($$sum21)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)==(0|0);
     do {
      if (!($88)) {
       $89 = ($87>>>0)<($83>>>0);
       if ($89) {
        _abort();
        // unreachable;
       } else {
        $90 = ((($R$1)) + 16|0);
        HEAP32[$90>>2] = $87;
        $91 = ((($87)) + 24|0);
        HEAP32[$91>>2] = $R$1;
        break;
       }
      }
     } while(0);
     $$sum22 = (($$sum21) + 4)|0;
     $92 = (($p) + ($$sum22)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($93|0)==(0|0);
     if ($94) {
      $$0 = $9;$$02 = $10;
      label = 54;
     } else {
      $95 = HEAP32[(544676)>>2]|0;
      $96 = ($93>>>0)<($95>>>0);
      if ($96) {
       _abort();
       // unreachable;
      } else {
       $97 = ((($R$1)) + 20|0);
       HEAP32[$97>>2] = $93;
       $98 = ((($93)) + 24|0);
       HEAP32[$98>>2] = $R$1;
       $$0 = $9;$$02 = $10;
       label = 54;
       break;
      }
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
   label = 54;
  }
 } while(0);
 L74: do {
  if ((label|0) == 54) {
   $106 = HEAP32[(544676)>>2]|0;
   $107 = ($0>>>0)<($106>>>0);
   if ($107) {
    _abort();
    // unreachable;
   }
   $$sum1 = (($psize) + 4)|0;
   $108 = (($p) + ($$sum1)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $109 & 2;
   $111 = ($110|0)==(0);
   if ($111) {
    $112 = HEAP32[(544684)>>2]|0;
    $113 = ($0|0)==($112|0);
    if ($113) {
     $114 = HEAP32[(544672)>>2]|0;
     $115 = (($114) + ($$02))|0;
     HEAP32[(544672)>>2] = $115;
     HEAP32[(544684)>>2] = $$0;
     $116 = $115 | 1;
     $117 = ((($$0)) + 4|0);
     HEAP32[$117>>2] = $116;
     $118 = HEAP32[(544680)>>2]|0;
     $119 = ($$0|0)==($118|0);
     if (!($119)) {
      break;
     }
     HEAP32[(544680)>>2] = 0;
     HEAP32[(544668)>>2] = 0;
     break;
    }
    $120 = HEAP32[(544680)>>2]|0;
    $121 = ($0|0)==($120|0);
    if ($121) {
     $122 = HEAP32[(544668)>>2]|0;
     $123 = (($122) + ($$02))|0;
     HEAP32[(544668)>>2] = $123;
     HEAP32[(544680)>>2] = $$0;
     $124 = $123 | 1;
     $125 = ((($$0)) + 4|0);
     HEAP32[$125>>2] = $124;
     $126 = (($$0) + ($123)|0);
     HEAP32[$126>>2] = $123;
     break;
    }
    $127 = $109 & -8;
    $128 = (($127) + ($$02))|0;
    $129 = $109 >>> 3;
    $130 = ($109>>>0)<(256);
    do {
     if ($130) {
      $$sum12 = (($psize) + 8)|0;
      $131 = (($p) + ($$sum12)|0);
      $132 = HEAP32[$131>>2]|0;
      $$sum13 = (($psize) + 12)|0;
      $133 = (($p) + ($$sum13)|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = $129 << 1;
      $136 = (544700 + ($135<<2)|0);
      $137 = ($132|0)==($136|0);
      do {
       if (!($137)) {
        $138 = ($132>>>0)<($106>>>0);
        if (!($138)) {
         $139 = ((($132)) + 12|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($140|0)==($0|0);
         if ($141) {
          break;
         }
        }
        _abort();
        // unreachable;
       }
      } while(0);
      $142 = ($134|0)==($132|0);
      if ($142) {
       $143 = 1 << $129;
       $144 = $143 ^ -1;
       $145 = HEAP32[544660>>2]|0;
       $146 = $145 & $144;
       HEAP32[544660>>2] = $146;
       break;
      }
      $147 = ($134|0)==($136|0);
      do {
       if ($147) {
        $$pre49 = ((($134)) + 8|0);
        $$pre$phi50Z2D = $$pre49;
       } else {
        $148 = ($134>>>0)<($106>>>0);
        if (!($148)) {
         $149 = ((($134)) + 8|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = ($150|0)==($0|0);
         if ($151) {
          $$pre$phi50Z2D = $149;
          break;
         }
        }
        _abort();
        // unreachable;
       }
      } while(0);
      $152 = ((($132)) + 12|0);
      HEAP32[$152>>2] = $134;
      HEAP32[$$pre$phi50Z2D>>2] = $132;
     } else {
      $$sum2 = (($psize) + 24)|0;
      $153 = (($p) + ($$sum2)|0);
      $154 = HEAP32[$153>>2]|0;
      $$sum3 = (($psize) + 12)|0;
      $155 = (($p) + ($$sum3)|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($156|0)==($0|0);
      do {
       if ($157) {
        $$sum5 = (($psize) + 20)|0;
        $167 = (($p) + ($$sum5)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($168|0)==(0|0);
        if ($169) {
         $$sum4 = (($psize) + 16)|0;
         $170 = (($p) + ($$sum4)|0);
         $171 = HEAP32[$170>>2]|0;
         $172 = ($171|0)==(0|0);
         if ($172) {
          $R7$1 = 0;
          break;
         } else {
          $R7$0 = $171;$RP9$0 = $170;
         }
        } else {
         $R7$0 = $168;$RP9$0 = $167;
        }
        while(1) {
         $173 = ((($R7$0)) + 20|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==(0|0);
         if (!($175)) {
          $R7$0 = $174;$RP9$0 = $173;
          continue;
         }
         $176 = ((($R7$0)) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
          break;
         } else {
          $R7$0 = $177;$RP9$0 = $176;
         }
        }
        $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
        if ($179) {
         _abort();
         // unreachable;
        } else {
         HEAP32[$RP9$0$lcssa>>2] = 0;
         $R7$1 = $R7$0$lcssa;
         break;
        }
       } else {
        $$sum11 = (($psize) + 8)|0;
        $158 = (($p) + ($$sum11)|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159>>>0)<($106>>>0);
        if (!($160)) {
         $161 = ((($159)) + 12|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==($0|0);
         if ($163) {
          $164 = ((($156)) + 8|0);
          $165 = HEAP32[$164>>2]|0;
          $166 = ($165|0)==($0|0);
          if ($166) {
           HEAP32[$161>>2] = $156;
           HEAP32[$164>>2] = $159;
           $R7$1 = $156;
           break;
          }
         }
        }
        _abort();
        // unreachable;
       }
      } while(0);
      $180 = ($154|0)==(0|0);
      if (!($180)) {
       $$sum8 = (($psize) + 28)|0;
       $181 = (($p) + ($$sum8)|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (544964 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($0|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R7$1;
        $cond39 = ($R7$1|0)==(0|0);
        if ($cond39) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(544664)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(544664)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(544676)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($0|0);
        if ($194) {
         HEAP32[$192>>2] = $R7$1;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R7$1;
        }
        $196 = ($R7$1|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(544676)>>2]|0;
       $198 = ($R7$1>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R7$1)) + 24|0);
       HEAP32[$199>>2] = $154;
       $$sum9 = (($psize) + 16)|0;
       $200 = (($p) + ($$sum9)|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R7$1)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R7$1;
          break;
         }
        }
       } while(0);
       $$sum10 = (($psize) + 20)|0;
       $206 = (($p) + ($$sum10)|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(544676)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R7$1)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R7$1;
         break;
        }
       }
      }
     }
    } while(0);
    $213 = $128 | 1;
    $214 = ((($$0)) + 4|0);
    HEAP32[$214>>2] = $213;
    $215 = (($$0) + ($128)|0);
    HEAP32[$215>>2] = $128;
    $216 = HEAP32[(544680)>>2]|0;
    $217 = ($$0|0)==($216|0);
    if ($217) {
     HEAP32[(544668)>>2] = $128;
     break;
    } else {
     $$1 = $128;
    }
   } else {
    $218 = $109 & -2;
    HEAP32[$108>>2] = $218;
    $219 = $$02 | 1;
    $220 = ((($$0)) + 4|0);
    HEAP32[$220>>2] = $219;
    $221 = (($$0) + ($$02)|0);
    HEAP32[$221>>2] = $$02;
    $$1 = $$02;
   }
   $222 = $$1 >>> 3;
   $223 = ($$1>>>0)<(256);
   if ($223) {
    $224 = $222 << 1;
    $225 = (544700 + ($224<<2)|0);
    $226 = HEAP32[544660>>2]|0;
    $227 = 1 << $222;
    $228 = $226 & $227;
    $229 = ($228|0)==(0);
    if ($229) {
     $230 = $226 | $227;
     HEAP32[544660>>2] = $230;
     $$pre = (($224) + 2)|0;
     $$pre48 = (544700 + ($$pre<<2)|0);
     $$pre$phiZ2D = $$pre48;$F16$0 = $225;
    } else {
     $$sum7 = (($224) + 2)|0;
     $231 = (544700 + ($$sum7<<2)|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = HEAP32[(544676)>>2]|0;
     $234 = ($232>>>0)<($233>>>0);
     if ($234) {
      _abort();
      // unreachable;
     } else {
      $$pre$phiZ2D = $231;$F16$0 = $232;
     }
    }
    HEAP32[$$pre$phiZ2D>>2] = $$0;
    $235 = ((($F16$0)) + 12|0);
    HEAP32[$235>>2] = $$0;
    $236 = ((($$0)) + 8|0);
    HEAP32[$236>>2] = $F16$0;
    $237 = ((($$0)) + 12|0);
    HEAP32[$237>>2] = $225;
    break;
   }
   $238 = $$1 >>> 8;
   $239 = ($238|0)==(0);
   if ($239) {
    $I19$0 = 0;
   } else {
    $240 = ($$1>>>0)>(16777215);
    if ($240) {
     $I19$0 = 31;
    } else {
     $241 = (($238) + 1048320)|0;
     $242 = $241 >>> 16;
     $243 = $242 & 8;
     $244 = $238 << $243;
     $245 = (($244) + 520192)|0;
     $246 = $245 >>> 16;
     $247 = $246 & 4;
     $248 = $247 | $243;
     $249 = $244 << $247;
     $250 = (($249) + 245760)|0;
     $251 = $250 >>> 16;
     $252 = $251 & 2;
     $253 = $248 | $252;
     $254 = (14 - ($253))|0;
     $255 = $249 << $252;
     $256 = $255 >>> 15;
     $257 = (($254) + ($256))|0;
     $258 = $257 << 1;
     $259 = (($257) + 7)|0;
     $260 = $$1 >>> $259;
     $261 = $260 & 1;
     $262 = $261 | $258;
     $I19$0 = $262;
    }
   }
   $263 = (544964 + ($I19$0<<2)|0);
   $264 = ((($$0)) + 28|0);
   HEAP32[$264>>2] = $I19$0;
   $265 = ((($$0)) + 16|0);
   $266 = ((($$0)) + 20|0);
   HEAP32[$266>>2] = 0;
   HEAP32[$265>>2] = 0;
   $267 = HEAP32[(544664)>>2]|0;
   $268 = 1 << $I19$0;
   $269 = $267 & $268;
   $270 = ($269|0)==(0);
   if ($270) {
    $271 = $267 | $268;
    HEAP32[(544664)>>2] = $271;
    HEAP32[$263>>2] = $$0;
    $272 = ((($$0)) + 24|0);
    HEAP32[$272>>2] = $263;
    $273 = ((($$0)) + 12|0);
    HEAP32[$273>>2] = $$0;
    $274 = ((($$0)) + 8|0);
    HEAP32[$274>>2] = $$0;
    break;
   }
   $275 = HEAP32[$263>>2]|0;
   $276 = ((($275)) + 4|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = $277 & -8;
   $279 = ($278|0)==($$1|0);
   L170: do {
    if ($279) {
     $T$0$lcssa = $275;
    } else {
     $280 = ($I19$0|0)==(31);
     $281 = $I19$0 >>> 1;
     $282 = (25 - ($281))|0;
     $283 = $280 ? 0 : $282;
     $284 = $$1 << $283;
     $K20$043 = $284;$T$042 = $275;
     while(1) {
      $291 = $K20$043 >>> 31;
      $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
      $287 = HEAP32[$292>>2]|0;
      $293 = ($287|0)==(0|0);
      if ($293) {
       $$lcssa = $292;$T$042$lcssa = $T$042;
       break;
      }
      $285 = $K20$043 << 1;
      $286 = ((($287)) + 4|0);
      $288 = HEAP32[$286>>2]|0;
      $289 = $288 & -8;
      $290 = ($289|0)==($$1|0);
      if ($290) {
       $T$0$lcssa = $287;
       break L170;
      } else {
       $K20$043 = $285;$T$042 = $287;
      }
     }
     $294 = HEAP32[(544676)>>2]|0;
     $295 = ($$lcssa>>>0)<($294>>>0);
     if ($295) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $$0;
      $296 = ((($$0)) + 24|0);
      HEAP32[$296>>2] = $T$042$lcssa;
      $297 = ((($$0)) + 12|0);
      HEAP32[$297>>2] = $$0;
      $298 = ((($$0)) + 8|0);
      HEAP32[$298>>2] = $$0;
      break L74;
     }
    }
   } while(0);
   $299 = ((($T$0$lcssa)) + 8|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = HEAP32[(544676)>>2]|0;
   $302 = ($300>>>0)>=($301>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
   $303 = $302 & $not$;
   if ($303) {
    $304 = ((($300)) + 12|0);
    HEAP32[$304>>2] = $$0;
    HEAP32[$299>>2] = $$0;
    $305 = ((($$0)) + 8|0);
    HEAP32[$305>>2] = $300;
    $306 = ((($$0)) + 12|0);
    HEAP32[$306>>2] = $T$0$lcssa;
    $307 = ((($$0)) + 24|0);
    HEAP32[$307>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 switch ($10|0) {
 case 43: case 45:  {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $10;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _cleanup392($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup397($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 1023]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $66 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $66 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $65 = ($66<<24>>24)==(42);
  do {
   if ($65) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((847463 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 847943;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 847943;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 847943;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 847943 : (847945);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (847944);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 847943;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 847943;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 847953;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 847960;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (847961) : (847966);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (847963);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (847927 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$481 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$481 = $$pre179$i;
      }
      $480 = ($481|0)<(0);
      $$31$i = $480 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $491 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $490 = ($491|0)>(29);
        $492 = $490 ? 29 : $491;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $491 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(847995,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(847995,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 847979 : 847983;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 847987 : 847991;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 847943;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 847943;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (847927 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 847943;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (847943 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 847943;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $793 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793|0)<(10);
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $sum = (($5) + ($width))|0;
    $$sum = (0 - ($sum))|0;
    $6 = (($$03) + ($$sum)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 511]($7,$6)|0);
    $9 = ($8|0)>(-1);
    if ($9) {
     $10 = (FUNCTION_TABLE_iii[$cmp & 511]($7,$2)|0);
     $11 = ($10|0)>(-1);
     if ($11) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $12 = (FUNCTION_TABLE_iii[$cmp & 511]($6,$2)|0);
    $13 = ($12|0)>(-1);
    $14 = (($i$04) + 1)|0;
    $15 = (($ar) + ($i$04<<2)|0);
    if ($13) {
     HEAP32[$15>>2] = $6;
     $16 = (($$012) + -1)|0;
     $$0$be = $6;$$01$be = $16;
    } else {
     HEAP32[$15>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $17 = ($$01$be|0)>(1);
    if (!($17)) {
     $i$0$lcssa = $14;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $phitmp = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 511]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 19;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$27 = $0;$37 = $2;$i$01063 = 1;
    while(1) {
     $13 = ($$02964|0)>(1);
     $or$cond = $$03865 & $13;
     if ($or$cond) {
      $14 = (($$01162) + ($3)|0);
      $15 = (($$02964) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 511]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
      $sum = (($17) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $21 = (($$01162) + ($$sum)|0);
      $22 = (FUNCTION_TABLE_iii[$cmp & 511]($21,$18)|0);
      $23 = ($22|0)>(-1);
      if ($23) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
     }
     $24 = (($i$01063) + 1)|0;
     $25 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$25>>2] = $18;
     $26 = (($27) + -1)|0;
     $28 = ($26|0)==(0);
     do {
      if ($28) {
       $49 = 32;
       label = 16;
      } else {
       $29 = $26 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $26;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $31 = (($nTrailingZeros$03$i$i) + 1)|0;
         $32 = $$02$i$i >>> 1;
         $33 = $32 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
         } else {
          $$lcssa = $31;
          break;
         }
        }
        $35 = ($$lcssa|0)==(0);
        if ($35) {
         label = 11;
        } else {
         $47 = $$lcssa;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $36 = ($37|0)==(0);
        if ($36) {
         $49 = 64;
         label = 16;
         break;
        }
        $38 = $37 & 1;
        $39 = ($38|0)==(0);
        if ($39) {
         $$02$i3$i = $37;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$51 = $27;$54 = $37;$58 = 0;
         break;
        }
        while(1) {
         $40 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $41 = $$02$i3$i >>> 1;
         $42 = $41 & 1;
         $43 = ($42|0)==(0);
         if ($43) {
          $$02$i3$i = $41;$nTrailingZeros$03$i2$i = $40;
         } else {
          $$lcssa75 = $40;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $44 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $45 = ($$lcssa75|0)==(0);
        if ($45) {
         $$0$i = 0;$51 = $27;$54 = $37;$58 = 0;
         break;
        } else {
         $47 = $44;
        }
       }
       $46 = ($47>>>0)>(31);
       if ($46) {
        $49 = $47;
        label = 16;
       } else {
        $$0$i = $47;$51 = $27;$54 = $37;$58 = $47;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      label = 0;
      $48 = (($49) + -32)|0;
      $$0$i = $48;$51 = $37;$54 = 0;$58 = $49;
     }
     $50 = $51 >>> $$0$i;
     $52 = (32 - ($$0$i))|0;
     $53 = $54 << $52;
     $55 = $53 | $50;
     $56 = $54 >>> $$0$i;
     $57 = (($58) + ($$02964))|0;
     $59 = ($55|0)!=(1);
     $60 = ($56|0)!=(0);
     $61 = $60 | $59;
     if (!($61)) {
      $$0$lcssa49 = $18;$$02$lcssa51 = $57;$i$0$lcssa50 = $24;
      label = 20;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $62 = (($lp) + ($57<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (0 - ($63))|0;
     $65 = (($18) + ($64)|0);
     $66 = (FUNCTION_TABLE_iii[$cmp & 511]($65,$$pre)|0);
     $67 = ($66|0)<(1);
     if ($67) {
      $$0$lcssa = $18;$$02$lcssa = $57;$$03$lcssa = 0;$i$0$lcssa = $24;
      label = 19;
      break;
     } else {
      $$01162$phi = $18;$$02964 = $57;$$03865 = 1;$18 = $65;$27 = $55;$37 = $56;$i$01063 = $24;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $68 = ($$03$lcssa|0)==(0);
  if ($68) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
   label = 20;
  }
 }
 if ((label|0) == 20) {
  _cycle($width,$ar,$i$0$lcssa50);
  _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
 }
 STACKTOP = sp;return;
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _strtox535($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) + ($12))|0;
  $18 = (($17) - ($16))|0;
  $19 = (($s) + ($18)|0);
  HEAP32[$p>>2] = $19;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function runPostSets() {
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vd(index,a1) {
  index = index|0;
  a1=+a1;
  FUNCTION_TABLE_vd[index&511](+a1);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&511](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  FUNCTION_TABLE_viiiiiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0);
}


function dynCall_id(index,a1) {
  index = index|0;
  a1=+a1;
  return FUNCTION_TABLE_id[index&31](+a1)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&1023](a1|0,+a2,+a3,+a4);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&1023](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  FUNCTION_TABLE_viiiiid[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&63](a1|0,a2|0,+a3)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1023](a1|0,a2|0,+a3);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&1023](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&31](a1|0,+a2)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&127](a1|0,a2|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vdddddd[index&511](+a1,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_vdddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_vdddd[index&1023](+a1,+a2,+a3,+a4);
}


function dynCall_vdd(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=+a2;
  FUNCTION_TABLE_vdd[index&511](+a1,+a2);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_vdi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  FUNCTION_TABLE_vdi[index&511](+a1,a2|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function _emscripten_glUniform4i__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glUniform4i(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glShaderBinary__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glShaderBinary(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glDrawElementsInstanced__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glDrawElementsInstanced(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function b2(p0) {
 p0 = +p0; nullFunc_vd(2);
}
function _emscripten_glClearDepth__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepth(+p0);
}
function _emscripten_glClearDepthf__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepthf(+p0);
}
function _emscripten_glLineWidth__wrapper(p0) {
 p0 = +p0; _emscripten_glLineWidth(+p0);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(3);
}
function _emscripten_glUniform1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glUniform1f(p0|0,+p1);
}
function _emscripten_glVertexAttrib1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glVertexAttrib1f(p0|0,+p1);
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}
function _emscripten_glDeleteShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteShader(p0|0);
}
function _emscripten_glCompileShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glCompileShader(p0|0);
}
function _emscripten_glDeleteProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteProgram(p0|0);
}
function _emscripten_glLinkProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glLinkProgram(p0|0);
}
function _emscripten_glUseProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glUseProgram(p0|0);
}
function _emscripten_glValidateProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glValidateProgram(p0|0);
}
function _emscripten_glDeleteObjectARB__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteObjectARB(p0|0);
}
function _emscripten_glEnableClientState__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableClientState(p0|0);
}
function _emscripten_glClientActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glClientActiveTexture(p0|0);
}
function _emscripten_glBindVertexArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glBindVertexArray(p0|0);
}
function _emscripten_glMatrixMode__wrapper(p0) {
 p0 = p0|0; _emscripten_glMatrixMode(p0|0);
}
function _emscripten_glLoadMatrixf__wrapper(p0) {
 p0 = p0|0; _emscripten_glLoadMatrixf(p0|0);
}
function _emscripten_glEnableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableVertexAttribArray(p0|0);
}
function _emscripten_glDisableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisableVertexAttribArray(p0|0);
}
function _emscripten_glDepthFunc__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthFunc(p0|0);
}
function _emscripten_glEnable__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnable(p0|0);
}
function _emscripten_glDisable__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisable(p0|0);
}
function _emscripten_glFrontFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glFrontFace(p0|0);
}
function _emscripten_glCullFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glCullFace(p0|0);
}
function _emscripten_glClear__wrapper(p0) {
 p0 = p0|0; _emscripten_glClear(p0|0);
}
function _emscripten_glClearStencil__wrapper(p0) {
 p0 = p0|0; _emscripten_glClearStencil(p0|0);
}
function _emscripten_glDepthMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthMask(p0|0);
}
function _emscripten_glStencilMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glStencilMask(p0|0);
}
function _emscripten_glGenerateMipmap__wrapper(p0) {
 p0 = p0|0; _emscripten_glGenerateMipmap(p0|0);
}
function _emscripten_glActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glActiveTexture(p0|0);
}
function _emscripten_glBlendEquation__wrapper(p0) {
 p0 = p0|0; _emscripten_glBlendEquation(p0|0);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function _emscripten_glPixelStorei__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glPixelStorei(p0|0,p1|0);
}
function _emscripten_glGetIntegerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetIntegerv(p0|0,p1|0);
}
function _emscripten_glGetFloatv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetFloatv(p0|0,p1|0);
}
function _emscripten_glGetBooleanv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetBooleanv(p0|0,p1|0);
}
function _emscripten_glGenTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenTextures(p0|0,p1|0);
}
function _emscripten_glDeleteTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteTextures(p0|0,p1|0);
}
function _emscripten_glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindTexture(p0|0,p1|0);
}
function _emscripten_glGenBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenBuffers(p0|0,p1|0);
}
function _emscripten_glDeleteBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteBuffers(p0|0,p1|0);
}
function _emscripten_glGenRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenRenderbuffers(p0|0,p1|0);
}
function _emscripten_glDeleteRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteRenderbuffers(p0|0,p1|0);
}
function _emscripten_glBindRenderbuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindRenderbuffer(p0|0,p1|0);
}
function _emscripten_glUniform1i__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glUniform1i(p0|0,p1|0);
}
function _emscripten_glBindBuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindBuffer(p0|0,p1|0);
}
function _emscripten_glVertexAttrib1fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib1fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib2fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib2fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib3fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib3fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib4fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib4fv(p0|0,p1|0);
}
function _emscripten_glAttachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glAttachShader(p0|0,p1|0);
}
function _emscripten_glDetachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDetachShader(p0|0,p1|0);
}
function _emscripten_glBindFramebuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindFramebuffer(p0|0,p1|0);
}
function _emscripten_glGenFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenFramebuffers(p0|0,p1|0);
}
function _emscripten_glDeleteFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteFramebuffers(p0|0,p1|0);
}
function _emscripten_glBindProgramARB__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindProgramARB(p0|0,p1|0);
}
function _emscripten_glGetPointerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetPointerv(p0|0,p1|0);
}
function _emscripten_glGenVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenVertexArrays(p0|0,p1|0);
}
function _emscripten_glDeleteVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteVertexArrays(p0|0,p1|0);
}
function _emscripten_glVertexAttribDivisor__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttribDivisor(p0|0,p1|0);
}
function _emscripten_glBlendFunc__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendFunc(p0|0,p1|0);
}
function _emscripten_glBlendEquationSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendEquationSeparate(p0|0,p1|0);
}
function _emscripten_glStencilMaskSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glStencilMaskSeparate(p0|0,p1|0);
}
function _emscripten_glHint__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glHint(p0|0,p1|0);
}
function _emscripten_glDrawBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDrawBuffers(p0|0,p1|0);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(6);return 0;
}
function b7(p0) {
 p0 = p0|0; nullFunc_ii(7);return 0;
}
function _emscripten_glGetString__wrapper(p0) {
 p0 = p0|0; return _emscripten_glGetString(p0|0)|0;
}
function _emscripten_glIsTexture__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsTexture(p0|0)|0;
}
function _emscripten_glIsBuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsBuffer(p0|0)|0;
}
function _emscripten_glIsRenderbuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsRenderbuffer(p0|0)|0;
}
function _emscripten_glCreateShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCreateShader(p0|0)|0;
}
function _emscripten_glIsShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsShader(p0|0)|0;
}
function _emscripten_glIsProgram__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsProgram(p0|0)|0;
}
function _emscripten_glIsFramebuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsFramebuffer(p0|0)|0;
}
function _emscripten_glCheckFramebufferStatus__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCheckFramebufferStatus(p0|0)|0;
}
function _emscripten_glIsEnabled__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsEnabled(p0|0)|0;
}
function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_viiiiiiiiiii(8);
}
function b9(p0) {
 p0 = +p0; nullFunc_id(9);return 0;
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(10);
}
function _emscripten_glUniform3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glUniform3f(p0|0,+p1,+p2,+p3);
}
function _emscripten_glVertexAttrib3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glVertexAttrib3f(p0|0,+p1,+p2,+p3);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(11);
}
function _emscripten_glUniform2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glUniform2f(p0|0,+p1,+p2);
}
function _emscripten_glVertexAttrib2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glVertexAttrib2f(p0|0,+p1,+p2);
}
function b12(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(13);
}
function b14(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(14);
}
function _emscripten_glCompressedTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCompressedTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function b15(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(15);
}
function _emscripten_glDrawRangeElements__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glDrawRangeElements(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function _emscripten_glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function b16(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(16);return 0;
}
function b17(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(17);
}
function _emscripten_glGetTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetBufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetBufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetRenderbufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetRenderbufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribPointerv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribPointerv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2i__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2i(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4fv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetShaderiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetShaderiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetProgramiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetProgramiv(p0|0,p1|0,p2|0);
}
function _emscripten_glBindAttribLocation__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glBindAttribLocation(p0|0,p1|0,p2|0);
}
function _emscripten_glGetObjectParameterivARB__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetObjectParameterivARB(p0|0,p1|0,p2|0);
}
function _emscripten_glNormalPointer__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glNormalPointer(p0|0,p1|0,p2|0);
}
function _emscripten_glDrawArrays__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glDrawArrays(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteri__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteri(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilFunc__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilFunc(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilOp__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilOp(p0|0,p1|0,p2|0);
}
function b18(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(18);
}
function _emscripten_glTexParameterf__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; _emscripten_glTexParameterf(p0|0,p1|0,+p2);
}
function b19(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(19);
}
function _emscripten_glUniform4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glUniform4f(p0|0,+p1,+p2,+p3,+p4);
}
function _emscripten_glVertexAttrib4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glVertexAttrib4f(p0|0,+p1,+p2,+p3,+p4);
}
function b20(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_iid(20);return 0;
}
function b21(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(21);
}
function _emscripten_glReadPixels__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glReadPixels(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveUniform__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveUniform(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveAttrib__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveAttrib(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function b22(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(22);
}
function _emscripten_glCompressedTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glCompressedTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b23(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(23);return 0;
}
function _emscripten_glGetUniformLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetUniformLocation(p0|0,p1|0)|0;
}
function _emscripten_glGetAttribLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetAttribLocation(p0|0,p1|0)|0;
}
function b24(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(24);return +0;
}
function b25() {
 ; nullFunc_i(25);return 0;
}
function _emscripten_glCreateProgram__wrapper() {
 ; return _emscripten_glCreateProgram()|0;
}
function _emscripten_glGetError__wrapper() {
 ; return _emscripten_glGetError()|0;
}
function b26(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(26);return 0;
}
function b27(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_vdddddd(27);
}
function _emscripten_glFrustum__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; _emscripten_glFrustum(+p0,+p1,+p2,+p3,+p4,+p5);
}
function b28(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_vdddd(28);
}
function _emscripten_glRotatef__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glRotatef(+p0,+p1,+p2,+p3);
}
function _emscripten_glClearColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glClearColor(+p0,+p1,+p2,+p3);
}
function _emscripten_glBlendColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glBlendColor(+p0,+p1,+p2,+p3);
}
function b29(p0,p1) {
 p0 = +p0;p1 = +p1; nullFunc_vdd(29);
}
function _emscripten_glDepthRange__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRange(+p0,+p1);
}
function _emscripten_glDepthRangef__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRangef(+p0,+p1);
}
function _emscripten_glPolygonOffset__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glPolygonOffset(+p0,+p1);
}
function b30() {
 ; nullFunc_v(30);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function _emscripten_glLoadIdentity__wrapper() {
 ; _emscripten_glLoadIdentity();
}
function _emscripten_glReleaseShaderCompiler__wrapper() {
 ; _emscripten_glReleaseShaderCompiler();
}
function _emscripten_glFinish__wrapper() {
 ; _emscripten_glFinish();
}
function _emscripten_glFlush__wrapper() {
 ; _emscripten_glFlush();
}
function b31(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_vdi(31);
}
function _emscripten_glSampleCoverage__wrapper(p0,p1) {
 p0 = +p0;p1 = p1|0; _emscripten_glSampleCoverage(+p0,p1|0);
}
function b32(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(32);
}
function _emscripten_glBufferData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBufferSubData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferSubData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniform3i__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniform3i(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix2fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix2fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix3fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix3fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix4fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix4fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetAttachedShaders__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetAttachedShaders(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderPrecisionFormat__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderPrecisionFormat(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetProgramInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glFramebufferRenderbuffer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glFramebufferRenderbuffer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetFramebufferAttachmentParameteriv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetInfoLogARB__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetInfoLogARB(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glVertexPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glVertexPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glTexCoordPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glTexCoordPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawElements__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawElements(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawArraysInstanced__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawArraysInstanced(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glViewport__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glViewport(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glScissor__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glScissor(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorMask__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorMask(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glRenderbufferStorage__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glRenderbufferStorage(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBlendFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilOpSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilOpSeparate(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_gfx_ctx_write_egl_image,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_gfx_ctx_check_window,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_emscripten_glUniform4i__wrapper,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,_emscripten_glFramebufferTexture2D__wrapper,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_emscripten_glShaderBinary__wrapper,b1
,b1,b1,b1,_emscripten_glDrawElementsInstanced__wrapper,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vd = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,_emscripten_glClearDepth__wrapper,_emscripten_glClearDepthf__wrapper,b2,b2,b2,b2,b2,b2,_emscripten_glLineWidth__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vid = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_gl_overlay_set_alpha,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,_emscripten_glUniform1f__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,_emscripten_glVertexAttrib1f__wrapper,b3,b3];
var FUNCTION_TABLE_vi = [b4,b4,_rwebinput_input_poll,b4,b4,_rwebinput_input_free,b4,b4,b4,b4,b4,b4,_ra_free,b4,b4,b4,b4,b4,b4,_font_renderer_free,b4,b4,b4,_resampler_sinc_free,b4,b4,b4,b4,b4
,_null_audio_free,b4,b4,b4,_rgui_free,b4,b4,b4,b4,b4,b4,_gl_free,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_gl_apply_state_changes,b4
,b4,b4,b4,b4,_gl_deinit_font,b4,b4,b4,b4,_gfx_ctx_swap_interval,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_gl_glsl_use,b4,b4,b4,b4
,b4,b4,b4,__ZN15Std_File_WriterD2Ev,__ZN15Std_File_WriterD0Ev,b4,__ZN10Mem_WriterD2Ev,__ZN10Mem_WriterD0Ev,b4,__ZN11Mono_BufferD2Ev,__ZN11Mono_BufferD0Ev,b4,b4,b4,b4,b4,__ZN11Mono_Buffer5clearEv,b4,b4,b4,__ZN7Nes_EmuD2Ev,__ZN7Nes_EmuD0Ev,b4,b4,b4,b4,b4,__ZN15Nes_File_WriterD2Ev,__ZN15Nes_File_WriterD0Ev,b4
,__ZN15Nes_File_ReaderD2Ev,__ZN15Nes_File_ReaderD0Ev,b4,b4,__ZN10Nes_MapperD2Ev,__ZN10Nes_MapperD0Ev,__ZN10Nes_Mapper5resetEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10Nes_Mapper11a12_clockedEv,b4,__ZN10Nes_Mapper11reset_stateEv,b4,b4,b4,b4,b4,b4,__ZN11Mapper_Mmc3D0Ev,b4,b4
,b4,b4,__ZN11Mapper_Mmc311a12_clockedEv,__ZN11Mapper_Mmc313apply_mappingEv,__ZN11Mapper_Mmc311reset_stateEv,__ZN16Nes_State_ReaderD2Ev,__ZN16Nes_State_ReaderD0Ev,__ZN11Data_ReaderD2Ev,__ZN15Mem_File_ReaderD0Ev,b4,b4,b4,b4,b4,__ZN15Std_File_ReaderD2Ev,__ZN15Std_File_ReaderD0Ev,b4,b4,__ZN12Multi_BufferD2Ev,__ZN13Silent_BufferD0Ev,b4,b4,b4,b4,__ZN13Silent_Buffer5clearEv,b4,b4,b4,__ZN11Mapper_NromD0Ev,b4
,__ZN11Mapper_Nrom13apply_mappingEv,__ZN12Mapper_UnromD0Ev,b4,__ZN12Mapper_Unrom13apply_mappingEv,__ZN12Mapper_AoromD0Ev,b4,__ZN12Mapper_Aorom13apply_mappingEv,__ZN12Mapper_CnromD0Ev,b4,__ZN12Mapper_Cnrom13apply_mappingEv,__ZN11Mapper_Mmc1D0Ev,b4,__ZN11Mapper_Mmc113apply_mappingEv,__ZN11Mapper_Mmc111reset_stateEv,__ZN16Nes_State_WriterD0Ev,b4,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b4,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b4,b4,b4,b4,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b4,b4
,b4,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_print_compiler,b4,b4,_init_libretro_sym,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_libretro_dummy_retro_get_system_info,_libretro_dummy_retro_get_system_av_info,_libretro_dummy_retro_set_environment,_libretro_dummy_retro_set_video_refresh,_libretro_dummy_retro_set_audio_sample,_libretro_dummy_retro_set_audio_sample_batch
,_libretro_dummy_retro_set_input_poll,_libretro_dummy_retro_set_input_state,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_retro_get_system_info,_retro_get_system_av_info,_retro_set_environment,_retro_set_video_refresh,_retro_set_audio_sample,_retro_set_audio_sample_batch,_retro_set_input_poll,_retro_set_input_state,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN7Nes_EmuC2Ev,b4,__ZN16Auto_File_ReaderD2Ev
,b4,__ZN16Auto_File_WriterD2Ev,b4,__ZN15Std_File_ReaderC2Ev,__ZN11Blip_BufferD2Ev,__ZN7Nes_ApuC2Ev,b4,__ZN8Nes_Core15apu_irq_changedEPv,__ZN12Nes_Ppu_Impl9close_chrEv,__ZN7Nes_ApuD2Ev,__ZN12Nes_Ppu_ImplD2Ev,__ZN8Nes_CartC2Ev,__ZN8Nes_CoreC2Ev,__ZN8Nes_CartD2Ev,__ZN8Nes_CoreD2Ev,b4,__ZN9Nes_StateC2Ev,b4,b4,__ZN11Mono_BufferC2Ev,__ZN10Nes_MapperC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,_emscripten_glDeleteShader__wrapper,b4,b4,b4,_emscripten_glCompileShader__wrapper,b4,b4,b4,b4,b4,_emscripten_glDeleteProgram__wrapper,b4,b4,b4,_emscripten_glLinkProgram__wrapper,b4,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,b4,b4,b4,b4,b4,b4
,b4,b4,b4,_emscripten_glDeleteObjectARB__wrapper,b4,b4,b4,b4,b4,_emscripten_glEnableClientState__wrapper,b4,b4,b4,b4,_emscripten_glClientActiveTexture__wrapper,b4,b4,_emscripten_glBindVertexArray__wrapper,_emscripten_glMatrixMode__wrapper,b4,_emscripten_glLoadMatrixf__wrapper,b4,b4,b4,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,_emscripten_glDepthFunc__wrapper,_emscripten_glEnable__wrapper,_emscripten_glDisable__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glClear__wrapper,b4,_emscripten_glClearStencil__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glStencilMask__wrapper,b4,_emscripten_glGenerateMipmap__wrapper,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_cleanup392,_cleanup397,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,b5,b5,b5,b5,_rwebinput_grab_mouse,b5,b5,b5,b5,_ra_set_nonblock_state,b5,b5,b5,b5,b5,b5,_font_renderer_free_output,b5,b5,b5,_resampler_sinc_process,b5,b5,b5,b5,b5,_null_audio_set_nonblock_state
,b5,b5,b5,b5,b5,b5,b5,_gl_set_nonblock_state,b5,b5,b5,b5,b5,b5,_gl_set_rotation,_gl_viewport_info,b5,_gl_get_overlay_interface,_gl_get_poke_interface,_gl_overlay_enable,b5,b5,b5,_gl_overlay_full_screen,b5,b5,b5,_gl_set_aspect_ratio,b5,b5
,b5,b5,_gl_show_mouse,b5,b5,b5,b5,b5,b5,b5,b5,_gfx_ctx_get_video_size,b5,b5,b5,_gfx_ctx_set_resize,b5,b5,_gfx_ctx_input_driver,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_gl_glsl_shader_scale
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN11Mono_Buffer10clock_rateEl,__ZN11Mono_Buffer9bass_freqEi,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN7Nes_Emu13loading_stateERK9Nes_State,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,__ZN10Nes_Mapper10save_stateER14mapper_state_t,__ZN10Nes_Mapper10load_stateERK14mapper_state_t,b5,b5,b5,b5,__ZN10Nes_Mapper9run_untilEl,__ZN10Nes_Mapper9end_frameEl,b5,b5,__ZN10Nes_Mapper10set_trebleERK9blip_eq_t,b5,__ZN10Nes_Mapper10read_stateERK14mapper_state_t,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN11Mapper_Mmc39run_untilEl,__ZN11Mapper_Mmc39end_frameEl,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN13Silent_Buffer10clock_rateEl,__ZN13Silent_Buffer9bass_freqEi,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_parse_input,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,_audio_sample,b5,b5,b5,_audio_sample_rewind,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,_libretro_dummy_retro_set_controller_port_device,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_retro_set_controller_port_device,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_abort_message
,b5,b5,b5,_emscripten_glPixelStorei__wrapper,b5,_emscripten_glGetIntegerv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glDeleteTextures__wrapper,b5,b5,b5,b5,b5,_emscripten_glBindTexture__wrapper,b5,b5,b5,b5,b5,_emscripten_glGenBuffers__wrapper,_emscripten_glDeleteBuffers__wrapper,b5,b5,b5,b5,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glBindRenderbuffer__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_emscripten_glUniform1i__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_emscripten_glBindBuffer__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_emscripten_glAttachShader__wrapper,_emscripten_glDetachShader__wrapper,b5,b5,b5,b5,b5,b5,b5,_emscripten_glBindFramebuffer__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,b5
,b5,b5,b5,b5,b5,b5,_emscripten_glBindProgramARB__wrapper,_emscripten_glGetPointerv__wrapper,b5,b5,b5,b5,b5,b5,b5,_emscripten_glGenVertexArrays__wrapper,_emscripten_glDeleteVertexArrays__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,_emscripten_glVertexAttribDivisor__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_emscripten_glBlendFunc__wrapper,_emscripten_glBlendEquationSeparate__wrapper,b5,b5,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glHint__wrapper,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_emscripten_glDrawBuffers__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,b6,_rwebinput_input_state,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,_gl_frame,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_ups_apply_patch,_bps_apply_patch,_ips_apply_patch,b6];
var FUNCTION_TABLE_ii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,_ra_stop,_ra_start,b7,b7,_ra_use_float,_ra_write_avail,_ra_buffer_size,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_null_audio_stop,_null_audio_start,b7
,b7,_null_audio_use_float,_rgui_iterate,b7,b7,b7,b7,b7,_gl_alive,_gl_focus,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_gl_get_current_framebuffer,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_gfx_ctx_get_proc_address,_gfx_ctx_init_egl_image_buffer,b7,_gl_glsl_init,b7,b7,b7,b7,b7,_gl_glsl_wrap_type,b7
,_gl_glsl_set_coords,_gl_glsl_set_mvp,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK11Mono_Buffer13samples_availEv,b7,b7,b7,b7,b7,__ZN7Nes_Emu5init_Ev,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK10Nes_Mapper13channel_countEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK13Silent_Buffer13samples_availEv,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt9bad_alloc4whatEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,___stdio_close,b7,b7,b7,b7,b7,b7,_fflush,b7,b7,b7,b7,b7,b7,b7,b7,_init_rom_file,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_driver_get_proc_address,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_libretro_dummy_retro_load_game,b7,b7,b7,_libretro_dummy_retro_get_memory_data,_libretro_dummy_retro_get_memory_size,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,_retro_load_game,b7,b7,b7,_retro_get_memory_data,_retro_get_memory_size,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN15Nes_File_Writer3endEv,b7,b7,__ZN15Nes_File_Reader10next_blockEv,b7,b7,b7
,b7,b7,b7,b7,_emscripten_glGetString__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_emscripten_glIsTexture__wrapper,b7,b7,b7,b7,b7,_emscripten_glIsBuffer__wrapper,b7,b7,b7
,b7,_emscripten_glIsRenderbuffer__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,_emscripten_glCreateShader__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,_emscripten_glIsShader__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,_emscripten_glIsProgram__wrapper,b7,b7,b7,b7,b7
,b7,b7,_emscripten_glIsFramebuffer__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_emscripten_glCheckFramebufferStatus__wrapper,b7,b7,b7,_emscripten_glIsEnabled__wrapper,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_viiiiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_gl_glsl_set_params,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_id = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_resampler_sinc_new,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viddd = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_emscripten_glUniform3f__wrapper,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_emscripten_glVertexAttrib3f__wrapper,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_vidd = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_emscripten_glUniform2f__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,_emscripten_glVertexAttrib2f__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiii = [b12,b12,b12,b12,b12,b12,b12,_ra_init,_ra_write,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_null_audio_init,_null_audio_write,b12,b12,b12
,b12,b12,b12,b12,b12,_gl_init,b12,b12,b12,b12,_gl_set_shader,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,_gfx_ctx_bind_api,b12,_gfx_ctx_set_video_mode,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,__ZN15Std_File_Writer5writeEPKvl,b12,b12,__ZN10Mem_Writer5writeEPKvl,b12,b12,b12,b12,__ZN11Mono_Buffer15set_sample_rateEli,b12,b12,b12,b12,__ZN11Mono_Buffer12read_samplesEPsl,b12,b12,b12,__ZN7Nes_Emu13emulate_frameEii,__ZN7Nes_Emu12read_samplesEPsl,b12,b12,b12,b12,b12,__ZN15Nes_File_Writer5writeEPKvl
,b12,b12,__ZN15Nes_File_Reader6read_vEPvi,b12,b12,b12,b12,b12,b12,__ZN10Nes_Mapper4readElj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN15Mem_File_Reader6read_vEPvi,b12,__ZN11File_Reader6seek_vEy,__ZN11File_Reader6skip_vEy,b12,b12,b12,__ZN15Std_File_Reader6read_vEPvi,__ZN15Std_File_Reader6seek_vEy,b12,b12,b12,__ZN13Silent_Buffer15set_sample_rateEli,b12,b12,b12,b12,__ZN13Silent_Buffer12read_samplesEPsl,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,_sn_write,b12,___stdio_write,___stdio_seek,___stdout_write,b12,b12,_fprintf,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_libretro_dummy_retro_load_game_special,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,_retro_load_game_special,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN15Nes_File_Writer5beginE16Auto_File_Writerl,b12,b12,b12,__ZN16Nes_State_Reader5beginE16Auto_File_ReaderP9Nes_State,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,___stdio_read,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiiiid = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,_gl_set_texture_frame
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_emscripten_glCompressedTexImage2D__wrapper,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15,b15,b15,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15
,b15,b15,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_conv_copy,_conv_0rgb1555_argb8888,_conv_rgb565_argb8888,_conv_rgb565_bgr24,_conv_0rgb1555_rgb565,_conv_rgb565_0rgb1555,_conv_bgr24_argb8888,_conv_argb8888_0rgb1555,_conv_argb8888_bgr24,_conv_0rgb1555_bgr24,_conv_argb8888_abgr8888,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,_emscripten_glDrawRangeElements__wrapper,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_emscripten_glVertexAttribPointer__wrapper,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_iiid = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,_gl_init_font,b16];
var FUNCTION_TABLE_viii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_font_renderer_msg,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,_gl_set_texture_enable,_gl_set_osd_msg,b17,b17,b17,_gl_render_msg,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN11Mono_Buffer7channelEi,b17,b17,b17,b17,__ZN11Mono_Buffer9end_frameElb,b17,b17,b17,b17,b17,b17,__ZN7Nes_Emu5resetEbb,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN10Nes_Mapper15set_channel_bufEiP11Blip_Buffer,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN13Silent_Buffer7channelEi,b17,b17,b17,b17,__ZN13Silent_Buffer9end_frameElb,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,_libretro_dummy_retro_cheat_set,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,_retro_cheat_set,b17,b17,b17,b17,b17,b17,_scaler_argb8888_horiz,_scaler_argb8888_vert,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteriv__wrapper,b17,b17,b17,_emscripten_glGetBufferParameteriv__wrapper,b17,b17,b17,b17,b17,b17
,_emscripten_glGetRenderbufferParameteriv__wrapper,b17,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,b17,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,b17,b17,b17,b17,b17,b17,_emscripten_glUniform2i__wrapper,b17,b17,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform4fv__wrapper,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetProgramiv__wrapper,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_emscripten_glBindAttribLocation__wrapper,b17,b17,b17,b17
,b17,b17,b17,b17,_emscripten_glGetObjectParameterivARB__wrapper,b17,b17,b17,b17,b17,b17,b17,_emscripten_glNormalPointer__wrapper,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_emscripten_glDrawArrays__wrapper,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,_emscripten_glTexParameteri__wrapper,b17,b17,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viid = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,_emscripten_glTexParameterf__wrapper,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_vidddd = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_gl_overlay_tex_geom,_gl_overlay_vertex_geom,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_emscripten_glUniform4f__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_emscripten_glVertexAttrib4f__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_iid = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,_font_renderer_init,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_viiiiiii = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,_emscripten_glReadPixels__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,_emscripten_glGetActiveUniform__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,_emscripten_glGetActiveAttrib__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_viiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_scaler_argb8888_point_special,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_iii = [b23,b23,b23,b23,_rwebinput_bind_button_pressed,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,_gl_read_viewport,b23,b23,b23,b23,b23,b23,b23,b23,b23,_gl_get_proc_address,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,_gl_glsl_filter_type,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN12Multi_Buffer17set_channel_countEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,__ZN15Nes_File_Reader6skip_vEi,b23,b23,b23,b23,b23,b23,b23,b23,__ZN10Nes_Mapper8next_irqEl,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN11Mapper_Mmc38next_irqEl
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN11Data_Reader6skip_vEi,b23,b23,__ZN15Mem_File_Reader6seek_vEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,_audio_sample_batch,b23,b23,b23,_audio_sample_batch_rewind,b23,b23,b23,_qstrcmp_dir,_qstrcmp_plain,_rarch_environment_cb,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,_libretro_dummy_retro_serialize,_libretro_dummy_retro_unserialize,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,_retro_serialize,_retro_unserialize,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,_gray_filler,_green_filler,b23,__ZN7Nes_Emu9load_inesE16Auto_File_Reader,b23
,__ZNK7Nes_Emu10save_stateE16Auto_File_Writer,b23,__ZN7Nes_Emu10load_stateE16Auto_File_Reader,b23,b23,b23,__ZN8Nes_Core8read_dmcEPvj,b23,b23,b23,b23,b23,b23,b23,b23,__ZN8Nes_Cart9load_inesE16Auto_File_Reader,b23,__ZN9Nes_State4readE16Auto_File_Reader,__ZNK9Nes_State5writeE16Auto_File_Writer,b23,b23,b23,__ZNK10Nes_State_12write_blocksER15Nes_File_Writer,b23,__ZN15Nes_File_Reader5beginE16Auto_File_Reader,b23,b23,__ZN10Nes_State_11read_blocksER15Nes_File_Reader,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,_emscripten_glGetUniformLocation__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,_emscripten_glGetAttribLocation__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23];
var FUNCTION_TABLE_dii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,_gfx_ctx_translate_aspect,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_i = [b25,_rwebinput_input_init,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,_font_renderer_get_default_font,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,_rgui_init,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,_gfx_ctx_init,b25,b25,b25,b25,b25,b25,b25,b25,b25,_gfx_ctx_has_focus,b25,b25,b25,b25,b25,b25,b25,b25,b25,_gl_glsl_num,b25,b25,b25
,b25,b25,_gl_glsl_get_prev_textures,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN10Nes_Mapper9make_nromEv,__ZN10Nes_Mapper9make_mmc1Ev,__ZN10Nes_Mapper10make_unromEv,__ZN10Nes_Mapper10make_cnromEv,__ZN10Nes_Mapper9make_mmc3Ev,__ZN10Nes_Mapper10make_aoromEv,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,_driver_get_current_framebuffer,b25,b25,b25,_libretro_dummy_retro_api_version,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,_libretro_dummy_retro_serialize_size,b25,b25,b25,b25,b25,b25,b25,_libretro_dummy_retro_get_region,b25,b25,b25,b25,_retro_api_version,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,_retro_serialize_size,b25,b25,b25,b25,b25,b25,b25,_retro_get_region,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,___cxa_get_globals_fast,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,_emscripten_glCreateProgram__wrapper,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,_emscripten_glGetError__wrapper,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25];
var FUNCTION_TABLE_iiiii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,_gl_overlay_load,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN10Nes_Mapper17write_interceptedElji,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,_input_state,b26,b26,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_vdddddd = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,_emscripten_glFrustum__wrapper,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27];
var FUNCTION_TABLE_vdddd = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,_emscripten_glRotatef__wrapper,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,_emscripten_glClearColor__wrapper,b28,b28,b28,b28,b28,_emscripten_glBlendColor__wrapper,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28];
var FUNCTION_TABLE_vdd = [b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,_emscripten_glDepthRange__wrapper,_emscripten_glDepthRangef__wrapper,b29,b29,_emscripten_glPolygonOffset__wrapper,b29,b29,b29];
var FUNCTION_TABLE_v = [b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,_gl_start,_gl_restart,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,_gfx_ctx_destroy,b30,b30,b30,b30,b30,_gfx_ctx_update_window_title,b30,b30,b30,_gfx_ctx_swap_buffers,b30,b30,b30,b30,b30,_gl_glsl_deinit,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,___cxa_pure_virtual__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZL25default_terminate_handlerv,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,_mainloop,_init_state,b30,b30,b30,b30,_validate_cpu_features,_config_load,b30,_rarch_init_system_info,_init_drivers_pre,_verify_api_version,b30,_fill_pathnames,_set_savestate_auto_index,_load_save_files,_load_auto_state,_init_movie,_init_libretro_cbs,_init_system_av_info
,_init_drivers,_rarch_init_rewind,_init_controllers,_init_cheats,_uninit_drivers,_uninit_libretro_sym,b30,b30,b30,b30,_rarch_input_poll,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,_libretro_dummy_retro_init,_libretro_dummy_retro_deinit,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,_libretro_dummy_retro_reset,_libretro_dummy_retro_run,b30,b30,b30,_libretro_dummy_retro_cheat_reset,b30,b30,b30,_libretro_dummy_retro_unload_game,b30,b30,b30,_retro_init,_retro_deinit,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,_retro_reset,_retro_run
,b30,b30,b30,_retro_cheat_reset,b30,b30,b30,_retro_unload_game,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b30
,___cxa_end_catch__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,_emscripten_glLoadIdentity__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,_emscripten_glReleaseShaderCompiler__wrapper,b30,b30,b30,b30,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30];
var FUNCTION_TABLE_vdi = [b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,_emscripten_glSampleCoverage__wrapper,b31];
var FUNCTION_TABLE_viiii = [b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZN11Mapper_Mmc35writeElji,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZN11Mapper_Nrom5writeElji
,b32,b32,__ZN12Mapper_Unrom5writeElji,b32,b32,__ZN12Mapper_Aorom5writeElji,b32,b32,__ZN12Mapper_Cnrom5writeElji,b32,b32,__ZN11Mapper_Mmc15writeElji,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b32,b32,b32
,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b32,b32,b32,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,_video_frame,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,_emscripten_glUniform3i__wrapper,b32,b32,b32,b32,b32,b32,b32,b32,b32,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,b32,b32
,b32,b32,b32,b32,b32,b32,b32,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glGetShaderSource__wrapper,b32,_emscripten_glGetShaderInfoLog__wrapper,b32,b32,b32,b32,b32,b32,b32,_emscripten_glGetShaderPrecisionFormat__wrapper,b32,_emscripten_glGetProgramInfoLog__wrapper,b32,b32,b32,b32,b32,b32,b32,_emscripten_glFramebufferRenderbuffer__wrapper,b32,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,b32,b32,b32,_emscripten_glGetInfoLogARB__wrapper,b32,b32,b32,b32,_emscripten_glVertexPointer__wrapper,_emscripten_glTexCoordPointer__wrapper,b32,_emscripten_glColorPointer__wrapper,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,_emscripten_glDrawElements__wrapper,b32,b32
,b32,b32,_emscripten_glDrawArraysInstanced__wrapper,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,_emscripten_glViewport__wrapper,b32,_emscripten_glScissor__wrapper,b32,_emscripten_glColorMask__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glBlendFuncSeparate__wrapper,b32,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32];

  return { _testSetjmp: _testSetjmp, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _strstr: _strstr, _realloc: _realloc, _saveSetjmp: _saveSetjmp, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, _emscripten_GetProcAddress: _emscripten_GetProcAddress, _i64Subtract: _i64Subtract, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vd: dynCall_vd, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiiiiiii: dynCall_viiiiiiiiiii, dynCall_id: dynCall_id, dynCall_viddd: dynCall_viddd, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_viii: dynCall_viii, dynCall_viid: dynCall_viid, dynCall_vidddd: dynCall_vidddd, dynCall_iid: dynCall_iid, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_iii: dynCall_iii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_vdddddd: dynCall_vdddddd, dynCall_vdddd: dynCall_vdddd, dynCall_vdd: dynCall_vdd, dynCall_v: dynCall_v, dynCall_vdi: dynCall_vdi, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strstr.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__emscripten_GetProcAddress = asm["_emscripten_GetProcAddress"]; asm["_emscripten_GetProcAddress"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_GetProcAddress.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = asm["dynCall_viiiiiiiiiii"];
var dynCall_id = Module["dynCall_id"] = asm["dynCall_id"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = Runtime.stackSave();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      Runtime.stackRestore(initialStackTop);
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



